{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 74,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 5 -> 9 -> 6",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "25: main_create_route@3:",
              "28: txn OnCompletion",
              "29: !",
              "30: assert",
              "31: txn ApplicationID",
              "32: !",
              "33: assert",
              "44: txna ApplicationArgs 1",
              "47: callsub create"
            ],
            [
              "92: create:",
              "96: proto 1 0",
              "99: byte \"proposer\"",
              "102: frame_dig -1",
              "103: app_global_put",
              "106: byte \"registry_app_id\"",
              "109: global CallerApplicationID",
              "110: app_global_put",
              "111: retsub"
            ],
            [
              "48: int 1",
              "49: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 5 -> 9 -> 6",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "25: main_create_route@3:",
              "28: txn OnCompletion",
              "29: !",
              "30: assert",
              "31: txn ApplicationID",
              "32: !",
              "33: assert",
              "44: txna ApplicationArgs 1",
              "47: callsub create"
            ],
            [
              "92: create:",
              "96: proto 1 0",
              "99: byte \"proposer\"",
              "102: frame_dig -1",
              "103: app_global_put",
              "106: byte \"registry_app_id\"",
              "109: global CallerApplicationID",
              "110: app_global_put",
              "111: retsub"
            ],
            [
              "48: int 1",
              "49: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 74,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 5 -> 9 -> 6",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "25: main_create_route@3:",
              "28: txn OnCompletion",
              "29: !",
              "30: assert",
              "31: txn ApplicationID",
              "32: !",
              "33: assert",
              "44: txna ApplicationArgs 1",
              "47: callsub create"
            ],
            [
              "92: create:",
              "96: proto 1 0",
              "99: byte \"proposer\"",
              "102: frame_dig -1",
              "103: app_global_put",
              "106: byte \"registry_app_id\"",
              "109: global CallerApplicationID",
              "110: app_global_put",
              "111: retsub"
            ],
            [
              "48: int 1",
              "49: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 50 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "6: callsub __init__"
            ],
            [
              "558: __init__:",
              "561: proto 0 0",
              "565: txn GlobalNumByteSlice",
              "566: int 4",
              "567: ==",
              "568: assert",
              "571: txn GlobalNumUint",
              "572: int 13",
              "573: ==",
              "574: assert",
              "577: txn LocalNumByteSlice",
              "578: !",
              "579: assert",
              "582: txn LocalNumUint",
              "583: !",
              "584: assert",
              "587: byte \"proposer\"",
              "588: global ZeroAddress",
              "589: app_global_put",
              "592: byte \"registry_app_id\"",
              "593: int 0",
              "594: app_global_put",
              "597: byte \"title\"",
              "598: byte \"\"",
              "599: app_global_put",
              "602: byte \"cid\"",
              "605: byte 0x",
              "610: app_global_put",
              "613: byte \"submission_ts\"",
              "614: int 0",
              "615: app_global_put",
              "618: byte \"finalization_ts\"",
              "619: int 0",
              "620: app_global_put",
              "623: byte \"status\"",
              "624: int 0",
              "625: app_global_put",
              "628: byte \"category\"",
              "633: int 0",
              "634: app_global_put",
              "637: byte \"funding_type\"",
              "642: int 0",
              "643: app_global_put",
              "646: byte \"requested_amount\"",
              "647: int 0",
              "648: app_global_put",
              "651: byte \"locked_amount\"",
              "654: int 0",
              "659: app_global_put",
              "662: byte \"committee_id\"",
              "663: byte 0x",
              "664: app_global_put",
              "667: byte \"committee_members\"",
              "668: int 0",
              "669: app_global_put",
              "672: byte \"committee_votes\"",
              "673: int 0",
              "674: app_global_put",
              "677: byte \"voted_members\"",
              "678: int 0",
              "679: app_global_put",
              "682: byte \"approvals\"",
              "685: int 0",
              "690: app_global_put",
              "693: byte \"rejections\"",
              "696: int 0",
              "701: app_global_put",
              "702: retsub"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 5 -> 9 -> 6",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "25: main_create_route@3:",
              "28: txn OnCompletion",
              "29: !",
              "30: assert",
              "31: txn ApplicationID",
              "32: !",
              "33: assert",
              "44: txna ApplicationArgs 1",
              "47: callsub create"
            ],
            [
              "92: create:",
              "96: proto 1 0",
              "99: byte \"proposer\"",
              "102: frame_dig -1",
              "103: app_global_put",
              "106: byte \"registry_app_id\"",
              "109: global CallerApplicationID",
              "110: app_global_put",
              "111: retsub"
            ],
            [
              "48: int 1",
              "49: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 20 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "242: int 1",
              "243: b submit_authorization_bool_merge@5"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 19 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "229: int 0",
              "232: byte \"status\"",
              "235: app_global_get_ex",
              "236: assert",
              "241: bnz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 17 -> 24 -> 18 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "221: callsub is_kyc_verified"
            ],
            [
              "280: is_kyc_verified:",
              "287: proto 0 1",
              "290: int 1",
              "291: retsub"
            ],
            [
              "226: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 26 -> 28 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "330: frame_dig -2",
              "331: int 20",
              "332: ==",
              "336: bz submit_input_validation_bool_false@3"
            ],
            [
              "342: submit_input_validation_bool_false@3:",
              "343: int 0"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 42 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "496: byte \"category\"",
              "499: int 10",
              "500: app_global_put",
              "501: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 45 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "513: byte \"category\"",
              "516: int 20",
              "517: app_global_put",
              "518: b set_category_after_if_else@6"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 7 -> 10 -> 15 -> 23 -> 16 -> 21 -> 22 -> 11 -> 25 -> 27 -> 29 -> 34 -> 30 -> 35 -> 31 -> 36 -> 32 -> 36 -> 33 -> 12 -> 37 -> 13 -> 38 -> 48 -> 39 -> 49 -> 40 -> 36 -> 41 -> 43 -> 36 -> 44 -> 46 -> 47 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 10"
            ],
            [
              "3: smart_contracts.proposal.contract.Proposal.approval_program:",
              "4: txn ApplicationID",
              "5: bnz main_entrypoint@2"
            ],
            [
              "8: main_entrypoint@2:",
              "19: method create(address)void",
              "20: method submit_proposal(pay,string,byte[59],uint64,uint64)void",
              "21: txna ApplicationArgs 0",
              "22: match main_create_route@3 main_submit_proposal_route@4"
            ],
            [
              "51: main_submit_proposal_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "69: txn GroupIndex",
              "70: int 1",
              "71: -",
              "72: dup",
              "73: Gtxns TypeEnum",
              "74: int pay",
              "75: ==",
              "76: assert",
              "77: txna ApplicationArgs 1",
              "78: extract 2 0",
              "79: txna ApplicationArgs 2",
              "80: txna ApplicationArgs 3",
              "81: btoi",
              "82: txna ApplicationArgs 4",
              "83: btoi",
              "86: callsub submit_proposal"
            ],
            [
              "115: submit_proposal:",
              "126: proto 5 0",
              "129: callsub submit_authorization"
            ],
            [
              "206: submit_authorization:",
              "210: proto 0 1",
              "213: callsub is_proposer"
            ],
            [
              "259: is_proposer:",
              "263: proto 0 1",
              "266: int 0",
              "269: byte \"proposer\"",
              "272: app_global_get_ex",
              "273: assert",
              "274: txn Sender",
              "275: ==",
              "276: retsub"
            ],
            [
              "218: bz submit_authorization_bool_false@4"
            ],
            [
              "245: submit_authorization_bool_false@4:",
              "246: int 0"
            ],
            [
              "248: submit_authorization_bool_merge@5:",
              "255: retsub"
            ],
            [
              "130: assert",
              "133: frame_dig -4",
              "134: frame_dig -3",
              "135: frame_dig -2",
              "136: frame_dig -1",
              "137: callsub submit_input_validation"
            ],
            [
              "295: submit_input_validation:",
              "305: proto 4 1",
              "308: frame_dig -4",
              "309: len",
              "310: int 123",
              "311: <=",
              "312: assert",
              "315: frame_dig -4",
              "316: byte \"\"",
              "317: !=",
              "318: assert",
              "321: frame_dig -2",
              "322: int 10",
              "323: ==",
              "327: bnz submit_input_validation_bool_true@2"
            ],
            [
              "338: submit_input_validation_bool_true@2:",
              "339: int 1",
              "340: b submit_input_validation_bool_merge@4"
            ],
            [
              "345: submit_input_validation_bool_merge@4:",
              "351: assert",
              "354: callsub get_min_requested_algo_amount"
            ],
            [
              "380: get_min_requested_algo_amount:",
              "395: proto 0 1",
              "398: int 10000",
              "399: retsub"
            ],
            [
              "357: callsub get_max_requested_algo_amount_large"
            ],
            [
              "403: get_max_requested_algo_amount_large:",
              "407: proto 0 1",
              "410: int 500000",
              "411: retsub"
            ],
            [
              "358: swap",
              "363: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "364: frame_dig -1",
              "365: <=",
              "366: assert",
              "371: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "372: frame_dig -1",
              "373: >=",
              "374: assert",
              "375: frame_dig -3",
              "376: retsub"
            ],
            [
              "138: frame_bury -3",
              "141: frame_dig -5",
              "142: frame_dig -1",
              "143: callsub submit_payment_validation"
            ],
            [
              "429: submit_payment_validation:",
              "435: proto 2 0",
              "438: frame_dig -1",
              "439: int 100",
              "440: /",
              "443: int 0",
              "446: byte \"proposer\"",
              "449: app_global_get_ex",
              "450: assert",
              "451: frame_dig -2",
              "452: Gtxns Sender",
              "453: ==",
              "454: assert",
              "457: frame_dig -2",
              "458: Gtxns Receiver",
              "459: global CurrentApplicationAddress",
              "460: ==",
              "465: assert",
              "468: frame_dig -2",
              "469: Gtxns Amount",
              "470: ==",
              "471: assert",
              "472: retsub"
            ],
            [
              "146: byte \"title\"",
              "149: frame_dig -4",
              "150: app_global_put",
              "153: byte \"cid\"",
              "156: frame_dig -3",
              "157: app_global_put",
              "160: frame_dig -1",
              "161: callsub set_category"
            ],
            [
              "476: set_category:",
              "480: proto 1 0",
              "483: callsub get_max_requested_algo_amount_small"
            ],
            [
              "534: get_max_requested_algo_amount_small:",
              "538: proto 0 1",
              "541: int 50000",
              "542: retsub"
            ],
            [
              "486: callsub get_max_requested_algo_amount_medium"
            ],
            [
              "546: get_max_requested_algo_amount_medium:",
              "550: proto 0 1",
              "553: int 250000",
              "554: retsub"
            ],
            [
              "487: swap",
              "490: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "491: frame_dig -1",
              "492: >=",
              "493: bz set_category_else_body@2"
            ],
            [
              "503: set_category_else_body@2:",
              "506: frame_dig 0",
              "507: callsub algos_to_microalgos"
            ],
            [
              "415: algos_to_microalgos:",
              "419: proto 1 1",
              "422: frame_dig -1",
              "423: int 1000000",
              "424: *",
              "425: retsub"
            ],
            [
              "508: frame_dig -1",
              "509: >=",
              "510: bz set_category_else_body@4"
            ],
            [
              "520: set_category_else_body@4:",
              "523: byte \"category\"",
              "526: int 33",
              "527: app_global_put"
            ],
            [
              "529: set_category_after_if_else@6:",
              "530: retsub"
            ],
            [
              "164: byte \"funding_type\"",
              "167: frame_dig -2",
              "168: app_global_put",
              "171: byte \"requested_amount\"",
              "174: frame_dig -1",
              "175: app_global_put",
              "178: frame_dig -1",
              "179: int 100",
              "180: /",
              "183: byte \"locked_amount\"",
              "186: swap",
              "187: app_global_put",
              "190: byte \"submission_ts\"",
              "193: global LatestTimestamp",
              "194: app_global_put",
              "197: byte \"status\"",
              "200: int 10",
              "201: app_global_put",
              "202: retsub"
            ],
            [
              "87: int 1",
              "88: return"
            ]
          ]
        }
      ]
    }
  ]
}