{
    "name": "Council",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "address",
                    "name": "admin",
                    "desc": "The address of the admin who can manage the council."
                },
                {
                    "type": "uint64",
                    "name": "registry_id",
                    "desc": "The application ID of the XGovRegistry contract."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Create a new council contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_member",
            "args": [
                {
                    "type": "address",
                    "name": "address",
                    "desc": "The address of the member to add."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add a member to the council.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove_member",
            "args": [
                {
                    "type": "address",
                    "name": "address",
                    "desc": "The address of the member to remove."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove a member from the council.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The ID of the proposal to vote on."
                },
                {
                    "type": "bool",
                    "name": "block",
                    "desc": "Whether or not to block the proposal."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Cast a vote on a proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "op_up",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "registry_app_id": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cmVnaXN0cnlfYXBwX2lk"
                },
                "member_count": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWVtYmVyX2NvdW50"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "members": {
                    "keyType": "address",
                    "valueType": "byte[0]",
                    "prefix": "TQ=="
                },
                "votes": {
                    "keyType": "uint64",
                    "valueType": "(address,bool)[]",
                    "prefix": "Vg=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        335
                    ],
                    "errorMessage": "Invalid proposal"
                },
                {
                    "pc": [
                        157
                    ],
                    "errorMessage": "Invalid registry ID"
                },
                {
                    "pc": [
                        80
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        185,
                        224
                    ],
                    "errorMessage": "Unauthorized"
                },
                {
                    "pc": [
                        194
                    ],
                    "errorMessage": "Voter Already Assigned"
                },
                {
                    "pc": [
                        417
                    ],
                    "errorMessage": "Voter already voted"
                },
                {
                    "pc": [
                        232,
                        283
                    ],
                    "errorMessage": "Voter not found"
                },
                {
                    "pc": [
                        57
                    ],
                    "errorMessage": "Wrong Global Bytes allocation"
                },
                {
                    "pc": [
                        62
                    ],
                    "errorMessage": "Wrong Global UInts allocation"
                },
                {
                    "pc": [
                        66
                    ],
                    "errorMessage": "Wrong Local Bytes allocation"
                },
                {
                    "pc": [
                        70
                    ],
                    "errorMessage": "Wrong Local UInts allocation"
                },
                {
                    "pc": [
                        339
                    ],
                    "errorMessage": "Wrong Proposal Status or finalized"
                },
                {
                    "pc": [
                        183,
                        222
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        201,
                        238,
                        363
                    ],
                    "errorMessage": "check self.member_count exists"
                },
                {
                    "pc": [
                        301
                    ],
                    "errorMessage": "check self.registry_app_id exists"
                },
                {
                    "pc": [
                        461
                    ],
                    "errorMessage": "check self.votes entry exists"
                },
                {
                    "pc": [
                        272
                    ],
                    "errorMessage": "invalid number of bytes for bool8"
                },
                {
                    "pc": [
                        154,
                        259
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        145,
                        177,
                        216
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                },
                {
                    "pc": [
                        470
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgMiAzMgogICAgYnl0ZWNibG9jayAweDZkNjU2ZDYyNjU3MjVmNjM2Zjc1NmU3NCAweDcyNjU2NzY5NzM3NDcyNzk1ZjYxNzA3MDVmNjk2NCAweDYxNjQ2ZDY5NmUgMHg0ZCAweDAwCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weTozOAogICAgLy8gVHhuLmdsb2JhbF9udW1fYnl0ZV9zbGljZSA9PSBjb3VuY2lsX2NmZy5HTE9CQUxfQllURVMKICAgIHR4biBHbG9iYWxOdW1CeXRlU2xpY2UKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MzctMzkKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgVHhuLmdsb2JhbF9udW1fYnl0ZV9zbGljZSA9PSBjb3VuY2lsX2NmZy5HTE9CQUxfQllURVMKICAgIC8vICksIGVyci5XUk9OR19HTE9CQUxfQllURVMKICAgIGFzc2VydCAvLyBXcm9uZyBHbG9iYWwgQnl0ZXMgYWxsb2NhdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6NDAKICAgIC8vIGFzc2VydCBUeG4uZ2xvYmFsX251bV91aW50ID09IGNvdW5jaWxfY2ZnLkdMT0JBTF9VSU5UUywgZXJyLldST05HX0dMT0JBTF9VSU5UUwogICAgdHhuIEdsb2JhbE51bVVpbnQKICAgIGludGNfMiAvLyAyCiAgICA9PQogICAgYXNzZXJ0IC8vIFdyb25nIEdsb2JhbCBVSW50cyBhbGxvY2F0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weTo0MgogICAgLy8gVHhuLmxvY2FsX251bV9ieXRlX3NsaWNlID09IGNvdW5jaWxfY2ZnLkxPQ0FMX0JZVEVTCiAgICB0eG4gTG9jYWxOdW1CeXRlU2xpY2UKICAgICEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjQxLTQzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5sb2NhbF9udW1fYnl0ZV9zbGljZSA9PSBjb3VuY2lsX2NmZy5MT0NBTF9CWVRFUwogICAgLy8gKSwgZXJyLldST05HX0xPQ0FMX0JZVEVTCiAgICBhc3NlcnQgLy8gV3JvbmcgTG9jYWwgQnl0ZXMgYWxsb2NhdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6NDQKICAgIC8vIGFzc2VydCBUeG4ubG9jYWxfbnVtX3VpbnQgPT0gY291bmNpbF9jZmcuTE9DQUxfVUlOVFMsIGVyci5XUk9OR19MT0NBTF9VSU5UUwogICAgdHhuIExvY2FsTnVtVWludAogICAgIQogICAgYXNzZXJ0IC8vIFdyb25nIExvY2FsIFVJbnRzIGFsbG9jYXRpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjUzCiAgICAvLyBrZXk9Y291bmNpbF9jZmcuR1NfS0VZX1JFR0lTVFJZX0FQUF9JRCwKICAgIGJ5dGVjXzEgLy8gMHg3MjY1Njc2OTczNzQ3Mjc5NWY2MTcwNzA1ZjY5NjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjUyCiAgICAvLyBVSW50NjQoKSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weTo1MS01NAogICAgLy8gc2VsZi5yZWdpc3RyeV9hcHBfaWQgPSBHbG9iYWxTdGF0ZSgKICAgIC8vICAgICBVSW50NjQoKSwKICAgIC8vICAgICBrZXk9Y291bmNpbF9jZmcuR1NfS0VZX1JFR0lTVFJZX0FQUF9JRCwKICAgIC8vICkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weTo1OAogICAgLy8ga2V5PWNvdW5jaWxfY2ZnLkdTX0tFWV9NRU1CRVJfQ09VTlQsCiAgICBieXRlY18wIC8vIDB4NmQ2NTZkNjI2NTcyNWY2MzZmNzU2ZTc0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weTo1NwogICAgLy8gVUludDY0KCksCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6NTYtNTkKICAgIC8vIHNlbGYubWVtYmVyX2NvdW50ID0gR2xvYmFsU3RhdGUoCiAgICAvLyAgICAgVUludDY0KCksCiAgICAvLyAgICAga2V5PWNvdW5jaWxfY2ZnLkdTX0tFWV9NRU1CRVJfQ09VTlQsCiAgICAvLyApCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToyNy0zNQogICAgLy8gY2xhc3MgQ291bmNpbCgKICAgIC8vICAgICBBUkM0Q29udHJhY3QsCiAgICAvLyAgICAgc3RhdGVfdG90YWxzPVN0YXRlVG90YWxzKAogICAgLy8gICAgICAgICBnbG9iYWxfYnl0ZXM9Y291bmNpbF9jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9Y291bmNpbF9jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jb3VuY2lsX2NmZy5MT0NBTF9CWVRFUywKICAgIC8vICAgICAgICAgbG9jYWxfdWludHM9Y291bmNpbF9jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJ6IG1haW5fY3JlYXRlX05vT3BAMTAKICAgIHB1c2hieXRlc3MgMHgxOWQ3MDJmYSAweDkyZWJmNmRlIDB4ZjdmNDQ4MWYgMHhkYmQ4M2RkOSAvLyBtZXRob2QgImFkZF9tZW1iZXIoYWRkcmVzcyl2b2lkIiwgbWV0aG9kICJyZW1vdmVfbWVtYmVyKGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAidm90ZSh1aW50NjQsYm9vbCl2b2lkIiwgbWV0aG9kICJvcF91cCgpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIGFkZF9tZW1iZXIgcmVtb3ZlX21lbWJlciB2b3RlIG1haW5fb3BfdXBfcm91dGVAOAogICAgZXJyCgptYWluX29wX3VwX3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxOTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZV9Ob09wQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MjctMzUKICAgIC8vIGNsYXNzIENvdW5jaWwoCiAgICAvLyAgICAgQVJDNENvbnRyYWN0LAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNvdW5jaWxfY2ZnLkdMT0JBTF9CWVRFUywKICAgIC8vICAgICAgICAgZ2xvYmFsX3VpbnRzPWNvdW5jaWxfY2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9Y291bmNpbF9jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNvdW5jaWxfY2ZnLkxPQ0FMX1VJTlRTLAogICAgLy8gICAgICksCiAgICAvLyApOgogICAgcHVzaGJ5dGVzIDB4YzBiNjQzNTIgLy8gbWV0aG9kICJjcmVhdGUoYWRkcmVzcyx1aW50NjQpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIGNyZWF0ZQogICAgZXJyCgoKLy8gc21hcnRfY29udHJhY3RzLmNvdW5jaWwuY29udHJhY3QuQ291bmNpbC5jcmVhdGVbcm91dGluZ10oKSAtPiB2b2lkOgpjcmVhdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weTo2OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18zIC8vIDMyCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciB1aW50OFszMl0KICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgdWludDY0CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weTo4MgogICAgLy8gYXNzZXJ0IHJlZ2lzdHJ5X2lkID4gMCwgZXJyLklOVkFMSURfUkVHSVNUUllfSUQKICAgIGR1cAogICAgYXNzZXJ0IC8vIEludmFsaWQgcmVnaXN0cnkgSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5Ojg0CiAgICAvLyBzZWxmLmFkbWluLnZhbHVlID0gYWRtaW4KICAgIGJ5dGVjXzIgLy8gMHg2MTY0NmQ2OTZlCiAgICB1bmNvdmVyIDIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weTo4NQogICAgLy8gc2VsZi5yZWdpc3RyeV9hcHBfaWQudmFsdWUgPSByZWdpc3RyeV9pZAogICAgYnl0ZWNfMSAvLyAweDcyNjU2NzY5NzM3NDcyNzk1ZjYxNzA3MDVmNjk2NAogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5Ojg2CiAgICAvLyBzZWxmLm1lbWJlcl9jb3VudC52YWx1ZSA9IFVJbnQ2NCgwKQogICAgYnl0ZWNfMCAvLyAweDZkNjU2ZDYyNjU3MjVmNjM2Zjc1NmU3NAogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weTo2OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLmNvdW5jaWwuY29udHJhY3QuQ291bmNpbC5hZGRfbWVtYmVyW3JvdXRpbmddKCkgLT4gdm9pZDoKYWRkX21lbWJlcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5Ojg4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMyAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgdWludDhbMzJdCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxMDEKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuYWRtaW4udmFsdWUsIGVyci5VTkFVVEhPUklaRUQKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vIDB4NjE2NDZkNjk2ZQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFkbWluIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBVbmF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjEwMgogICAgLy8gYXNzZXJ0IGFkZHJlc3MubmF0aXZlIG5vdCBpbiBzZWxmLm1lbWJlcnMsIGVyci5WT1RFUl9BTFJFQURZX0FTU0lHTkVECiAgICBieXRlY18zIC8vIDB4NGQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBWb3RlciBBbHJlYWR5IEFzc2lnbmVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxMDQKICAgIC8vIHNlbGYubWVtYmVyc1thZGRyZXNzLm5hdGl2ZV0gPSB0eXAuRW1wdHkoKQogICAgcHVzaGJ5dGVzIDB4CiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxMDUKICAgIC8vIHNlbGYubWVtYmVyX2NvdW50LnZhbHVlICs9IDEKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vIDB4NmQ2NTZkNjI2NTcyNWY2MzZmNzU2ZTc0CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWVtYmVyX2NvdW50IGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ5dGVjXzAgLy8gMHg2ZDY1NmQ2MjY1NzI1ZjYzNmY3NTZlNzQKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weTo4OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuY291bmNpbC5jb250cmFjdC5Db3VuY2lsLnJlbW92ZV9tZW1iZXJbcm91dGluZ10oKSAtPiB2b2lkOgpyZW1vdmVfbWVtYmVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTA3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMyAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgdWludDhbMzJdCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxMjAKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuYWRtaW4udmFsdWUsIGVyci5VTkFVVEhPUklaRUQKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vIDB4NjE2NDZkNjk2ZQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFkbWluIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBVbmF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjEyMQogICAgLy8gYXNzZXJ0IGFkZHJlc3MubmF0aXZlIGluIHNlbGYubWVtYmVycywgZXJyLlZPVEVSX05PVF9GT1VORAogICAgYnl0ZWNfMyAvLyAweDRkCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gVm90ZXIgbm90IGZvdW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxMjMKICAgIC8vIGRlbCBzZWxmLm1lbWJlcnNbYWRkcmVzcy5uYXRpdmVdCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjEyNAogICAgLy8gc2VsZi5tZW1iZXJfY291bnQudmFsdWUgLT0gMQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gMHg2ZDY1NmQ2MjY1NzI1ZjYzNmY3NTZlNzQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tZW1iZXJfY291bnQgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgYnl0ZWNfMCAvLyAweDZkNjU2ZDYyNjU3MjVmNjM2Zjc1NmU3NAogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjEwNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuY291bmNpbC5jb250cmFjdC5Db3VuY2lsLnZvdGVbcm91dGluZ10oKSAtPiB2b2lkOgp2b3RlOgogICAgcHVzaGJ5dGVzICIiCiAgICBkdXBuIDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjEyNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cG4gMgogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgdWludDY0CiAgICBidG9pCiAgICBkdXAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGR1cAogICAgY292ZXIgMgogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciBib29sOAogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTQyCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciBpbiBzZWxmLm1lbWJlcnMsIGVyci5WT1RFUl9OT1RfRk9VTkQKICAgIGJ5dGVjXzMgLy8gMHg0ZAogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBWb3RlciBub3QgZm91bmQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE0NAogICAgLy8gaWYgcHJvcG9zYWxfaWQgbm90IGluIHNlbGYudm90ZXM6CiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgMHg1NgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IHZvdGVfZWxzZV9ib2R5QDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE0NS0xNTEKICAgIC8vICMgd2UgZG9udCBuZWVkIGFueSBlcnJvciBoYW5kbGluZyBoZXJlCiAgICAvLyAjIGlmIGl0cyBpbnZhbGlkIHRoZSB0cmFuc2FjdGlvbiB3aWxsIGZhaWwKICAgIC8vIGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgcmVnaXN0cnlfY29udHJhY3QuWEdvdlJlZ2lzdHJ5LmlzX3Byb3Bvc2FsLAogICAgLy8gICAgIGFyYzQuVUludDY0KHByb3Bvc2FsX2lkKSwKICAgIC8vICAgICBhcHBfaWQ9c2VsZi5yZWdpc3RyeV9hcHBfaWQudmFsdWUsCiAgICAvLyApCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxNTAKICAgIC8vIGFwcF9pZD1zZWxmLnJlZ2lzdHJ5X2FwcF9pZC52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vIDB4NzI2NTY3Njk3Mzc0NzI3OTVmNjE3MDcwNWY2OTY0CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucmVnaXN0cnlfYXBwX2lkIGV4aXN0cwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxNDUtMTUxCiAgICAvLyAjIHdlIGRvbnQgbmVlZCBhbnkgZXJyb3IgaGFuZGxpbmcgaGVyZQogICAgLy8gIyBpZiBpdHMgaW52YWxpZCB0aGUgdHJhbnNhY3Rpb24gd2lsbCBmYWlsCiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIHJlZ2lzdHJ5X2NvbnRyYWN0LlhHb3ZSZWdpc3RyeS5pc19wcm9wb3NhbCwKICAgIC8vICAgICBhcmM0LlVJbnQ2NChwcm9wb3NhbF9pZCksCiAgICAvLyAgICAgYXBwX2lkPXNlbGYucmVnaXN0cnlfYXBwX2lkLnZhbHVlLAogICAgLy8gKQogICAgcHVzaGJ5dGVzIDB4MjY5ODMyMDAgLy8gbWV0aG9kICJpc19wcm9wb3NhbCh1aW50NjQpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBkaWcgNAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxNTMtMTU1CiAgICAvLyBzdGF0dXMsIGV4aXN0cyA9IEFwcEdsb2JhbC5nZXRfZXhfdWludDY0KAogICAgLy8gICAgIHByb3Bvc2FsX2lkLCBCeXRlcyhwcm9wb3NhbF9jZmcuR1NfS0VZX1NUQVRVUykKICAgIC8vICkKICAgIGRpZyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxNTQKICAgIC8vIHByb3Bvc2FsX2lkLCBCeXRlcyhwcm9wb3NhbF9jZmcuR1NfS0VZX1NUQVRVUykKICAgIHB1c2hieXRlcyAweDczNzQ2MTc0NzU3MwogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTUzLTE1NQogICAgLy8gc3RhdHVzLCBleGlzdHMgPSBBcHBHbG9iYWwuZ2V0X2V4X3VpbnQ2NCgKICAgIC8vICAgICBwcm9wb3NhbF9pZCwgQnl0ZXMocHJvcG9zYWxfY2ZnLkdTX0tFWV9TVEFUVVMpCiAgICAvLyApCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTU3CiAgICAvLyBhc3NlcnQgZXhpc3RzLCBlcnIuSU5WQUxJRF9QUk9QT1NBTAogICAgYXNzZXJ0IC8vIEludmFsaWQgcHJvcG9zYWwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE1OAogICAgLy8gYXNzZXJ0IHN0YXR1cyA9PSBwcm9wb3NhbF9lbm0uU1RBVFVTX0FQUFJPVkVELCBlcnIuV1JPTkdfUFJPUE9TQUxfU1RBVFVTCiAgICBwdXNoaW50IDMwIC8vIDMwCiAgICA9PQogICAgYXNzZXJ0IC8vIFdyb25nIFByb3Bvc2FsIFN0YXR1cyBvciBmaW5hbGl6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE2MgogICAgLy8gYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxNjEtMTY0CiAgICAvLyB0eXAuQ291bmNpbFZvdGUoCiAgICAvLyAgICAgYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyAgICAgYmxvY2s9YXJjNC5Cb29sKGJsb2NrKSwKICAgIC8vICkKICAgIGRpZyAzCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE2MC0xNjUKICAgIC8vIHNlbGYudm90ZXNbcHJvcG9zYWxfaWRdID0gYXJjNC5EeW5hbWljQXJyYXkoCiAgICAvLyAgICAgdHlwLkNvdW5jaWxWb3RlKAogICAgLy8gICAgICAgICBhZGRyZXNzPWFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICAgICAgICAgYmxvY2s9YXJjNC5Cb29sKGJsb2NrKSwKICAgIC8vICAgICApCiAgICAvLyApCiAgICBwdXNoYnl0ZXMgMHgwMDAxCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgc3dhcAogICAgYm94X3B1dAoKdm90ZV9hZnRlcl9pZl9lbHNlQDE2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTI2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKdm90ZV9lbHNlX2JvZHlANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE2OAogICAgLy8gaGFsZl9wbHVzX29uZSA9IChzZWxmLm1lbWJlcl9jb3VudC52YWx1ZSAvLyAyKSArIDEKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vIDB4NmQ2NTZkNjI2NTcyNWY2MzZmNzU2ZTc0CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWVtYmVyX2NvdW50IGV4aXN0cwogICAgaW50Y18yIC8vIDIKICAgIC8KICAgIGludGNfMSAvLyAxCiAgICArCiAgICBidXJ5IDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE2OQogICAgLy8gYXBwcm92YWxzID0gVUludDY0KDApIGlmIGJsb2NrIGVsc2UgVUludDY0KDEpCiAgICBkaWcgMQogICAgIQogICAgZHVwCiAgICBidXJ5IDExCiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxNzAKICAgIC8vIHJlamVjdGlvbnMgPSBVSW50NjQoMCkgaWYgbm90IGJsb2NrIGVsc2UgVUludDY0KDEpCiAgICAhCiAgICBidXJ5IDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE3MgogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHNlbGYudm90ZXNbcHJvcG9zYWxfaWRdLmxlbmd0aCk6CiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzIgLy8gMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIGJ1cnkgOQogICAgaW50Y18wIC8vIDAKICAgIGJ1cnkgNwoKdm90ZV9mb3JfaGVhZGVyQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxNzIKICAgIC8vIGZvciBpIGluIHVyYW5nZShzZWxmLnZvdGVzW3Byb3Bvc2FsX2lkXS5sZW5ndGgpOgogICAgZGlnIDYKICAgIGRpZyA5CiAgICA8CiAgICBieiB2b3RlX2FmdGVyX2ZvckAxMQogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTc0CiAgICAvLyBUeG4uc2VuZGVyICE9IHNlbGYudm90ZXNbcHJvcG9zYWxfaWRdW2ldLmFkZHJlc3MKICAgIGRpZyA2CiAgICBwdXNoaW50IDMzIC8vIDMzCiAgICAqCiAgICBpbnRjXzIgLy8gMgogICAgKwogICAgZGlnIDEKICAgIHN3YXAKICAgIHB1c2hpbnQgMzMgLy8gMzMKICAgIGJveF9leHRyYWN0CiAgICBkdXAKICAgIGV4dHJhY3QgMCAzMgogICAgdHhuIFNlbmRlcgogICAgIT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE3My0xNzUKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgVHhuLnNlbmRlciAhPSBzZWxmLnZvdGVzW3Byb3Bvc2FsX2lkXVtpXS5hZGRyZXNzCiAgICAvLyApLCBlcnIuVk9URVJfQUxSRUFEWV9WT1RFRAogICAgYXNzZXJ0IC8vIFZvdGVyIGFscmVhZHkgdm90ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE3NwogICAgLy8gaWYgc2VsZi52b3Rlc1twcm9wb3NhbF9pZF1baV0uYmxvY2s6CiAgICBwdXNoaW50IDI1NiAvLyAyNTYKICAgIGdldGJpdAogICAgYnl0ZWMgNCAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjIDQgLy8gMHgwMAogICAgIT0KICAgIGJ6IHZvdGVfZWxzZV9ib2R5QDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE3OAogICAgLy8gcmVqZWN0aW9ucyArPSAxCiAgICBkaWcgNQogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ1cnkgNgoKdm90ZV9hZnRlcl9pZl9lbHNlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxNzIKICAgIC8vIGZvciBpIGluIHVyYW5nZShzZWxmLnZvdGVzW3Byb3Bvc2FsX2lkXS5sZW5ndGgpOgogICAgZGlnIDYKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBidXJ5IDcKICAgIGIgdm90ZV9mb3JfaGVhZGVyQDUKCnZvdGVfZWxzZV9ib2R5QDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxODAKICAgIC8vIGFwcHJvdmFscyArPSAxCiAgICBkaWcgOQogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ1cnkgMTAKICAgIGIgdm90ZV9hZnRlcl9pZl9lbHNlQDkKCnZvdGVfYWZ0ZXJfZm9yQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTgyCiAgICAvLyBzZWxmLnZvdGVzW3Byb3Bvc2FsX2lkXS5hcHBlbmQoCiAgICBkdXBuIDIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGVzIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTg0CiAgICAvLyBhZGRyZXNzPWFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE4My0xODYKICAgIC8vIHR5cC5Db3VuY2lsVm90ZSgKICAgIC8vICAgICBhZGRyZXNzPWFyYzQuQWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIC8vICAgICBibG9jaz1hcmM0LkJvb2woYmxvY2spLAogICAgLy8gKQogICAgZGlnIDUKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTgyLTE4NwogICAgLy8gc2VsZi52b3Rlc1twcm9wb3NhbF9pZF0uYXBwZW5kKAogICAgLy8gICAgIHR5cC5Db3VuY2lsVm90ZSgKICAgIC8vICAgICAgICAgYWRkcmVzcz1hcmM0LkFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyAgICAgICAgIGJsb2NrPWFyYzQuQm9vbChibG9jayksCiAgICAvLyAgICAgKQogICAgLy8gKQogICAgZGlnIDEKICAgIHN3YXAKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgc3dhcAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHJlcGxhY2UyIDAKICAgIGRpZyAxCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb3VuY2lsL2NvbnRyYWN0LnB5OjE4OQogICAgLy8gaWYgYXBwcm92YWxzID49IGhhbGZfcGx1c19vbmUgb3IgcmVqZWN0aW9ucyA+PSBoYWxmX3BsdXNfb25lOgogICAgZGlnIDkKICAgIGRpZyA4CiAgICA+PQogICAgYm56IHZvdGVfaWZfYm9keUAxMwogICAgZGlnIDUKICAgIGRpZyA4CiAgICA+PQogICAgYnogdm90ZV9hZnRlcl9pZl9lbHNlQDE2Cgp2b3RlX2lmX2JvZHlAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxOTAtMTkxCiAgICAvLyAjIHRoaXMgd2lsbCBhbGxvdyB0aGUgcHJvcG9zYWwgdG8gYmUgcmV2aWV3ZWQKICAgIC8vIGJsb2NrID0gcmVqZWN0aW9ucyA+PSBoYWxmX3BsdXNfb25lCiAgICBkaWcgNQogICAgZGlnIDgKICAgID49CiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxOTMtMTk1CiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIHByb3Bvc2FsX2NvbnRyYWN0LlByb3Bvc2FsLnJldmlldywgYmxvY2ssIGFwcF9pZD1wcm9wb3NhbF9pZAogICAgLy8gKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTk0CiAgICAvLyBwcm9wb3NhbF9jb250cmFjdC5Qcm9wb3NhbC5yZXZpZXcsIGJsb2NrLCBhcHBfaWQ9cHJvcG9zYWxfaWQKICAgIGJ5dGVjIDQgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBkaWcgNAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBzbWFydF9jb250cmFjdHMvY291bmNpbC9jb250cmFjdC5weToxOTMtMTk1CiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIHByb3Bvc2FsX2NvbnRyYWN0LlByb3Bvc2FsLnJldmlldywgYmxvY2ssIGFwcF9pZD1wcm9wb3NhbF9pZAogICAgLy8gKQogICAgcHVzaGJ5dGVzIDB4MjEyZDlmMDcgLy8gbWV0aG9kICJyZXZpZXcoYm9vbCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBwdXNoaW50IDYgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2NvdW5jaWwvY29udHJhY3QucHk6MTk3CiAgICAvLyBkZWwgc2VsZi52b3Rlc1twcm9wb3NhbF9pZF0KICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBiIHZvdGVfYWZ0ZXJfaWZfZWxzZUAxNgo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAECICYFDG1lbWJlcl9jb3VudA9yZWdpc3RyeV9hcHBfaWQFYWRtaW4BTQEAMRhAABgxNSMSRDE0JBJEMTcURDE2FEQpImcoImcxGRREMRhBACaCBAQZ1wL6BJLr9t4E9/RIHwTb2D3ZNhoAjgQAMQBYAH0AAQAjQ4AEwLZDUjYaAI4BAAEANhoBSRUlEkQ2GgJJFYEIEkQXSUQqTwJnKUxnKCJnI0M2GgFJFSUSRDEAIiplRBJEK0xQSb1FARREgAC/IihlRCMIKExnI0M2GgFJFSUSRDEAIiplRBJEK0xQSb1FAUS8SCIoZUQjCShMZyNDgABHBDYaAUcCFYEIEkQXSTYaAklOAkkVIxJEIlNMKzEAUL1FAUQWgAFWTFBJvUUBQAA/sSIpZUSyGIAEJpgyALIaSwSyGoEGshAisgGzSwOABnN0YXR1c2VEgR4SRDEASwNQgAIAAUxQSwFJvEhMvyNDIihlRCQKIwhFCEsBFElFCxRFBkkiJLoXRQkiRQdLBksJDEEAPUsGgSELJAhLAUyBIbpJVwAgMQATRIGAAlMnBCJPAlQnBBNBAA9LBSMIRQZLBiMIRQdC/8RLCSMIRQpC/+5HAr5EMQBLBVBLAUxQTCJZIwgWVwYCXABLAbxIv0sJSwgPQAAISwVLCA9B/29LBUsID7EnBCJPAlRLBLIYgAQhLZ8HshqyGoEGshAisgGzSbxIQv9H",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}