#pragma version 10
#pragma typetrack false

// smart_contracts.council.contract.Council.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 33 2
    bytecblock 0x00 0x6d656d6265725f636f756e74 "M" 0x61646d696e 0x72656769737472795f6170705f6964
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/council/contract.py:35
    // Txn.global_num_byte_slice == council_cfg.GLOBAL_BYTES
    txn GlobalNumByteSlice
    intc_1 // 1
    ==
    // smart_contracts/council/contract.py:34-36
    // assert (
    //     Txn.global_num_byte_slice == council_cfg.GLOBAL_BYTES
    // ), err.WRONG_GLOBAL_BYTES
    assert // Wrong Global Bytes allocation
    // smart_contracts/council/contract.py:37
    // assert Txn.global_num_uint == council_cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    intc_3 // 2
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/council/contract.py:38
    // assert Txn.local_num_byte_slice == council_cfg.LOCAL_BYTES, err.WRONG_LOCAL_BYTES
    txn LocalNumByteSlice
    !
    assert // Wrong Local Bytes allocation
    // smart_contracts/council/contract.py:39
    // assert Txn.local_num_uint == council_cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    // smart_contracts/council/contract.py:48
    // key=council_cfg.GS_KEY_REGISTRY_APP_ID,
    bytec 4 // 0x72656769737472795f6170705f6964
    // smart_contracts/council/contract.py:47
    // UInt64(),
    intc_0 // 0
    // smart_contracts/council/contract.py:46-49
    // self.registry_app_id = GlobalState(
    //     UInt64(),
    //     key=council_cfg.GS_KEY_REGISTRY_APP_ID,
    // )
    app_global_put
    // smart_contracts/council/contract.py:53
    // key=council_cfg.GS_KEY_MEMBER_COUNT,
    bytec_1 // 0x6d656d6265725f636f756e74
    // smart_contracts/council/contract.py:52
    // UInt64(),
    intc_0 // 0
    // smart_contracts/council/contract.py:51-54
    // self.member_count = GlobalState(
    //     UInt64(),
    //     key=council_cfg.GS_KEY_MEMBER_COUNT,
    // )
    app_global_put

main_after_if_else@2:
    // smart_contracts/council/contract.py:24-32
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x19d702fa 0x92ebf6de 0xf7f4481f 0x25f6afb8 // method "add_member(address)void", method "remove_member(address)void", method "vote(uint64,bool)void", method "submit(uint64)void"
    txna ApplicationArgs 0
    match main_add_member_route@5 main_remove_member_route@6 main_vote_route@7 main_submit_route@8

main_after_if_else@11:
    // smart_contracts/council/contract.py:24-32
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    intc_0 // 0
    return

main_submit_route@8:
    // smart_contracts/council/contract.py:152
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/council/contract.py:24-32
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/council/contract.py:152
    // @arc4.abimethod()
    callsub submit
    intc_1 // 1
    return

main_vote_route@7:
    // smart_contracts/council/contract.py:102
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/council/contract.py:24-32
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_0 // 0
    getbit
    // smart_contracts/council/contract.py:102
    // @arc4.abimethod()
    callsub vote
    intc_1 // 1
    return

main_remove_member_route@6:
    // smart_contracts/council/contract.py:83
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/council/contract.py:24-32
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/council/contract.py:83
    // @arc4.abimethod()
    callsub remove_member
    intc_1 // 1
    return

main_add_member_route@5:
    // smart_contracts/council/contract.py:64
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/council/contract.py:24-32
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/council/contract.py:64
    // @arc4.abimethod()
    callsub add_member
    intc_1 // 1
    return

main_bare_routing@9:
    // smart_contracts/council/contract.py:24-32
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.council.contract.Council.add_member(address: bytes) -> void:
add_member:
    // smart_contracts/council/contract.py:64-65
    // @arc4.abimethod()
    // def add_member(self, address: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/council/contract.py:77
    // assert Txn.sender == self.admin.value, err.FORBIDDEN
    txn Sender
    intc_0 // 0
    bytec_3 // 0x61646d696e
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Forbidden
    // smart_contracts/council/contract.py:78
    // assert address.native not in self.members, err.ALREADY_MEMBER
    bytec_2 // "M"
    frame_dig -1
    concat
    dup
    box_len
    bury 1
    !
    assert // Already a member
    // smart_contracts/council/contract.py:80
    // self.members[address.native] = typ.Empty()
    pushbytes 0x
    box_put
    // smart_contracts/council/contract.py:81
    // self.member_count.value += 1
    intc_0 // 0
    bytec_1 // 0x6d656d6265725f636f756e74
    app_global_get_ex
    assert // check self.member_count exists
    intc_1 // 1
    +
    bytec_1 // 0x6d656d6265725f636f756e74
    swap
    app_global_put
    retsub


// smart_contracts.council.contract.Council.remove_member(address: bytes) -> void:
remove_member:
    // smart_contracts/council/contract.py:83-84
    // @arc4.abimethod()
    // def remove_member(self, address: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/council/contract.py:96
    // assert Txn.sender == self.admin.value, err.FORBIDDEN
    txn Sender
    intc_0 // 0
    bytec_3 // 0x61646d696e
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Forbidden
    // smart_contracts/council/contract.py:97
    // assert address.native in self.members, err.NOT_A_MEMBER
    bytec_2 // "M"
    frame_dig -1
    concat
    dup
    box_len
    bury 1
    assert // Not a member
    // smart_contracts/council/contract.py:99
    // del self.members[address.native]
    box_del
    pop
    // smart_contracts/council/contract.py:100
    // self.member_count.value -= 1
    intc_0 // 0
    bytec_1 // 0x6d656d6265725f636f756e74
    app_global_get_ex
    assert // check self.member_count exists
    intc_1 // 1
    -
    bytec_1 // 0x6d656d6265725f636f756e74
    swap
    app_global_put
    retsub


// smart_contracts.council.contract.Council.vote(proposal_id: uint64, approve: uint64) -> void:
vote:
    // smart_contracts/council/contract.py:102-103
    // @arc4.abimethod()
    // def vote(self, proposal_id: UInt64, approve: bool) -> None:
    proto 2 0
    pushbytes ""
    dup
    // smart_contracts/council/contract.py:119
    // assert Txn.sender in self.members, err.NOT_A_MEMBER
    bytec_2 // "M"
    txn Sender
    concat
    box_len
    bury 1
    assert // Not a member
    // smart_contracts/council/contract.py:121
    // if proposal_id not in self.votes:
    frame_dig -2
    itob
    dup
    pushbytes "V"
    swap
    concat
    dup
    box_len
    bury 1
    bnz vote_else_body@3
    // smart_contracts/council/contract.py:122-128
    // # we dont need to any error handling here
    // # if its invalid the transaction will fail
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.is_proposal,
    //     arc4.UInt64(proposal_id),
    //     app_id=self.registry_app_id.value,
    // )
    itxn_begin
    // smart_contracts/council/contract.py:127
    // app_id=self.registry_app_id.value,
    intc_0 // 0
    bytec 4 // 0x72656769737472795f6170705f6964
    app_global_get_ex
    assert // check self.registry_app_id exists
    itxn_field ApplicationID
    // smart_contracts/council/contract.py:122-128
    // # we dont need to any error handling here
    // # if its invalid the transaction will fail
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.is_proposal,
    //     arc4.UInt64(proposal_id),
    //     app_id=self.registry_app_id.value,
    // )
    pushbytes 0x26983200 // method "is_proposal(uint64)void"
    itxn_field ApplicationArgs
    frame_dig 2
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // smart_contracts/council/contract.py:134
    // address=arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/council/contract.py:135
    // approve=arc4.Bool(approve),  # noqa: FBT003
    bytec_0 // 0x00
    intc_0 // 0
    frame_dig -1
    setbit
    // smart_contracts/council/contract.py:133-136
    // typ.CouncilVote(
    //     address=arc4.Address(Txn.sender),
    //     approve=arc4.Bool(approve),  # noqa: FBT003
    // )
    concat
    // smart_contracts/council/contract.py:132-137
    // votes=arc4.DynamicArray(
    //     typ.CouncilVote(
    //         address=arc4.Address(Txn.sender),
    //         approve=arc4.Bool(approve),  # noqa: FBT003
    //     )
    // )
    pushbytes 0x0001
    swap
    concat
    // smart_contracts/council/contract.py:130-138
    // self.votes[proposal_id] = typ.CouncilVotingBox(
    //     submitted=arc4.Bool(False),  # noqa: FBT003
    //     votes=arc4.DynamicArray(
    //         typ.CouncilVote(
    //             address=arc4.Address(Txn.sender),
    //             approve=arc4.Bool(approve),  # noqa: FBT003
    //         )
    //     )
    // )
    pushbytes 0x000003
    swap
    concat
    frame_dig 3
    dup
    box_del
    pop
    swap
    box_put
    retsub

vote_else_body@3:
    // smart_contracts/council/contract.py:140
    // assert not self.votes[proposal_id].submitted, err.VOTING_CLOSED
    frame_dig 3
    dup
    box_get
    assert // check self.votes entry exists
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    ==
    assert // Voting is closed
    // smart_contracts/council/contract.py:142
    // for i in urange(self.votes[proposal_id].votes.length):
    box_get
    assert // check self.votes entry exists
    dup
    intc_1 // 1
    extract_uint16
    dig 1
    len
    substring3
    intc_0 // 0
    extract_uint16
    frame_bury 1
    intc_0 // 0
    frame_bury 0

vote_for_header@4:
    // smart_contracts/council/contract.py:142
    // for i in urange(self.votes[proposal_id].votes.length):
    frame_dig 0
    frame_dig 1
    <
    bz vote_after_for@7
    // smart_contracts/council/contract.py:143
    // assert Txn.sender != self.votes[proposal_id].votes[i].address, err.ALREADY_VOTED
    frame_dig 3
    box_get
    assert // check self.votes entry exists
    dup
    intc_1 // 1
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    frame_dig 0
    dup
    cover 2
    intc_2 // 33
    *
    intc_2 // 33
    extract3 // on error: Index access is out of bounds
    extract 0 32 // on error: Index access is out of bounds
    txn Sender
    !=
    assert // Already voted
    // smart_contracts/council/contract.py:142
    // for i in urange(self.votes[proposal_id].votes.length):
    intc_1 // 1
    +
    frame_bury 0
    b vote_for_header@4

vote_after_for@7:
    // smart_contracts/council/contract.py:145
    // self.votes[proposal_id].votes.append(
    frame_dig 3
    dup
    box_get
    assert // check self.votes entry exists
    dup
    intc_1 // 1
    extract_uint16
    dig 1
    len
    dig 2
    dig 2
    uncover 2
    substring3
    // smart_contracts/council/contract.py:145-150
    // self.votes[proposal_id].votes.append(
    //     typ.CouncilVote(
    //         address=arc4.Address(Txn.sender),
    //         approve=arc4.Bool(approve),  # noqa: FBT003
    //     )
    // )
    extract 2 0
    // smart_contracts/council/contract.py:147
    // address=arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/council/contract.py:148
    // approve=arc4.Bool(approve),  # noqa: FBT003
    bytec_0 // 0x00
    intc_0 // 0
    frame_dig -1
    setbit
    // smart_contracts/council/contract.py:146-149
    // typ.CouncilVote(
    //     address=arc4.Address(Txn.sender),
    //     approve=arc4.Bool(approve),  # noqa: FBT003
    // )
    concat
    // smart_contracts/council/contract.py:145-150
    // self.votes[proposal_id].votes.append(
    //     typ.CouncilVote(
    //         address=arc4.Address(Txn.sender),
    //         approve=arc4.Bool(approve),  # noqa: FBT003
    //     )
    // )
    concat
    dup
    len
    intc_2 // 33
    /
    itob
    extract 6 2
    swap
    concat
    uncover 2
    intc_0 // 0
    uncover 3
    extract3
    swap
    concat
    dig 1
    box_del
    pop
    box_put
    retsub


// smart_contracts.council.contract.Council.submit(proposal_id: uint64) -> void:
submit:
    // smart_contracts/council/contract.py:152-153
    // @arc4.abimethod()
    // def submit(self, proposal_id: UInt64) -> None:
    proto 1 0
    intc_0 // 0
    pushbytes ""
    dupn 4
    // smart_contracts/council/contract.py:168
    // assert Txn.sender in self.members or Txn.sender == self.admin.value, err.FORBIDDEN
    bytec_2 // "M"
    txn Sender
    concat
    box_len
    bury 1
    bnz submit_bool_true@2
    txn Sender
    intc_0 // 0
    bytec_3 // 0x61646d696e
    app_global_get_ex
    assert // check self.admin exists
    ==
    bz submit_bool_false@3

submit_bool_true@2:
    intc_1 // 1

submit_bool_merge@4:
    // smart_contracts/council/contract.py:168
    // assert Txn.sender in self.members or Txn.sender == self.admin.value, err.FORBIDDEN
    assert // Forbidden
    // smart_contracts/council/contract.py:169
    // assert proposal_id in self.votes, err.BAD_PROPOSAL_ID
    frame_dig -1
    itob
    pushbytes "V"
    swap
    concat
    dup
    frame_bury 0
    dup
    box_len
    bury 1
    assert // Bad proposal ID
    // smart_contracts/council/contract.py:170
    // assert not self.votes[proposal_id].submitted, err.ALREADY_SUBMITTED
    dup
    box_get
    assert // check self.votes entry exists
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    ==
    assert // Already submitted
    // smart_contracts/council/contract.py:172
    // approvals = UInt64(0)
    intc_0 // 0
    frame_bury 1
    // smart_contracts/council/contract.py:173
    // rejections = UInt64(0)
    intc_0 // 0
    frame_bury 4
    // smart_contracts/council/contract.py:175
    // for i in urange(self.votes[proposal_id].votes.length):
    box_get
    assert // check self.votes entry exists
    dup
    intc_1 // 1
    extract_uint16
    dig 1
    len
    substring3
    intc_0 // 0
    extract_uint16
    frame_bury 5
    intc_0 // 0
    frame_bury 3

submit_for_header@5:
    // smart_contracts/council/contract.py:175
    // for i in urange(self.votes[proposal_id].votes.length):
    frame_dig 3
    frame_dig 5
    <
    bz submit_after_for@11
    // smart_contracts/council/contract.py:176
    // if self.votes[proposal_id].votes[i].approve:
    frame_dig 0
    box_get
    assert // check self.votes entry exists
    dup
    intc_1 // 1
    extract_uint16
    dig 1
    len
    substring3
    extract 2 0
    frame_dig 3
    intc_2 // 33
    *
    intc_2 // 33
    extract3 // on error: Index access is out of bounds
    pushint 256 // 256
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x00
    !=
    bz submit_else_body@8
    // smart_contracts/council/contract.py:177
    // approvals += 1
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1

submit_after_if_else@9:
    // smart_contracts/council/contract.py:175
    // for i in urange(self.votes[proposal_id].votes.length):
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b submit_for_header@5

submit_else_body@8:
    // smart_contracts/council/contract.py:179
    // rejections += 1
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b submit_after_if_else@9

submit_after_for@11:
    // smart_contracts/council/contract.py:181
    // halfPlusOne = (self.member_count.value // 2) + 1
    intc_0 // 0
    bytec_1 // 0x6d656d6265725f636f756e74
    app_global_get_ex
    assert // check self.member_count exists
    intc_3 // 2
    /
    intc_1 // 1
    +
    dup
    frame_bury 2
    // smart_contracts/council/contract.py:182
    // assert approvals >= halfPlusOne or rejections >= halfPlusOne, err.FAILED_VOTE
    frame_dig 1
    <=
    bnz submit_bool_true@13
    frame_dig 4
    frame_dig 2
    >=
    bz submit_bool_false@14

submit_bool_true@13:
    intc_1 // 1

submit_bool_merge@15:
    // smart_contracts/council/contract.py:182
    // assert approvals >= halfPlusOne or rejections >= halfPlusOne, err.FAILED_VOTE
    assert // Failed vote
    // smart_contracts/council/contract.py:183
    // block = (rejections >= halfPlusOne)
    frame_dig 4
    frame_dig 2
    >=
    // smart_contracts/council/contract.py:185-189
    // arc4.abi_call(
    //     proposal_contract.Proposal.review,
    //     block,
    //     app_id=proposal_id
    // )
    itxn_begin
    // smart_contracts/council/contract.py:187
    // block,
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    frame_dig -1
    itxn_field ApplicationID
    // smart_contracts/council/contract.py:185-189
    // arc4.abi_call(
    //     proposal_contract.Proposal.review,
    //     block,
    //     app_id=proposal_id
    // )
    pushbytes 0x212d9f07 // method "review(bool)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // smart_contracts/council/contract.py:191
    // self.votes[proposal_id].submitted = arc4.Bool(True)
    frame_dig 0
    dup
    box_get
    assert // check self.votes entry exists
    intc_0 // 0
    intc_1 // 1
    setbit
    dig 1
    box_del
    pop
    box_put
    retsub

submit_bool_false@14:
    intc_0 // 0
    b submit_bool_merge@15

submit_bool_false@3:
    intc_0 // 0
    b submit_bool_merge@4
