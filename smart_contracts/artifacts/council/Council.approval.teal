#pragma version 10
#pragma typetrack false

// smart_contracts.council.contract.Council.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 33 2
    bytecblock 0x6d656d6265725f636f756e74 0x00 0x72656769737472795f6170705f6964 0x61646d696e 0x4d
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/council/contract.py:40
    // Txn.global_num_byte_slice == council_cfg.GLOBAL_BYTES
    txn GlobalNumByteSlice
    intc_1 // 1
    ==
    // smart_contracts/council/contract.py:39-41
    // assert (
    //     Txn.global_num_byte_slice == council_cfg.GLOBAL_BYTES
    // ), err.WRONG_GLOBAL_BYTES
    assert // Wrong Global Bytes allocation
    // smart_contracts/council/contract.py:42
    // assert Txn.global_num_uint == council_cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    intc_3 // 2
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/council/contract.py:44
    // Txn.local_num_byte_slice == council_cfg.LOCAL_BYTES
    txn LocalNumByteSlice
    !
    // smart_contracts/council/contract.py:43-45
    // assert (
    //     Txn.local_num_byte_slice == council_cfg.LOCAL_BYTES
    // ), err.WRONG_LOCAL_BYTES
    assert // Wrong Local Bytes allocation
    // smart_contracts/council/contract.py:46
    // assert Txn.local_num_uint == council_cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    // smart_contracts/council/contract.py:55
    // key=council_cfg.GS_KEY_REGISTRY_APP_ID,
    bytec_2 // 0x72656769737472795f6170705f6964
    // smart_contracts/council/contract.py:54
    // UInt64(),
    intc_0 // 0
    // smart_contracts/council/contract.py:53-56
    // self.registry_app_id = GlobalState(
    //     UInt64(),
    //     key=council_cfg.GS_KEY_REGISTRY_APP_ID,
    // )
    app_global_put
    // smart_contracts/council/contract.py:60
    // key=council_cfg.GS_KEY_MEMBER_COUNT,
    bytec_0 // 0x6d656d6265725f636f756e74
    // smart_contracts/council/contract.py:59
    // UInt64(),
    intc_0 // 0
    // smart_contracts/council/contract.py:58-61
    // self.member_count = GlobalState(
    //     UInt64(),
    //     key=council_cfg.GS_KEY_MEMBER_COUNT,
    // )
    app_global_put

main_after_if_else@2:
    // smart_contracts/council/contract.py:29-37
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0x08b3cef6 0x19d702fa 0x92ebf6de 0xf7f4481f 0xdbd83dd9 // method "create(account,uint64)void", method "add_member(address)void", method "remove_member(address)void", method "vote(uint64,bool)void", method "op_up()void"
    txna ApplicationArgs 0
    match main_create_route@5 main_add_member_route@6 main_remove_member_route@7 main_vote_route@8 main_op_up_route@9

main_after_if_else@10:
    // smart_contracts/council/contract.py:29-37
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    intc_0 // 0
    return

main_op_up_route@9:
    // smart_contracts/council/contract.py:201
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_vote_route@8:
    // smart_contracts/council/contract.py:128
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/council/contract.py:29-37
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_0 // 0
    getbit
    // smart_contracts/council/contract.py:128
    // @arc4.abimethod()
    callsub vote
    intc_1 // 1
    return

main_remove_member_route@7:
    // smart_contracts/council/contract.py:109
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/council/contract.py:29-37
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/council/contract.py:109
    // @arc4.abimethod()
    callsub remove_member
    intc_1 // 1
    return

main_add_member_route@6:
    // smart_contracts/council/contract.py:90
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/council/contract.py:29-37
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/council/contract.py:90
    // @arc4.abimethod()
    callsub add_member
    intc_1 // 1
    return

main_create_route@5:
    // smart_contracts/council/contract.py:71
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/council/contract.py:29-37
    // class Council(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=council_cfg.GLOBAL_BYTES,
    //         global_uints=council_cfg.GLOBAL_UINTS,
    //         local_bytes=council_cfg.LOCAL_BYTES,
    //         local_uints=council_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/council/contract.py:71
    // @arc4.abimethod(create="require")
    callsub create
    intc_1 // 1
    return


// smart_contracts.council.contract.Council.create(admin: bytes, registry_id: uint64) -> void:
create:
    // smart_contracts/council/contract.py:71-72
    // @arc4.abimethod(create="require")
    // def create(self, admin: Account, registry_id: UInt64) -> None:
    proto 2 0
    // smart_contracts/council/contract.py:84
    // assert registry_id > 0, err.INVALID_REGISTRY_ID
    frame_dig -1
    assert // Invalid registry ID
    // smart_contracts/council/contract.py:86
    // self.admin.value = admin
    bytec_3 // 0x61646d696e
    frame_dig -2
    app_global_put
    // smart_contracts/council/contract.py:87
    // self.registry_app_id.value = registry_id
    bytec_2 // 0x72656769737472795f6170705f6964
    frame_dig -1
    app_global_put
    // smart_contracts/council/contract.py:88
    // self.member_count.value = UInt64(0)
    bytec_0 // 0x6d656d6265725f636f756e74
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.council.contract.Council.add_member(address: bytes) -> void:
add_member:
    // smart_contracts/council/contract.py:90-91
    // @arc4.abimethod()
    // def add_member(self, address: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/council/contract.py:103
    // assert Txn.sender == self.admin.value, err.FORBIDDEN
    txn Sender
    intc_0 // 0
    bytec_3 // 0x61646d696e
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Forbidden
    // smart_contracts/council/contract.py:104
    // assert address.native not in self.members, err.ALREADY_MEMBER
    bytec 4 // 0x4d
    frame_dig -1
    concat
    dup
    box_len
    bury 1
    !
    assert // Already a member
    // smart_contracts/council/contract.py:106
    // self.members[address.native] = typ.Empty()
    pushbytes 0x
    box_put
    // smart_contracts/council/contract.py:107
    // self.member_count.value += 1
    intc_0 // 0
    bytec_0 // 0x6d656d6265725f636f756e74
    app_global_get_ex
    assert // check self.member_count exists
    intc_1 // 1
    +
    bytec_0 // 0x6d656d6265725f636f756e74
    swap
    app_global_put
    retsub


// smart_contracts.council.contract.Council.remove_member(address: bytes) -> void:
remove_member:
    // smart_contracts/council/contract.py:109-110
    // @arc4.abimethod()
    // def remove_member(self, address: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/council/contract.py:122
    // assert Txn.sender == self.admin.value, err.FORBIDDEN
    txn Sender
    intc_0 // 0
    bytec_3 // 0x61646d696e
    app_global_get_ex
    assert // check self.admin exists
    ==
    assert // Forbidden
    // smart_contracts/council/contract.py:123
    // assert address.native in self.members, err.NOT_A_MEMBER
    bytec 4 // 0x4d
    frame_dig -1
    concat
    dup
    box_len
    bury 1
    assert // Not a member
    // smart_contracts/council/contract.py:125
    // del self.members[address.native]
    box_del
    pop
    // smart_contracts/council/contract.py:126
    // self.member_count.value -= 1
    intc_0 // 0
    bytec_0 // 0x6d656d6265725f636f756e74
    app_global_get_ex
    assert // check self.member_count exists
    intc_1 // 1
    -
    bytec_0 // 0x6d656d6265725f636f756e74
    swap
    app_global_put
    retsub


// smart_contracts.council.contract.Council.vote(proposal_id: uint64, block: uint64) -> void:
vote:
    // smart_contracts/council/contract.py:128-129
    // @arc4.abimethod()
    // def vote(self, proposal_id: UInt64, block: bool) -> None:  # noqa: FBT001
    proto 2 0
    pushbytes ""
    dupn 4
    // smart_contracts/council/contract.py:144
    // assert Txn.sender in self.members, err.NOT_A_MEMBER
    bytec 4 // 0x4d
    txn Sender
    concat
    box_len
    bury 1
    assert // Not a member
    // smart_contracts/council/contract.py:146
    // if proposal_id not in self.votes:
    frame_dig -2
    itob
    dup
    pushbytes 0x56
    swap
    concat
    dup
    box_len
    bury 1
    bnz vote_else_body@3
    // smart_contracts/council/contract.py:147-153
    // # we dont need any error handling here
    // # if its invalid the transaction will fail
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.is_proposal,
    //     arc4.UInt64(proposal_id),
    //     app_id=self.registry_app_id.value,
    // )
    itxn_begin
    // smart_contracts/council/contract.py:152
    // app_id=self.registry_app_id.value,
    intc_0 // 0
    bytec_2 // 0x72656769737472795f6170705f6964
    app_global_get_ex
    assert // check self.registry_app_id exists
    itxn_field ApplicationID
    // smart_contracts/council/contract.py:147-153
    // # we dont need any error handling here
    // # if its invalid the transaction will fail
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.is_proposal,
    //     arc4.UInt64(proposal_id),
    //     app_id=self.registry_app_id.value,
    // )
    pushbytes 0x26983200 // method "is_proposal(uint64)void"
    itxn_field ApplicationArgs
    frame_dig 5
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // smart_contracts/council/contract.py:155-157
    // status, exists = AppGlobal.get_ex_uint64(
    //     proposal_id, Bytes(proposal_cfg.GS_KEY_STATUS)
    // )
    frame_dig -2
    // smart_contracts/council/contract.py:156
    // proposal_id, Bytes(proposal_cfg.GS_KEY_STATUS)
    pushbytes 0x737461747573
    // smart_contracts/council/contract.py:155-157
    // status, exists = AppGlobal.get_ex_uint64(
    //     proposal_id, Bytes(proposal_cfg.GS_KEY_STATUS)
    // )
    app_global_get_ex
    // smart_contracts/council/contract.py:159
    // assert exists, err.INVALID_PROPOSAL
    assert // Invalid proposal
    // smart_contracts/council/contract.py:160
    // assert status == proposal_enm.STATUS_APPROVED, err.WRONG_PROPOSAL_STATUS
    pushint 30 // 30
    ==
    assert // Wrong Proposal Status or Decommissioned
    // smart_contracts/council/contract.py:164
    // address=arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/council/contract.py:165
    // block=arc4.Bool(block),
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -1
    setbit
    // smart_contracts/council/contract.py:163-166
    // typ.CouncilVote(
    //     address=arc4.Address(Txn.sender),
    //     block=arc4.Bool(block),
    // )
    concat
    // smart_contracts/council/contract.py:162-167
    // self.votes[proposal_id] = arc4.DynamicArray(
    //     typ.CouncilVote(
    //         address=arc4.Address(Txn.sender),
    //         block=arc4.Bool(block),
    //     )
    // )
    pushbytes 0x0001
    swap
    concat
    frame_dig 6
    dup
    box_del
    pop
    swap
    box_put

vote_after_if_else@15:
    retsub

vote_else_body@3:
    // smart_contracts/council/contract.py:170
    // half_plus_one = (self.member_count.value // 2) + 1
    intc_0 // 0
    bytec_0 // 0x6d656d6265725f636f756e74
    app_global_get_ex
    assert // check self.member_count exists
    intc_3 // 2
    /
    intc_1 // 1
    +
    frame_bury 1
    // smart_contracts/council/contract.py:171
    // approvals = UInt64(0) if block else UInt64(1)
    frame_dig -1
    !
    dup
    frame_bury 0
    // smart_contracts/council/contract.py:172
    // rejections = UInt64(0) if not block else UInt64(1)
    !
    frame_bury 3
    // smart_contracts/council/contract.py:174
    // for i in urange(self.votes[proposal_id].length):
    frame_dig 6
    box_get
    assert // check self.votes entry exists
    intc_0 // 0
    extract_uint16
    frame_bury 4
    intc_0 // 0
    frame_bury 2

vote_for_header@4:
    // smart_contracts/council/contract.py:174
    // for i in urange(self.votes[proposal_id].length):
    frame_dig 2
    frame_dig 4
    <
    bz vote_after_for@10
    // smart_contracts/council/contract.py:176
    // Txn.sender != self.votes[proposal_id][i].address
    frame_dig 6
    dup
    box_get
    assert // check self.votes entry exists
    extract 2 0
    frame_dig 2
    intc_2 // 33
    *
    swap
    dig 1
    intc_2 // 33
    extract3 // on error: Index access is out of bounds
    extract 0 32 // on error: Index access is out of bounds
    txn Sender
    !=
    // smart_contracts/council/contract.py:175-177
    // assert (
    //     Txn.sender != self.votes[proposal_id][i].address
    // ), err.ALREADY_VOTED
    assert // Already voted
    // smart_contracts/council/contract.py:179
    // if self.votes[proposal_id][i].block:
    swap
    box_get
    assert // check self.votes entry exists
    extract 2 0
    swap
    intc_2 // 33
    extract3 // on error: Index access is out of bounds
    pushint 256 // 256
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_1 // 0x00
    !=
    bz vote_else_body@7
    // smart_contracts/council/contract.py:180
    // rejections += 1
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3

vote_after_if_else@8:
    // smart_contracts/council/contract.py:174
    // for i in urange(self.votes[proposal_id].length):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b vote_for_header@4

vote_else_body@7:
    // smart_contracts/council/contract.py:182
    // approvals += 1
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b vote_after_if_else@8

vote_after_for@10:
    // smart_contracts/council/contract.py:184
    // self.votes[proposal_id].append(
    frame_dig 6
    dup
    box_get
    assert // check self.votes entry exists
    // smart_contracts/council/contract.py:184-189
    // self.votes[proposal_id].append(
    //     typ.CouncilVote(
    //         address=arc4.Address(Txn.sender),
    //         block=arc4.Bool(block),
    //     )
    // )
    extract 2 0
    // smart_contracts/council/contract.py:186
    // address=arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/council/contract.py:187
    // block=arc4.Bool(block),
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -1
    setbit
    // smart_contracts/council/contract.py:185-188
    // typ.CouncilVote(
    //     address=arc4.Address(Txn.sender),
    //     block=arc4.Bool(block),
    // )
    concat
    // smart_contracts/council/contract.py:184-189
    // self.votes[proposal_id].append(
    //     typ.CouncilVote(
    //         address=arc4.Address(Txn.sender),
    //         block=arc4.Bool(block),
    //     )
    // )
    concat
    dup
    len
    intc_2 // 33
    /
    itob
    extract 6 2
    swap
    concat
    dig 1
    box_del
    pop
    box_put
    // smart_contracts/council/contract.py:191
    // if approvals >= half_plus_one or rejections >= half_plus_one:
    frame_dig 0
    frame_dig 1
    >=
    bnz vote_if_body@12
    frame_dig 3
    frame_dig 1
    >=
    bz vote_after_if_else@15

vote_if_body@12:
    // smart_contracts/council/contract.py:192-193
    // # this will allow the proposal to be reviewed
    // block = rejections >= half_plus_one
    frame_dig 3
    frame_dig 1
    >=
    frame_bury -1
    // smart_contracts/council/contract.py:195-197
    // arc4.abi_call(
    //     proposal_contract.Proposal.review, block, app_id=proposal_id
    // )
    itxn_begin
    // smart_contracts/council/contract.py:196
    // proposal_contract.Proposal.review, block, app_id=proposal_id
    bytec_1 // 0x00
    intc_0 // 0
    frame_dig -1
    setbit
    frame_dig -2
    itxn_field ApplicationID
    // smart_contracts/council/contract.py:195-197
    // arc4.abi_call(
    //     proposal_contract.Proposal.review, block, app_id=proposal_id
    // )
    pushbytes 0x212d9f07 // method "review(bool)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // smart_contracts/council/contract.py:199
    // del self.votes[proposal_id]
    frame_dig 6
    box_del
    pop
    retsub
