{
    "name": "XGovRegistry",
    "structs": {
        "ProposerBoxValue": [
            {
                "name": "active_proposal",
                "type": "bool"
            },
            {
                "name": "kyc_status",
                "type": "bool"
            },
            {
                "name": "kyc_expiring",
                "type": "uint64"
            }
        ],
        "TypedGlobalState": [
            {
                "name": "paused_registry",
                "type": "bool"
            },
            {
                "name": "paused_proposals",
                "type": "bool"
            },
            {
                "name": "xgov_manager",
                "type": "address"
            },
            {
                "name": "xgov_payor",
                "type": "address"
            },
            {
                "name": "xgov_council",
                "type": "address"
            },
            {
                "name": "xgov_subscriber",
                "type": "address"
            },
            {
                "name": "kyc_provider",
                "type": "address"
            },
            {
                "name": "committee_manager",
                "type": "address"
            },
            {
                "name": "xgov_daemon",
                "type": "address"
            },
            {
                "name": "xgov_fee",
                "type": "uint64"
            },
            {
                "name": "proposer_fee",
                "type": "uint64"
            },
            {
                "name": "open_proposal_fee",
                "type": "uint64"
            },
            {
                "name": "daemon_ops_funding_bps",
                "type": "uint64"
            },
            {
                "name": "proposal_commitment_bps",
                "type": "uint64"
            },
            {
                "name": "min_requested_amount",
                "type": "uint64"
            },
            {
                "name": "max_requested_amount",
                "type": "uint64[3]"
            },
            {
                "name": "discussion_duration",
                "type": "uint64[4]"
            },
            {
                "name": "voting_duration",
                "type": "uint64[4]"
            },
            {
                "name": "quorum",
                "type": "uint64[3]"
            },
            {
                "name": "weighted_quorum",
                "type": "uint64[3]"
            },
            {
                "name": "outstanding_funds",
                "type": "uint64"
            },
            {
                "name": "pending_proposals",
                "type": "uint64"
            },
            {
                "name": "committee_id",
                "type": "byte[32]"
            },
            {
                "name": "committee_members",
                "type": "uint64"
            },
            {
                "name": "committee_votes",
                "type": "uint64"
            }
        ],
        "VoterBox": [
            {
                "name": "votes",
                "type": "uint64"
            },
            {
                "name": "voted",
                "type": "bool"
            }
        ],
        "XGovBoxValue": [
            {
                "name": "voting_address",
                "type": "address"
            },
            {
                "name": "voted_proposals",
                "type": "uint64"
            },
            {
                "name": "last_vote_timestamp",
                "type": "uint64"
            },
            {
                "name": "subscription_round",
                "type": "uint64"
            }
        ],
        "XGovRegistryConfig": [
            {
                "name": "xgov_fee",
                "type": "uint64"
            },
            {
                "name": "proposer_fee",
                "type": "uint64"
            },
            {
                "name": "open_proposal_fee",
                "type": "uint64"
            },
            {
                "name": "daemon_ops_funding_bps",
                "type": "uint64"
            },
            {
                "name": "proposal_commitment_bps",
                "type": "uint64"
            },
            {
                "name": "min_requested_amount",
                "type": "uint64"
            },
            {
                "name": "max_requested_amount",
                "type": "uint64[3]"
            },
            {
                "name": "discussion_duration",
                "type": "uint64[4]"
            },
            {
                "name": "voting_duration",
                "type": "uint64[4]"
            },
            {
                "name": "quorum",
                "type": "uint64[3]"
            },
            {
                "name": "weighted_quorum",
                "type": "uint64[3]"
            }
        ],
        "XGovSubscribeRequestBoxValue": [
            {
                "name": "xgov_addr",
                "type": "address"
            },
            {
                "name": "owner_addr",
                "type": "address"
            },
            {
                "name": "relation_type",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Create the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pause_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pauses the xGov Registry non-administrative methods.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pause_proposals",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pauses the creation of new Proposals.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resume_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resumes the xGov Registry non-administrative methods.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resume_proposals",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resumes the creation of new Proposals.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_manager",
            "args": [
                {
                    "type": "address",
                    "name": "manager",
                    "desc": "Address of the new xGov Manager"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Manager.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_payor",
            "args": [
                {
                    "type": "address",
                    "name": "payor",
                    "desc": "Address of the new xGov Payor"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Payor.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_council",
            "args": [
                {
                    "type": "address",
                    "name": "council",
                    "desc": "Address of the new xGov Council"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Council.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_subscriber",
            "args": [
                {
                    "type": "address",
                    "name": "subscriber",
                    "desc": "Address of the new xGov Subscriber"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Subscriber.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_kyc_provider",
            "args": [
                {
                    "type": "address",
                    "name": "provider",
                    "desc": "Address of the new KYC Provider"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the KYC provider.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_committee_manager",
            "args": [
                {
                    "type": "address",
                    "name": "manager",
                    "desc": "Address of the new xGov Manager"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the Committee Manager.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_daemon",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_daemon",
                    "desc": "Address of the new xGov Daemon"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Daemon.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "config_xgov_registry",
            "args": [
                {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3])",
                    "struct": "XGovRegistryConfig",
                    "name": "config",
                    "desc": "Configuration class containing the field data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the configuration of the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_xgov_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "desc": "Updates the xGov Registry contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "subscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "voting_address",
                    "desc": "The address of the voting account for the xGov"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the xGov fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Subscribes the sender to being an xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unsubscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov to unsubscribe"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unsubscribes the designated address from being an xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "request_subscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov"
                },
                {
                    "type": "address",
                    "name": "owner_address",
                    "desc": "The address of the xGov Address owner/controller (Voting Address)"
                },
                {
                    "type": "uint64",
                    "name": "relation_type",
                    "desc": "The type of relationship enum"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the xGov fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Requests to subscribe to the xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "approve_subscribe_xgov",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the request to approve"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Approves a subscribe request to xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "reject_subscribe_xgov",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the request to reject"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Rejects a subscribe request to xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_voting_account",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The xGov address delegating voting power"
                },
                {
                    "type": "address",
                    "name": "voting_address",
                    "desc": "The voting account address to delegate voting power to"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the Voting Address for the xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "subscribe_proposer",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the Proposer fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Subscribes the sender to being a Proposer.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_proposer_kyc",
            "args": [
                {
                    "type": "address",
                    "name": "proposer",
                    "desc": "The address of the Proposer"
                },
                {
                    "type": "bool",
                    "name": "kyc_status",
                    "desc": "The new status of the Proposer"
                },
                {
                    "type": "uint64",
                    "name": "kyc_expiring",
                    "desc": "The expiration date as a unix timestamp of the time the KYC expires"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets a proposer's KYC status.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "declare_committee",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "committee_id",
                    "desc": "The ID of the xGov Committee"
                },
                {
                    "type": "uint64",
                    "name": "size",
                    "desc": "The size of the xGov Committee"
                },
                {
                    "type": "uint64",
                    "name": "votes",
                    "desc": "The voting power of the xGov Committee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Committee in charge.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "open_proposal",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "payment for covering the proposal fee (includes child contract MBR)"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates a new Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app being voted on"
                },
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "(arc4.Address): The address of the xGov being voted on behalf of"
                },
                {
                    "type": "uint64",
                    "name": "approval_votes",
                    "desc": "(arc4.UInt64): The number of approvals votes allocated"
                },
                {
                    "type": "uint64",
                    "name": "rejection_votes",
                    "desc": "(arc4.UInt64): The number of rejections votes allocated"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Votes on a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pay_grant_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the approved Proposal"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Disburses the funds for an approved Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "finalize_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app to finalize"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Finalize a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "drop_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app to drop"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Drops a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit_funds",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "the deposit transaction"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposits xGov program funds into the xGov Treasury (xGov Registry Account).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_funds",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "the amount to remove"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove xGov program funds from the xGov Treasury (xGov Registry Account).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_balance",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw outstanding Algos, excluding MBR and outstanding funds, from the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_state",
            "args": [],
            "returns": {
                "type": "(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)",
                "struct": "TypedGlobalState"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov Registry state.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_xgov_box",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov"
                }
            ],
            "returns": {
                "type": "(address,uint64,uint64,uint64)",
                "struct": "XGovBoxValue",
                "desc": "The xGov box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov box for the given address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_proposer_box",
            "args": [
                {
                    "type": "address",
                    "name": "proposer_address",
                    "desc": "The address of the Proposer"
                }
            ],
            "returns": {
                "type": "(bool,bool,uint64)",
                "struct": "ProposerBoxValue",
                "desc": "The Proposer box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the Proposer box for the given address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 36,
                "bytes": 28
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "paused_registry": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGF1c2VkX3JlZ2lzdHJ5"
                },
                "paused_proposals": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGF1c2VkX3Byb3Bvc2Fscw=="
                },
                "xgov_manager": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9tYW5hZ2Vy"
                },
                "xgov_subscriber": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9zdWJzY3JpYmVy"
                },
                "xgov_payor": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9wYXlvcg=="
                },
                "xgov_council": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9jb3VuY2ls"
                },
                "kyc_provider": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "a3ljX3Byb3ZpZGVy"
                },
                "committee_manager": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "Y29tbWl0dGVlX21hbmFnZXI="
                },
                "xgov_daemon": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9kYWVtb24="
                },
                "xgov_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "eGdvdl9mZWU="
                },
                "xgovs": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "eGdvdnM="
                },
                "proposer_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cHJvcG9zZXJfZmVl"
                },
                "open_proposal_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "b3Blbl9wcm9wb3NhbF9mZWU="
                },
                "daemon_ops_funding_bps": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGFlbW9uX29wZXJhdGlvbl9mdW5kaW5nX2Jwcw=="
                },
                "proposal_commitment_bps": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cHJvcG9zYWxfY29tbWl0bWVudF9icHM="
                },
                "min_requested_amount": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWluX3JlcXVlc3RlZF9hbW91bnQ="
                },
                "max_requested_amount_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGw="
                },
                "max_requested_amount_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVt"
                },
                "max_requested_amount_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2U="
                },
                "discussion_duration_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9zbWFsbA=="
                },
                "discussion_duration_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9tZWRpdW0="
                },
                "discussion_duration_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9sYXJnZQ=="
                },
                "discussion_duration_xlarge": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl94bGFyZ2U="
                },
                "voting_duration_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX3NtYWxs"
                },
                "voting_duration_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX21lZGl1bQ=="
                },
                "voting_duration_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX2xhcmdl"
                },
                "voting_duration_xlarge": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX3hsYXJnZQ=="
                },
                "quorum_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX3NtYWxs"
                },
                "quorum_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX21lZGl1bQ=="
                },
                "quorum_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX2xhcmdl"
                },
                "weighted_quorum_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX3NtYWxs"
                },
                "weighted_quorum_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX21lZGl1bQ=="
                },
                "weighted_quorum_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX2xhcmdl"
                },
                "outstanding_funds": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "b3V0c3RhbmRpbmdfZnVuZHM="
                },
                "committee_id": {
                    "keyType": "AVMBytes",
                    "valueType": "byte[32]",
                    "key": "Y29tbWl0dGVlX2lk"
                },
                "committee_members": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWl0dGVlX21lbWJlcnM="
                },
                "committee_votes": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWl0dGVlX3ZvdGVz"
                },
                "pending_proposals": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGVuZGluZ19wcm9wb3NhbHM="
                },
                "request_id": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cmVxdWVzdF9pZA=="
                },
                "max_committee_size": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X2NvbW1pdHRlZV9zaXpl"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "xgov_box": {
                    "keyType": "address",
                    "valueType": "XGovBoxValue",
                    "prefix": "eA=="
                },
                "request_box": {
                    "keyType": "uint64",
                    "valueType": "XGovSubscribeRequestBoxValue",
                    "prefix": "cg=="
                },
                "proposer_box": {
                    "keyType": "address",
                    "valueType": "ProposerBoxValue",
                    "prefix": "cA=="
                },
                "voters": {
                    "keyType": "address",
                    "valueType": "VoterBox",
                    "prefix": "Vg=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1089
                    ],
                    "errorMessage": "Address length is 32 bytes"
                },
                {
                    "pc": [
                        1990
                    ],
                    "errorMessage": "Already a proposer"
                },
                {
                    "pc": [
                        1701,
                        1813
                    ],
                    "errorMessage": "Already an xGov"
                },
                {
                    "pc": [
                        1364
                    ],
                    "errorMessage": "Cannot perform operation with pending proposals"
                },
                {
                    "pc": [
                        2094
                    ],
                    "errorMessage": "Committee size is too large"
                },
                {
                    "pc": [
                        2127
                    ],
                    "errorMessage": "Creation of proposals is paused"
                },
                {
                    "pc": [
                        1522
                    ],
                    "errorMessage": "Inconsistent requested amount config"
                },
                {
                    "pc": [
                        1482,
                        1551,
                        1585,
                        1619,
                        1645,
                        1754,
                        1868,
                        1875,
                        1941,
                        6158
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        2168,
                        6890,
                        6929
                    ],
                    "errorMessage": "Insufficient fee"
                },
                {
                    "pc": [
                        6881,
                        6947
                    ],
                    "errorMessage": "Insufficient funds"
                },
                {
                    "pc": [
                        6420
                    ],
                    "errorMessage": "Insufficient treasury funds"
                },
                {
                    "pc": [
                        2159,
                        6411
                    ],
                    "errorMessage": "Invalid KYC"
                },
                {
                    "pc": [
                        1391
                    ],
                    "errorMessage": "Invalid open proposal fee"
                },
                {
                    "pc": [
                        1707,
                        1819
                    ],
                    "errorMessage": "Invalid payment"
                },
                {
                    "pc": [
                        6120,
                        6371,
                        6577,
                        6743,
                        7332
                    ],
                    "errorMessage": "Invalid proposal"
                },
                {
                    "pc": [
                        1471
                    ],
                    "errorMessage": "Invalid proposer fee"
                },
                {
                    "pc": [
                        1465
                    ],
                    "errorMessage": "Invalid xGov fee"
                },
                {
                    "pc": [
                        6338,
                        6707
                    ],
                    "errorMessage": "Missing Config"
                },
                {
                    "pc": [
                        1083,
                        6397,
                        6550
                    ],
                    "errorMessage": "Missing key in state"
                },
                {
                    "pc": [
                        6162
                    ],
                    "errorMessage": "Must be voting address"
                },
                {
                    "pc": [
                        448,
                        463,
                        482,
                        501,
                        517,
                        529,
                        545,
                        567,
                        582,
                        597,
                        612,
                        636,
                        663,
                        684,
                        705,
                        727,
                        745,
                        760,
                        775,
                        806,
                        821,
                        859,
                        874,
                        889,
                        904,
                        919,
                        934,
                        949,
                        964,
                        979,
                        991,
                        1003,
                        1015,
                        1027
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        847
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        2153
                    ],
                    "errorMessage": "Proposer already has an active proposal"
                },
                {
                    "pc": [
                        2047
                    ],
                    "errorMessage": "Proposer does not exist"
                },
                {
                    "pc": [
                        1691,
                        1740,
                        1803,
                        1924,
                        1981,
                        2120,
                        6112,
                        6734
                    ],
                    "errorMessage": "Registry's non-admin methods are paused"
                },
                {
                    "pc": [
                        6706
                    ],
                    "errorMessage": "There are voters assigned to this proposal"
                },
                {
                    "pc": [
                        1224,
                        1232,
                        1241,
                        1249,
                        1261,
                        1274,
                        1287,
                        1300,
                        1313,
                        1326,
                        1339,
                        1357,
                        1681,
                        1751,
                        1774,
                        1855,
                        1904,
                        1935,
                        1957,
                        2038,
                        2082,
                        2135,
                        6130,
                        6363,
                        6570,
                        6751,
                        6871,
                        6920
                    ],
                    "errorMessage": "Unauthorized"
                },
                {
                    "pc": [
                        6333,
                        6512,
                        6705,
                        6822
                    ],
                    "errorMessage": "Unknown error"
                },
                {
                    "pc": [
                        6336
                    ],
                    "errorMessage": "Voter already voted"
                },
                {
                    "pc": [
                        6337
                    ],
                    "errorMessage": "Voter not found"
                },
                {
                    "pc": [
                        6335
                    ],
                    "errorMessage": "Votes exceeded"
                },
                {
                    "pc": [
                        6334
                    ],
                    "errorMessage": "Voting Period Expired"
                },
                {
                    "pc": [
                        10
                    ],
                    "errorMessage": "Wrong Global Bytes allocation"
                },
                {
                    "pc": [
                        16
                    ],
                    "errorMessage": "Wrong Global UInts allocation"
                },
                {
                    "pc": [
                        20
                    ],
                    "errorMessage": "Wrong Local Bytes allocation"
                },
                {
                    "pc": [
                        24
                    ],
                    "errorMessage": "Wrong Local UInts allocation"
                },
                {
                    "pc": [
                        6339,
                        6513,
                        6708,
                        6823
                    ],
                    "errorMessage": "Wrong Proposal Status or finalized"
                },
                {
                    "pc": [
                        1998,
                        2176,
                        6851
                    ],
                    "errorMessage": "Wrong Receiver"
                },
                {
                    "pc": [
                        2009,
                        2190
                    ],
                    "errorMessage": "Wrong payment amount"
                },
                {
                    "pc": [
                        6405
                    ],
                    "errorMessage": "Wrong proposer"
                },
                {
                    "pc": [
                        2195,
                        6055,
                        6934,
                        6939
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1062,
                        6072
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        6048,
                        6203,
                        6470,
                        6608,
                        6780
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        1031
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        451,
                        466,
                        485,
                        504,
                        520,
                        532,
                        548,
                        570,
                        585,
                        600,
                        615,
                        639,
                        666,
                        687,
                        708,
                        730,
                        748,
                        763,
                        778,
                        809,
                        824,
                        850,
                        862,
                        877,
                        892,
                        907,
                        922,
                        937,
                        952,
                        967,
                        982,
                        994,
                        1006,
                        1018
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        7210
                    ],
                    "errorMessage": "check self.committee_id exists"
                },
                {
                    "pc": [
                        2080,
                        7016
                    ],
                    "errorMessage": "check self.committee_manager exists"
                },
                {
                    "pc": [
                        7215
                    ],
                    "errorMessage": "check self.committee_members exists"
                },
                {
                    "pc": [
                        7221
                    ],
                    "errorMessage": "check self.committee_votes exists"
                },
                {
                    "pc": [
                        7044
                    ],
                    "errorMessage": "check self.daemon_ops_funding_bps exists"
                },
                {
                    "pc": [
                        7097
                    ],
                    "errorMessage": "check self.discussion_duration_large exists"
                },
                {
                    "pc": [
                        7091
                    ],
                    "errorMessage": "check self.discussion_duration_medium exists"
                },
                {
                    "pc": [
                        7085
                    ],
                    "errorMessage": "check self.discussion_duration_small exists"
                },
                {
                    "pc": [
                        7103
                    ],
                    "errorMessage": "check self.discussion_duration_xlarge exists"
                },
                {
                    "pc": [
                        2036,
                        7011
                    ],
                    "errorMessage": "check self.kyc_provider exists"
                },
                {
                    "pc": [
                        2090
                    ],
                    "errorMessage": "check self.max_committee_size exists"
                },
                {
                    "pc": [
                        7074
                    ],
                    "errorMessage": "check self.max_requested_amount_large exists"
                },
                {
                    "pc": [
                        7068
                    ],
                    "errorMessage": "check self.max_requested_amount_medium exists"
                },
                {
                    "pc": [
                        7062
                    ],
                    "errorMessage": "check self.max_requested_amount_small exists"
                },
                {
                    "pc": [
                        7056
                    ],
                    "errorMessage": "check self.min_requested_amount exists"
                },
                {
                    "pc": [
                        2185,
                        7038
                    ],
                    "errorMessage": "check self.open_proposal_fee exists"
                },
                {
                    "pc": [
                        6415,
                        6855,
                        6875,
                        6944,
                        7198
                    ],
                    "errorMessage": "check self.outstanding_funds exists"
                },
                {
                    "pc": [
                        2125,
                        6980
                    ],
                    "errorMessage": "check self.paused_proposals exists"
                },
                {
                    "pc": [
                        1689,
                        1738,
                        1801,
                        1922,
                        1979,
                        2118,
                        6110,
                        6732,
                        6969
                    ],
                    "errorMessage": "check self.paused_registry exists"
                },
                {
                    "pc": [
                        1170,
                        1362,
                        6096,
                        7204
                    ],
                    "errorMessage": "check self.pending_proposals exists"
                },
                {
                    "pc": [
                        7050
                    ],
                    "errorMessage": "check self.proposal_commitment_bps exists"
                },
                {
                    "pc": [
                        1130,
                        1147,
                        1187,
                        2050,
                        2141,
                        6062,
                        7321
                    ],
                    "errorMessage": "check self.proposer_box entry exists"
                },
                {
                    "pc": [
                        2007,
                        7032
                    ],
                    "errorMessage": "check self.proposer_fee exists"
                },
                {
                    "pc": [
                        7165
                    ],
                    "errorMessage": "check self.quorum_large exists"
                },
                {
                    "pc": [
                        7159
                    ],
                    "errorMessage": "check self.quorum_medium exists"
                },
                {
                    "pc": [
                        7153
                    ],
                    "errorMessage": "check self.quorum_small exists"
                },
                {
                    "pc": [
                        1866
                    ],
                    "errorMessage": "check self.request_box entry exists"
                },
                {
                    "pc": [
                        1824
                    ],
                    "errorMessage": "check self.request_id exists"
                },
                {
                    "pc": [
                        7131
                    ],
                    "errorMessage": "check self.voting_duration_large exists"
                },
                {
                    "pc": [
                        7125
                    ],
                    "errorMessage": "check self.voting_duration_medium exists"
                },
                {
                    "pc": [
                        7119
                    ],
                    "errorMessage": "check self.voting_duration_small exists"
                },
                {
                    "pc": [
                        7137
                    ],
                    "errorMessage": "check self.voting_duration_xlarge exists"
                },
                {
                    "pc": [
                        7188
                    ],
                    "errorMessage": "check self.weighted_quorum_large exists"
                },
                {
                    "pc": [
                        7182
                    ],
                    "errorMessage": "check self.weighted_quorum_medium exists"
                },
                {
                    "pc": [
                        7176
                    ],
                    "errorMessage": "check self.weighted_quorum_small exists"
                },
                {
                    "pc": [
                        1753,
                        1937,
                        1962,
                        6133,
                        7311
                    ],
                    "errorMessage": "check self.xgov_box entry exists"
                },
                {
                    "pc": [
                        7001
                    ],
                    "errorMessage": "check self.xgov_council exists"
                },
                {
                    "pc": [
                        6568,
                        7021
                    ],
                    "errorMessage": "check self.xgov_daemon exists"
                },
                {
                    "pc": [
                        1112,
                        7026
                    ],
                    "errorMessage": "check self.xgov_fee exists"
                },
                {
                    "pc": [
                        1043,
                        6902,
                        6953,
                        6991
                    ],
                    "errorMessage": "check self.xgov_manager exists"
                },
                {
                    "pc": [
                        6361,
                        6996
                    ],
                    "errorMessage": "check self.xgov_payor exists"
                },
                {
                    "pc": [
                        1052,
                        7006
                    ],
                    "errorMessage": "check self.xgov_subscriber exists"
                },
                {
                    "pc": [
                        1724,
                        1783,
                        1888
                    ],
                    "errorMessage": "check self.xgovs exists"
                },
                {
                    "pc": [
                        558,
                        649,
                        718,
                        797,
                        837
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "entropy": {
            "type": "AVMBytes"
        }
    }
}