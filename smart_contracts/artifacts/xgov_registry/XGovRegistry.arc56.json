{
    "name": "XGovRegistry",
    "structs": {
        "ProposerBoxValue": [
            {
                "name": "active_proposal",
                "type": "bool"
            },
            {
                "name": "kyc_status",
                "type": "bool"
            },
            {
                "name": "kyc_expiring",
                "type": "uint64"
            }
        ],
        "TypedGlobalState": [
            {
                "name": "paused_registry",
                "type": "bool"
            },
            {
                "name": "paused_proposals",
                "type": "bool"
            },
            {
                "name": "xgov_manager",
                "type": "address"
            },
            {
                "name": "xgov_payor",
                "type": "address"
            },
            {
                "name": "xgov_council",
                "type": "address"
            },
            {
                "name": "xgov_subscriber",
                "type": "address"
            },
            {
                "name": "kyc_provider",
                "type": "address"
            },
            {
                "name": "committee_manager",
                "type": "address"
            },
            {
                "name": "xgov_daemon",
                "type": "address"
            },
            {
                "name": "xgov_fee",
                "type": "uint64"
            },
            {
                "name": "proposer_fee",
                "type": "uint64"
            },
            {
                "name": "open_proposal_fee",
                "type": "uint64"
            },
            {
                "name": "daemon_ops_funding_bps",
                "type": "uint64"
            },
            {
                "name": "proposal_commitment_bps",
                "type": "uint64"
            },
            {
                "name": "min_requested_amount",
                "type": "uint64"
            },
            {
                "name": "max_requested_amount",
                "type": "uint64[3]"
            },
            {
                "name": "discussion_duration",
                "type": "uint64[4]"
            },
            {
                "name": "voting_duration",
                "type": "uint64[4]"
            },
            {
                "name": "quorum",
                "type": "uint64[3]"
            },
            {
                "name": "weighted_quorum",
                "type": "uint64[3]"
            },
            {
                "name": "outstanding_funds",
                "type": "uint64"
            },
            {
                "name": "pending_proposals",
                "type": "uint64"
            },
            {
                "name": "committee_id",
                "type": "byte[32]"
            },
            {
                "name": "committee_members",
                "type": "uint64"
            },
            {
                "name": "committee_votes",
                "type": "uint64"
            }
        ],
        "VoterBox": [
            {
                "name": "votes",
                "type": "uint64"
            },
            {
                "name": "voted",
                "type": "bool"
            }
        ],
        "XGovBoxValue": [
            {
                "name": "voting_address",
                "type": "address"
            },
            {
                "name": "voted_proposals",
                "type": "uint64"
            },
            {
                "name": "last_vote_timestamp",
                "type": "uint64"
            },
            {
                "name": "subscription_round",
                "type": "uint64"
            }
        ],
        "XGovRegistryConfig": [
            {
                "name": "xgov_fee",
                "type": "uint64"
            },
            {
                "name": "proposer_fee",
                "type": "uint64"
            },
            {
                "name": "open_proposal_fee",
                "type": "uint64"
            },
            {
                "name": "daemon_ops_funding_bps",
                "type": "uint64"
            },
            {
                "name": "proposal_commitment_bps",
                "type": "uint64"
            },
            {
                "name": "min_requested_amount",
                "type": "uint64"
            },
            {
                "name": "max_requested_amount",
                "type": "uint64[3]"
            },
            {
                "name": "discussion_duration",
                "type": "uint64[4]"
            },
            {
                "name": "voting_duration",
                "type": "uint64[4]"
            },
            {
                "name": "quorum",
                "type": "uint64[3]"
            },
            {
                "name": "weighted_quorum",
                "type": "uint64[3]"
            }
        ],
        "XGovSubscribeRequestBoxValue": [
            {
                "name": "xgov_addr",
                "type": "address"
            },
            {
                "name": "owner_addr",
                "type": "address"
            },
            {
                "name": "relation_type",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Create the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "init_proposal_contract",
            "args": [
                {
                    "type": "uint64",
                    "name": "size",
                    "desc": "The size of the Proposal Approval Program contract"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initializes the Proposal Approval Program contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_proposal_contract",
            "args": [
                {
                    "type": "uint64",
                    "name": "offset",
                    "desc": "The offset in the Proposal Approval Program contract"
                },
                {
                    "type": "byte[]",
                    "name": "data",
                    "desc": "The data to load into the Proposal Approval Program contract"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Loads the Proposal Approval Program contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_proposal_contract_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes the Proposal Approval Program contract box.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pause_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pauses the xGov Registry non-administrative methods.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pause_proposals",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pauses the creation of new Proposals.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resume_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resumes the xGov Registry non-administrative methods.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resume_proposals",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resumes the creation of new Proposals.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_manager",
            "args": [
                {
                    "type": "address",
                    "name": "manager",
                    "desc": "Address of the new xGov Manager"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Manager.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_payor",
            "args": [
                {
                    "type": "address",
                    "name": "payor",
                    "desc": "Address of the new xGov Payor"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Payor.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_council",
            "args": [
                {
                    "type": "address",
                    "name": "council",
                    "desc": "Address of the new xGov Council"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Council.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_subscriber",
            "args": [
                {
                    "type": "address",
                    "name": "subscriber",
                    "desc": "Address of the new xGov Subscriber"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Subscriber.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_kyc_provider",
            "args": [
                {
                    "type": "address",
                    "name": "provider",
                    "desc": "Address of the new KYC Provider"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the KYC provider.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_committee_manager",
            "args": [
                {
                    "type": "address",
                    "name": "manager",
                    "desc": "Address of the new xGov Manager"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the Committee Manager.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_daemon",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_daemon",
                    "desc": "Address of the new xGov Daemon"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Daemon.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "config_xgov_registry",
            "args": [
                {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3])",
                    "struct": "XGovRegistryConfig",
                    "name": "config",
                    "desc": "Configuration class containing the field data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the configuration of the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_xgov_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "desc": "Updates the xGov Registry contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "subscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "voting_address",
                    "desc": "The address of the voting account for the xGov"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the xGov fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Subscribes the sender to being an xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unsubscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov to unsubscribe"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unsubscribes the designated address from being an xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "request_subscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov"
                },
                {
                    "type": "address",
                    "name": "owner_address",
                    "desc": "The address of the xGov Address owner/controller (Voting Address)"
                },
                {
                    "type": "uint64",
                    "name": "relation_type",
                    "desc": "The type of relationship enum"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the xGov fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Requests to subscribe to the xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "approve_subscribe_xgov",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the request to approve"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Approves a subscribe request to xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "reject_subscribe_xgov",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the request to reject"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Rejects a subscribe request to xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_voting_account",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The xGov address delegating voting power"
                },
                {
                    "type": "address",
                    "name": "voting_address",
                    "desc": "The voting account address to delegate voting power to"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the Voting Address for the xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "subscribe_proposer",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the Proposer fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Subscribes the sender to being a Proposer.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_proposer_kyc",
            "args": [
                {
                    "type": "address",
                    "name": "proposer",
                    "desc": "The address of the Proposer"
                },
                {
                    "type": "bool",
                    "name": "kyc_status",
                    "desc": "The new status of the Proposer"
                },
                {
                    "type": "uint64",
                    "name": "kyc_expiring",
                    "desc": "The expiration date as a unix timestamp of the time the KYC expires"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets a proposer's KYC status.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "declare_committee",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "committee_id",
                    "desc": "The ID of the xGov Committee"
                },
                {
                    "type": "uint64",
                    "name": "size",
                    "desc": "The size of the xGov Committee"
                },
                {
                    "type": "uint64",
                    "name": "votes",
                    "desc": "The voting power of the xGov Committee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Committee in charge.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "open_proposal",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "payment for covering the proposal fee (includes child contract MBR)"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates a new Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app being voted on"
                },
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "(arc4.Address): The address of the xGov being voted on behalf of"
                },
                {
                    "type": "uint64",
                    "name": "approval_votes",
                    "desc": "(arc4.UInt64): The number of approvals votes allocated"
                },
                {
                    "type": "uint64",
                    "name": "rejection_votes",
                    "desc": "(arc4.UInt64): The number of rejections votes allocated"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Votes on a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pay_grant_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the approved Proposal"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Disburses the funds for an approved Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "finalize_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app to finalize"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Finalize a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "drop_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app to drop"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Drops a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit_funds",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "the deposit transaction"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposits xGov program funds into the xGov Treasury (xGov Registry Account).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_funds",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "the amount to remove"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove xGov program funds from the xGov Treasury (xGov Registry Account).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_balance",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw outstanding Algos, excluding MBR and outstanding funds, from the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_state",
            "args": [],
            "returns": {
                "type": "(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)",
                "struct": "TypedGlobalState"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov Registry state.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_xgov_box",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov"
                }
            ],
            "returns": {
                "type": "(address,uint64,uint64,uint64)",
                "struct": "XGovBoxValue",
                "desc": "The xGov box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov box for the given address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_proposer_box",
            "args": [
                {
                    "type": "address",
                    "name": "proposer_address",
                    "desc": "The address of the Proposer"
                }
            ],
            "returns": {
                "type": "(bool,bool,uint64)",
                "struct": "ProposerBoxValue",
                "desc": "The Proposer box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the Proposer box for the given address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_request_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the subscribe request"
                }
            ],
            "returns": {
                "type": "(address,address,uint64)",
                "struct": "XGovSubscribeRequestBoxValue",
                "desc": "The subscribe request box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov subscribe request box for the given request ID.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 36,
                "bytes": 28
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "paused_registry": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGF1c2VkX3JlZ2lzdHJ5"
                },
                "paused_proposals": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGF1c2VkX3Byb3Bvc2Fscw=="
                },
                "xgov_manager": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9tYW5hZ2Vy"
                },
                "xgov_subscriber": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9zdWJzY3JpYmVy"
                },
                "xgov_payor": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9wYXlvcg=="
                },
                "xgov_council": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9jb3VuY2ls"
                },
                "kyc_provider": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "a3ljX3Byb3ZpZGVy"
                },
                "committee_manager": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "Y29tbWl0dGVlX21hbmFnZXI="
                },
                "xgov_daemon": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9kYWVtb24="
                },
                "xgov_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "eGdvdl9mZWU="
                },
                "xgovs": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "eGdvdnM="
                },
                "proposer_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cHJvcG9zZXJfZmVl"
                },
                "open_proposal_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "b3Blbl9wcm9wb3NhbF9mZWU="
                },
                "daemon_ops_funding_bps": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGFlbW9uX29wZXJhdGlvbl9mdW5kaW5nX2Jwcw=="
                },
                "proposal_commitment_bps": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cHJvcG9zYWxfY29tbWl0bWVudF9icHM="
                },
                "min_requested_amount": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWluX3JlcXVlc3RlZF9hbW91bnQ="
                },
                "max_requested_amount_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGw="
                },
                "max_requested_amount_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVt"
                },
                "max_requested_amount_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2U="
                },
                "discussion_duration_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9zbWFsbA=="
                },
                "discussion_duration_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9tZWRpdW0="
                },
                "discussion_duration_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9sYXJnZQ=="
                },
                "discussion_duration_xlarge": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl94bGFyZ2U="
                },
                "voting_duration_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX3NtYWxs"
                },
                "voting_duration_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX21lZGl1bQ=="
                },
                "voting_duration_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX2xhcmdl"
                },
                "voting_duration_xlarge": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX3hsYXJnZQ=="
                },
                "quorum_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX3NtYWxs"
                },
                "quorum_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX21lZGl1bQ=="
                },
                "quorum_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX2xhcmdl"
                },
                "weighted_quorum_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX3NtYWxs"
                },
                "weighted_quorum_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX21lZGl1bQ=="
                },
                "weighted_quorum_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX2xhcmdl"
                },
                "outstanding_funds": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "b3V0c3RhbmRpbmdfZnVuZHM="
                },
                "committee_id": {
                    "keyType": "AVMBytes",
                    "valueType": "byte[32]",
                    "key": "Y29tbWl0dGVlX2lk"
                },
                "committee_members": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWl0dGVlX21lbWJlcnM="
                },
                "committee_votes": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWl0dGVlX3ZvdGVz"
                },
                "pending_proposals": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGVuZGluZ19wcm9wb3NhbHM="
                },
                "request_id": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cmVxdWVzdF9pZA=="
                },
                "max_committee_size": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X2NvbW1pdHRlZV9zaXpl"
                }
            },
            "local": {},
            "box": {
                "proposal_approval_program": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "key": "cGE="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "xgov_box": {
                    "keyType": "address",
                    "valueType": "XGovBoxValue",
                    "prefix": "eA=="
                },
                "request_box": {
                    "keyType": "uint64",
                    "valueType": "XGovSubscribeRequestBoxValue",
                    "prefix": "cg=="
                },
                "proposer_box": {
                    "keyType": "address",
                    "valueType": "ProposerBoxValue",
                    "prefix": "cA=="
                },
                "voters": {
                    "keyType": "address",
                    "valueType": "VoterBox",
                    "prefix": "Vg=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        3492
                    ],
                    "errorMessage": "Address length is 32 bytes"
                },
                {
                    "pc": [
                        1481
                    ],
                    "errorMessage": "Already a proposer"
                },
                {
                    "pc": [
                        1127,
                        1279
                    ],
                    "errorMessage": "Already an xGov"
                },
                {
                    "pc": [
                        786
                    ],
                    "errorMessage": "Cannot perform operation with pending proposals"
                },
                {
                    "pc": [
                        1625
                    ],
                    "errorMessage": "Committee size is too large"
                },
                {
                    "pc": [
                        1664
                    ],
                    "errorMessage": "Creation of proposals is paused"
                },
                {
                    "pc": [
                        1931
                    ],
                    "errorMessage": "Empty Committee ID"
                },
                {
                    "pc": [
                        870
                    ],
                    "errorMessage": "Inconsistent requested amount config"
                },
                {
                    "pc": [
                        1705,
                        2944,
                        2982
                    ],
                    "errorMessage": "Insufficient fee"
                },
                {
                    "pc": [
                        2935,
                        3000
                    ],
                    "errorMessage": "Insufficient funds"
                },
                {
                    "pc": [
                        2388
                    ],
                    "errorMessage": "Insufficient treasury funds"
                },
                {
                    "pc": [
                        1696,
                        2379
                    ],
                    "errorMessage": "Invalid KYC"
                },
                {
                    "pc": [
                        899
                    ],
                    "errorMessage": "Invalid open proposal fee"
                },
                {
                    "pc": [
                        1131,
                        1283
                    ],
                    "errorMessage": "Invalid payment"
                },
                {
                    "pc": [
                        2063,
                        2339,
                        2571,
                        2764,
                        3438
                    ],
                    "errorMessage": "Invalid proposal"
                },
                {
                    "pc": [
                        820
                    ],
                    "errorMessage": "Invalid proposer fee"
                },
                {
                    "pc": [
                        808
                    ],
                    "errorMessage": "Invalid xGov fee"
                },
                {
                    "pc": [
                        1932,
                        2296,
                        2718
                    ],
                    "errorMessage": "Missing Config"
                },
                {
                    "pc": [
                        2365,
                        2545,
                        3487
                    ],
                    "errorMessage": "Missing key in state"
                },
                {
                    "pc": [
                        1730
                    ],
                    "errorMessage": "Missing proposal approval program"
                },
                {
                    "pc": [
                        2106
                    ],
                    "errorMessage": "Must be voting address"
                },
                {
                    "pc": [
                        202
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        497
                    ],
                    "errorMessage": "OnCompletion must be UpdateApplication && can only call when not creating"
                },
                {
                    "pc": [
                        1690
                    ],
                    "errorMessage": "Proposer already has an active proposal"
                },
                {
                    "pc": [
                        1557
                    ],
                    "errorMessage": "Proposer does not exist"
                },
                {
                    "pc": [
                        1117,
                        1168,
                        1269,
                        1413,
                        1472,
                        1657,
                        2055,
                        2757
                    ],
                    "errorMessage": "Registry's non-admin methods are paused"
                },
                {
                    "pc": [
                        2717
                    ],
                    "errorMessage": "There are voters assigned to this proposal"
                },
                {
                    "pc": [
                        522,
                        575,
                        589,
                        599,
                        608,
                        618,
                        627,
                        645,
                        663,
                        681,
                        699,
                        717,
                        735,
                        753,
                        779,
                        1091,
                        1181,
                        1202,
                        1263,
                        1325,
                        1378,
                        1423,
                        1445,
                        1548,
                        1614,
                        1672,
                        2073,
                        2333,
                        2564,
                        2772,
                        2928,
                        2973
                    ],
                    "errorMessage": "Unauthorized"
                },
                {
                    "pc": [
                        1928,
                        1938,
                        2291,
                        2303,
                        2497,
                        2504,
                        2716,
                        2725,
                        2860,
                        2867
                    ],
                    "errorMessage": "Unknown error"
                },
                {
                    "pc": [
                        2294
                    ],
                    "errorMessage": "Voter already voted"
                },
                {
                    "pc": [
                        2295
                    ],
                    "errorMessage": "Voter not found"
                },
                {
                    "pc": [
                        2293
                    ],
                    "errorMessage": "Votes exceeded"
                },
                {
                    "pc": [
                        2292
                    ],
                    "errorMessage": "Voting Period Expired"
                },
                {
                    "pc": [
                        1930
                    ],
                    "errorMessage": "Wrong Committee Members"
                },
                {
                    "pc": [
                        1929
                    ],
                    "errorMessage": "Wrong Committee Votes"
                },
                {
                    "pc": [
                        10
                    ],
                    "errorMessage": "Wrong Global Bytes allocation"
                },
                {
                    "pc": [
                        16
                    ],
                    "errorMessage": "Wrong Global UInts allocation"
                },
                {
                    "pc": [
                        20
                    ],
                    "errorMessage": "Wrong Local Bytes allocation"
                },
                {
                    "pc": [
                        24
                    ],
                    "errorMessage": "Wrong Local UInts allocation"
                },
                {
                    "pc": [
                        2297,
                        2498,
                        2719,
                        2861
                    ],
                    "errorMessage": "Wrong Proposal Status or finalized"
                },
                {
                    "pc": [
                        1488,
                        1712,
                        2902
                    ],
                    "errorMessage": "Wrong Receiver"
                },
                {
                    "pc": [
                        1497,
                        1721
                    ],
                    "errorMessage": "Wrong payment amount"
                },
                {
                    "pc": [
                        2373
                    ],
                    "errorMessage": "Wrong proposer"
                },
                {
                    "pc": [
                        1726,
                        1943,
                        2987,
                        2992
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1966,
                        3466
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        1806,
                        2158,
                        2452,
                        2616,
                        2815
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        3268
                    ],
                    "errorMessage": "check self.committee_id exists"
                },
                {
                    "pc": [
                        1612,
                        3074
                    ],
                    "errorMessage": "check self.committee_manager exists"
                },
                {
                    "pc": [
                        3273
                    ],
                    "errorMessage": "check self.committee_members exists"
                },
                {
                    "pc": [
                        3279
                    ],
                    "errorMessage": "check self.committee_votes exists"
                },
                {
                    "pc": [
                        3102
                    ],
                    "errorMessage": "check self.daemon_ops_funding_bps exists"
                },
                {
                    "pc": [
                        3155
                    ],
                    "errorMessage": "check self.discussion_duration_large exists"
                },
                {
                    "pc": [
                        3149
                    ],
                    "errorMessage": "check self.discussion_duration_medium exists"
                },
                {
                    "pc": [
                        3143
                    ],
                    "errorMessage": "check self.discussion_duration_small exists"
                },
                {
                    "pc": [
                        3161
                    ],
                    "errorMessage": "check self.discussion_duration_xlarge exists"
                },
                {
                    "pc": [
                        1546,
                        3069
                    ],
                    "errorMessage": "check self.kyc_provider exists"
                },
                {
                    "pc": [
                        1621
                    ],
                    "errorMessage": "check self.max_committee_size exists"
                },
                {
                    "pc": [
                        3132
                    ],
                    "errorMessage": "check self.max_requested_amount_large exists"
                },
                {
                    "pc": [
                        3126
                    ],
                    "errorMessage": "check self.max_requested_amount_medium exists"
                },
                {
                    "pc": [
                        3120
                    ],
                    "errorMessage": "check self.max_requested_amount_small exists"
                },
                {
                    "pc": [
                        3114
                    ],
                    "errorMessage": "check self.min_requested_amount exists"
                },
                {
                    "pc": [
                        1719,
                        1971,
                        3096
                    ],
                    "errorMessage": "check self.open_proposal_fee exists"
                },
                {
                    "pc": [
                        2383,
                        2906,
                        2932,
                        2997,
                        3256
                    ],
                    "errorMessage": "check self.outstanding_funds exists"
                },
                {
                    "pc": [
                        1662,
                        3036
                    ],
                    "errorMessage": "check self.paused_proposals exists"
                },
                {
                    "pc": [
                        1115,
                        1166,
                        1267,
                        1411,
                        1470,
                        1655,
                        2053,
                        2755,
                        3023
                    ],
                    "errorMessage": "check self.paused_registry exists"
                },
                {
                    "pc": [
                        784,
                        1993,
                        3262,
                        3573
                    ],
                    "errorMessage": "check self.pending_proposals exists"
                },
                {
                    "pc": [
                        3108
                    ],
                    "errorMessage": "check self.proposal_commitment_bps exists"
                },
                {
                    "pc": [
                        1678,
                        3397,
                        3533,
                        3550
                    ],
                    "errorMessage": "check self.proposer_box entry exists"
                },
                {
                    "pc": [
                        1495,
                        3090
                    ],
                    "errorMessage": "check self.proposer_fee exists"
                },
                {
                    "pc": [
                        3223
                    ],
                    "errorMessage": "check self.quorum_large exists"
                },
                {
                    "pc": [
                        3217
                    ],
                    "errorMessage": "check self.quorum_medium exists"
                },
                {
                    "pc": [
                        3211
                    ],
                    "errorMessage": "check self.quorum_small exists"
                },
                {
                    "pc": [
                        1334,
                        3419
                    ],
                    "errorMessage": "check self.request_box entry exists"
                },
                {
                    "pc": [
                        1288
                    ],
                    "errorMessage": "check self.request_id exists"
                },
                {
                    "pc": [
                        3189
                    ],
                    "errorMessage": "check self.voting_duration_large exists"
                },
                {
                    "pc": [
                        3183
                    ],
                    "errorMessage": "check self.voting_duration_medium exists"
                },
                {
                    "pc": [
                        3177
                    ],
                    "errorMessage": "check self.voting_duration_small exists"
                },
                {
                    "pc": [
                        3195
                    ],
                    "errorMessage": "check self.voting_duration_xlarge exists"
                },
                {
                    "pc": [
                        3246
                    ],
                    "errorMessage": "check self.weighted_quorum_large exists"
                },
                {
                    "pc": [
                        3240
                    ],
                    "errorMessage": "check self.weighted_quorum_medium exists"
                },
                {
                    "pc": [
                        3234
                    ],
                    "errorMessage": "check self.weighted_quorum_small exists"
                },
                {
                    "pc": [
                        3378
                    ],
                    "errorMessage": "check self.xgov_box entry exists"
                },
                {
                    "pc": [
                        3059
                    ],
                    "errorMessage": "check self.xgov_council exists"
                },
                {
                    "pc": [
                        2562,
                        3079
                    ],
                    "errorMessage": "check self.xgov_daemon exists"
                },
                {
                    "pc": [
                        3084,
                        3515
                    ],
                    "errorMessage": "check self.xgov_fee exists"
                },
                {
                    "pc": [
                        2956,
                        3006,
                        3049,
                        3447
                    ],
                    "errorMessage": "check self.xgov_manager exists"
                },
                {
                    "pc": [
                        2331,
                        3054
                    ],
                    "errorMessage": "check self.xgov_payor exists"
                },
                {
                    "pc": [
                        3064,
                        3456
                    ],
                    "errorMessage": "check self.xgov_subscriber exists"
                },
                {
                    "pc": [
                        1146,
                        1211,
                        1356
                    ],
                    "errorMessage": "check self.xgovs exists"
                },
                {
                    "pc": [
                        560,
                        1792,
                        2144,
                        2438,
                        2602,
                        2801
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        1531
                    ],
                    "errorMessage": "invalid number of bytes for arc4.bool"
                },
                {
                    "pc": [
                        568,
                        1799,
                        2151,
                        2445,
                        2609,
                        2808
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        641,
                        659,
                        677,
                        695,
                        713,
                        731,
                        749,
                        1101,
                        1162,
                        1231,
                        1239,
                        1397,
                        1407,
                        1523,
                        1589,
                        2033,
                        3372,
                        3392
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        518,
                        554,
                        1247,
                        1321,
                        1374,
                        1539,
                        1597,
                        1605,
                        2025,
                        2041,
                        2049,
                        2324,
                        2529,
                        2751,
                        2923,
                        3411,
                        3433
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        775
                    ],
                    "errorMessage": "invalid number of bytes for smart_contracts.common.abi_types.XGovRegistryConfig"
                },
                {
                    "pc": [
                        1111,
                        1257,
                        1466,
                        1651,
                        2895
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAAEIIOSWASYyD3BhdXNlZF9yZWdpc3RyeQFwBBUffHURb3V0c3RhbmRpbmdfZnVuZHMBeAx4Z292X21hbmFnZXIFeGdvdnMRcGVuZGluZ19wcm9wb3NhbHMCcGEBABBwYXVzZWRfcHJvcG9zYWxzEW9wZW5fcHJvcG9zYWxfZmVlBEVSUjoPeGdvdl9zdWJzY3JpYmVyCnhnb3ZfcGF5b3IMa3ljX3Byb3ZpZGVyEWNvbW1pdHRlZV9tYW5hZ2VyC3hnb3ZfZGFlbW9uCHhnb3ZfZmVlDHByb3Bvc2VyX2ZlZQFyIldyb25nIFByb3Bvc2FsIFN0YXR1cyBvciBmaW5hbGl6ZWQMeGdvdl9jb3VuY2lsHGRhZW1vbl9vcGVyYXRpb25fZnVuZGluZ19icHMXcHJvcG9zYWxfY29tbWl0bWVudF9icHMUbWluX3JlcXVlc3RlZF9hbW91bnQabWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGwbbWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVtGm1heF9yZXF1ZXN0ZWRfYW1vdW50X2xhcmdlGWRpc2N1c3Npb25fZHVyYXRpb25fc21hbGwaZGlzY3Vzc2lvbl9kdXJhdGlvbl9tZWRpdW0ZZGlzY3Vzc2lvbl9kdXJhdGlvbl9sYXJnZRpkaXNjdXNzaW9uX2R1cmF0aW9uX3hsYXJnZRV2b3RpbmdfZHVyYXRpb25fc21hbGwWdm90aW5nX2R1cmF0aW9uX21lZGl1bRV2b3RpbmdfZHVyYXRpb25fbGFyZ2UWdm90aW5nX2R1cmF0aW9uX3hsYXJnZQxxdW9ydW1fc21hbGwNcXVvcnVtX21lZGl1bQxxdW9ydW1fbGFyZ2UVd2VpZ2h0ZWRfcXVvcnVtX3NtYWxsFndlaWdodGVkX3F1b3J1bV9tZWRpdW0Vd2VpZ2h0ZWRfcXVvcnVtX2xhcmdlEWNvbW1pdHRlZV9tZW1iZXJzD2NvbW1pdHRlZV92b3RlcwpyZXF1ZXN0X2lkEm1heF9jb21taXR0ZWVfc2l6ZQ5NaXNzaW5nIENvbmZpZwxjb21taXR0ZWVfaWQAMRhAALUxNYEcEkQxNIEkEkQxNxREMTYURCgiZycKImcnBTIDZycNMgNnJw4yA2cnFjIDZycPMgNnJxAyA2cnETIDZycS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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {
        "entropy": {
            "type": "AVMBytes"
        }
    }
}