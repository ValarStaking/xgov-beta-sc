{
    "name": "XGovRegistry",
    "structs": {
        "ProposerBoxValue": [
            {
                "name": "active_proposal",
                "type": "bool"
            },
            {
                "name": "kyc_status",
                "type": "bool"
            },
            {
                "name": "kyc_expiring",
                "type": "uint64"
            }
        ],
        "TypedGlobalState": [
            {
                "name": "paused_registry",
                "type": "bool"
            },
            {
                "name": "paused_proposals",
                "type": "bool"
            },
            {
                "name": "xgov_manager",
                "type": "address"
            },
            {
                "name": "xgov_payor",
                "type": "address"
            },
            {
                "name": "xgov_council",
                "type": "address"
            },
            {
                "name": "xgov_subscriber",
                "type": "address"
            },
            {
                "name": "kyc_provider",
                "type": "address"
            },
            {
                "name": "committee_manager",
                "type": "address"
            },
            {
                "name": "xgov_daemon",
                "type": "address"
            },
            {
                "name": "xgov_fee",
                "type": "uint64"
            },
            {
                "name": "proposer_fee",
                "type": "uint64"
            },
            {
                "name": "open_proposal_fee",
                "type": "uint64"
            },
            {
                "name": "daemon_ops_funding_bps",
                "type": "uint64"
            },
            {
                "name": "proposal_commitment_bps",
                "type": "uint64"
            },
            {
                "name": "min_requested_amount",
                "type": "uint64"
            },
            {
                "name": "max_requested_amount",
                "type": "uint64[3]"
            },
            {
                "name": "discussion_duration",
                "type": "uint64[4]"
            },
            {
                "name": "voting_duration",
                "type": "uint64[4]"
            },
            {
                "name": "quorum",
                "type": "uint64[3]"
            },
            {
                "name": "weighted_quorum",
                "type": "uint64[3]"
            },
            {
                "name": "outstanding_funds",
                "type": "uint64"
            },
            {
                "name": "pending_proposals",
                "type": "uint64"
            },
            {
                "name": "committee_id",
                "type": "byte[32]"
            },
            {
                "name": "committee_members",
                "type": "uint64"
            },
            {
                "name": "committee_votes",
                "type": "uint64"
            }
        ],
        "VoterBox": [
            {
                "name": "votes",
                "type": "uint64"
            },
            {
                "name": "voted",
                "type": "bool"
            }
        ],
        "XGovBoxValue": [
            {
                "name": "voting_address",
                "type": "address"
            },
            {
                "name": "voted_proposals",
                "type": "uint64"
            },
            {
                "name": "last_vote_timestamp",
                "type": "uint64"
            },
            {
                "name": "subscription_round",
                "type": "uint64"
            }
        ],
        "XGovRegistryConfig": [
            {
                "name": "xgov_fee",
                "type": "uint64"
            },
            {
                "name": "proposer_fee",
                "type": "uint64"
            },
            {
                "name": "open_proposal_fee",
                "type": "uint64"
            },
            {
                "name": "daemon_ops_funding_bps",
                "type": "uint64"
            },
            {
                "name": "proposal_commitment_bps",
                "type": "uint64"
            },
            {
                "name": "min_requested_amount",
                "type": "uint64"
            },
            {
                "name": "max_requested_amount",
                "type": "uint64[3]"
            },
            {
                "name": "discussion_duration",
                "type": "uint64[4]"
            },
            {
                "name": "voting_duration",
                "type": "uint64[4]"
            },
            {
                "name": "quorum",
                "type": "uint64[3]"
            },
            {
                "name": "weighted_quorum",
                "type": "uint64[3]"
            }
        ],
        "XGovSubscribeRequestBoxValue": [
            {
                "name": "xgov_addr",
                "type": "address"
            },
            {
                "name": "owner_addr",
                "type": "address"
            },
            {
                "name": "relation_type",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Create the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "init_proposal_contract",
            "args": [
                {
                    "type": "uint64",
                    "name": "size",
                    "desc": "The size of the Proposal Approval Program contract"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initializes the Proposal Approval Program contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_proposal_contract",
            "args": [
                {
                    "type": "uint64",
                    "name": "offset",
                    "desc": "The offset in the Proposal Approval Program contract"
                },
                {
                    "type": "byte[]",
                    "name": "data",
                    "desc": "The data to load into the Proposal Approval Program contract"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Loads the Proposal Approval Program contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_proposal_contract_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes the Proposal Approval Program contract box.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pause_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pauses the xGov Registry non-administrative methods.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pause_proposals",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pauses the creation of new Proposals.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resume_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resumes the xGov Registry non-administrative methods.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resume_proposals",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resumes the creation of new Proposals.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_manager",
            "args": [
                {
                    "type": "address",
                    "name": "manager",
                    "desc": "Address of the new xGov Manager"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Manager.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_payor",
            "args": [
                {
                    "type": "address",
                    "name": "payor",
                    "desc": "Address of the new xGov Payor"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Payor.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_council",
            "args": [
                {
                    "type": "address",
                    "name": "council",
                    "desc": "Address of the new xGov Council"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Council.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_subscriber",
            "args": [
                {
                    "type": "address",
                    "name": "subscriber",
                    "desc": "Address of the new xGov Subscriber"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Subscriber.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_kyc_provider",
            "args": [
                {
                    "type": "address",
                    "name": "provider",
                    "desc": "Address of the new KYC Provider"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the KYC provider.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_committee_manager",
            "args": [
                {
                    "type": "address",
                    "name": "manager",
                    "desc": "Address of the new xGov Manager"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the Committee Manager.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_daemon",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_daemon",
                    "desc": "Address of the new xGov Daemon"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Daemon.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "config_xgov_registry",
            "args": [
                {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3])",
                    "struct": "XGovRegistryConfig",
                    "name": "config",
                    "desc": "Configuration class containing the field data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the configuration of the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_xgov_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "desc": "Updates the xGov Registry contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "subscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "voting_address",
                    "desc": "The address of the voting account for the xGov"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the xGov fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Subscribes the sender to being an xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unsubscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov to unsubscribe"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unsubscribes the designated address from being an xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "request_subscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov"
                },
                {
                    "type": "address",
                    "name": "owner_address",
                    "desc": "The address of the xGov Address owner/controller (Voting Address)"
                },
                {
                    "type": "uint64",
                    "name": "relation_type",
                    "desc": "The type of relationship enum"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the xGov fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Requests to subscribe to the xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "approve_subscribe_xgov",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the request to approve"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Approves a subscribe request to xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "reject_subscribe_xgov",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the request to reject"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Rejects a subscribe request to xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_voting_account",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The xGov address delegating voting power"
                },
                {
                    "type": "address",
                    "name": "voting_address",
                    "desc": "The voting account address to delegate voting power to"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the Voting Address for the xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "subscribe_proposer",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the Proposer fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Subscribes the sender to being a Proposer.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_proposer_kyc",
            "args": [
                {
                    "type": "address",
                    "name": "proposer",
                    "desc": "The address of the Proposer"
                },
                {
                    "type": "bool",
                    "name": "kyc_status",
                    "desc": "The new status of the Proposer"
                },
                {
                    "type": "uint64",
                    "name": "kyc_expiring",
                    "desc": "The expiration date as a unix timestamp of the time the KYC expires"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets a proposer's KYC status.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "declare_committee",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "committee_id",
                    "desc": "The ID of the xGov Committee"
                },
                {
                    "type": "uint64",
                    "name": "size",
                    "desc": "The size of the xGov Committee"
                },
                {
                    "type": "uint64",
                    "name": "votes",
                    "desc": "The voting power of the xGov Committee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Committee in charge.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "open_proposal",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "payment for covering the proposal fee (includes child contract MBR)"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates a new Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app being voted on"
                },
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "(arc4.Address): The address of the xGov being voted on behalf of"
                },
                {
                    "type": "uint64",
                    "name": "approval_votes",
                    "desc": "(arc4.UInt64): The number of approvals votes allocated"
                },
                {
                    "type": "uint64",
                    "name": "rejection_votes",
                    "desc": "(arc4.UInt64): The number of rejections votes allocated"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Votes on a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pay_grant_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the approved Proposal"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Disburses the funds for an approved Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "finalize_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app to finalize"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Finalize a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "drop_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app to drop"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Drops a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit_funds",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "the deposit transaction"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposits xGov program funds into the xGov Treasury (xGov Registry Account).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_funds",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "the amount to remove"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove xGov program funds from the xGov Treasury (xGov Registry Account).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_balance",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw outstanding Algos, excluding MBR and outstanding funds, from the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_state",
            "args": [],
            "returns": {
                "type": "(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)",
                "struct": "TypedGlobalState"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov Registry state.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_xgov_box",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov"
                }
            ],
            "returns": {
                "type": "(address,uint64,uint64,uint64)",
                "struct": "XGovBoxValue",
                "desc": "The xGov box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov box for the given address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_proposer_box",
            "args": [
                {
                    "type": "address",
                    "name": "proposer_address",
                    "desc": "The address of the Proposer"
                }
            ],
            "returns": {
                "type": "(bool,bool,uint64)",
                "struct": "ProposerBoxValue",
                "desc": "The Proposer box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the Proposer box for the given address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_request_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the subscribe request"
                }
            ],
            "returns": {
                "type": "(address,address,uint64)",
                "struct": "XGovSubscribeRequestBoxValue",
                "desc": "The subscribe request box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov subscribe request box for the given request ID.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 36,
                "bytes": 28
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "paused_registry": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGF1c2VkX3JlZ2lzdHJ5"
                },
                "paused_proposals": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGF1c2VkX3Byb3Bvc2Fscw=="
                },
                "xgov_manager": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9tYW5hZ2Vy"
                },
                "xgov_subscriber": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9zdWJzY3JpYmVy"
                },
                "xgov_payor": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9wYXlvcg=="
                },
                "xgov_council": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9jb3VuY2ls"
                },
                "kyc_provider": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "a3ljX3Byb3ZpZGVy"
                },
                "committee_manager": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "Y29tbWl0dGVlX21hbmFnZXI="
                },
                "xgov_daemon": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9kYWVtb24="
                },
                "xgov_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "eGdvdl9mZWU="
                },
                "xgovs": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "eGdvdnM="
                },
                "proposer_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cHJvcG9zZXJfZmVl"
                },
                "open_proposal_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "b3Blbl9wcm9wb3NhbF9mZWU="
                },
                "daemon_ops_funding_bps": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGFlbW9uX29wZXJhdGlvbl9mdW5kaW5nX2Jwcw=="
                },
                "proposal_commitment_bps": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cHJvcG9zYWxfY29tbWl0bWVudF9icHM="
                },
                "min_requested_amount": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWluX3JlcXVlc3RlZF9hbW91bnQ="
                },
                "max_requested_amount_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGw="
                },
                "max_requested_amount_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVt"
                },
                "max_requested_amount_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2U="
                },
                "discussion_duration_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9zbWFsbA=="
                },
                "discussion_duration_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9tZWRpdW0="
                },
                "discussion_duration_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9sYXJnZQ=="
                },
                "discussion_duration_xlarge": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl94bGFyZ2U="
                },
                "voting_duration_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX3NtYWxs"
                },
                "voting_duration_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX21lZGl1bQ=="
                },
                "voting_duration_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX2xhcmdl"
                },
                "voting_duration_xlarge": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX3hsYXJnZQ=="
                },
                "quorum_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX3NtYWxs"
                },
                "quorum_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX21lZGl1bQ=="
                },
                "quorum_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX2xhcmdl"
                },
                "weighted_quorum_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX3NtYWxs"
                },
                "weighted_quorum_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX21lZGl1bQ=="
                },
                "weighted_quorum_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX2xhcmdl"
                },
                "outstanding_funds": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "b3V0c3RhbmRpbmdfZnVuZHM="
                },
                "committee_id": {
                    "keyType": "AVMBytes",
                    "valueType": "byte[32]",
                    "key": "Y29tbWl0dGVlX2lk"
                },
                "committee_members": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWl0dGVlX21lbWJlcnM="
                },
                "committee_votes": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWl0dGVlX3ZvdGVz"
                },
                "pending_proposals": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGVuZGluZ19wcm9wb3NhbHM="
                },
                "request_id": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cmVxdWVzdF9pZA=="
                },
                "max_committee_size": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X2NvbW1pdHRlZV9zaXpl"
                }
            },
            "local": {},
            "box": {
                "proposal_approval_program": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "key": "cGE="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "xgov_box": {
                    "keyType": "address",
                    "valueType": "XGovBoxValue",
                    "prefix": "eA=="
                },
                "request_box": {
                    "keyType": "uint64",
                    "valueType": "XGovSubscribeRequestBoxValue",
                    "prefix": "cg=="
                },
                "proposer_box": {
                    "keyType": "address",
                    "valueType": "ProposerBoxValue",
                    "prefix": "cA=="
                },
                "voters": {
                    "keyType": "address",
                    "valueType": "VoterBox",
                    "prefix": "Vg=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1184
                    ],
                    "errorMessage": "Address length is 32 bytes"
                },
                {
                    "pc": [
                        2145
                    ],
                    "errorMessage": "Already a proposer"
                },
                {
                    "pc": [
                        1850,
                        1968
                    ],
                    "errorMessage": "Already an xGov"
                },
                {
                    "pc": [
                        1517
                    ],
                    "errorMessage": "Cannot perform operation with pending proposals"
                },
                {
                    "pc": [
                        2249
                    ],
                    "errorMessage": "Committee size is too large"
                },
                {
                    "pc": [
                        2282
                    ],
                    "errorMessage": "Creation of proposals is paused"
                },
                {
                    "pc": [
                        2534
                    ],
                    "errorMessage": "Empty Committee ID"
                },
                {
                    "pc": [
                        1604
                    ],
                    "errorMessage": "Inconsistent requested amount config"
                },
                {
                    "pc": [
                        1564,
                        1700,
                        1734,
                        1768,
                        1794,
                        1903,
                        2023,
                        2030,
                        2096,
                        2668
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        2323,
                        3424,
                        3463
                    ],
                    "errorMessage": "Insufficient fee"
                },
                {
                    "pc": [
                        3415,
                        3481
                    ],
                    "errorMessage": "Insufficient funds"
                },
                {
                    "pc": [
                        2936
                    ],
                    "errorMessage": "Insufficient treasury funds"
                },
                {
                    "pc": [
                        2314,
                        2927
                    ],
                    "errorMessage": "Invalid KYC"
                },
                {
                    "pc": [
                        1632
                    ],
                    "errorMessage": "Invalid open proposal fee"
                },
                {
                    "pc": [
                        1856,
                        1974
                    ],
                    "errorMessage": "Invalid payment"
                },
                {
                    "pc": [
                        2630,
                        2887,
                        3099,
                        3271,
                        3880
                    ],
                    "errorMessage": "Invalid proposal"
                },
                {
                    "pc": [
                        1553
                    ],
                    "errorMessage": "Invalid proposer fee"
                },
                {
                    "pc": [
                        1542
                    ],
                    "errorMessage": "Invalid xGov fee"
                },
                {
                    "pc": [
                        2535,
                        2848,
                        3229
                    ],
                    "errorMessage": "Missing Config"
                },
                {
                    "pc": [
                        1178,
                        2913,
                        3072
                    ],
                    "errorMessage": "Missing key in state"
                },
                {
                    "pc": [
                        2351
                    ],
                    "errorMessage": "Missing proposal approval program"
                },
                {
                    "pc": [
                        2672
                    ],
                    "errorMessage": "Must be voting address"
                },
                {
                    "pc": [
                        476,
                        491,
                        510,
                        529,
                        548,
                        564,
                        576,
                        592,
                        614,
                        629,
                        644,
                        659,
                        683,
                        710,
                        731,
                        752,
                        774,
                        792,
                        807,
                        822,
                        853,
                        868,
                        906,
                        921,
                        936,
                        951,
                        966,
                        981,
                        996,
                        1011,
                        1026,
                        1038,
                        1050,
                        1062,
                        1074,
                        1086,
                        1107,
                        1122
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        894
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        2308
                    ],
                    "errorMessage": "Proposer already has an active proposal"
                },
                {
                    "pc": [
                        2202
                    ],
                    "errorMessage": "Proposer does not exist"
                },
                {
                    "pc": [
                        1840,
                        1889,
                        1958,
                        2079,
                        2136,
                        2275,
                        2622,
                        3262
                    ],
                    "errorMessage": "Registry's non-admin methods are paused"
                },
                {
                    "pc": [
                        3228
                    ],
                    "errorMessage": "There are voters assigned to this proposal"
                },
                {
                    "pc": [
                        1322,
                        1354,
                        1368,
                        1377,
                        1385,
                        1394,
                        1402,
                        1414,
                        1427,
                        1440,
                        1453,
                        1466,
                        1479,
                        1492,
                        1510,
                        1830,
                        1900,
                        1923,
                        1952,
                        2010,
                        2059,
                        2090,
                        2112,
                        2193,
                        2237,
                        2290,
                        2640,
                        2879,
                        3092,
                        3279,
                        3405,
                        3454
                    ],
                    "errorMessage": "Unauthorized"
                },
                {
                    "pc": [
                        2531,
                        2541,
                        2843,
                        2855,
                        3028,
                        3035,
                        3227,
                        3236,
                        3350,
                        3357
                    ],
                    "errorMessage": "Unknown error"
                },
                {
                    "pc": [
                        2846
                    ],
                    "errorMessage": "Voter already voted"
                },
                {
                    "pc": [
                        2847
                    ],
                    "errorMessage": "Voter not found"
                },
                {
                    "pc": [
                        2845
                    ],
                    "errorMessage": "Votes exceeded"
                },
                {
                    "pc": [
                        2844
                    ],
                    "errorMessage": "Voting Period Expired"
                },
                {
                    "pc": [
                        2533
                    ],
                    "errorMessage": "Wrong Committee Members"
                },
                {
                    "pc": [
                        2532
                    ],
                    "errorMessage": "Wrong Committee Votes"
                },
                {
                    "pc": [
                        10
                    ],
                    "errorMessage": "Wrong Global Bytes allocation"
                },
                {
                    "pc": [
                        16
                    ],
                    "errorMessage": "Wrong Global UInts allocation"
                },
                {
                    "pc": [
                        20
                    ],
                    "errorMessage": "Wrong Local Bytes allocation"
                },
                {
                    "pc": [
                        24
                    ],
                    "errorMessage": "Wrong Local UInts allocation"
                },
                {
                    "pc": [
                        2849,
                        3029,
                        3230,
                        3351
                    ],
                    "errorMessage": "Wrong Proposal Status or finalized"
                },
                {
                    "pc": [
                        2153,
                        2331,
                        3385
                    ],
                    "errorMessage": "Wrong Receiver"
                },
                {
                    "pc": [
                        2164,
                        2342
                    ],
                    "errorMessage": "Wrong payment amount"
                },
                {
                    "pc": [
                        2921
                    ],
                    "errorMessage": "Wrong proposer"
                },
                {
                    "pc": [
                        2347,
                        2546,
                        3468,
                        3473
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1157,
                        2566
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        2412,
                        2713,
                        2986,
                        3130,
                        3308
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        1126
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        479,
                        494,
                        513,
                        532,
                        551,
                        567,
                        579,
                        595,
                        617,
                        632,
                        647,
                        662,
                        686,
                        713,
                        734,
                        755,
                        777,
                        795,
                        810,
                        825,
                        856,
                        871,
                        897,
                        909,
                        924,
                        939,
                        954,
                        969,
                        984,
                        999,
                        1014,
                        1029,
                        1041,
                        1053,
                        1065,
                        1077,
                        1089,
                        1110
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        3744
                    ],
                    "errorMessage": "check self.committee_id exists"
                },
                {
                    "pc": [
                        2235,
                        3550
                    ],
                    "errorMessage": "check self.committee_manager exists"
                },
                {
                    "pc": [
                        3749
                    ],
                    "errorMessage": "check self.committee_members exists"
                },
                {
                    "pc": [
                        3755
                    ],
                    "errorMessage": "check self.committee_votes exists"
                },
                {
                    "pc": [
                        3578
                    ],
                    "errorMessage": "check self.daemon_ops_funding_bps exists"
                },
                {
                    "pc": [
                        3631
                    ],
                    "errorMessage": "check self.discussion_duration_large exists"
                },
                {
                    "pc": [
                        3625
                    ],
                    "errorMessage": "check self.discussion_duration_medium exists"
                },
                {
                    "pc": [
                        3619
                    ],
                    "errorMessage": "check self.discussion_duration_small exists"
                },
                {
                    "pc": [
                        3637
                    ],
                    "errorMessage": "check self.discussion_duration_xlarge exists"
                },
                {
                    "pc": [
                        2191,
                        3545
                    ],
                    "errorMessage": "check self.kyc_provider exists"
                },
                {
                    "pc": [
                        2245
                    ],
                    "errorMessage": "check self.max_committee_size exists"
                },
                {
                    "pc": [
                        3608
                    ],
                    "errorMessage": "check self.max_requested_amount_large exists"
                },
                {
                    "pc": [
                        3602
                    ],
                    "errorMessage": "check self.max_requested_amount_medium exists"
                },
                {
                    "pc": [
                        3596
                    ],
                    "errorMessage": "check self.max_requested_amount_small exists"
                },
                {
                    "pc": [
                        3590
                    ],
                    "errorMessage": "check self.min_requested_amount exists"
                },
                {
                    "pc": [
                        2340,
                        2571,
                        3572
                    ],
                    "errorMessage": "check self.open_proposal_fee exists"
                },
                {
                    "pc": [
                        2931,
                        3389,
                        3409,
                        3478,
                        3732
                    ],
                    "errorMessage": "check self.outstanding_funds exists"
                },
                {
                    "pc": [
                        2280,
                        3514
                    ],
                    "errorMessage": "check self.paused_proposals exists"
                },
                {
                    "pc": [
                        1838,
                        1887,
                        1956,
                        2077,
                        2134,
                        2273,
                        2620,
                        3260,
                        3503
                    ],
                    "errorMessage": "check self.paused_registry exists"
                },
                {
                    "pc": [
                        1265,
                        1515,
                        2593,
                        3738
                    ],
                    "errorMessage": "check self.pending_proposals exists"
                },
                {
                    "pc": [
                        3584
                    ],
                    "errorMessage": "check self.proposal_commitment_bps exists"
                },
                {
                    "pc": [
                        1225,
                        1242,
                        1282,
                        2205,
                        2296,
                        2553,
                        3855
                    ],
                    "errorMessage": "check self.proposer_box entry exists"
                },
                {
                    "pc": [
                        2162,
                        3566
                    ],
                    "errorMessage": "check self.proposer_fee exists"
                },
                {
                    "pc": [
                        3699
                    ],
                    "errorMessage": "check self.quorum_large exists"
                },
                {
                    "pc": [
                        3693
                    ],
                    "errorMessage": "check self.quorum_medium exists"
                },
                {
                    "pc": [
                        3687
                    ],
                    "errorMessage": "check self.quorum_small exists"
                },
                {
                    "pc": [
                        2021,
                        3869
                    ],
                    "errorMessage": "check self.request_box entry exists"
                },
                {
                    "pc": [
                        1979
                    ],
                    "errorMessage": "check self.request_id exists"
                },
                {
                    "pc": [
                        3665
                    ],
                    "errorMessage": "check self.voting_duration_large exists"
                },
                {
                    "pc": [
                        3659
                    ],
                    "errorMessage": "check self.voting_duration_medium exists"
                },
                {
                    "pc": [
                        3653
                    ],
                    "errorMessage": "check self.voting_duration_small exists"
                },
                {
                    "pc": [
                        3671
                    ],
                    "errorMessage": "check self.voting_duration_xlarge exists"
                },
                {
                    "pc": [
                        3722
                    ],
                    "errorMessage": "check self.weighted_quorum_large exists"
                },
                {
                    "pc": [
                        3716
                    ],
                    "errorMessage": "check self.weighted_quorum_medium exists"
                },
                {
                    "pc": [
                        3710
                    ],
                    "errorMessage": "check self.weighted_quorum_small exists"
                },
                {
                    "pc": [
                        1902,
                        2092,
                        2117,
                        2643,
                        3845
                    ],
                    "errorMessage": "check self.xgov_box entry exists"
                },
                {
                    "pc": [
                        3535
                    ],
                    "errorMessage": "check self.xgov_council exists"
                },
                {
                    "pc": [
                        3090,
                        3555
                    ],
                    "errorMessage": "check self.xgov_daemon exists"
                },
                {
                    "pc": [
                        1207,
                        3560
                    ],
                    "errorMessage": "check self.xgov_fee exists"
                },
                {
                    "pc": [
                        1138,
                        3436,
                        3487,
                        3525
                    ],
                    "errorMessage": "check self.xgov_manager exists"
                },
                {
                    "pc": [
                        2877,
                        3530
                    ],
                    "errorMessage": "check self.xgov_payor exists"
                },
                {
                    "pc": [
                        1147,
                        3540
                    ],
                    "errorMessage": "check self.xgov_subscriber exists"
                },
                {
                    "pc": [
                        1873,
                        1932,
                        2043
                    ],
                    "errorMessage": "check self.xgovs exists"
                },
                {
                    "pc": [
                        605,
                        696,
                        765,
                        844,
                        884
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAAEECOSWASYzD3BhdXNlZF9yZWdpc3RyeQQVH3x1AXARb3V0c3RhbmRpbmdfZnVuZHMBeAx4Z292X21hbmFnZXIFeGdvdnMRcGVuZGluZ19wcm9wb3NhbHMBAAJwYRBwYXVzZWRfcHJvcG9zYWxzEW9wZW5fcHJvcG9zYWxfZmVlBEVSUjoPeGdvdl9zdWJzY3JpYmVyCnhnb3ZfcGF5b3IMa3ljX3Byb3ZpZGVyEWNvbW1pdHRlZV9tYW5hZ2VyC3hnb3ZfZGFlbW9uCHhnb3ZfZmVlDHByb3Bvc2VyX2ZlZQFyIldyb25nIFByb3Bvc2FsIFN0YXR1cyBvciBmaW5hbGl6ZWQMeGdvdl9jb3VuY2lsHGRhZW1vbl9vcGVyYXRpb25fZnVuZGluZ19icHMXcHJvcG9zYWxfY29tbWl0bWVudF9icHMUbWluX3JlcXVlc3RlZF9hbW91bnQabWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGwbbWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVtGm1heF9yZXF1ZXN0ZWRfYW1vdW50X2xhcmdlGWRpc2N1c3Npb25fZHVyYXRpb25fc21hbGwaZGlzY3Vzc2lvbl9kdXJhdGlvbl9tZWRpdW0ZZGlzY3Vzc2lvbl9kdXJhdGlvbl9sYXJnZRpkaXNjdXNzaW9uX2R1cmF0aW9uX3hsYXJnZRV2b3RpbmdfZHVyYXRpb25fc21hbGwWdm90aW5nX2R1cmF0aW9uX21lZGl1bRV2b3RpbmdfZHVyYXRpb25fbGFyZ2UWdm90aW5nX2R1cmF0aW9uX3hsYXJnZQxxdW9ydW1fc21hbGwNcXVvcnVtX21lZGl1bQxxdW9ydW1fbGFyZ2UVd2VpZ2h0ZWRfcXVvcnVtX3NtYWxsFndlaWdodGVkX3F1b3J1bV9tZWRpdW0Vd2VpZ2h0ZWRfcXVvcnVtX2xhcmdlEWNvbW1pdHRlZV9tZW1iZXJzD2NvbW1pdHRlZV92b3RlcwpyZXF1ZXN0X2lkEm1heF9jb21taXR0ZWVfc2l6ZQ5NaXNzaW5nIENvbmZpZwgAAAAAAAAAAAxjb21taXR0ZWVfaWQAMRhAALUxNYEcEkQxNIEkEkQxNxREMTYURCgiZycKImcnBTIDZycNMgNnJw4yA2cnFjIDZycPMgNnJxAy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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "entropy": {
            "type": "AVMBytes"
        }
    }
}