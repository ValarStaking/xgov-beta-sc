{
    "name": "XGovRegistry",
    "structs": {
        "ProposerBoxValue": [
            {
                "name": "active_proposal",
                "type": "bool"
            },
            {
                "name": "kyc_status",
                "type": "bool"
            },
            {
                "name": "kyc_expiring",
                "type": "uint64"
            }
        ],
        "TypedGlobalState": [
            {
                "name": "paused_registry",
                "type": "bool"
            },
            {
                "name": "paused_proposals",
                "type": "bool"
            },
            {
                "name": "xgov_manager",
                "type": "address"
            },
            {
                "name": "xgov_payor",
                "type": "address"
            },
            {
                "name": "xgov_council",
                "type": "address"
            },
            {
                "name": "xgov_subscriber",
                "type": "address"
            },
            {
                "name": "kyc_provider",
                "type": "address"
            },
            {
                "name": "committee_manager",
                "type": "address"
            },
            {
                "name": "xgov_daemon",
                "type": "address"
            },
            {
                "name": "xgov_fee",
                "type": "uint64"
            },
            {
                "name": "proposer_fee",
                "type": "uint64"
            },
            {
                "name": "open_proposal_fee",
                "type": "uint64"
            },
            {
                "name": "daemon_ops_funding_bps",
                "type": "uint64"
            },
            {
                "name": "proposal_commitment_bps",
                "type": "uint64"
            },
            {
                "name": "min_requested_amount",
                "type": "uint64"
            },
            {
                "name": "max_requested_amount",
                "type": "uint64[3]"
            },
            {
                "name": "discussion_duration",
                "type": "uint64[4]"
            },
            {
                "name": "voting_duration",
                "type": "uint64[4]"
            },
            {
                "name": "quorum",
                "type": "uint64[3]"
            },
            {
                "name": "weighted_quorum",
                "type": "uint64[3]"
            },
            {
                "name": "outstanding_funds",
                "type": "uint64"
            },
            {
                "name": "pending_proposals",
                "type": "uint64"
            },
            {
                "name": "committee_id",
                "type": "byte[32]"
            },
            {
                "name": "committee_members",
                "type": "uint64"
            },
            {
                "name": "committee_votes",
                "type": "uint64"
            }
        ],
        "VoterBox": [
            {
                "name": "votes",
                "type": "uint64"
            },
            {
                "name": "voted",
                "type": "bool"
            }
        ],
        "XGovBoxValue": [
            {
                "name": "voting_address",
                "type": "address"
            },
            {
                "name": "voted_proposals",
                "type": "uint64"
            },
            {
                "name": "last_vote_timestamp",
                "type": "uint64"
            },
            {
                "name": "subscription_round",
                "type": "uint64"
            }
        ],
        "XGovRegistryConfig": [
            {
                "name": "xgov_fee",
                "type": "uint64"
            },
            {
                "name": "proposer_fee",
                "type": "uint64"
            },
            {
                "name": "open_proposal_fee",
                "type": "uint64"
            },
            {
                "name": "daemon_ops_funding_bps",
                "type": "uint64"
            },
            {
                "name": "proposal_commitment_bps",
                "type": "uint64"
            },
            {
                "name": "min_requested_amount",
                "type": "uint64"
            },
            {
                "name": "max_requested_amount",
                "type": "uint64[3]"
            },
            {
                "name": "discussion_duration",
                "type": "uint64[4]"
            },
            {
                "name": "voting_duration",
                "type": "uint64[4]"
            },
            {
                "name": "quorum",
                "type": "uint64[3]"
            },
            {
                "name": "weighted_quorum",
                "type": "uint64[3]"
            }
        ],
        "XGovSubscribeRequestBoxValue": [
            {
                "name": "xgov_addr",
                "type": "address"
            },
            {
                "name": "owner_addr",
                "type": "address"
            },
            {
                "name": "relation_type",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Create the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "init_proposal_contract",
            "args": [
                {
                    "type": "uint64",
                    "name": "size",
                    "desc": "The size of the Proposal Approval Program contract"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initializes the Proposal Approval Program contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "load_proposal_contract",
            "args": [
                {
                    "type": "uint64",
                    "name": "offset",
                    "desc": "The offset in the Proposal Approval Program contract"
                },
                {
                    "type": "byte[]",
                    "name": "data",
                    "desc": "The data to load into the Proposal Approval Program contract"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Loads the Proposal Approval Program contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_proposal_contract_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes the Proposal Approval Program contract box.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pause_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pauses the xGov Registry non-administrative methods.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pause_proposals",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Pauses the creation of new Proposals.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resume_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resumes the xGov Registry non-administrative methods.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resume_proposals",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Resumes the creation of new Proposals.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_manager",
            "args": [
                {
                    "type": "address",
                    "name": "manager",
                    "desc": "Address of the new xGov Manager"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Manager.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_payor",
            "args": [
                {
                    "type": "address",
                    "name": "payor",
                    "desc": "Address of the new xGov Payor"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Payor.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_council",
            "args": [
                {
                    "type": "address",
                    "name": "council",
                    "desc": "Address of the new xGov Council"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Council.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_subscriber",
            "args": [
                {
                    "type": "address",
                    "name": "subscriber",
                    "desc": "Address of the new xGov Subscriber"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Subscriber.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_kyc_provider",
            "args": [
                {
                    "type": "address",
                    "name": "provider",
                    "desc": "Address of the new KYC Provider"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the KYC provider.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_committee_manager",
            "args": [
                {
                    "type": "address",
                    "name": "manager",
                    "desc": "Address of the new xGov Manager"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the Committee Manager.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_xgov_daemon",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_daemon",
                    "desc": "Address of the new xGov Daemon"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Daemon.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "config_xgov_registry",
            "args": [
                {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3])",
                    "struct": "XGovRegistryConfig",
                    "name": "config",
                    "desc": "Configuration class containing the field data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the configuration of the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_xgov_registry",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "desc": "Updates the xGov Registry contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "subscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "voting_address",
                    "desc": "The address of the voting account for the xGov"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the xGov fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Subscribes the sender to being an xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unsubscribe_xgov",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unsubscribes the sender from being an xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "request_subscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov"
                },
                {
                    "type": "address",
                    "name": "owner_address",
                    "desc": "The address of the xGov Address owner/controller (Voting Address)"
                },
                {
                    "type": "uint64",
                    "name": "relation_type",
                    "desc": "The type of relationship enum"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the xGov fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Requests to subscribe to the xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "approve_subscribe_xgov",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the request to approve"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Approves a subscribe request to xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "reject_subscribe_xgov",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the request to reject"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Rejects a subscribe request to xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "request_unsubscribe_xgov",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov"
                },
                {
                    "type": "address",
                    "name": "owner_address",
                    "desc": "The address of the xGov Address owner/controller"
                },
                {
                    "type": "uint64",
                    "name": "relation_type",
                    "desc": "The type of relationship enum"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the xGov (unsubscribe) fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Requests to unsubscribe from the xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "approve_unsubscribe_xgov",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_unsubscribe_id",
                    "desc": "The ID of the unsubscribe request to approve"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Approves a request to unsubscribe from xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "reject_unsubscribe_xgov",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_unsubscribe_id",
                    "desc": "The ID of the unsubscribe request to reject"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Rejects a request to unsubscribe from xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_voting_account",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The xGov address delegating voting power"
                },
                {
                    "type": "address",
                    "name": "voting_address",
                    "desc": "The voting account address to delegate voting power to"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the Voting Address for the xGov.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "subscribe_proposer",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction covering the Proposer fee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Subscribes the sender to being a Proposer.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_proposer_kyc",
            "args": [
                {
                    "type": "address",
                    "name": "proposer",
                    "desc": "The address of the Proposer"
                },
                {
                    "type": "bool",
                    "name": "kyc_status",
                    "desc": "The new status of the Proposer"
                },
                {
                    "type": "uint64",
                    "name": "kyc_expiring",
                    "desc": "The expiration date as a unix timestamp of the time the KYC expires"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets a proposer's KYC status.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "declare_committee",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "committee_id",
                    "desc": "The ID of the xGov Committee"
                },
                {
                    "type": "uint64",
                    "name": "size",
                    "desc": "The size of the xGov Committee"
                },
                {
                    "type": "uint64",
                    "name": "votes",
                    "desc": "The voting power of the xGov Committee"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the xGov Committee in charge.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "open_proposal",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "payment for covering the proposal fee (includes child contract MBR)"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates a new Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app being voted on"
                },
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "(arc4.Address): The address of the xGov being voted on behalf of"
                },
                {
                    "type": "uint64",
                    "name": "approval_votes",
                    "desc": "(arc4.UInt64): The number of approvals votes allocated"
                },
                {
                    "type": "uint64",
                    "name": "rejection_votes",
                    "desc": "(arc4.UInt64): The number of rejections votes allocated"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Votes on a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pay_grant_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the approved Proposal"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Disburses the funds for an approved Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "finalize_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app to finalize"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Finalize a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "drop_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id",
                    "desc": "The application ID of the Proposal app to drop"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Drops a Proposal.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit_funds",
            "args": [
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "the deposit transaction"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposits xGov program funds into the xGov Treasury (xGov Registry Account).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_funds",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "the amount to remove"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove xGov program funds from the xGov Treasury (xGov Registry Account).",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_balance",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw outstanding Algos, excluding MBR and outstanding funds, from the xGov Registry.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_state",
            "args": [],
            "returns": {
                "type": "(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)",
                "struct": "TypedGlobalState"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov Registry state.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_xgov_box",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address",
                    "desc": "The address of the xGov"
                }
            ],
            "returns": {
                "type": "(address,uint64,uint64,uint64)",
                "struct": "XGovBoxValue",
                "desc": "The xGov box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov box for the given address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_proposer_box",
            "args": [
                {
                    "type": "address",
                    "name": "proposer_address",
                    "desc": "The address of the Proposer"
                }
            ],
            "returns": {
                "type": "(bool,bool,uint64)",
                "struct": "ProposerBoxValue",
                "desc": "The Proposer box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the Proposer box for the given address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_request_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "request_id",
                    "desc": "The ID of the subscribe request"
                }
            ],
            "returns": {
                "type": "(address,address,uint64)",
                "struct": "XGovSubscribeRequestBoxValue",
                "desc": "The subscribe request box value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the xGov subscribe request box for the given request ID.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "is_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 36,
                "bytes": 28
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "paused_registry": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGF1c2VkX3JlZ2lzdHJ5"
                },
                "paused_proposals": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGF1c2VkX3Byb3Bvc2Fscw=="
                },
                "xgov_manager": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9tYW5hZ2Vy"
                },
                "xgov_subscriber": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9zdWJzY3JpYmVy"
                },
                "xgov_payor": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9wYXlvcg=="
                },
                "xgov_council": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9jb3VuY2ls"
                },
                "kyc_provider": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "a3ljX3Byb3ZpZGVy"
                },
                "committee_manager": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "Y29tbWl0dGVlX21hbmFnZXI="
                },
                "xgov_daemon": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "eGdvdl9kYWVtb24="
                },
                "xgov_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "eGdvdl9mZWU="
                },
                "xgovs": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "eGdvdnM="
                },
                "proposer_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cHJvcG9zZXJfZmVl"
                },
                "open_proposal_fee": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "b3Blbl9wcm9wb3NhbF9mZWU="
                },
                "daemon_ops_funding_bps": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGFlbW9uX29wZXJhdGlvbl9mdW5kaW5nX2Jwcw=="
                },
                "proposal_commitment_bps": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cHJvcG9zYWxfY29tbWl0bWVudF9icHM="
                },
                "min_requested_amount": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWluX3JlcXVlc3RlZF9hbW91bnQ="
                },
                "max_requested_amount_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGw="
                },
                "max_requested_amount_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVt"
                },
                "max_requested_amount_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2U="
                },
                "discussion_duration_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9zbWFsbA=="
                },
                "discussion_duration_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9tZWRpdW0="
                },
                "discussion_duration_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9sYXJnZQ=="
                },
                "discussion_duration_xlarge": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl94bGFyZ2U="
                },
                "voting_duration_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX3NtYWxs"
                },
                "voting_duration_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX21lZGl1bQ=="
                },
                "voting_duration_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX2xhcmdl"
                },
                "voting_duration_xlarge": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90aW5nX2R1cmF0aW9uX3hsYXJnZQ=="
                },
                "quorum_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX3NtYWxs"
                },
                "quorum_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX21lZGl1bQ=="
                },
                "quorum_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVtX2xhcmdl"
                },
                "weighted_quorum_small": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX3NtYWxs"
                },
                "weighted_quorum_medium": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX21lZGl1bQ=="
                },
                "weighted_quorum_large": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "d2VpZ2h0ZWRfcXVvcnVtX2xhcmdl"
                },
                "outstanding_funds": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "b3V0c3RhbmRpbmdfZnVuZHM="
                },
                "committee_id": {
                    "keyType": "AVMBytes",
                    "valueType": "byte[32]",
                    "key": "Y29tbWl0dGVlX2lk"
                },
                "committee_members": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWl0dGVlX21lbWJlcnM="
                },
                "committee_votes": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWl0dGVlX3ZvdGVz"
                },
                "pending_proposals": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cGVuZGluZ19wcm9wb3NhbHM="
                },
                "request_id": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cmVxdWVzdF9pZA=="
                },
                "request_unsubscribe_id": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cmVxdWVzdF91bnN1YnNjcmliZV9pZA=="
                },
                "max_committee_size": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bWF4X2NvbW1pdHRlZV9zaXpl"
                }
            },
            "local": {},
            "box": {
                "proposal_approval_program": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "key": "cGE="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "xgov_box": {
                    "keyType": "address",
                    "valueType": "XGovBoxValue",
                    "prefix": "eA=="
                },
                "request_box": {
                    "keyType": "uint64",
                    "valueType": "XGovSubscribeRequestBoxValue",
                    "prefix": "cg=="
                },
                "request_unsubscribe_box": {
                    "keyType": "uint64",
                    "valueType": "XGovSubscribeRequestBoxValue",
                    "prefix": "cnU="
                },
                "proposer_box": {
                    "keyType": "address",
                    "valueType": "ProposerBoxValue",
                    "prefix": "cA=="
                },
                "voters": {
                    "keyType": "address",
                    "valueType": "VoterBox",
                    "prefix": "Vg=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        3637
                    ],
                    "errorMessage": "Address length is 32 bytes"
                },
                {
                    "pc": [
                        1620
                    ],
                    "errorMessage": "Already a proposer"
                },
                {
                    "pc": [
                        1152,
                        1266
                    ],
                    "errorMessage": "Already an xGov"
                },
                {
                    "pc": [
                        812
                    ],
                    "errorMessage": "Cannot perform operation with pending proposals"
                },
                {
                    "pc": [
                        1764
                    ],
                    "errorMessage": "Committee size is too large"
                },
                {
                    "pc": [
                        1803
                    ],
                    "errorMessage": "Creation of proposals is paused"
                },
                {
                    "pc": [
                        2070
                    ],
                    "errorMessage": "Empty Committee ID"
                },
                {
                    "pc": [
                        896
                    ],
                    "errorMessage": "Inconsistent requested amount config"
                },
                {
                    "pc": [
                        1844,
                        3087,
                        3126
                    ],
                    "errorMessage": "Insufficient fee"
                },
                {
                    "pc": [
                        3078,
                        3145
                    ],
                    "errorMessage": "Insufficient funds"
                },
                {
                    "pc": [
                        2527
                    ],
                    "errorMessage": "Insufficient treasury funds"
                },
                {
                    "pc": [
                        1835,
                        2517
                    ],
                    "errorMessage": "Invalid KYC"
                },
                {
                    "pc": [
                        925
                    ],
                    "errorMessage": "Invalid open proposal fee"
                },
                {
                    "pc": [
                        1156,
                        1270,
                        1432
                    ],
                    "errorMessage": "Invalid payment"
                },
                {
                    "pc": [
                        2202,
                        2477,
                        2711,
                        2904,
                        3583
                    ],
                    "errorMessage": "Invalid proposal"
                },
                {
                    "pc": [
                        846
                    ],
                    "errorMessage": "Invalid proposer fee"
                },
                {
                    "pc": [
                        834
                    ],
                    "errorMessage": "Invalid xGov fee"
                },
                {
                    "pc": [
                        2071,
                        2434,
                        2858
                    ],
                    "errorMessage": "Missing Config"
                },
                {
                    "pc": [
                        2503,
                        2685,
                        3632
                    ],
                    "errorMessage": "Missing key in state"
                },
                {
                    "pc": [
                        1869
                    ],
                    "errorMessage": "Missing proposal approval program"
                },
                {
                    "pc": [
                        2244
                    ],
                    "errorMessage": "Must be voting address"
                },
                {
                    "pc": [
                        1428
                    ],
                    "errorMessage": "Not an xGov"
                },
                {
                    "pc": [
                        207
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        523
                    ],
                    "errorMessage": "OnCompletion must be UpdateApplication && can only call when not creating"
                },
                {
                    "pc": [
                        1829
                    ],
                    "errorMessage": "Proposer already has an active proposal"
                },
                {
                    "pc": [
                        1696
                    ],
                    "errorMessage": "Proposer does not exist"
                },
                {
                    "pc": [
                        1143,
                        1184,
                        1257,
                        1420,
                        1553,
                        1611,
                        1796,
                        2194,
                        2897
                    ],
                    "errorMessage": "Registry's non-admin methods are paused"
                },
                {
                    "pc": [
                        2857
                    ],
                    "errorMessage": "There are voters assigned to this proposal"
                },
                {
                    "pc": [
                        548,
                        601,
                        615,
                        625,
                        634,
                        644,
                        653,
                        671,
                        689,
                        707,
                        725,
                        743,
                        761,
                        779,
                        805,
                        1117,
                        1192,
                        1251,
                        1312,
                        1364,
                        1414,
                        1474,
                        1518,
                        1562,
                        1584,
                        1687,
                        1753,
                        1811,
                        2211,
                        2471,
                        2704,
                        2912,
                        3069,
                        3117
                    ],
                    "errorMessage": "Unauthorized"
                },
                {
                    "pc": [
                        2067,
                        2077,
                        2429,
                        2441,
                        2637,
                        2644,
                        2856,
                        2865,
                        3000,
                        3007
                    ],
                    "errorMessage": "Unknown error"
                },
                {
                    "pc": [
                        2432
                    ],
                    "errorMessage": "Voter already voted"
                },
                {
                    "pc": [
                        2433
                    ],
                    "errorMessage": "Voter not found"
                },
                {
                    "pc": [
                        2431
                    ],
                    "errorMessage": "Votes exceeded"
                },
                {
                    "pc": [
                        2430
                    ],
                    "errorMessage": "Voting Period Expired"
                },
                {
                    "pc": [
                        2069
                    ],
                    "errorMessage": "Wrong Committee Members"
                },
                {
                    "pc": [
                        2068
                    ],
                    "errorMessage": "Wrong Committee Votes"
                },
                {
                    "pc": [
                        10
                    ],
                    "errorMessage": "Wrong Global Bytes allocation"
                },
                {
                    "pc": [
                        16
                    ],
                    "errorMessage": "Wrong Global UInts allocation"
                },
                {
                    "pc": [
                        20
                    ],
                    "errorMessage": "Wrong Local Bytes allocation"
                },
                {
                    "pc": [
                        24
                    ],
                    "errorMessage": "Wrong Local UInts allocation"
                },
                {
                    "pc": [
                        2435,
                        2638,
                        2859,
                        3001
                    ],
                    "errorMessage": "Wrong Proposal Status or finalized"
                },
                {
                    "pc": [
                        1627,
                        1851,
                        3042
                    ],
                    "errorMessage": "Wrong Receiver"
                },
                {
                    "pc": [
                        1636,
                        1860
                    ],
                    "errorMessage": "Wrong payment amount"
                },
                {
                    "pc": [
                        2511
                    ],
                    "errorMessage": "Wrong proposer"
                },
                {
                    "pc": [
                        1865,
                        2082,
                        3131,
                        3136
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        2105,
                        3611
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        1945,
                        2296,
                        2592,
                        2756,
                        2955
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        3414
                    ],
                    "errorMessage": "check self.committee_id exists"
                },
                {
                    "pc": [
                        1751,
                        3219
                    ],
                    "errorMessage": "check self.committee_manager exists"
                },
                {
                    "pc": [
                        3419
                    ],
                    "errorMessage": "check self.committee_members exists"
                },
                {
                    "pc": [
                        3425
                    ],
                    "errorMessage": "check self.committee_votes exists"
                },
                {
                    "pc": [
                        3247
                    ],
                    "errorMessage": "check self.daemon_ops_funding_bps exists"
                },
                {
                    "pc": [
                        3300
                    ],
                    "errorMessage": "check self.discussion_duration_large exists"
                },
                {
                    "pc": [
                        3294
                    ],
                    "errorMessage": "check self.discussion_duration_medium exists"
                },
                {
                    "pc": [
                        3288
                    ],
                    "errorMessage": "check self.discussion_duration_small exists"
                },
                {
                    "pc": [
                        3306
                    ],
                    "errorMessage": "check self.discussion_duration_xlarge exists"
                },
                {
                    "pc": [
                        1685,
                        3214
                    ],
                    "errorMessage": "check self.kyc_provider exists"
                },
                {
                    "pc": [
                        1760
                    ],
                    "errorMessage": "check self.max_committee_size exists"
                },
                {
                    "pc": [
                        3277
                    ],
                    "errorMessage": "check self.max_requested_amount_large exists"
                },
                {
                    "pc": [
                        3271
                    ],
                    "errorMessage": "check self.max_requested_amount_medium exists"
                },
                {
                    "pc": [
                        3265
                    ],
                    "errorMessage": "check self.max_requested_amount_small exists"
                },
                {
                    "pc": [
                        3259
                    ],
                    "errorMessage": "check self.min_requested_amount exists"
                },
                {
                    "pc": [
                        1858,
                        2110,
                        3241
                    ],
                    "errorMessage": "check self.open_proposal_fee exists"
                },
                {
                    "pc": [
                        2522,
                        3047,
                        3075,
                        3142,
                        3402
                    ],
                    "errorMessage": "check self.outstanding_funds exists"
                },
                {
                    "pc": [
                        1801,
                        3181
                    ],
                    "errorMessage": "check self.paused_proposals exists"
                },
                {
                    "pc": [
                        1141,
                        1182,
                        1255,
                        1418,
                        1551,
                        1609,
                        1794,
                        2192,
                        2895,
                        3168
                    ],
                    "errorMessage": "check self.paused_registry exists"
                },
                {
                    "pc": [
                        810,
                        2132,
                        3408,
                        3718
                    ],
                    "errorMessage": "check self.pending_proposals exists"
                },
                {
                    "pc": [
                        3253
                    ],
                    "errorMessage": "check self.proposal_commitment_bps exists"
                },
                {
                    "pc": [
                        1817,
                        3542,
                        3678,
                        3695
                    ],
                    "errorMessage": "check self.proposer_box entry exists"
                },
                {
                    "pc": [
                        1634,
                        3235
                    ],
                    "errorMessage": "check self.proposer_fee exists"
                },
                {
                    "pc": [
                        3368
                    ],
                    "errorMessage": "check self.quorum_large exists"
                },
                {
                    "pc": [
                        3362
                    ],
                    "errorMessage": "check self.quorum_medium exists"
                },
                {
                    "pc": [
                        3356
                    ],
                    "errorMessage": "check self.quorum_small exists"
                },
                {
                    "pc": [
                        1321,
                        3564
                    ],
                    "errorMessage": "check self.request_box entry exists"
                },
                {
                    "pc": [
                        1275
                    ],
                    "errorMessage": "check self.request_id exists"
                },
                {
                    "pc": [
                        1483
                    ],
                    "errorMessage": "check self.request_unsubscribe_box entry exists"
                },
                {
                    "pc": [
                        1437
                    ],
                    "errorMessage": "check self.request_unsubscribe_id exists"
                },
                {
                    "pc": [
                        3334
                    ],
                    "errorMessage": "check self.voting_duration_large exists"
                },
                {
                    "pc": [
                        3328
                    ],
                    "errorMessage": "check self.voting_duration_medium exists"
                },
                {
                    "pc": [
                        3322
                    ],
                    "errorMessage": "check self.voting_duration_small exists"
                },
                {
                    "pc": [
                        3340
                    ],
                    "errorMessage": "check self.voting_duration_xlarge exists"
                },
                {
                    "pc": [
                        3391
                    ],
                    "errorMessage": "check self.weighted_quorum_large exists"
                },
                {
                    "pc": [
                        3385
                    ],
                    "errorMessage": "check self.weighted_quorum_medium exists"
                },
                {
                    "pc": [
                        3379
                    ],
                    "errorMessage": "check self.weighted_quorum_small exists"
                },
                {
                    "pc": [
                        3523
                    ],
                    "errorMessage": "check self.xgov_box entry exists"
                },
                {
                    "pc": [
                        3204
                    ],
                    "errorMessage": "check self.xgov_council exists"
                },
                {
                    "pc": [
                        2702,
                        3224
                    ],
                    "errorMessage": "check self.xgov_daemon exists"
                },
                {
                    "pc": [
                        3229,
                        3660
                    ],
                    "errorMessage": "check self.xgov_fee exists"
                },
                {
                    "pc": [
                        3100,
                        3151,
                        3194,
                        3592
                    ],
                    "errorMessage": "check self.xgov_manager exists"
                },
                {
                    "pc": [
                        2469,
                        3199
                    ],
                    "errorMessage": "check self.xgov_payor exists"
                },
                {
                    "pc": [
                        3209,
                        3601
                    ],
                    "errorMessage": "check self.xgov_subscriber exists"
                },
                {
                    "pc": [
                        1170,
                        1203,
                        1342,
                        1496
                    ],
                    "errorMessage": "check self.xgovs exists"
                },
                {
                    "pc": [
                        586,
                        1931,
                        2282,
                        2578,
                        2742,
                        2941
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        1670
                    ],
                    "errorMessage": "invalid number of bytes for arc4.bool"
                },
                {
                    "pc": [
                        594,
                        1938,
                        2289,
                        2585,
                        2749,
                        2948
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        667,
                        685,
                        703,
                        721,
                        739,
                        757,
                        775,
                        1127,
                        1219,
                        1227,
                        1382,
                        1390,
                        1537,
                        1547,
                        1662,
                        1728,
                        2172,
                        3518,
                        3537
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        544,
                        580,
                        1235,
                        1308,
                        1360,
                        1398,
                        1470,
                        1514,
                        1678,
                        1736,
                        1744,
                        2164,
                        2180,
                        2188,
                        2462,
                        2669,
                        2891,
                        3065,
                        3556,
                        3578
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        801
                    ],
                    "errorMessage": "invalid number of bytes for smart_contracts.common.abi_types.XGovRegistryConfig"
                },
                {
                    "pc": [
                        1137,
                        1245,
                        1408,
                        1605,
                        1790,
                        3035
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAAEIIOSWASY0D3BhdXNlZF9yZWdpc3RyeQF4AXAEFR98dQV4Z292cxFvdXRzdGFuZGluZ19mdW5kcwx4Z292X21hbmFnZXIRcGVuZGluZ19wcm9wb3NhbHMCcGEBABBwYXVzZWRfcHJvcG9zYWxzEW9wZW5fcHJvcG9zYWxfZmVlBEVSUjoPeGdvdl9zdWJzY3JpYmVyCnhnb3ZfcGF5b3IMa3ljX3Byb3ZpZGVyEWNvbW1pdHRlZV9tYW5hZ2VyC3hnb3ZfZGFlbW9uCHhnb3ZfZmVlDHByb3Bvc2VyX2ZlZQFyIldyb25nIFByb3Bvc2FsIFN0YXR1cyBvciBmaW5hbGl6ZWQMeGdvdl9jb3VuY2lsHGRhZW1vbl9vcGVyYXRpb25fZnVuZGluZ19icHMXcHJvcG9zYWxfY29tbWl0bWVudF9icHMUbWluX3JlcXVlc3RlZF9hbW91bnQabWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGwbbWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVtGm1heF9yZXF1ZXN0ZWRfYW1vdW50X2xhcmdlGWRpc2N1c3Npb25fZHVyYXRpb25fc21hbGwaZGlzY3Vzc2lvbl9kdXJhdGlvbl9tZWRpdW0ZZGlzY3Vzc2lvbl9kdXJhdGlvbl9sYXJnZRpkaXNjdXNzaW9uX2R1cmF0aW9uX3hsYXJnZRV2b3RpbmdfZHVyYXRpb25fc21hbGwWdm90aW5nX2R1cmF0aW9uX21lZGl1bRV2b3RpbmdfZHVyYXRpb25fbGFyZ2UWdm90aW5nX2R1cmF0aW9uX3hsYXJnZQxxdW9ydW1fc21hbGwNcXVvcnVtX21lZGl1bQxxdW9ydW1fbGFyZ2UVd2VpZ2h0ZWRfcXVvcnVtX3NtYWxsFndlaWdodGVkX3F1b3J1bV9tZWRpdW0Vd2VpZ2h0ZWRfcXVvcnVtX2xhcmdlEWNvbW1pdHRlZV9tZW1iZXJzD2NvbW1pdHRlZV92b3RlcwpyZXF1ZXN0X2lkFnJlcXVlc3RfdW5zdWJzY3JpYmVfaWQSbWF4X2NvbW1pdHRlZV9zaXplAnJ1Dk1pc3NpbmcgQ29uZmlnDGNvbW1pdHRlZV9pZAAxGEAAujE1gRwSRDE0gSQSRDE3FEQxNhREKCJnJwoiZycGMgNnJw0yA2cn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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {
        "entropy": {
            "type": "AVMBytes"
        }
    }
}