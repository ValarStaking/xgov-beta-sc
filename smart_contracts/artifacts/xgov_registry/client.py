# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "set_xgov_manager(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_payor(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_xgov_reviewer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_kyc_provider(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_manager(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_publisher(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3]))void": {
            "structs": {
                "config": {
                    "name": "XGovRegistryConfig",
                    "elements": [
                        [
                            "xgov_min_balance",
                            "uint64"
                        ],
                        [
                            "proposer_fee",
                            "uint64"
                        ],
                        [
                            "proposal_fee",
                            "uint64"
                        ],
                        [
                            "proposal_publishing_bps",
                            "uint64"
                        ],
                        [
                            "proposal_commitment_bps",
                            "uint64"
                        ],
                        [
                            "min_requested_amount",
                            "uint64"
                        ],
                        [
                            "max_requested_amount",
                            "uint64[3]"
                        ],
                        [
                            "discussion_duration",
                            "uint64[4]"
                        ],
                        [
                            "voting_duration",
                            "uint64[4]"
                        ],
                        [
                            "cool_down_duration",
                            "uint64"
                        ],
                        [
                            "quorum",
                            "uint64[3]"
                        ],
                        [
                            "weighted_quorum",
                            "uint64[3]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_xgov_registry()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "subscribe_xgov(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unsubscribe_xgov()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_voting_account(address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "subscribe_proposer(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_proposer_kyc(address,bool,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "declare_committee(byte[32],uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "open_proposal(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pay_grant_proposal(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit_funds(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_funds(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_state()(address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "TypedGlobalState",
                    "elements": [
                        [
                            "xgov_manager",
                            "address"
                        ],
                        [
                            "xgov_payor",
                            "address"
                        ],
                        [
                            "kyc_provider",
                            "address"
                        ],
                        [
                            "committee_manager",
                            "address"
                        ],
                        [
                            "committee_publisher",
                            "address"
                        ],
                        [
                            "xgov_min_balance",
                            "uint64"
                        ],
                        [
                            "proposer_fee",
                            "uint64"
                        ],
                        [
                            "proposal_fee",
                            "uint64"
                        ],
                        [
                            "proposal_publishing_bps",
                            "uint64"
                        ],
                        [
                            "proposal_commitment_bps",
                            "uint64"
                        ],
                        [
                            "min_requested_amount",
                            "uint64"
                        ],
                        [
                            "max_requested_amount",
                            "uint64[3]"
                        ],
                        [
                            "discussion_duration",
                            "uint64[4]"
                        ],
                        [
                            "voting_duration",
                            "uint64[4]"
                        ],
                        [
                            "cool_down_duration",
                            "uint64"
                        ],
                        [
                            "quorum",
                            "uint64[3]"
                        ],
                        [
                            "weighted_quorum",
                            "uint64[3]"
                        ],
                        [
                            "outstanding_funds",
                            "uint64"
                        ],
                        [
                            "pending_proposals",
                            "uint64"
                        ],
                        [
                            "committee_id",
                            "byte[32]"
                        ],
                        [
                            "committee_members",
                            "uint64"
                        ],
                        [
                            "committee_votes",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMueGdvdl9yZWdpc3RyeS5jb250cmFjdC5YR292UmVnaXN0cnkuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 7,
            "num_uints": 30
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "committee_id": {
                    "type": "bytes",
                    "key": "committee_id"
                },
                "committee_manager": {
                    "type": "bytes",
                    "key": "committee_manager"
                },
                "committee_members": {
                    "type": "uint64",
                    "key": "committee_members"
                },
                "committee_publisher": {
                    "type": "bytes",
                    "key": "committee_publisher"
                },
                "committee_votes": {
                    "type": "uint64",
                    "key": "committee_votes"
                },
                "cool_down_duration": {
                    "type": "uint64",
                    "key": "cool_down_duration"
                },
                "discussion_duration_large": {
                    "type": "uint64",
                    "key": "discussion_duration_large"
                },
                "discussion_duration_medium": {
                    "type": "uint64",
                    "key": "discussion_duration_medium"
                },
                "discussion_duration_small": {
                    "type": "uint64",
                    "key": "discussion_duration_small"
                },
                "discussion_duration_xlarge": {
                    "type": "uint64",
                    "key": "discussion_duration_xlarge"
                },
                "kyc_provider": {
                    "type": "bytes",
                    "key": "kyc_provider"
                },
                "max_requested_amount_large": {
                    "type": "uint64",
                    "key": "max_requested_amount_large"
                },
                "max_requested_amount_medium": {
                    "type": "uint64",
                    "key": "max_requested_amount_medium"
                },
                "max_requested_amount_small": {
                    "type": "uint64",
                    "key": "max_requested_amount_small"
                },
                "min_requested_amount": {
                    "type": "uint64",
                    "key": "min_requested_amount"
                },
                "outstanding_funds": {
                    "type": "uint64",
                    "key": "outstanding_funds"
                },
                "pending_proposals": {
                    "type": "uint64",
                    "key": "pending_proposals"
                },
                "proposal_commitment_bps": {
                    "type": "uint64",
                    "key": "proposal_commitment_bps"
                },
                "proposal_fee": {
                    "type": "uint64",
                    "key": "proposal_fee"
                },
                "proposal_publishing_bps": {
                    "type": "uint64",
                    "key": "proposal_publishing_bps"
                },
                "proposer_fee": {
                    "type": "uint64",
                    "key": "proposer_fee"
                },
                "quorum_large": {
                    "type": "uint64",
                    "key": "quorum_large"
                },
                "quorum_medium": {
                    "type": "uint64",
                    "key": "quorum_medium"
                },
                "quorum_small": {
                    "type": "uint64",
                    "key": "quorum_small"
                },
                "voting_duration_large": {
                    "type": "uint64",
                    "key": "voting_duration_large"
                },
                "voting_duration_medium": {
                    "type": "uint64",
                    "key": "voting_duration_medium"
                },
                "voting_duration_small": {
                    "type": "uint64",
                    "key": "voting_duration_small"
                },
                "voting_duration_xlarge": {
                    "type": "uint64",
                    "key": "voting_duration_xlarge"
                },
                "weighted_quorum_large": {
                    "type": "uint64",
                    "key": "weighted_quorum_large"
                },
                "weighted_quorum_medium": {
                    "type": "uint64",
                    "key": "weighted_quorum_medium"
                },
                "weighted_quorum_small": {
                    "type": "uint64",
                    "key": "weighted_quorum_small"
                },
                "xgov_manager": {
                    "type": "bytes",
                    "key": "xgov_manager"
                },
                "xgov_min_balance": {
                    "type": "uint64",
                    "key": "xgov_min_balance"
                },
                "xgov_payor": {
                    "type": "bytes",
                    "key": "xgov_payor"
                },
                "xgov_reviewer": {
                    "type": "bytes",
                    "key": "xgov_reviewer"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "XGovRegistry",
        "methods": [
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Create the xgov registry."
            },
            {
                "name": "set_xgov_manager",
                "args": [
                    {
                        "type": "address",
                        "name": "manager",
                        "desc": "Address of the new manager"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the XGov manager."
            },
            {
                "name": "set_payor",
                "args": [
                    {
                        "type": "address",
                        "name": "payor",
                        "desc": "Address of the new payor"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the XGov payor."
            },
            {
                "name": "set_xgov_reviewer",
                "args": [
                    {
                        "type": "address",
                        "name": "reviewer",
                        "desc": "Address of the new reviewer"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the XGov Reviwer."
            },
            {
                "name": "set_kyc_provider",
                "args": [
                    {
                        "type": "address",
                        "name": "provider",
                        "desc": "Address of the new provider"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the KYC provider."
            },
            {
                "name": "set_committee_manager",
                "args": [
                    {
                        "type": "address",
                        "name": "manager",
                        "desc": "Address of the new manager"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the committee manager."
            },
            {
                "name": "set_committee_publisher",
                "args": [
                    {
                        "type": "address",
                        "name": "publisher",
                        "desc": "Address of the new publisher"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the committee publisher."
            },
            {
                "name": "config_xgov_registry",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3])",
                        "name": "config",
                        "desc": "Configuration class containing the field data"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the configurable global state keys of the registry."
            },
            {
                "name": "update_xgov_registry",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the registry contract"
            },
            {
                "name": "subscribe_xgov",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction covering the signup MBR"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Subscribes the sender to being an XGov"
            },
            {
                "name": "unsubscribe_xgov",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Unsubscribes the sender from being an XGov"
            },
            {
                "name": "set_voting_account",
                "args": [
                    {
                        "type": "address",
                        "name": "xgov_address"
                    },
                    {
                        "type": "address",
                        "name": "voting_address",
                        "desc": "The voting account address to delegate voting power to"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the voting account for the XGov"
            },
            {
                "name": "subscribe_proposer",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction covering the proposer fee"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Subscribes the sender to being an proposer"
            },
            {
                "name": "set_proposer_kyc",
                "args": [
                    {
                        "type": "address",
                        "name": "proposer",
                        "desc": "The address of the proposer"
                    },
                    {
                        "type": "bool",
                        "name": "kyc_status",
                        "desc": "The new status of the proposer"
                    },
                    {
                        "type": "uint64",
                        "name": "kyc_expiring",
                        "desc": "The expiration date as a unix timestamp of the time the KYC expires"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets a proposer's KYC status"
            },
            {
                "name": "declare_committee",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "cid"
                    },
                    {
                        "type": "uint64",
                        "name": "size",
                        "desc": "The size of the committee"
                    },
                    {
                        "type": "uint64",
                        "name": "votes",
                        "desc": "The voting power of the committee"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the committee details"
            },
            {
                "name": "open_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "payment for covering the proposal fee & child contract MBR"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates a new Proposal"
            },
            {
                "name": "pay_grant_proposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_id",
                        "desc": "The application id of the approved proposal"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Disburses the funds for an approved proposal"
            },
            {
                "name": "deposit_funds",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "the deposit transaction"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Tracks deposits to the treasury"
            },
            {
                "name": "withdraw_funds",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "the amount to remove"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Remove funds from the treasury"
            },
            {
                "name": "get_state",
                "args": [],
                "returns": {
                    "type": "(address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"
                },
                "desc": "Returns the global state of the applicaton"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class SetXgovManagerArgs(_ArgsBase[None]):
    """Sets the XGov manager."""

    manager: str
    """Address of the new manager"""

    @staticmethod
    def method() -> str:
        return "set_xgov_manager(address)void"


@dataclasses.dataclass(kw_only=True)
class SetPayorArgs(_ArgsBase[None]):
    """Sets the XGov payor."""

    payor: str
    """Address of the new payor"""

    @staticmethod
    def method() -> str:
        return "set_payor(address)void"


@dataclasses.dataclass(kw_only=True)
class SetXgovReviewerArgs(_ArgsBase[None]):
    """Sets the XGov Reviwer."""

    reviewer: str
    """Address of the new reviewer"""

    @staticmethod
    def method() -> str:
        return "set_xgov_reviewer(address)void"


@dataclasses.dataclass(kw_only=True)
class SetKycProviderArgs(_ArgsBase[None]):
    """Sets the KYC provider."""

    provider: str
    """Address of the new provider"""

    @staticmethod
    def method() -> str:
        return "set_kyc_provider(address)void"


@dataclasses.dataclass(kw_only=True)
class SetCommitteeManagerArgs(_ArgsBase[None]):
    """Sets the committee manager."""

    manager: str
    """Address of the new manager"""

    @staticmethod
    def method() -> str:
        return "set_committee_manager(address)void"


@dataclasses.dataclass(kw_only=True)
class SetCommitteePublisherArgs(_ArgsBase[None]):
    """Sets the committee publisher."""

    publisher: str
    """Address of the new publisher"""

    @staticmethod
    def method() -> str:
        return "set_committee_publisher(address)void"


@dataclasses.dataclass(kw_only=True)
class XGovRegistryConfig:
    xgov_min_balance: int
    proposer_fee: int
    proposal_fee: int
    proposal_publishing_bps: int
    proposal_commitment_bps: int
    min_requested_amount: int
    max_requested_amount: list[int] | tuple[int, int, int]
    discussion_duration: list[int] | tuple[int, int, int, int]
    voting_duration: list[int] | tuple[int, int, int, int]
    cool_down_duration: int
    quorum: list[int] | tuple[int, int, int]
    weighted_quorum: list[int] | tuple[int, int, int]


@dataclasses.dataclass(kw_only=True)
class ConfigXgovRegistryArgs(_ArgsBase[None]):
    """Sets the configurable global state keys of the registry."""

    config: XGovRegistryConfig
    """Configuration class containing the field data"""

    @staticmethod
    def method() -> str:
        return "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3]))void"


@dataclasses.dataclass(kw_only=True)
class SubscribeXgovArgs(_ArgsBase[None]):
    """Subscribes the sender to being an XGov"""

    payment: TransactionWithSigner
    """The payment transaction covering the signup MBR"""

    @staticmethod
    def method() -> str:
        return "subscribe_xgov(pay)void"


@dataclasses.dataclass(kw_only=True)
class UnsubscribeXgovArgs(_ArgsBase[None]):
    """Unsubscribes the sender from being an XGov"""

    @staticmethod
    def method() -> str:
        return "unsubscribe_xgov()void"


@dataclasses.dataclass(kw_only=True)
class SetVotingAccountArgs(_ArgsBase[None]):
    """Sets the voting account for the XGov"""

    xgov_address: str
    voting_address: str
    """The voting account address to delegate voting power to"""

    @staticmethod
    def method() -> str:
        return "set_voting_account(address,address)void"


@dataclasses.dataclass(kw_only=True)
class SubscribeProposerArgs(_ArgsBase[None]):
    """Subscribes the sender to being an proposer"""

    payment: TransactionWithSigner
    """The payment transaction covering the proposer fee"""

    @staticmethod
    def method() -> str:
        return "subscribe_proposer(pay)void"


@dataclasses.dataclass(kw_only=True)
class SetProposerKycArgs(_ArgsBase[None]):
    """Sets a proposer's KYC status"""

    proposer: str
    """The address of the proposer"""
    kyc_status: bool
    """The new status of the proposer"""
    kyc_expiring: int
    """The expiration date as a unix timestamp of the time the KYC expires"""

    @staticmethod
    def method() -> str:
        return "set_proposer_kyc(address,bool,uint64)void"


@dataclasses.dataclass(kw_only=True)
class DeclareCommitteeArgs(_ArgsBase[None]):
    """Sets the committee details"""

    cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    size: int
    """The size of the committee"""
    votes: int
    """The voting power of the committee"""

    @staticmethod
    def method() -> str:
        return "declare_committee(byte[32],uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class OpenProposalArgs(_ArgsBase[int]):
    """Creates a new Proposal"""

    payment: TransactionWithSigner
    """payment for covering the proposal fee & child contract MBR"""

    @staticmethod
    def method() -> str:
        return "open_proposal(pay)uint64"


@dataclasses.dataclass(kw_only=True)
class PayGrantProposalArgs(_ArgsBase[None]):
    """Disburses the funds for an approved proposal"""

    proposal_id: int
    """The application id of the approved proposal"""

    @staticmethod
    def method() -> str:
        return "pay_grant_proposal(uint64)void"


@dataclasses.dataclass(kw_only=True)
class DepositFundsArgs(_ArgsBase[None]):
    """Tracks deposits to the treasury"""

    payment: TransactionWithSigner
    """the deposit transaction"""

    @staticmethod
    def method() -> str:
        return "deposit_funds(pay)void"


@dataclasses.dataclass(kw_only=True)
class WithdrawFundsArgs(_ArgsBase[None]):
    """Remove funds from the treasury"""

    amount: int
    """the amount to remove"""

    @staticmethod
    def method() -> str:
        return "withdraw_funds(uint64)void"


@dataclasses.dataclass(kw_only=True)
class TypedGlobalState:
    xgov_manager: str
    xgov_payor: str
    kyc_provider: str
    committee_manager: str
    committee_publisher: str
    xgov_min_balance: int
    proposer_fee: int
    proposal_fee: int
    proposal_publishing_bps: int
    proposal_commitment_bps: int
    min_requested_amount: int
    max_requested_amount: list[int] | tuple[int, int, int]
    discussion_duration: list[int] | tuple[int, int, int, int]
    voting_duration: list[int] | tuple[int, int, int, int]
    cool_down_duration: int
    quorum: list[int] | tuple[int, int, int]
    weighted_quorum: list[int] | tuple[int, int, int]
    outstanding_funds: int
    pending_proposals: int
    committee_id: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    committee_members: int
    committee_votes: int


@dataclasses.dataclass(kw_only=True)
class GetStateArgs(_ArgsBase[TypedGlobalState]):
    """Returns the global state of the applicaton"""

    @staticmethod
    def method() -> str:
        return "get_state()(address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class CreateArgs(_ArgsBase[None]):
    """Create the xgov registry."""

    @staticmethod
    def method() -> str:
        return "create()void"


@dataclasses.dataclass(kw_only=True)
class UpdateXgovRegistryArgs(_ArgsBase[None]):
    """Updates the registry contract"""

    @staticmethod
    def method() -> str:
        return "update_xgov_registry()void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.committee_id = ByteReader(typing.cast(bytes, data.get(b"committee_id")))
        self.committee_manager = ByteReader(typing.cast(bytes, data.get(b"committee_manager")))
        self.committee_members = typing.cast(int, data.get(b"committee_members"))
        self.committee_publisher = ByteReader(typing.cast(bytes, data.get(b"committee_publisher")))
        self.committee_votes = typing.cast(int, data.get(b"committee_votes"))
        self.cool_down_duration = typing.cast(int, data.get(b"cool_down_duration"))
        self.discussion_duration_large = typing.cast(int, data.get(b"discussion_duration_large"))
        self.discussion_duration_medium = typing.cast(int, data.get(b"discussion_duration_medium"))
        self.discussion_duration_small = typing.cast(int, data.get(b"discussion_duration_small"))
        self.discussion_duration_xlarge = typing.cast(int, data.get(b"discussion_duration_xlarge"))
        self.kyc_provider = ByteReader(typing.cast(bytes, data.get(b"kyc_provider")))
        self.max_requested_amount_large = typing.cast(int, data.get(b"max_requested_amount_large"))
        self.max_requested_amount_medium = typing.cast(int, data.get(b"max_requested_amount_medium"))
        self.max_requested_amount_small = typing.cast(int, data.get(b"max_requested_amount_small"))
        self.min_requested_amount = typing.cast(int, data.get(b"min_requested_amount"))
        self.outstanding_funds = typing.cast(int, data.get(b"outstanding_funds"))
        self.pending_proposals = typing.cast(int, data.get(b"pending_proposals"))
        self.proposal_commitment_bps = typing.cast(int, data.get(b"proposal_commitment_bps"))
        self.proposal_fee = typing.cast(int, data.get(b"proposal_fee"))
        self.proposal_publishing_bps = typing.cast(int, data.get(b"proposal_publishing_bps"))
        self.proposer_fee = typing.cast(int, data.get(b"proposer_fee"))
        self.quorum_large = typing.cast(int, data.get(b"quorum_large"))
        self.quorum_medium = typing.cast(int, data.get(b"quorum_medium"))
        self.quorum_small = typing.cast(int, data.get(b"quorum_small"))
        self.voting_duration_large = typing.cast(int, data.get(b"voting_duration_large"))
        self.voting_duration_medium = typing.cast(int, data.get(b"voting_duration_medium"))
        self.voting_duration_small = typing.cast(int, data.get(b"voting_duration_small"))
        self.voting_duration_xlarge = typing.cast(int, data.get(b"voting_duration_xlarge"))
        self.weighted_quorum_large = typing.cast(int, data.get(b"weighted_quorum_large"))
        self.weighted_quorum_medium = typing.cast(int, data.get(b"weighted_quorum_medium"))
        self.weighted_quorum_small = typing.cast(int, data.get(b"weighted_quorum_small"))
        self.xgov_manager = ByteReader(typing.cast(bytes, data.get(b"xgov_manager")))
        self.xgov_min_balance = typing.cast(int, data.get(b"xgov_min_balance"))
        self.xgov_payor = ByteReader(typing.cast(bytes, data.get(b"xgov_payor")))
        self.xgov_reviewer = ByteReader(typing.cast(bytes, data.get(b"xgov_reviewer")))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def set_xgov_manager(
        self,
        *,
        manager: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets the XGov manager.
        
        Adds a call to `set_xgov_manager(address)void` ABI method
        
        :param str manager: Address of the new manager
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetXgovManagerArgs(
            manager=manager,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_payor(
        self,
        *,
        payor: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets the XGov payor.
        
        Adds a call to `set_payor(address)void` ABI method
        
        :param str payor: Address of the new payor
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetPayorArgs(
            payor=payor,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_xgov_reviewer(
        self,
        *,
        reviewer: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets the XGov Reviwer.
        
        Adds a call to `set_xgov_reviewer(address)void` ABI method
        
        :param str reviewer: Address of the new reviewer
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetXgovReviewerArgs(
            reviewer=reviewer,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_kyc_provider(
        self,
        *,
        provider: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets the KYC provider.
        
        Adds a call to `set_kyc_provider(address)void` ABI method
        
        :param str provider: Address of the new provider
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetKycProviderArgs(
            provider=provider,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_committee_manager(
        self,
        *,
        manager: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets the committee manager.
        
        Adds a call to `set_committee_manager(address)void` ABI method
        
        :param str manager: Address of the new manager
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetCommitteeManagerArgs(
            manager=manager,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_committee_publisher(
        self,
        *,
        publisher: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets the committee publisher.
        
        Adds a call to `set_committee_publisher(address)void` ABI method
        
        :param str publisher: Address of the new publisher
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetCommitteePublisherArgs(
            publisher=publisher,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def config_xgov_registry(
        self,
        *,
        config: XGovRegistryConfig,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets the configurable global state keys of the registry.
        
        Adds a call to `config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3]))void` ABI method
        
        :param XGovRegistryConfig config: Configuration class containing the field data
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ConfigXgovRegistryArgs(
            config=config,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def subscribe_xgov(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Subscribes the sender to being an XGov
        
        Adds a call to `subscribe_xgov(pay)void` ABI method
        
        :param TransactionWithSigner payment: The payment transaction covering the signup MBR
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SubscribeXgovArgs(
            payment=payment,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def unsubscribe_xgov(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Unsubscribes the sender from being an XGov
        
        Adds a call to `unsubscribe_xgov()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UnsubscribeXgovArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_voting_account(
        self,
        *,
        xgov_address: str,
        voting_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets the voting account for the XGov
        
        Adds a call to `set_voting_account(address,address)void` ABI method
        
        :param str xgov_address: The `xgov_address` ABI parameter
        :param str voting_address: The voting account address to delegate voting power to
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetVotingAccountArgs(
            xgov_address=xgov_address,
            voting_address=voting_address,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def subscribe_proposer(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Subscribes the sender to being an proposer
        
        Adds a call to `subscribe_proposer(pay)void` ABI method
        
        :param TransactionWithSigner payment: The payment transaction covering the proposer fee
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SubscribeProposerArgs(
            payment=payment,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_proposer_kyc(
        self,
        *,
        proposer: str,
        kyc_status: bool,
        kyc_expiring: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets a proposer's KYC status
        
        Adds a call to `set_proposer_kyc(address,bool,uint64)void` ABI method
        
        :param str proposer: The address of the proposer
        :param bool kyc_status: The new status of the proposer
        :param int kyc_expiring: The expiration date as a unix timestamp of the time the KYC expires
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetProposerKycArgs(
            proposer=proposer,
            kyc_status=kyc_status,
            kyc_expiring=kyc_expiring,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def declare_committee(
        self,
        *,
        cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        size: int,
        votes: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets the committee details
        
        Adds a call to `declare_committee(byte[32],uint64,uint64)void` ABI method
        
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] cid: The `cid` ABI parameter
        :param int size: The size of the committee
        :param int votes: The voting power of the committee
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DeclareCommitteeArgs(
            cid=cid,
            size=size,
            votes=votes,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def open_proposal(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Creates a new Proposal
        
        Adds a call to `open_proposal(pay)uint64` ABI method
        
        :param TransactionWithSigner payment: payment for covering the proposal fee & child contract MBR
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OpenProposalArgs(
            payment=payment,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def pay_grant_proposal(
        self,
        *,
        proposal_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Disburses the funds for an approved proposal
        
        Adds a call to `pay_grant_proposal(uint64)void` ABI method
        
        :param int proposal_id: The application id of the approved proposal
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PayGrantProposalArgs(
            proposal_id=proposal_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def deposit_funds(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Tracks deposits to the treasury
        
        Adds a call to `deposit_funds(pay)void` ABI method
        
        :param TransactionWithSigner payment: the deposit transaction
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DepositFundsArgs(
            payment=payment,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_funds(
        self,
        *,
        amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Remove funds from the treasury
        
        Adds a call to `withdraw_funds(uint64)void` ABI method
        
        :param int amount: the amount to remove
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawFundsArgs(
            amount=amount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_state(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Returns the global state of the applicaton
        
        Adds a call to `get_state()(address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetStateArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_create(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Create the xgov registry.
        
        Adds a call to `create()void` ABI method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArgs()
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_update_xgov_registry(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Updates the registry contract
        
        Adds a call to `update_xgov_registry()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateXgovRegistryArgs()
        self.app_client.compose_update(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class XGovRegistryClient:
    """A class for interacting with the XGovRegistry app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        XGovRegistryClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def set_xgov_manager(
        self,
        *,
        manager: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets the XGov manager.
        
        Calls `set_xgov_manager(address)void` ABI method
        
        :param str manager: Address of the new manager
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetXgovManagerArgs(
            manager=manager,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_payor(
        self,
        *,
        payor: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets the XGov payor.
        
        Calls `set_payor(address)void` ABI method
        
        :param str payor: Address of the new payor
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetPayorArgs(
            payor=payor,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_xgov_reviewer(
        self,
        *,
        reviewer: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets the XGov Reviwer.
        
        Calls `set_xgov_reviewer(address)void` ABI method
        
        :param str reviewer: Address of the new reviewer
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetXgovReviewerArgs(
            reviewer=reviewer,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_kyc_provider(
        self,
        *,
        provider: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets the KYC provider.
        
        Calls `set_kyc_provider(address)void` ABI method
        
        :param str provider: Address of the new provider
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetKycProviderArgs(
            provider=provider,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_committee_manager(
        self,
        *,
        manager: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets the committee manager.
        
        Calls `set_committee_manager(address)void` ABI method
        
        :param str manager: Address of the new manager
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetCommitteeManagerArgs(
            manager=manager,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_committee_publisher(
        self,
        *,
        publisher: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets the committee publisher.
        
        Calls `set_committee_publisher(address)void` ABI method
        
        :param str publisher: Address of the new publisher
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetCommitteePublisherArgs(
            publisher=publisher,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def config_xgov_registry(
        self,
        *,
        config: XGovRegistryConfig,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets the configurable global state keys of the registry.
        
        Calls `config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3]))void` ABI method
        
        :param XGovRegistryConfig config: Configuration class containing the field data
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ConfigXgovRegistryArgs(
            config=config,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def subscribe_xgov(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Subscribes the sender to being an XGov
        
        Calls `subscribe_xgov(pay)void` ABI method
        
        :param TransactionWithSigner payment: The payment transaction covering the signup MBR
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SubscribeXgovArgs(
            payment=payment,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def unsubscribe_xgov(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Unsubscribes the sender from being an XGov
        
        Calls `unsubscribe_xgov()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UnsubscribeXgovArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_voting_account(
        self,
        *,
        xgov_address: str,
        voting_address: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets the voting account for the XGov
        
        Calls `set_voting_account(address,address)void` ABI method
        
        :param str xgov_address: The `xgov_address` ABI parameter
        :param str voting_address: The voting account address to delegate voting power to
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetVotingAccountArgs(
            xgov_address=xgov_address,
            voting_address=voting_address,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def subscribe_proposer(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Subscribes the sender to being an proposer
        
        Calls `subscribe_proposer(pay)void` ABI method
        
        :param TransactionWithSigner payment: The payment transaction covering the proposer fee
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SubscribeProposerArgs(
            payment=payment,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_proposer_kyc(
        self,
        *,
        proposer: str,
        kyc_status: bool,
        kyc_expiring: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets a proposer's KYC status
        
        Calls `set_proposer_kyc(address,bool,uint64)void` ABI method
        
        :param str proposer: The address of the proposer
        :param bool kyc_status: The new status of the proposer
        :param int kyc_expiring: The expiration date as a unix timestamp of the time the KYC expires
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetProposerKycArgs(
            proposer=proposer,
            kyc_status=kyc_status,
            kyc_expiring=kyc_expiring,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def declare_committee(
        self,
        *,
        cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        size: int,
        votes: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets the committee details
        
        Calls `declare_committee(byte[32],uint64,uint64)void` ABI method
        
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] cid: The `cid` ABI parameter
        :param int size: The size of the committee
        :param int votes: The voting power of the committee
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DeclareCommitteeArgs(
            cid=cid,
            size=size,
            votes=votes,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def open_proposal(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Creates a new Proposal
        
        Calls `open_proposal(pay)uint64` ABI method
        
        :param TransactionWithSigner payment: payment for covering the proposal fee & child contract MBR
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The result of the transaction"""

        args = OpenProposalArgs(
            payment=payment,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def pay_grant_proposal(
        self,
        *,
        proposal_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Disburses the funds for an approved proposal
        
        Calls `pay_grant_proposal(uint64)void` ABI method
        
        :param int proposal_id: The application id of the approved proposal
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = PayGrantProposalArgs(
            proposal_id=proposal_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def deposit_funds(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Tracks deposits to the treasury
        
        Calls `deposit_funds(pay)void` ABI method
        
        :param TransactionWithSigner payment: the deposit transaction
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DepositFundsArgs(
            payment=payment,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_funds(
        self,
        *,
        amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Remove funds from the treasury
        
        Calls `withdraw_funds(uint64)void` ABI method
        
        :param int amount: the amount to remove
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = WithdrawFundsArgs(
            amount=amount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_state(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[TypedGlobalState]:
        """Returns the global state of the applicaton
        
        Calls `get_state()(address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[TypedGlobalState]: The result of the transaction"""

        args = GetStateArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = TypedGlobalState(**result_dict)
        return result

    def create_create(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Create the xgov registry.
        
        Calls `create()void` ABI method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CreateArgs()
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_update_xgov_registry(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Updates the registry contract
        
        Calls `update_xgov_registry()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UpdateXgovRegistryArgs()
        result = self.app_client.update(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[CreateArgs],
        update_args: Deploy[UpdateXgovRegistryArgs],
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[CreateArgs] create_args: Arguments used when creating an application
        :param Deploy[UpdateXgovRegistryArgs] update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
