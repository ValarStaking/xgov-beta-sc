{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "set_xgov_manager(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_payor(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_xgov_reviewer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_xgov_subscriber(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_kyc_provider(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_manager(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_publisher(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64,uint64[3],uint64[3]))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "config": {
                    "name": "XGovRegistryConfig",
                    "elements": [
                        [
                            "xgov_fee",
                            "uint64"
                        ],
                        [
                            "proposer_fee",
                            "uint64"
                        ],
                        [
                            "proposal_fee",
                            "uint64"
                        ],
                        [
                            "proposal_publishing_bps",
                            "uint64"
                        ],
                        [
                            "proposal_commitment_bps",
                            "uint64"
                        ],
                        [
                            "min_requested_amount",
                            "uint64"
                        ],
                        [
                            "max_requested_amount",
                            "uint64[3]"
                        ],
                        [
                            "discussion_duration",
                            "uint64[4]"
                        ],
                        [
                            "voting_duration",
                            "uint64[4]"
                        ],
                        [
                            "cool_down_duration",
                            "uint64"
                        ],
                        [
                            "stale_proposal_duration",
                            "uint64"
                        ],
                        [
                            "quorum",
                            "uint64[3]"
                        ],
                        [
                            "weighted_quorum",
                            "uint64[3]"
                        ]
                    ]
                }
            }
        },
        "update_xgov_registry()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "subscribe_xgov(address,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unsubscribe_xgov(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "subscribe_xgov_app(uint64,address,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unsubscribe_xgov_app(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "request_subscribe_xgov(address,address,uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_subscribe_xgov(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reject_subscribe_xgov(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_voting_account(address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "subscribe_proposer(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_proposer_kyc(address,bool,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "declare_committee(byte[32],uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "open_proposal(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote_proposal(uint64,address,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pay_grant_proposal(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit_funds(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_funds(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_state()(address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64,uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "TypedGlobalState",
                    "elements": [
                        [
                            "xgov_manager",
                            "address"
                        ],
                        [
                            "xgov_payor",
                            "address"
                        ],
                        [
                            "kyc_provider",
                            "address"
                        ],
                        [
                            "committee_manager",
                            "address"
                        ],
                        [
                            "committee_publisher",
                            "address"
                        ],
                        [
                            "xgov_fee",
                            "uint64"
                        ],
                        [
                            "proposer_fee",
                            "uint64"
                        ],
                        [
                            "proposal_fee",
                            "uint64"
                        ],
                        [
                            "proposal_publishing_bps",
                            "uint64"
                        ],
                        [
                            "proposal_commitment_bps",
                            "uint64"
                        ],
                        [
                            "min_requested_amount",
                            "uint64"
                        ],
                        [
                            "max_requested_amount",
                            "uint64[3]"
                        ],
                        [
                            "discussion_duration",
                            "uint64[4]"
                        ],
                        [
                            "voting_duration",
                            "uint64[4]"
                        ],
                        [
                            "cool_down_duration",
                            "uint64"
                        ],
                        [
                            "stale_proposal_duration",
                            "uint64"
                        ],
                        [
                            "quorum",
                            "uint64[3]"
                        ],
                        [
                            "weighted_quorum",
                            "uint64[3]"
                        ],
                        [
                            "outstanding_funds",
                            "uint64"
                        ],
                        [
                            "pending_proposals",
                            "uint64"
                        ],
                        [
                            "committee_id",
                            "byte[32]"
                        ],
                        [
                            "committee_members",
                            "uint64"
                        ],
                        [
                            "committee_votes",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMueGdvdl9yZWdpc3RyeS5jb250cmFjdC5YR292UmVnaXN0cnkuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 8,
            "num_uints": 31
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "committee_id": {
                    "type": "bytes",
                    "key": "committee_id"
                },
                "committee_manager": {
                    "type": "bytes",
                    "key": "committee_manager"
                },
                "committee_members": {
                    "type": "uint64",
                    "key": "committee_members"
                },
                "committee_publisher": {
                    "type": "bytes",
                    "key": "committee_publisher"
                },
                "committee_votes": {
                    "type": "uint64",
                    "key": "committee_votes"
                },
                "cool_down_duration": {
                    "type": "uint64",
                    "key": "cool_down_duration"
                },
                "discussion_duration_large": {
                    "type": "uint64",
                    "key": "discussion_duration_large"
                },
                "discussion_duration_medium": {
                    "type": "uint64",
                    "key": "discussion_duration_medium"
                },
                "discussion_duration_small": {
                    "type": "uint64",
                    "key": "discussion_duration_small"
                },
                "discussion_duration_xlarge": {
                    "type": "uint64",
                    "key": "discussion_duration_xlarge"
                },
                "kyc_provider": {
                    "type": "bytes",
                    "key": "kyc_provider"
                },
                "max_requested_amount_large": {
                    "type": "uint64",
                    "key": "max_requested_amount_large"
                },
                "max_requested_amount_medium": {
                    "type": "uint64",
                    "key": "max_requested_amount_medium"
                },
                "max_requested_amount_small": {
                    "type": "uint64",
                    "key": "max_requested_amount_small"
                },
                "min_requested_amount": {
                    "type": "uint64",
                    "key": "min_requested_amount"
                },
                "outstanding_funds": {
                    "type": "uint64",
                    "key": "outstanding_funds"
                },
                "pending_proposals": {
                    "type": "uint64",
                    "key": "pending_proposals"
                },
                "proposal_commitment_bps": {
                    "type": "uint64",
                    "key": "proposal_commitment_bps"
                },
                "proposal_fee": {
                    "type": "uint64",
                    "key": "proposal_fee"
                },
                "proposal_publishing_bps": {
                    "type": "uint64",
                    "key": "proposal_publishing_bps"
                },
                "proposer_fee": {
                    "type": "uint64",
                    "key": "proposer_fee"
                },
                "quorum_large": {
                    "type": "uint64",
                    "key": "quorum_large"
                },
                "quorum_medium": {
                    "type": "uint64",
                    "key": "quorum_medium"
                },
                "quorum_small": {
                    "type": "uint64",
                    "key": "quorum_small"
                },
                "request_id": {
                    "type": "uint64",
                    "key": "request_id"
                },
                "stale_proposal_duration": {
                    "type": "uint64",
                    "key": "stale_proposal_duration"
                },
                "voting_duration_large": {
                    "type": "uint64",
                    "key": "voting_duration_large"
                },
                "voting_duration_medium": {
                    "type": "uint64",
                    "key": "voting_duration_medium"
                },
                "voting_duration_small": {
                    "type": "uint64",
                    "key": "voting_duration_small"
                },
                "voting_duration_xlarge": {
                    "type": "uint64",
                    "key": "voting_duration_xlarge"
                },
                "weighted_quorum_large": {
                    "type": "uint64",
                    "key": "weighted_quorum_large"
                },
                "weighted_quorum_medium": {
                    "type": "uint64",
                    "key": "weighted_quorum_medium"
                },
                "weighted_quorum_small": {
                    "type": "uint64",
                    "key": "weighted_quorum_small"
                },
                "xgov_fee": {
                    "type": "uint64",
                    "key": "xgov_fee"
                },
                "xgov_manager": {
                    "type": "bytes",
                    "key": "xgov_manager"
                },
                "xgov_payor": {
                    "type": "bytes",
                    "key": "xgov_payor"
                },
                "xgov_reviewer": {
                    "type": "bytes",
                    "key": "xgov_reviewer"
                },
                "xgov_subscriber": {
                    "type": "bytes",
                    "key": "xgov_subscriber"
                },
                "xgovs": {
                    "type": "uint64",
                    "key": "xgovs"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "XGovRegistry",
        "methods": [
            {
                "name": "create",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create the xGov Registry."
            },
            {
                "name": "set_xgov_manager",
                "args": [
                    {
                        "type": "address",
                        "name": "manager",
                        "desc": "Address of the new xGov Manager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the xGov Manager."
            },
            {
                "name": "set_payor",
                "args": [
                    {
                        "type": "address",
                        "name": "payor",
                        "desc": "Address of the new xGov Payor"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the xGov Payor."
            },
            {
                "name": "set_xgov_reviewer",
                "args": [
                    {
                        "type": "address",
                        "name": "reviewer",
                        "desc": "Address of the new xGov Reviewer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the xGov Reviewer."
            },
            {
                "name": "set_xgov_subscriber",
                "args": [
                    {
                        "type": "address",
                        "name": "subscriber",
                        "desc": "Address of the new xGov Subscriber"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the xGov Subscriber."
            },
            {
                "name": "set_kyc_provider",
                "args": [
                    {
                        "type": "address",
                        "name": "provider",
                        "desc": "Address of the new KYC Provider"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the KYC provider."
            },
            {
                "name": "set_committee_manager",
                "args": [
                    {
                        "type": "address",
                        "name": "manager",
                        "desc": "Address of the new xGov Manager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the Committee Manager."
            },
            {
                "name": "set_committee_publisher",
                "args": [
                    {
                        "type": "address",
                        "name": "publisher",
                        "desc": "Address of the new Committee Publisher"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the Committee Publisher."
            },
            {
                "name": "config_xgov_registry",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64,uint64[3],uint64[3])",
                        "name": "config",
                        "desc": "Configuration class containing the field data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the configuration of the xGov Registry."
            },
            {
                "name": "update_xgov_registry",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the xGov Registry contract."
            },
            {
                "name": "subscribe_xgov",
                "args": [
                    {
                        "type": "address",
                        "name": "voting_address",
                        "desc": "The address of the voting account for the xGov"
                    },
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction covering the xGov fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Subscribes the sender to being an xGov."
            },
            {
                "name": "unsubscribe_xgov",
                "args": [
                    {
                        "type": "address",
                        "name": "xgov_address",
                        "desc": "The address of the xGov to unsubscribe"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Unsubscribes the designated address from being an xGov."
            },
            {
                "name": "subscribe_xgov_app",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app_id",
                        "desc": "The id of the application to subscribe"
                    },
                    {
                        "type": "address",
                        "name": "voting_address",
                        "desc": "The address of the voting account for the xGov"
                    },
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction covering the xGov fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "The App Creator subscribes the App to being an xGov."
            },
            {
                "name": "unsubscribe_xgov_app",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Unsubscribes the designated App from being an xGov."
            },
            {
                "name": "request_subscribe_xgov",
                "args": [
                    {
                        "type": "address",
                        "name": "xgov_address",
                        "desc": "The address of the xGov"
                    },
                    {
                        "type": "address",
                        "name": "owner_address",
                        "desc": "The address of the xGov Address owner/controller (Voting Address)"
                    },
                    {
                        "type": "uint64",
                        "name": "relation_type",
                        "desc": "The type of relationship enum"
                    },
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction covering the xGov fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Requests to subscribe to the xGov."
            },
            {
                "name": "approve_subscribe_xgov",
                "args": [
                    {
                        "type": "uint64",
                        "name": "request_id",
                        "desc": "The ID of the request to approve"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Approves a subscribe request to xGov."
            },
            {
                "name": "reject_subscribe_xgov",
                "args": [
                    {
                        "type": "uint64",
                        "name": "request_id",
                        "desc": "The ID of the request to reject"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Rejects a subscribe request to xGov."
            },
            {
                "name": "set_voting_account",
                "args": [
                    {
                        "type": "address",
                        "name": "xgov_address"
                    },
                    {
                        "type": "address",
                        "name": "voting_address",
                        "desc": "The voting account address to delegate voting power to"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the Voting Address for the xGov."
            },
            {
                "name": "subscribe_proposer",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction covering the Proposer fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Subscribes the sender to being a Proposer."
            },
            {
                "name": "set_proposer_kyc",
                "args": [
                    {
                        "type": "address",
                        "name": "proposer",
                        "desc": "The address of the Proposer"
                    },
                    {
                        "type": "bool",
                        "name": "kyc_status",
                        "desc": "The new status of the Proposer"
                    },
                    {
                        "type": "uint64",
                        "name": "kyc_expiring",
                        "desc": "The expiration date as a unix timestamp of the time the KYC expires"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets a proposer's KYC status."
            },
            {
                "name": "declare_committee",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "cid"
                    },
                    {
                        "type": "uint64",
                        "name": "size",
                        "desc": "The size of the xGov Committee"
                    },
                    {
                        "type": "uint64",
                        "name": "votes",
                        "desc": "The voting power of the xGov Committee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the xGov Committee in charge."
            },
            {
                "name": "open_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "payment for covering the proposal fee (includes child contract MBR)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates a new Proposal."
            },
            {
                "name": "vote_proposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_id",
                        "desc": "The application ID of the Proposal app being voted on"
                    },
                    {
                        "type": "address",
                        "name": "xgov_address",
                        "desc": "(arc4.Address): The address of the xGov being voted on behalf of"
                    },
                    {
                        "type": "uint64",
                        "name": "approval_votes",
                        "desc": "(arc4.UInt64): The number of approvals votes allocated"
                    },
                    {
                        "type": "uint64",
                        "name": "rejection_votes",
                        "desc": "(arc4.UInt64): The number of rejections votes allocated"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Votes on a Proposal."
            },
            {
                "name": "pay_grant_proposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_id",
                        "desc": "The application ID of the approved Proposal"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Disburses the funds for an approved Proposal."
            },
            {
                "name": "deposit_funds",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "the deposit transaction"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deposits xGov program funds into the xGov Treasury (xGov Registry Account)."
            },
            {
                "name": "withdraw_funds",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "the amount to remove"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remove xGov program funds from the xGov Treasury (xGov Registry Account)."
            },
            {
                "name": "get_state",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64,uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"
                },
                "desc": "Returns the xGov Registry state."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}