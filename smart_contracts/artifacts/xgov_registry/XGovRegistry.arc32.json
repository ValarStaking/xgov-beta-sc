{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "set_xgov_manager(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_payor(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_xgov_reviewer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_kyc_provider(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_manager(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_publisher(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64,uint64[3],uint64[3]))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "config": {
                    "name": "XGovRegistryConfig",
                    "elements": [
                        [
                            "xgov_min_balance",
                            "uint64"
                        ],
                        [
                            "proposer_fee",
                            "uint64"
                        ],
                        [
                            "proposal_fee",
                            "uint64"
                        ],
                        [
                            "proposal_publishing_bps",
                            "uint64"
                        ],
                        [
                            "proposal_commitment_bps",
                            "uint64"
                        ],
                        [
                            "min_requested_amount",
                            "uint64"
                        ],
                        [
                            "max_requested_amount",
                            "uint64[3]"
                        ],
                        [
                            "discussion_duration",
                            "uint64[4]"
                        ],
                        [
                            "voting_duration",
                            "uint64[4]"
                        ],
                        [
                            "cool_down_duration",
                            "uint64"
                        ],
                        [
                            "stale_proposal_duration",
                            "uint64"
                        ],
                        [
                            "quorum",
                            "uint64[3]"
                        ],
                        [
                            "weighted_quorum",
                            "uint64[3]"
                        ]
                    ]
                }
            }
        },
        "update_xgov_registry()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "subscribe_xgov(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unsubscribe_xgov()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_voting_account(address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "subscribe_proposer(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_proposer_kyc(address,bool,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "declare_committee(byte[32],uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "open_proposal(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pay_grant_proposal(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit_funds(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_funds(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_state()(address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64,uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "TypedGlobalState",
                    "elements": [
                        [
                            "xgov_manager",
                            "address"
                        ],
                        [
                            "xgov_payor",
                            "address"
                        ],
                        [
                            "kyc_provider",
                            "address"
                        ],
                        [
                            "committee_manager",
                            "address"
                        ],
                        [
                            "committee_publisher",
                            "address"
                        ],
                        [
                            "xgov_min_balance",
                            "uint64"
                        ],
                        [
                            "proposer_fee",
                            "uint64"
                        ],
                        [
                            "proposal_fee",
                            "uint64"
                        ],
                        [
                            "proposal_publishing_bps",
                            "uint64"
                        ],
                        [
                            "proposal_commitment_bps",
                            "uint64"
                        ],
                        [
                            "min_requested_amount",
                            "uint64"
                        ],
                        [
                            "max_requested_amount",
                            "uint64[3]"
                        ],
                        [
                            "discussion_duration",
                            "uint64[4]"
                        ],
                        [
                            "voting_duration",
                            "uint64[4]"
                        ],
                        [
                            "cool_down_duration",
                            "uint64"
                        ],
                        [
                            "stale_proposal_duration",
                            "uint64"
                        ],
                        [
                            "quorum",
                            "uint64[3]"
                        ],
                        [
                            "weighted_quorum",
                            "uint64[3]"
                        ],
                        [
                            "outstanding_funds",
                            "uint64"
                        ],
                        [
                            "pending_proposals",
                            "uint64"
                        ],
                        [
                            "committee_id",
                            "byte[32]"
                        ],
                        [
                            "committee_members",
                            "uint64"
                        ],
                        [
                            "committee_votes",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMueGdvdl9yZWdpc3RyeS5jb250cmFjdC5YR292UmVnaXN0cnkuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 7,
            "num_uints": 30
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "committee_id": {
                    "type": "bytes",
                    "key": "committee_id"
                },
                "committee_manager": {
                    "type": "bytes",
                    "key": "committee_manager"
                },
                "committee_members": {
                    "type": "uint64",
                    "key": "committee_members"
                },
                "committee_publisher": {
                    "type": "bytes",
                    "key": "committee_publisher"
                },
                "committee_votes": {
                    "type": "uint64",
                    "key": "committee_votes"
                },
                "cool_down_duration": {
                    "type": "uint64",
                    "key": "cool_down_duration"
                },
                "discussion_duration_large": {
                    "type": "uint64",
                    "key": "discussion_duration_large"
                },
                "discussion_duration_medium": {
                    "type": "uint64",
                    "key": "discussion_duration_medium"
                },
                "discussion_duration_small": {
                    "type": "uint64",
                    "key": "discussion_duration_small"
                },
                "discussion_duration_xlarge": {
                    "type": "uint64",
                    "key": "discussion_duration_xlarge"
                },
                "kyc_provider": {
                    "type": "bytes",
                    "key": "kyc_provider"
                },
                "max_requested_amount_large": {
                    "type": "uint64",
                    "key": "max_requested_amount_large"
                },
                "max_requested_amount_medium": {
                    "type": "uint64",
                    "key": "max_requested_amount_medium"
                },
                "max_requested_amount_small": {
                    "type": "uint64",
                    "key": "max_requested_amount_small"
                },
                "min_requested_amount": {
                    "type": "uint64",
                    "key": "min_requested_amount"
                },
                "outstanding_funds": {
                    "type": "uint64",
                    "key": "outstanding_funds"
                },
                "pending_proposals": {
                    "type": "uint64",
                    "key": "pending_proposals"
                },
                "proposal_commitment_bps": {
                    "type": "uint64",
                    "key": "proposal_commitment_bps"
                },
                "proposal_fee": {
                    "type": "uint64",
                    "key": "proposal_fee"
                },
                "proposal_publishing_bps": {
                    "type": "uint64",
                    "key": "proposal_publishing_bps"
                },
                "proposer_fee": {
                    "type": "uint64",
                    "key": "proposer_fee"
                },
                "quorum_large": {
                    "type": "uint64",
                    "key": "quorum_large"
                },
                "quorum_medium": {
                    "type": "uint64",
                    "key": "quorum_medium"
                },
                "quorum_small": {
                    "type": "uint64",
                    "key": "quorum_small"
                },
                "stale_proposal_duration": {
                    "type": "uint64",
                    "key": "stale_proposal_duration"
                },
                "voting_duration_large": {
                    "type": "uint64",
                    "key": "voting_duration_large"
                },
                "voting_duration_medium": {
                    "type": "uint64",
                    "key": "voting_duration_medium"
                },
                "voting_duration_small": {
                    "type": "uint64",
                    "key": "voting_duration_small"
                },
                "voting_duration_xlarge": {
                    "type": "uint64",
                    "key": "voting_duration_xlarge"
                },
                "weighted_quorum_large": {
                    "type": "uint64",
                    "key": "weighted_quorum_large"
                },
                "weighted_quorum_medium": {
                    "type": "uint64",
                    "key": "weighted_quorum_medium"
                },
                "weighted_quorum_small": {
                    "type": "uint64",
                    "key": "weighted_quorum_small"
                },
                "xgov_manager": {
                    "type": "bytes",
                    "key": "xgov_manager"
                },
                "xgov_min_balance": {
                    "type": "uint64",
                    "key": "xgov_min_balance"
                },
                "xgov_payor": {
                    "type": "bytes",
                    "key": "xgov_payor"
                },
                "xgov_reviewer": {
                    "type": "bytes",
                    "key": "xgov_reviewer"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "XGovRegistry",
        "methods": [
            {
                "name": "create",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create the xgov registry."
            },
            {
                "name": "set_xgov_manager",
                "args": [
                    {
                        "type": "address",
                        "name": "manager",
                        "desc": "Address of the new manager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the XGov manager."
            },
            {
                "name": "set_payor",
                "args": [
                    {
                        "type": "address",
                        "name": "payor",
                        "desc": "Address of the new payor"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the XGov payor."
            },
            {
                "name": "set_xgov_reviewer",
                "args": [
                    {
                        "type": "address",
                        "name": "reviewer",
                        "desc": "Address of the new reviewer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the XGov Reviwer."
            },
            {
                "name": "set_kyc_provider",
                "args": [
                    {
                        "type": "address",
                        "name": "provider",
                        "desc": "Address of the new provider"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the KYC provider."
            },
            {
                "name": "set_committee_manager",
                "args": [
                    {
                        "type": "address",
                        "name": "manager",
                        "desc": "Address of the new manager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the committee manager."
            },
            {
                "name": "set_committee_publisher",
                "args": [
                    {
                        "type": "address",
                        "name": "publisher",
                        "desc": "Address of the new publisher"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the committee publisher."
            },
            {
                "name": "config_xgov_registry",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64,uint64[3],uint64[3])",
                        "name": "config",
                        "desc": "Configuration class containing the field data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the configurable global state keys of the registry."
            },
            {
                "name": "update_xgov_registry",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the registry contract"
            },
            {
                "name": "subscribe_xgov",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction covering the signup MBR"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Subscribes the sender to being an XGov"
            },
            {
                "name": "unsubscribe_xgov",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Unsubscribes the sender from being an XGov"
            },
            {
                "name": "set_voting_account",
                "args": [
                    {
                        "type": "address",
                        "name": "xgov_address"
                    },
                    {
                        "type": "address",
                        "name": "voting_address",
                        "desc": "The voting account address to delegate voting power to"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the voting account for the XGov"
            },
            {
                "name": "subscribe_proposer",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction covering the proposer fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Subscribes the sender to being an proposer"
            },
            {
                "name": "set_proposer_kyc",
                "args": [
                    {
                        "type": "address",
                        "name": "proposer",
                        "desc": "The address of the proposer"
                    },
                    {
                        "type": "bool",
                        "name": "kyc_status",
                        "desc": "The new status of the proposer"
                    },
                    {
                        "type": "uint64",
                        "name": "kyc_expiring",
                        "desc": "The expiration date as a unix timestamp of the time the KYC expires"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets a proposer's KYC status"
            },
            {
                "name": "declare_committee",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "cid"
                    },
                    {
                        "type": "uint64",
                        "name": "size",
                        "desc": "The size of the committee"
                    },
                    {
                        "type": "uint64",
                        "name": "votes",
                        "desc": "The voting power of the committee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the committee details"
            },
            {
                "name": "open_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "payment for covering the proposal fee & child contract MBR"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates a new Proposal"
            },
            {
                "name": "pay_grant_proposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_id",
                        "desc": "The application id of the approved proposal"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Disburses the funds for an approved proposal"
            },
            {
                "name": "deposit_funds",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "the deposit transaction"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Tracks deposits to the treasury"
            },
            {
                "name": "withdraw_funds",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "the amount to remove"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remove funds from the treasury"
            },
            {
                "name": "get_state",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64,uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"
                },
                "desc": "Returns the global state of the applicaton"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}