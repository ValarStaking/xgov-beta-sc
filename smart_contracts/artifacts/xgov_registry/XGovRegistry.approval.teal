#pragma version 10

smart_contracts.xgov_registry.contract.XGovRegistry.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.xgov_registry.contract.XGovRegistry.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@23
    method "create(address,address,address)void"
    method "set_xgov_manager(address)void"
    method "set_kyc_provider(address)void"
    method "set_payor(address)void"
    method "set_committee_publisher(address)void"
    method "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64,uint64[3],uint64[3]))void"
    method "update_xgov_registry()void"
    method "subscribe_xgov(pay)void"
    method "unsubscribe_xgov()void"
    method "set_voting_account(address)void"
    method "subscribe_proposer(pay)void"
    method "set_proposer_kyc(address,bool,uint64)void"
    method "open_proposal(pay)uint64"
    method "vote_proposal(application,address,uint64,uint64)void"
    method "pay_grant_proposal(application)void"
    method "deposit_funds(pay)void"
    method "withdraw_funds(uint64)void"
    method "get_state()(address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,byte[32],uint64,uint64)"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_route@2 __puya_arc4_router___set_xgov_manager_route@3 __puya_arc4_router___set_kyc_provider_route@4 __puya_arc4_router___set_payor_route@5 __puya_arc4_router___set_committee_publisher_route@6 __puya_arc4_router___config_xgov_registry_route@7 __puya_arc4_router___update_xgov_registry_route@8 __puya_arc4_router___subscribe_xgov_route@9 __puya_arc4_router___unsubscribe_xgov_route@10 __puya_arc4_router___set_voting_account_route@11 __puya_arc4_router___subscribe_proposer_route@12 __puya_arc4_router___set_proposer_kyc_route@13 __puya_arc4_router___open_proposal_route@14 __puya_arc4_router___vote_proposal_route@15 __puya_arc4_router___pay_grant_proposal_route@16 __puya_arc4_router___deposit_funds_route@17 __puya_arc4_router___withdraw_funds_route@18 __puya_arc4_router___get_state_route@19
    int 0
    retsub

__puya_arc4_router___create_route@2:
    // smart_contracts/xgov_registry/contract.py:127
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/xgov_registry/contract.py:127
    // @arc4.abimethod(create="require")
    callsub create
    int 1
    retsub

__puya_arc4_router___set_xgov_manager_route@3:
    // smart_contracts/xgov_registry/contract.py:142
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:142
    // @arc4.abimethod()
    callsub set_xgov_manager
    int 1
    retsub

__puya_arc4_router___set_kyc_provider_route@4:
    // smart_contracts/xgov_registry/contract.py:147
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:147
    // @arc4.abimethod()
    callsub set_kyc_provider
    int 1
    retsub

__puya_arc4_router___set_payor_route@5:
    // smart_contracts/xgov_registry/contract.py:152
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:152
    // @arc4.abimethod()
    callsub set_payor
    int 1
    retsub

__puya_arc4_router___set_committee_publisher_route@6:
    // smart_contracts/xgov_registry/contract.py:157
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:157
    // @arc4.abimethod()
    callsub set_committee_publisher
    int 1
    retsub

__puya_arc4_router___config_xgov_registry_route@7:
    // smart_contracts/xgov_registry/contract.py:162
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:162
    // @arc4.abimethod()
    callsub config_xgov_registry
    int 1
    retsub

__puya_arc4_router___update_xgov_registry_route@8:
    // smart_contracts/xgov_registry/contract.py:195
    // @arc4.abimethod(allow_actions=["UpdateApplication"])
    txn OnCompletion
    int UpdateApplication
    ==
    assert // OnCompletion is UpdateApplication
    txn ApplicationID
    assert // is not creating
    callsub update_xgov_registry
    int 1
    retsub

__puya_arc4_router___subscribe_xgov_route@9:
    // smart_contracts/xgov_registry/contract.py:200
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:200
    // @arc4.abimethod()
    callsub subscribe_xgov
    int 1
    retsub

__puya_arc4_router___unsubscribe_xgov_route@10:
    // smart_contracts/xgov_registry/contract.py:214
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub unsubscribe_xgov
    int 1
    retsub

__puya_arc4_router___set_voting_account_route@11:
    // smart_contracts/xgov_registry/contract.py:233
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry/contract.py:233
    // @arc4.abimethod()
    callsub set_voting_account
    int 1
    retsub

__puya_arc4_router___subscribe_proposer_route@12:
    // smart_contracts/xgov_registry/contract.py:246
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:246
    // @arc4.abimethod()
    callsub subscribe_proposer
    int 1
    retsub

__puya_arc4_router___set_proposer_kyc_route@13:
    // smart_contracts/xgov_registry/contract.py:263
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/xgov_registry/contract.py:263
    // @arc4.abimethod()
    callsub set_proposer_kyc
    int 1
    retsub

__puya_arc4_router___open_proposal_route@14:
    // smart_contracts/xgov_registry/contract.py:278
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:278
    // @arc4.abimethod
    callsub open_proposal
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___vote_proposal_route@15:
    // smart_contracts/xgov_registry/contract.py:331
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    // smart_contracts/xgov_registry/contract.py:331
    // @arc4.abimethod()
    callsub vote_proposal
    int 1
    retsub

__puya_arc4_router___pay_grant_proposal_route@16:
    // smart_contracts/xgov_registry/contract.py:356
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // smart_contracts/xgov_registry/contract.py:356
    // @arc4.abimethod()
    callsub pay_grant_proposal
    int 1
    retsub

__puya_arc4_router___deposit_funds_route@17:
    // smart_contracts/xgov_registry/contract.py:399
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/xgov_registry/contract.py:399
    // @arc4.abimethod()
    callsub deposit_funds
    int 1
    retsub

__puya_arc4_router___withdraw_funds_route@18:
    // smart_contracts/xgov_registry/contract.py:405
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry/contract.py:405
    // @arc4.abimethod()
    callsub withdraw_funds
    int 1
    retsub

__puya_arc4_router___get_state_route@19:
    // smart_contracts/xgov_registry/contract.py:417
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_state
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___after_if_else@23:
    // smart_contracts/xgov_registry/contract.py:31-39
    // class XGovRegistry(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    int 0
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.create(manager: bytes, payor: bytes, comittee_manager: bytes) -> void:
create:
    // smart_contracts/xgov_registry/contract.py:127-128
    // @arc4.abimethod(create="require")
    // def create(self, manager: arc4.Address, payor: arc4.Address, comittee_manager: arc4.Address) -> None:
    proto 3 0
    // smart_contracts/xgov_registry/contract.py:137
    // self.xgov_manager.value = manager
    byte 0x78676f765f6d616e61676572
    frame_dig -3
    app_global_put
    // smart_contracts/xgov_registry/contract.py:138
    // self.xgov_payor.value = payor
    byte 0x78676f765f7061796f72
    frame_dig -2
    app_global_put
    // smart_contracts/xgov_registry/contract.py:139
    // self.committee_manager.value = comittee_manager
    byte 0x636f6d6d69747465655f6d616e61676572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_manager(new_manager: bytes) -> void:
set_xgov_manager:
    // smart_contracts/xgov_registry/contract.py:142-143
    // @arc4.abimethod()
    // def set_xgov_manager(self, new_manager: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:144
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:145
    // self.xgov_manager.value = new_manager
    byte 0x78676f765f6d616e61676572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager() -> uint64:
is_xgov_manager:
    // smart_contracts/xgov_registry/contract.py:98-99
    // @subroutine
    // def is_xgov_manager(self) -> bool:
    proto 0 1
    // smart_contracts/xgov_registry/contract.py:100
    // return Txn.sender == self.xgov_manager.value.native
    txn Sender
    int 0
    byte 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    ==
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_kyc_provider(new_provider: bytes) -> void:
set_kyc_provider:
    // smart_contracts/xgov_registry/contract.py:147-148
    // @arc4.abimethod()
    // def set_kyc_provider(self, new_provider: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:149
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:150
    // self.kyc_provider.value = new_provider
    byte 0x6b79635f70726f7669646572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_payor(new_payor: bytes) -> void:
set_payor:
    // smart_contracts/xgov_registry/contract.py:152-153
    // @arc4.abimethod()
    // def set_payor(self, new_payor: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:154
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:155
    // self.xgov_payor.value = new_payor
    byte 0x78676f765f7061796f72
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_committee_publisher(new_publisher: bytes) -> void:
set_committee_publisher:
    // smart_contracts/xgov_registry/contract.py:157-158
    // @arc4.abimethod()
    // def set_committee_publisher(self, new_publisher: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:159
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:160
    // self.committee_publisher.value = new_publisher
    byte 0x636f6d6d69747465655f7075626c6973686572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.config_xgov_registry(config: bytes) -> void:
config_xgov_registry:
    // smart_contracts/xgov_registry/contract.py:162-163
    // @arc4.abimethod()
    // def config_xgov_registry(self, config: typ.XGovRegistryConfig) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:164
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:165
    // assert self.no_pending_proposals(), "Cannot configure with pending proposals"
    callsub no_pending_proposals
    assert // Cannot configure with pending proposals
    // smart_contracts/xgov_registry/contract.py:167
    // self.xgov_min_balance.value = config.xgov_min_balance.native
    frame_dig -1
    extract 0 8 // on error: Index access is out of bounds
    btoi
    byte 0x78676f765f6d696e5f62616c616e6365
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:168
    // self.proposer_fee.value = config.proposer_fee.native
    frame_dig -1
    extract 8 8 // on error: Index access is out of bounds
    btoi
    byte 0x70726f706f7365725f666565
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:169
    // self.proposal_fee.value = config.proposal_fee.native
    frame_dig -1
    extract 16 8 // on error: Index access is out of bounds
    btoi
    byte 0x70726f706f73616c5f666565
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:171
    // self.max_requested_amount_small.value = config.max_req_amount[0].native
    frame_dig -1
    extract 48 24 // on error: Index access is out of bounds
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    byte 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:172
    // self.max_requested_amount_medium.value = config.max_req_amount[1].native
    dup
    extract 8 8 // on error: Index access is out of bounds
    btoi
    byte 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:173
    // self.max_requested_amount_large.value = config.max_req_amount[2].native
    extract 16 8 // on error: Index access is out of bounds
    btoi
    byte 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:175
    // self.discussion_duration_small.value = config.discussion_duration[0].native
    frame_dig -1
    extract 72 32 // on error: Index access is out of bounds
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    byte 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:176
    // self.discussion_duration_medium.value = config.discussion_duration[1].native
    dup
    extract 8 8 // on error: Index access is out of bounds
    btoi
    byte 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:177
    // self.discussion_duration_large.value = config.discussion_duration[2].native
    dup
    extract 16 8 // on error: Index access is out of bounds
    btoi
    byte 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:178
    // self.discussion_duration_xlarge.value = config.discussion_duration[3].native
    extract 24 8 // on error: Index access is out of bounds
    btoi
    byte 0x64697363757373696f6e5f6475726174696f6e5f786c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:180
    // self.voting_duration_small.value = config.voting_duration[0].native
    frame_dig -1
    extract 104 32 // on error: Index access is out of bounds
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    byte 0x766f74696e675f6475726174696f6e5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:181
    // self.voting_duration_medium.value = config.voting_duration[1].native
    dup
    extract 8 8 // on error: Index access is out of bounds
    btoi
    byte 0x766f74696e675f6475726174696f6e5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:182
    // self.voting_duration_large.value = config.voting_duration[2].native
    dup
    extract 16 8 // on error: Index access is out of bounds
    btoi
    byte 0x766f74696e675f6475726174696f6e5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:183
    // self.voting_duration_xlarge.value = config.voting_duration[3].native
    extract 24 8 // on error: Index access is out of bounds
    btoi
    byte 0x766f74696e675f6475726174696f6e5f786c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:185
    // self.cool_down_duration.value = config.cool_down_duration.native
    frame_dig -1
    extract 136 8 // on error: Index access is out of bounds
    btoi
    byte 0x636f6f6c5f646f776e5f6475726174696f6e
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:187
    // self.quorum_small.value = config.quorum[0].native
    frame_dig -1
    extract 144 24 // on error: Index access is out of bounds
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    byte 0x71756f72756d5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:188
    // self.quorum_medium.value = config.quorum[1].native
    dup
    extract 8 8 // on error: Index access is out of bounds
    btoi
    byte 0x71756f72756d5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:189
    // self.quorum_large.value = config.quorum[2].native
    extract 16 8 // on error: Index access is out of bounds
    btoi
    byte 0x71756f72756d5f6c61726765
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:191
    // self.weighted_quorum_small.value = config.weighted_quorum[0].native
    frame_dig -1
    extract 168 24 // on error: Index access is out of bounds
    dup
    extract 0 8 // on error: Index access is out of bounds
    btoi
    byte 0x77656967687465645f71756f72756d5f736d616c6c
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:192
    // self.weighted_quorum_medium.value = config.weighted_quorum[1].native
    dup
    extract 8 8 // on error: Index access is out of bounds
    btoi
    byte 0x77656967687465645f71756f72756d5f6d656469756d
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:193
    // self.weighted_quorum_large.value = config.weighted_quorum[2].native
    extract 16 8 // on error: Index access is out of bounds
    btoi
    byte 0x77656967687465645f71756f72756d5f6c61726765
    swap
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.no_pending_proposals() -> uint64:
no_pending_proposals:
    // smart_contracts/xgov_registry/contract.py:111-112
    // @subroutine
    // def no_pending_proposals(self) -> bool:
    proto 0 1
    // smart_contracts/xgov_registry/contract.py:113
    // return self.pending_proposals.value == UInt64(0)
    int 0
    byte 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    !
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.update_xgov_registry() -> void:
update_xgov_registry:
    // smart_contracts/xgov_registry/contract.py:195-196
    // @arc4.abimethod(allow_actions=["UpdateApplication"])
    // def update_xgov_registry(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry/contract.py:197
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:198
    // assert self.no_pending_proposals(), "Cannot update with pending proposals"
    callsub no_pending_proposals
    assert // Cannot update with pending proposals
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_xgov(payment: uint64) -> void:
subscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:200-201
    // @arc4.abimethod()
    // def subscribe_xgov(self, payment: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:202-203
    // # check if already an xGov
    // xgov = Txn.sender
    txn Sender
    // smart_contracts/xgov_registry/contract.py:204
    // exists = self.xgov_box.maybe(xgov)[1]
    byte 0x78
    dig 1
    concat
    dup
    box_get
    bury 1
    // smart_contracts/xgov_registry/contract.py:205
    // assert not exists, "Already an xGov"
    !
    assert // Already an xGov
    // smart_contracts/xgov_registry/contract.py:207-208
    // # check payment
    // assert payment.receiver == Global.current_application_address, "Payment must be to current application"
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment must be to current application
    // smart_contracts/xgov_registry/contract.py:209
    // assert payment.amount == self.xgov_min_balance.value, "Incorrect payment amount"
    frame_dig -1
    gtxns Amount
    int 0
    byte 0x78676f765f6d696e5f62616c616e6365
    app_global_get_ex
    assert // check self.xgov_min_balance exists
    ==
    assert // Incorrect payment amount
    // smart_contracts/xgov_registry/contract.py:211-212
    // # create box
    // self.xgov_box[xgov] = arc4.Address(xgov)
    swap
    box_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.unsubscribe_xgov() -> void:
unsubscribe_xgov:
    // smart_contracts/xgov_registry/contract.py:214-215
    // @arc4.abimethod()
    // def unsubscribe_xgov(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry/contract.py:216-217
    // # ensure they covered the itxn fee
    // assert Txn.fee >= (Global.min_txn_fee * UInt64(2)), "Fee must cover refund payment"
    txn Fee
    global MinTxnFee
    int 2
    *
    >=
    assert // Fee must cover refund payment
    // smart_contracts/xgov_registry/contract.py:220
    // exists = self.xgov_box.maybe(xgov)[1]
    byte 0x78
    // smart_contracts/xgov_registry/contract.py:219
    // xgov = Txn.sender
    txn Sender
    // smart_contracts/xgov_registry/contract.py:220
    // exists = self.xgov_box.maybe(xgov)[1]
    concat
    dup
    box_get
    bury 1
    // smart_contracts/xgov_registry/contract.py:221
    // assert exists, "Not an xGov"
    assert // Not an xGov
    // smart_contracts/xgov_registry/contract.py:223-224
    // # delete box
    // del self.xgov_box[xgov]
    box_del
    pop
    // smart_contracts/xgov_registry/contract.py:226-231
    // # refund
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=self.xgov_min_balance.value,
    //     fee=UInt64(0),
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:228
    // receiver=Txn.sender,
    txn Sender
    // smart_contracts/xgov_registry/contract.py:229
    // amount=self.xgov_min_balance.value,
    int 0
    byte 0x78676f765f6d696e5f62616c616e6365
    app_global_get_ex
    assert // check self.xgov_min_balance exists
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry/contract.py:226-227
    // # refund
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:230
    // fee=UInt64(0),
    int 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:226-231
    // # refund
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=self.xgov_min_balance.value,
    //     fee=UInt64(0),
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_voting_account(voting_address: bytes) -> void:
set_voting_account:
    // smart_contracts/xgov_registry/contract.py:233-234
    // @arc4.abimethod()
    // def set_voting_account(self, voting_address: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:237
    // old_voting_address, exists = self.xgov_box.maybe(xgov)
    byte 0x78
    // smart_contracts/xgov_registry/contract.py:235-236
    // # Check if the sender is an xGov member
    // xgov = Txn.sender
    txn Sender
    // smart_contracts/xgov_registry/contract.py:237
    // old_voting_address, exists = self.xgov_box.maybe(xgov)
    concat
    dup
    box_get
    // smart_contracts/xgov_registry/contract.py:238
    // assert exists, err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:240-241
    // # Check that the voting account is different from the current voting account
    // assert old_voting_address != voting_address, "Voting account must be different from the current voting account"
    frame_dig -1
    !=
    assert // Voting account must be different from the current voting account
    // smart_contracts/xgov_registry/contract.py:243-244
    // # Update the voting account in the xGov box
    // self.xgov_box[xgov] = voting_address
    frame_dig -1
    box_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_proposer(payment: uint64) -> void:
subscribe_proposer:
    // smart_contracts/xgov_registry/contract.py:246-247
    // @arc4.abimethod()
    // def subscribe_proposer(self, payment: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:249
    // assert not self.is_proposer(), "Already a proposer"
    callsub is_proposer
    !
    assert // Already a proposer
    // smart_contracts/xgov_registry/contract.py:253-254
    // # check fee
    // assert payment.receiver == Global.current_application_address, "Payment must be to current application"
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment must be to current application
    // smart_contracts/xgov_registry/contract.py:255
    // assert payment.amount == self.proposer_fee.value, "Incorrect payment amount"
    frame_dig -1
    gtxns Amount
    int 0
    byte 0x70726f706f7365725f666565
    app_global_get_ex
    assert // check self.proposer_fee exists
    ==
    assert // Incorrect payment amount
    // smart_contracts/xgov_registry/contract.py:257
    // self.proposer_box[Txn.sender] = typ.ProposerBoxValue(
    byte 0x70
    txn Sender
    concat
    // smart_contracts/xgov_registry/contract.py:257-261
    // self.proposer_box[Txn.sender] = typ.ProposerBoxValue(
    //     active_proposal=arc4.Bool(False),
    //     kyc_status=arc4.Bool(False),
    //     kyc_expiring=arc4.UInt64(0),
    // )
    byte 0x000000000000000000
    box_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.is_proposer() -> uint64:
is_proposer:
    // smart_contracts/xgov_registry/contract.py:106-107
    // @subroutine
    // def is_proposer(self) -> bool:
    proto 0 1
    // smart_contracts/xgov_registry/contract.py:108
    // return Txn.sender in self.proposer_box
    byte 0x70
    txn Sender
    concat
    box_len
    bury 1
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.set_proposer_kyc(proposer: bytes, kyc_status: bytes, kyc_expiring: bytes) -> void:
set_proposer_kyc:
    // smart_contracts/xgov_registry/contract.py:263-264
    // @arc4.abimethod()
    // def set_proposer_kyc(self, proposer: arc4.Address, kyc_status: arc4.Bool, kyc_expiring: arc4.UInt64) -> None:
    proto 3 0
    // smart_contracts/xgov_registry/contract.py:265-266
    // # check if kyc provider
    // assert Txn.sender == self.kyc_provider.value.native, err.UNAUTHORIZED
    txn Sender
    int 0
    byte 0x6b79635f70726f7669646572
    app_global_get_ex
    assert // check self.kyc_provider exists
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:268
    // assert proposer.native in self.proposer_box, "Proposer does not exist"
    byte 0x70
    frame_dig -3
    concat
    dup
    box_len
    bury 1
    assert // Proposer does not exist
    // smart_contracts/xgov_registry/contract.py:270
    // proposer_state = self.proposer_box.maybe(proposer.native)[0].copy()
    dup
    box_get
    pop
    // smart_contracts/xgov_registry/contract.py:273
    // active_proposal=proposer_state.active_proposal,
    int 0
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    // smart_contracts/xgov_registry/contract.py:272-276
    // self.proposer_box[proposer.native] = typ.ProposerBoxValue(
    //     active_proposal=proposer_state.active_proposal,
    //     kyc_status=kyc_status,
    //     kyc_expiring=kyc_expiring
    // )
    frame_dig -2
    int 0
    getbit
    int 1
    swap
    setbit
    frame_dig -1
    concat
    box_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.open_proposal(payment: uint64) -> uint64:
open_proposal:
    // smart_contracts/xgov_registry/contract.py:278-279
    // @arc4.abimethod
    // def open_proposal(self, payment: gtxn.PaymentTransaction) -> UInt64:
    proto 1 1
    // smart_contracts/xgov_registry/contract.py:280-281
    // # Check if the caller is a registered proposer
    // proposer = Txn.sender
    txn Sender
    // smart_contracts/xgov_registry/contract.py:282
    // assert proposer in self.proposer_box, err.UNAUTHORIZED
    byte 0x70
    dig 1
    concat
    dup
    box_len
    bury 1
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:284
    // proposer_state = self.proposer_box.maybe(proposer)[0].copy()
    dup
    box_get
    pop
    // smart_contracts/xgov_registry/contract.py:286-287
    // # Check if the proposer already has an active proposal
    // assert not proposer_state.active_proposal, "Proposer already has an active proposal"
    dup
    int 0
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x00
    ==
    assert // Proposer already has an active proposal
    // smart_contracts/xgov_registry/contract.py:289
    // assert Txn.fee >= Global.min_txn_fee * UInt64(3), "Insufficient fee"
    txn Fee
    global MinTxnFee
    int 3
    *
    >=
    assert // Insufficient fee
    // smart_contracts/xgov_registry/contract.py:291-292
    // # Ensure the transaction has the correct payment
    // assert payment.amount == self.proposal_fee.value, "Insufficient payment"
    frame_dig -1
    gtxns Amount
    int 0
    byte 0x70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.proposal_fee exists
    ==
    assert // Insufficient payment
    // smart_contracts/xgov_registry/contract.py:293
    // assert payment.receiver == Global.current_application_address, "Payment must be to current application"
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment must be to current application
    // smart_contracts/xgov_registry/contract.py:298-308
    // itxn.ApplicationCall(
    //     app_args=(arc4.arc4_signature("create(address)void"), proposer),
    //     approval_program=compiled.approval_program,
    //     clear_state_program=compiled.clear_state_program,
    //     global_num_bytes=proposal_config.GLOBAL_BYTES,
    //     global_num_uint=proposal_config.GLOBAL_UINTS,
    //     local_num_bytes=proposal_config.LOCAL_BYTES,
    //     local_num_uint=proposal_config.LOCAL_UINTS,
    //     fee=0
    // )
    // .submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:303
    // global_num_uint=proposal_config.GLOBAL_UINTS,
    int 13
    itxn_field GlobalNumUint
    // smart_contracts/xgov_registry/contract.py:302
    // global_num_bytes=proposal_config.GLOBAL_BYTES,
    int 5
    itxn_field GlobalNumByteSlice
    // smart_contracts/xgov_registry/contract.py:295-296
    // # Create the Proposal App
    // compiled = compile_contract(proposal_contract.Proposal)
    byte base64 CoEBQw==
    itxn_field ClearStateProgramPages
    byte base64 CiAEAAEKFCYMBnN0YXR1cwAIY2F0ZWdvcnkIcHJvcG9zZXIPcmVnaXN0cnlfYXBwX2lkBXRpdGxlA2NpZA1sb2NrZWRfYW1vdW50FHN1Ym1pc3Npb25fdGltZXN0YW1wDGZ1bmRpbmdfdHlwZRByZXF1ZXN0ZWRfYW1vdW50FmZpbmFsaXphdGlvbl90aW1lc3RhbXAxGEAAA4gD0ogAAUOKAAExG0EAk4AEzGlOqoAE9ZiYHoAEOcdS84AEuqJeUIAENcre1DYaAI4FAAIAEgA5AE4AWiKJMRkURDEYFEQ2GgGIAFgjiTEZFEQxGEQxFiMJSTgQIxJENhoBVwIANhoCNhoDFzYaBBeIAEEjiTEZFEQxGEQ2GgFXAgA2GgKIAcwjiTEZFEQxGESIAe0jiTEZFEQxGESIAiojiSKJigEAMg1EK4v/ZycEMg1niYoFAIgAP4v8i/2L/ov/iABWjP2L+4v/iADQJwWL/GcnBov9Z4v/iAEVJwmL/mcnCov/Z4v/iADTJwdMZycIMgdnKCRniYoAAIgADESIABNEIihlRBREiYoAASIrZUQxABKJigABI4mKBAGL/Iv9iABajP2L/iQSQAAHi/4lEkEABCNCAAEiRIAUbWluX3JlcXVlc3RlZF9hbW91bnSIAD2AGm1heF9yZXF1ZXN0ZWRfYW1vdW50X2xhcmdliAAeTIv/DkSL/w9Ei/2JigIBi/4VgXsORIv+KRNEi/+JigEBIicEZUSL/2VEiYoCAIv/iAAZIitlRIv+OAASRIv+OAcyChJEi/44CBJEiYoBAYAXcHJvcG9zYWxfY29tbWl0bWVudF9icHOI/7OL/0yIAAGJigIBi/6L/wuBkE4KiYoBAIAabWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGyI/32AG21heF9yZXF1ZXN0ZWRfYW1vdW50X21lZGl1bYj/XUyL/w9BAAYqJGdCABKL/4sADkEABiolZ0IABCqBIWeJigIAiAAUi/6L/4j/Hoz/JwWL/mcnBov/Z4mKAACI/pdEiP6eRCIoZUQkEkSJigAAiAA0sSIrZUQiJwdlRLIIsgcjshAisgGzJwUpZycGKWcqImcnCSJnJwoiZycHImcnCCJnKCJniYoAAIj+SkQiKGVEJBJEiYoAAIgAZSglZycLMgdngAxwcm9wb3NhbF9mZWWI/qiAF3Byb3Bvc2FsX3B1Ymxpc2hpbmdfYnBziP6MsYATY29tbWl0dGVlX3B1Ymxpc2hlcogAqkkVgSASRE4CiP68sgiyByOyECKyAbOJigAAiP3QRCIoZUQkEkSI/dBEMgciJwhlRAkiKmVEiAADD0SJigEBi/8kEkEAH4AZZGlzY3Vzc2lvbl9kdXJhdGlvbl9zbWFsbIj+EImL/yUSQQAggBpkaXNjdXNzaW9uX2R1cmF0aW9uX21lZGl1bYj96YmAGWRpc2N1c3Npb25fZHVyYXRpb25fbGFyZ2WI/cqJigEBIicEZUSL/2VEiYoAADE1gQUSRDE0gQ0SRDE3FEQxNhREKzIDZycEImcnBSlnJwYpZycIImcnCyJnKCJnKiJnJwkiZycKImcnByJngAxjb21taXR0ZWVfaWQpZ4ARY29tbWl0dGVlX21lbWJlcnMiZ4APY29tbWl0dGVlX3ZvdGVzImeADXZvdGVkX21lbWJlcnMiZ4AJYXBwcm92YWxzImeACnJlamVjdGlvbnMiZ4k=
    itxn_field ApprovalProgramPages
    // smart_contracts/xgov_registry/contract.py:299
    // app_args=(arc4.arc4_signature("create(address)void"), proposer),
    method "create(address)void"
    itxn_field ApplicationArgs
    uncover 2
    itxn_field ApplicationArgs
    // smart_contracts/xgov_registry/contract.py:298
    // itxn.ApplicationCall(
    int appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:306
    // fee=0
    int 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:298-308
    // itxn.ApplicationCall(
    //     app_args=(arc4.arc4_signature("create(address)void"), proposer),
    //     approval_program=compiled.approval_program,
    //     clear_state_program=compiled.clear_state_program,
    //     global_num_bytes=proposal_config.GLOBAL_BYTES,
    //     global_num_uint=proposal_config.GLOBAL_UINTS,
    //     local_num_bytes=proposal_config.LOCAL_BYTES,
    //     local_num_uint=proposal_config.LOCAL_UINTS,
    //     fee=0
    // )
    // .submit()
    itxn_submit
    // smart_contracts/xgov_registry/contract.py:298-309
    // itxn.ApplicationCall(
    //     app_args=(arc4.arc4_signature("create(address)void"), proposer),
    //     approval_program=compiled.approval_program,
    //     clear_state_program=compiled.clear_state_program,
    //     global_num_bytes=proposal_config.GLOBAL_BYTES,
    //     global_num_uint=proposal_config.GLOBAL_UINTS,
    //     local_num_bytes=proposal_config.LOCAL_BYTES,
    //     local_num_uint=proposal_config.LOCAL_UINTS,
    //     fee=0
    // )
    // .submit()
    // .created_app
    itxn CreatedApplicationID
    // smart_contracts/xgov_registry/contract.py:316
    // kyc_status=proposer_state.kyc_status
    dig 1
    int 1
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    // smart_contracts/xgov_registry/contract.py:315
    // kyc_expiring=proposer_state.kyc_expiring,
    uncover 2
    extract 1 8 // on error: Index access is out of bounds
    swap
    // smart_contracts/xgov_registry/contract.py:312-317
    // # Update proposer state
    // self.proposer_box[proposer] = typ.ProposerBoxValue(
    //     active_proposal=arc4.Bool(True),
    //     kyc_expiring=proposer_state.kyc_expiring,
    //     kyc_status=proposer_state.kyc_status
    // )
    int 0
    getbit
    // smart_contracts/xgov_registry/contract.py:314
    // active_proposal=arc4.Bool(True),
    byte 0x80
    // smart_contracts/xgov_registry/contract.py:312-317
    // # Update proposer state
    // self.proposer_box[proposer] = typ.ProposerBoxValue(
    //     active_proposal=arc4.Bool(True),
    //     kyc_expiring=proposer_state.kyc_expiring,
    //     kyc_status=proposer_state.kyc_status
    // )
    int 1
    uncover 2
    setbit
    swap
    concat
    uncover 2
    swap
    box_put
    // smart_contracts/xgov_registry/contract.py:319-324
    // # Transfer funds to the new Proposal App
    // itxn.Payment(
    //     receiver=proposal_app.address,
    //     amount=self.proposal_fee.value,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:321
    // receiver=proposal_app.address,
    dup
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/xgov_registry/contract.py:322
    // amount=self.proposal_fee.value,
    int 0
    byte 0x70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.proposal_fee exists
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry/contract.py:319-320
    // # Transfer funds to the new Proposal App
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:323
    // fee=0,
    int 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:319-324
    // # Transfer funds to the new Proposal App
    // itxn.Payment(
    //     receiver=proposal_app.address,
    //     amount=self.proposal_fee.value,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry/contract.py:326-327
    // # Increment pending proposals
    // self.pending_proposals.value += UInt64(1)
    int 0
    byte 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    int 1
    +
    byte 0x70656e64696e675f70726f706f73616c73
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:329
    // return proposal_app.id
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.vote_proposal(proposal_id: uint64, xgov_address: bytes, vote: uint64, vote_amount: uint64) -> void:
vote_proposal:
    // smart_contracts/xgov_registry/contract.py:331-332
    // @arc4.abimethod()
    // def vote_proposal(self, proposal_id: Application, xgov_address: arc4.Address, vote: UInt64, vote_amount: UInt64) -> None:
    proto 4 0
    // smart_contracts/xgov_registry/contract.py:333-334
    // # ensure a voting enum is being used
    // assert vote < UInt64(3), "Vote must be of Null, Approve, or Reject"
    frame_dig -2
    int 3
    <
    assert // Vote must be of Null, Approve, or Reject
    // smart_contracts/xgov_registry/contract.py:336-337
    // # verify proposal id is genuine proposal
    // assert Global.current_application_address == proposal_id.creator
    global CurrentApplicationAddress
    frame_dig -4
    app_params_get AppCreator
    assert // application exists
    ==
    assert
    // smart_contracts/xgov_registry/contract.py:339-340
    // # make sure they're voting on behalf of an xgov
    // voting_address, exists = self.xgov_box.maybe(xgov_address.native)
    byte 0x78
    frame_dig -3
    concat
    box_get
    // smart_contracts/xgov_registry/contract.py:341
    // assert exists, err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:343-344
    // # Verify the caller is using their voting address
    // assert Txn.sender == voting_address.native, "Must use xGov voting address"
    txn Sender
    ==
    assert // Must use xGov voting address
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.pay_grant_proposal(proposal_id: uint64) -> void:
pay_grant_proposal:
    // smart_contracts/xgov_registry/contract.py:356-357
    // @arc4.abimethod()
    // def pay_grant_proposal(self, proposal_id: Application) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:358-359
    // # Verify the caller is the xGov Payor
    // assert arc4.Address(Txn.sender) == self.xgov_payor.value, err.UNAUTHORIZED
    txn Sender
    int 0
    byte 0x78676f765f7061796f72
    app_global_get_ex
    assert // check self.xgov_payor exists
    ==
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:361-362
    // # Verify proposal_id is a genuine proposal created by this registry
    // assert proposal_id.creator == Global.current_application_address, "Invalid proposal"
    frame_dig -1
    app_params_get AppCreator
    assert // application exists
    global CurrentApplicationAddress
    ==
    assert // Invalid proposal
    // smart_contracts/xgov_registry/contract.py:364-365
    // # Read proposal state directly from the Proposal App's global state
    // status_bytes, status_exists = op.AppGlobal.get_ex_bytes(proposal_id, b"status")
    frame_dig -1
    byte 0x737461747573
    app_global_get_ex
    pop
    // smart_contracts/xgov_registry/contract.py:366
    // status = op.btoi(status_bytes)
    btoi
    // smart_contracts/xgov_registry/contract.py:367
    // proposer_bytes, proposer_exists = op.AppGlobal.get_ex_bytes(proposal_id, b"proposer")
    frame_dig -1
    byte 0x70726f706f736572
    app_global_get_ex
    pop
    // smart_contracts/xgov_registry/contract.py:368
    // proposer = arc4.Address(proposer_bytes)
    dup
    len
    int 32
    ==
    assert // Address length is 32 bytes
    // smart_contracts/xgov_registry/contract.py:369
    // requested_amount_bytes, requested_amount_exists = op.AppGlobal.get_ex_bytes(proposal_id, b"requested_amount")
    frame_dig -1
    byte 0x7265717565737465645f616d6f756e74
    app_global_get_ex
    pop
    // smart_contracts/xgov_registry/contract.py:370
    // requested_amount = op.btoi(requested_amount_bytes)
    btoi
    cover 2
    // smart_contracts/xgov_registry/contract.py:371-372
    // # Verify the proposal is in the approved state
    // assert status == UInt64(proposal_enm.STATUS_APPROVED), "Proposal is not approved"
    swap
    int 30
    ==
    assert // Proposal is not approved
    // smart_contracts/xgov_registry/contract.py:374
    // assert proposer.native in self.proposer_box, "Proposer does not exist"
    byte 0x70
    dig 1
    concat
    dup
    box_len
    bury 1
    assert // Proposer does not exist
    // smart_contracts/xgov_registry/contract.py:376-377
    // # Verify the proposer's KYC is still valid
    // proposer_state = self.proposer_box.maybe(proposer.native)[0].copy()
    dup
    box_get
    pop
    // smart_contracts/xgov_registry/contract.py:379
    // assert proposer_state.kyc_status, "Proposer KYC is not valid"
    dup
    int 1
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    dup
    byte 0x00
    !=
    assert // Proposer KYC is not valid
    // smart_contracts/xgov_registry/contract.py:380
    // assert proposer_state.kyc_expiring > Global.latest_timestamp, "Proposer KYC has expired"
    swap
    extract 1 8 // on error: Index access is out of bounds
    global LatestTimestamp
    itob
    dig 1
    b<
    assert // Proposer KYC has expired
    // smart_contracts/xgov_registry/contract.py:382-383
    // # Verify sufficient funds are available
    // assert self.outstanding_funds.value >= requested_amount, "Insufficient funds in treasury"
    int 0
    byte 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    dig 5
    >=
    assert // Insufficient funds in treasury
    // smart_contracts/xgov_registry/contract.py:385
    // self.disburse_funds(proposer, requested_amount)
    uncover 3
    uncover 4
    callsub disburse_funds
    // smart_contracts/xgov_registry/contract.py:387
    // arc4.abi_call("release_funds", app_id=proposal_id)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    method "release_funds()void"
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    // smart_contracts/xgov_registry/contract.py:389-390
    // # Decrement pending proposals count
    // self.pending_proposals.value = (self.pending_proposals.value - UInt64(1))
    int 0
    byte 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    int 1
    -
    byte 0x70656e64696e675f70726f706f73616c73
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:392-397
    // # Update proposer's active proposal status
    // self.proposer_box[proposer.native] = typ.ProposerBoxValue(
    //     active_proposal=arc4.Bool(False),
    //     kyc_status=proposer_state.kyc_status,
    //     kyc_expiring=proposer_state.kyc_expiring
    // )
    swap
    int 0
    getbit
    // smart_contracts/xgov_registry/contract.py:394
    // active_proposal=arc4.Bool(False),
    byte 0x00
    // smart_contracts/xgov_registry/contract.py:392-397
    // # Update proposer's active proposal status
    // self.proposer_box[proposer.native] = typ.ProposerBoxValue(
    //     active_proposal=arc4.Bool(False),
    //     kyc_status=proposer_state.kyc_status,
    //     kyc_expiring=proposer_state.kyc_expiring
    // )
    int 1
    uncover 2
    setbit
    swap
    concat
    box_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.disburse_funds(recipient: bytes, amount: uint64) -> void:
disburse_funds:
    // smart_contracts/xgov_registry/contract.py:115-116
    // @subroutine
    // def disburse_funds(self, recipient: arc4.Address, amount: UInt64) -> None:
    proto 2 0
    // smart_contracts/xgov_registry/contract.py:117-122
    // # Transfer the funds to the receiver
    // itxn.Payment(
    //     receiver=Account(recipient.bytes),
    //     amount=amount,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:119
    // receiver=Account(recipient.bytes),
    frame_dig -2
    len
    int 32
    ==
    assert // Address length is 32 bytes
    frame_dig -1
    itxn_field Amount
    frame_dig -2
    itxn_field Receiver
    // smart_contracts/xgov_registry/contract.py:117-118
    // # Transfer the funds to the receiver
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:121
    // fee=0,
    int 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:117-122
    // # Transfer the funds to the receiver
    // itxn.Payment(
    //     receiver=Account(recipient.bytes),
    //     amount=amount,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry/contract.py:124-125
    // # Update the outstanding funds
    // self.outstanding_funds.value = (self.outstanding_funds.value - amount)
    int 0
    byte 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    frame_dig -1
    -
    byte 0x6f75747374616e64696e675f66756e6473
    swap
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.deposit_funds(payment: uint64) -> void:
deposit_funds:
    // smart_contracts/xgov_registry/contract.py:399-400
    // @arc4.abimethod()
    // def deposit_funds(self, payment: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:401
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:402
    // assert payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/xgov_registry/contract.py:403
    // self.outstanding_funds.value += payment.amount
    int 0
    byte 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    frame_dig -1
    gtxns Amount
    +
    byte 0x6f75747374616e64696e675f66756e6473
    swap
    app_global_put
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_funds(amount: uint64) -> void:
withdraw_funds:
    // smart_contracts/xgov_registry/contract.py:405-406
    // @arc4.abimethod()
    // def withdraw_funds(self, amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry/contract.py:407
    // assert self.is_xgov_manager(), err.UNAUTHORIZED
    callsub is_xgov_manager
    assert // Unauthorized
    // smart_contracts/xgov_registry/contract.py:408
    // assert amount <= self.outstanding_funds.value, "Insufficient funds"
    int 0
    byte 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    frame_dig -1
    >=
    assert // Insufficient funds
    // smart_contracts/xgov_registry/contract.py:409
    // self.outstanding_funds.value = (self.outstanding_funds.value - amount)
    int 0
    byte 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    frame_dig -1
    -
    byte 0x6f75747374616e64696e675f66756e6473
    swap
    app_global_put
    // smart_contracts/xgov_registry/contract.py:411-415
    // itxn.Payment(
    //     receiver=self.xgov_manager.value.native,
    //     amount=amount,
    //     fee=UInt64(0),
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry/contract.py:412
    // receiver=self.xgov_manager.value.native,
    int 0
    byte 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    frame_dig -1
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry/contract.py:411
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry/contract.py:414
    // fee=UInt64(0),
    int 0
    itxn_field Fee
    // smart_contracts/xgov_registry/contract.py:411-415
    // itxn.Payment(
    //     receiver=self.xgov_manager.value.native,
    //     amount=amount,
    //     fee=UInt64(0),
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.get_state() -> bytes:
get_state:
    // smart_contracts/xgov_registry/contract.py:417-418
    // @arc4.abimethod(readonly=True)
    // def get_state(self) -> typ.TypedGlobalState:
    proto 0 1
    // smart_contracts/xgov_registry/contract.py:420
    // xgov_manager=self.xgov_manager.value,
    int 0
    byte 0x78676f765f6d616e61676572
    app_global_get_ex
    assert // check self.xgov_manager exists
    // smart_contracts/xgov_registry/contract.py:421
    // xgov_payor=self.xgov_payor.value,
    int 0
    byte 0x78676f765f7061796f72
    app_global_get_ex
    assert // check self.xgov_payor exists
    // smart_contracts/xgov_registry/contract.py:422
    // kyc_provider=self.kyc_provider.value,
    int 0
    byte 0x6b79635f70726f7669646572
    app_global_get_ex
    assert // check self.kyc_provider exists
    // smart_contracts/xgov_registry/contract.py:423
    // committee_manager=self.committee_manager.value,
    int 0
    byte 0x636f6d6d69747465655f6d616e61676572
    app_global_get_ex
    assert // check self.committee_manager exists
    // smart_contracts/xgov_registry/contract.py:424
    // committee_publisher=self.committee_publisher.value,
    int 0
    byte 0x636f6d6d69747465655f7075626c6973686572
    app_global_get_ex
    assert // check self.committee_publisher exists
    // smart_contracts/xgov_registry/contract.py:425
    // xgov_min_balance=arc4.UInt64(self.xgov_min_balance.value),
    int 0
    byte 0x78676f765f6d696e5f62616c616e6365
    app_global_get_ex
    assert // check self.xgov_min_balance exists
    itob
    // smart_contracts/xgov_registry/contract.py:426
    // proposer_fee=arc4.UInt64(self.proposal_fee.value),
    int 0
    byte 0x70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.proposal_fee exists
    itob
    // smart_contracts/xgov_registry/contract.py:427
    // proposal_fee=arc4.UInt64(self.proposal_fee.value),
    int 0
    byte 0x70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.proposal_fee exists
    itob
    // smart_contracts/xgov_registry/contract.py:428
    // proposal_publishing_bps=arc4.UInt64(self.proposal_publishing_bps.value),
    int 0
    byte 0x70726f706f73616c5f7075626c697368696e675f627073
    app_global_get_ex
    assert // check self.proposal_publishing_bps exists
    itob
    // smart_contracts/xgov_registry/contract.py:429
    // proposal_commitment_bps=arc4.UInt64(self.proposal_commitment_bps.value),
    int 0
    byte 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    app_global_get_ex
    assert // check self.proposal_commitment_bps exists
    itob
    // smart_contracts/xgov_registry/contract.py:430
    // min_requested_amount=arc4.UInt64(self.min_requested_amount.value),
    int 0
    byte 0x6d696e5f7265717565737465645f616d6f756e74
    app_global_get_ex
    assert // check self.min_requested_amount exists
    itob
    // smart_contracts/xgov_registry/contract.py:431
    // max_requested_amount_small=arc4.UInt64(self.max_requested_amount_small.value),
    int 0
    byte 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    app_global_get_ex
    assert // check self.max_requested_amount_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:432
    // max_requested_amount_medium=arc4.UInt64(self.max_requested_amount_medium.value),
    int 0
    byte 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    app_global_get_ex
    assert // check self.max_requested_amount_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:433
    // max_requested_amount_large=arc4.UInt64(self.max_requested_amount_large.value),
    int 0
    byte 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    app_global_get_ex
    assert // check self.max_requested_amount_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:434
    // discussion_duration_small=arc4.UInt64(self.discussion_duration_small.value),
    int 0
    byte 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    app_global_get_ex
    assert // check self.discussion_duration_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:435
    // discussion_duration_medium=arc4.UInt64(self.discussion_duration_medium.value),
    int 0
    byte 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    app_global_get_ex
    assert // check self.discussion_duration_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:436
    // discussion_duration_large=arc4.UInt64(self.discussion_duration_large.value),
    int 0
    byte 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    app_global_get_ex
    assert // check self.discussion_duration_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:437
    // discussion_duration_xlarge=arc4.UInt64(self.discussion_duration_xlarge.value),
    int 0
    byte 0x64697363757373696f6e5f6475726174696f6e5f786c61726765
    app_global_get_ex
    assert // check self.discussion_duration_xlarge exists
    itob
    // smart_contracts/xgov_registry/contract.py:438
    // voting_duration_small=arc4.UInt64(self.voting_duration_small.value),
    int 0
    byte 0x766f74696e675f6475726174696f6e5f736d616c6c
    app_global_get_ex
    assert // check self.voting_duration_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:439
    // voting_duration_medium=arc4.UInt64(self.voting_duration_medium.value),
    int 0
    byte 0x766f74696e675f6475726174696f6e5f6d656469756d
    app_global_get_ex
    assert // check self.voting_duration_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:440
    // voting_duration_large=arc4.UInt64(self.voting_duration_large.value),
    int 0
    byte 0x766f74696e675f6475726174696f6e5f6c61726765
    app_global_get_ex
    assert // check self.voting_duration_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:441
    // voting_duration_xlarge=arc4.UInt64(self.voting_duration_xlarge.value),
    int 0
    byte 0x766f74696e675f6475726174696f6e5f786c61726765
    app_global_get_ex
    assert // check self.voting_duration_xlarge exists
    itob
    // smart_contracts/xgov_registry/contract.py:442
    // cool_down_duration=arc4.UInt64(self.cool_down_duration.value),
    int 0
    byte 0x636f6f6c5f646f776e5f6475726174696f6e
    app_global_get_ex
    assert // check self.cool_down_duration exists
    itob
    // smart_contracts/xgov_registry/contract.py:443
    // quorum_small=arc4.UInt64(self.quorum_small.value),
    int 0
    byte 0x71756f72756d5f736d616c6c
    app_global_get_ex
    assert // check self.quorum_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:444
    // quorum_medium=arc4.UInt64(self.quorum_medium.value),
    int 0
    byte 0x71756f72756d5f6d656469756d
    app_global_get_ex
    assert // check self.quorum_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:445
    // quorum_large=arc4.UInt64(self.quorum_large.value),
    int 0
    byte 0x71756f72756d5f6c61726765
    app_global_get_ex
    assert // check self.quorum_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:446
    // weighted_quorum_small=arc4.UInt64(self.weighted_quorum_small.value),
    int 0
    byte 0x77656967687465645f71756f72756d5f736d616c6c
    app_global_get_ex
    assert // check self.weighted_quorum_small exists
    itob
    // smart_contracts/xgov_registry/contract.py:447
    // weighted_quorum_medium=arc4.UInt64(self.weighted_quorum_medium.value),
    int 0
    byte 0x77656967687465645f71756f72756d5f6d656469756d
    app_global_get_ex
    assert // check self.weighted_quorum_medium exists
    itob
    // smart_contracts/xgov_registry/contract.py:448
    // weighted_quorum_large=arc4.UInt64(self.weighted_quorum_large.value),
    int 0
    byte 0x77656967687465645f71756f72756d5f6c61726765
    app_global_get_ex
    assert // check self.weighted_quorum_large exists
    itob
    // smart_contracts/xgov_registry/contract.py:449
    // outstanding_funds=arc4.UInt64(self.outstanding_funds.value),
    int 0
    byte 0x6f75747374616e64696e675f66756e6473
    app_global_get_ex
    assert // check self.outstanding_funds exists
    itob
    // smart_contracts/xgov_registry/contract.py:450
    // pending_proposals=arc4.UInt64(self.pending_proposals.value),
    int 0
    byte 0x70656e64696e675f70726f706f73616c73
    app_global_get_ex
    assert // check self.pending_proposals exists
    itob
    // smart_contracts/xgov_registry/contract.py:451
    // committee_id=self.committee_id.value.copy(),
    int 0
    byte 0x636f6d6d69747465655f6964
    app_global_get_ex
    assert // check self.committee_id exists
    // smart_contracts/xgov_registry/contract.py:452
    // committee_members=arc4.UInt64(self.committee_members.value),
    int 0
    byte 0x636f6d6d69747465655f6d656d62657273
    app_global_get_ex
    assert // check self.committee_members exists
    itob
    // smart_contracts/xgov_registry/contract.py:453
    // committee_votes=arc4.UInt64(self.committee_votes.value)
    int 0
    byte 0x636f6d6d69747465655f766f746573
    app_global_get_ex
    assert // check self.committee_votes exists
    itob
    // smart_contracts/xgov_registry/contract.py:419-454
    // return typ.TypedGlobalState(
    //     xgov_manager=self.xgov_manager.value,
    //     xgov_payor=self.xgov_payor.value,
    //     kyc_provider=self.kyc_provider.value,
    //     committee_manager=self.committee_manager.value,
    //     committee_publisher=self.committee_publisher.value,
    //     xgov_min_balance=arc4.UInt64(self.xgov_min_balance.value),
    //     proposer_fee=arc4.UInt64(self.proposal_fee.value),
    //     proposal_fee=arc4.UInt64(self.proposal_fee.value),
    //     proposal_publishing_bps=arc4.UInt64(self.proposal_publishing_bps.value),
    //     proposal_commitment_bps=arc4.UInt64(self.proposal_commitment_bps.value),
    //     min_requested_amount=arc4.UInt64(self.min_requested_amount.value),
    //     max_requested_amount_small=arc4.UInt64(self.max_requested_amount_small.value),
    //     max_requested_amount_medium=arc4.UInt64(self.max_requested_amount_medium.value),
    //     max_requested_amount_large=arc4.UInt64(self.max_requested_amount_large.value),
    //     discussion_duration_small=arc4.UInt64(self.discussion_duration_small.value),
    //     discussion_duration_medium=arc4.UInt64(self.discussion_duration_medium.value),
    //     discussion_duration_large=arc4.UInt64(self.discussion_duration_large.value),
    //     discussion_duration_xlarge=arc4.UInt64(self.discussion_duration_xlarge.value),
    //     voting_duration_small=arc4.UInt64(self.voting_duration_small.value),
    //     voting_duration_medium=arc4.UInt64(self.voting_duration_medium.value),
    //     voting_duration_large=arc4.UInt64(self.voting_duration_large.value),
    //     voting_duration_xlarge=arc4.UInt64(self.voting_duration_xlarge.value),
    //     cool_down_duration=arc4.UInt64(self.cool_down_duration.value),
    //     quorum_small=arc4.UInt64(self.quorum_small.value),
    //     quorum_medium=arc4.UInt64(self.quorum_medium.value),
    //     quorum_large=arc4.UInt64(self.quorum_large.value),
    //     weighted_quorum_small=arc4.UInt64(self.weighted_quorum_small.value),
    //     weighted_quorum_medium=arc4.UInt64(self.weighted_quorum_medium.value),
    //     weighted_quorum_large=arc4.UInt64(self.weighted_quorum_large.value),
    //     outstanding_funds=arc4.UInt64(self.outstanding_funds.value),
    //     pending_proposals=arc4.UInt64(self.pending_proposals.value),
    //     committee_id=self.committee_id.value.copy(),
    //     committee_members=arc4.UInt64(self.committee_members.value),
    //     committee_votes=arc4.UInt64(self.committee_votes.value)
    // )
    uncover 33
    uncover 33
    concat
    uncover 32
    concat
    uncover 31
    concat
    uncover 30
    concat
    uncover 29
    concat
    uncover 28
    concat
    uncover 27
    concat
    uncover 26
    concat
    uncover 25
    concat
    uncover 24
    concat
    uncover 23
    concat
    uncover 22
    concat
    uncover 21
    concat
    uncover 20
    concat
    uncover 19
    concat
    uncover 18
    concat
    uncover 17
    concat
    uncover 16
    concat
    uncover 15
    concat
    uncover 14
    concat
    uncover 13
    concat
    uncover 12
    concat
    uncover 11
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 8
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    retsub


// smart_contracts.xgov_registry.contract.XGovRegistry.__init__() -> void:
__init__:
    // smart_contracts/xgov_registry/contract.py:40
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry/contract.py:41-42
    // # Preconditions
    // assert Txn.global_num_byte_slice == cfg.GLOBAL_BYTES, err.WRONG_GLOBAL_BYTES
    txn GlobalNumByteSlice
    int 5
    ==
    assert // Wrong Global Bytes allocation
    // smart_contracts/xgov_registry/contract.py:43
    // assert Txn.global_num_uint == cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    int 30
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/xgov_registry/contract.py:44
    // assert Txn.local_num_byte_slice == cfg.LOCAL_BYTES, err.WRONG_LOCAL_BYTES
    txn LocalNumByteSlice
    !
    assert // Wrong Local Bytes allocation
    // smart_contracts/xgov_registry/contract.py:45
    // assert Txn.local_num_uint == cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    // smart_contracts/xgov_registry/contract.py:47-48
    // # Initialize global state variables
    // self.xgov_manager = GlobalState(arc4.Address(), key=cfg.GS_KEY_XGOV_MANAGER)
    byte 0x78676f765f6d616e61676572
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:49
    // self.xgov_payor = GlobalState(arc4.Address(), key=cfg.GS_KEY_XGOV_PAYOR)
    byte 0x78676f765f7061796f72
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:50
    // self.kyc_provider = GlobalState(arc4.Address(), key=cfg.GS_KEY_KYC_PROVIDER)
    byte 0x6b79635f70726f7669646572
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:51
    // self.committee_manager = GlobalState(arc4.Address(), key=cfg.GS_KEY_COMMITTEE_MANAGER)
    byte 0x636f6d6d69747465655f6d616e61676572
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:52
    // self.committee_publisher = GlobalState(arc4.Address(), key=cfg.GS_KEY_COMMITTEE_PUBLISHER)
    byte 0x636f6d6d69747465655f7075626c6973686572
    global ZeroAddress
    app_global_put
    // smart_contracts/xgov_registry/contract.py:54
    // self.xgov_min_balance = GlobalState(UInt64(), key=cfg.GS_KEY_XGOV_MIN_BALANCE)
    byte 0x78676f765f6d696e5f62616c616e6365
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:55
    // self.proposer_fee = GlobalState(UInt64(), key=cfg.GS_KEY_PROPOSER_FEE)
    byte 0x70726f706f7365725f666565
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:56
    // self.proposal_fee = GlobalState(UInt64(), key=cfg.GS_KEY_PROPOSAL_FEE)
    byte 0x70726f706f73616c5f666565
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:57
    // self.proposal_publishing_bps = GlobalState(UInt64(), key=cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS)
    byte 0x70726f706f73616c5f7075626c697368696e675f627073
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:58
    // self.proposal_commitment_bps = GlobalState(UInt64(), key=cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS)
    byte 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:60
    // self.min_requested_amount = GlobalState(UInt64(), key=cfg.GS_KEY_MIN_REQUESTED_AMOUNT)
    byte 0x6d696e5f7265717565737465645f616d6f756e74
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:62
    // self.max_requested_amount_small = GlobalState(UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL)
    byte 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:63
    // self.max_requested_amount_medium = GlobalState(UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM)
    byte 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:64
    // self.max_requested_amount_large = GlobalState(UInt64(), key=cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE)
    byte 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:66
    // self.discussion_duration_small = GlobalState(UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_SMALL)
    byte 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:67
    // self.discussion_duration_medium = GlobalState(UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM)
    byte 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:68
    // self.discussion_duration_large = GlobalState(UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_LARGE)
    byte 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:69
    // self.discussion_duration_xlarge = GlobalState(UInt64(), key=cfg.GS_KEY_DISCUSSION_DURATION_XLARGE)
    byte 0x64697363757373696f6e5f6475726174696f6e5f786c61726765
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:71
    // self.voting_duration_small = GlobalState(UInt64(), key=cfg.GS_KEY_VOTING_DURATION_SMALL)
    byte 0x766f74696e675f6475726174696f6e5f736d616c6c
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:72
    // self.voting_duration_medium = GlobalState(UInt64(), key=cfg.GS_KEY_VOTING_DURATION_MEDIUM)
    byte 0x766f74696e675f6475726174696f6e5f6d656469756d
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:73
    // self.voting_duration_large = GlobalState(UInt64(), key=cfg.GS_KEY_VOTING_DURATION_LARGE)
    byte 0x766f74696e675f6475726174696f6e5f6c61726765
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:74
    // self.voting_duration_xlarge = GlobalState(UInt64(), key=cfg.GS_KEY_VOTING_DURATION_XLARGE)
    byte 0x766f74696e675f6475726174696f6e5f786c61726765
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:76
    // self.cool_down_duration = GlobalState(UInt64(), key=cfg.GS_KEY_COOL_DOWN_DURATION)
    byte 0x636f6f6c5f646f776e5f6475726174696f6e
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:78
    // self.quorum_small = GlobalState(UInt64(), key=cfg.GS_KEY_QUORUM_SMALL)
    byte 0x71756f72756d5f736d616c6c
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:79
    // self.quorum_medium = GlobalState(UInt64(), key=cfg.GS_KEY_QUORUM_MEDIUM)
    byte 0x71756f72756d5f6d656469756d
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:80
    // self.quorum_large = GlobalState(UInt64(), key=cfg.GS_KEY_QUORUM_LARGE)
    byte 0x71756f72756d5f6c61726765
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:82
    // self.weighted_quorum_small = GlobalState(UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_SMALL)
    byte 0x77656967687465645f71756f72756d5f736d616c6c
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:83
    // self.weighted_quorum_medium = GlobalState(UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM)
    byte 0x77656967687465645f71756f72756d5f6d656469756d
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:84
    // self.weighted_quorum_large = GlobalState(UInt64(), key=cfg.GS_KEY_WEIGHTED_QUORUM_LARGE)
    byte 0x77656967687465645f71756f72756d5f6c61726765
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:86
    // self.outstanding_funds = GlobalState(UInt64(), key=cfg.GS_KEY_OUTSTANDING_FUNDS)
    byte 0x6f75747374616e64696e675f66756e6473
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:89
    // self.committee_members = GlobalState(UInt64(), key=cfg.GS_KEY_COMMITTEE_MEMBERS)
    byte 0x636f6d6d69747465655f6d656d62657273
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:90
    // self.committee_votes = GlobalState(UInt64(), key=cfg.GS_KEY_COMMITTEE_VOTES)
    byte 0x636f6d6d69747465655f766f746573
    int 0
    app_global_put
    // smart_contracts/xgov_registry/contract.py:92
    // self.pending_proposals = GlobalState(UInt64(), key=cfg.GS_KEY_PENDING_PROPOSALS)
    byte 0x70656e64696e675f70726f706f73616c73
    int 0
    app_global_put
    retsub
