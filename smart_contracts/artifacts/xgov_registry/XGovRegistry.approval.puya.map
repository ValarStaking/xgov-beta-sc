{
  "version": 3,
  "sources": [
    "../../xgov_registry/contract.py"
  ],
  "mappings": "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",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "5": {
      "op": "txn GlobalNumByteSlice",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "7": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "28"
      ]
    },
    "9": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "10": {
      "error": "Wrong Global Bytes allocation",
      "op": "assert // Wrong Global Bytes allocation",
      "stack_out": []
    },
    "11": {
      "op": "txn GlobalNumUint",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "13": {
      "op": "pushint 36 // 36",
      "defined_out": [
        "36",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "36"
      ]
    },
    "15": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "16": {
      "error": "Wrong Global UInts allocation",
      "op": "assert // Wrong Global UInts allocation",
      "stack_out": []
    },
    "17": {
      "op": "txn LocalNumByteSlice",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "19": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "20": {
      "error": "Wrong Local Bytes allocation",
      "op": "assert // Wrong Local Bytes allocation",
      "stack_out": []
    },
    "21": {
      "op": "txn LocalNumUint",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "23": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "24": {
      "error": "Wrong Local UInts allocation",
      "op": "assert // Wrong Local UInts allocation",
      "stack_out": []
    },
    "25": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "26": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "0"
      ]
    },
    "27": {
      "op": "app_global_put",
      "stack_out": []
    },
    "28": {
      "op": "bytec 10 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "30": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "0"
      ]
    },
    "31": {
      "op": "app_global_put",
      "stack_out": []
    },
    "32": {
      "op": "bytec 6 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0x78676f765f6d616e61676572"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572"
      ]
    },
    "34": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f6d616e61676572",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572",
        "new_state_value%0#0"
      ]
    },
    "36": {
      "op": "app_global_put",
      "stack_out": []
    },
    "37": {
      "op": "bytec 12 // 0x78676f765f73756273637269626572",
      "defined_out": [
        "0x78676f765f73756273637269626572"
      ],
      "stack_out": [
        "0x78676f765f73756273637269626572"
      ]
    },
    "39": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f73756273637269626572",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "0x78676f765f73756273637269626572",
        "new_state_value%1#0"
      ]
    },
    "41": {
      "op": "app_global_put",
      "stack_out": []
    },
    "42": {
      "op": "bytec 13 // 0x78676f765f7061796f72",
      "defined_out": [
        "0x78676f765f7061796f72"
      ],
      "stack_out": [
        "0x78676f765f7061796f72"
      ]
    },
    "44": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f7061796f72",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "0x78676f765f7061796f72",
        "new_state_value%2#0"
      ]
    },
    "46": {
      "op": "app_global_put",
      "stack_out": []
    },
    "47": {
      "op": "bytec 20 // 0x78676f765f7265766965776572",
      "defined_out": [
        "0x78676f765f7265766965776572"
      ],
      "stack_out": [
        "0x78676f765f7265766965776572"
      ]
    },
    "49": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f7265766965776572",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "0x78676f765f7265766965776572",
        "new_state_value%3#0"
      ]
    },
    "51": {
      "op": "app_global_put",
      "stack_out": []
    },
    "52": {
      "op": "bytec 14 // 0x6b79635f70726f7669646572",
      "defined_out": [
        "0x6b79635f70726f7669646572"
      ],
      "stack_out": [
        "0x6b79635f70726f7669646572"
      ]
    },
    "54": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x6b79635f70726f7669646572",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "0x6b79635f70726f7669646572",
        "new_state_value%4#0"
      ]
    },
    "56": {
      "op": "app_global_put",
      "stack_out": []
    },
    "57": {
      "op": "bytec 15 // 0x636f6d6d69747465655f6d616e61676572",
      "defined_out": [
        "0x636f6d6d69747465655f6d616e61676572"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d616e61676572"
      ]
    },
    "59": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x636f6d6d69747465655f6d616e61676572",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d616e61676572",
        "new_state_value%5#0"
      ]
    },
    "61": {
      "op": "app_global_put",
      "stack_out": []
    },
    "62": {
      "op": "bytec 16 // 0x636f6d6d69747465655f7075626c6973686572",
      "defined_out": [
        "0x636f6d6d69747465655f7075626c6973686572"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f7075626c6973686572"
      ]
    },
    "64": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x636f6d6d69747465655f7075626c6973686572",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f7075626c6973686572",
        "new_state_value%6#0"
      ]
    },
    "66": {
      "op": "app_global_put",
      "stack_out": []
    },
    "67": {
      "op": "bytec 17 // 0x78676f765f666565",
      "defined_out": [
        "0x78676f765f666565"
      ],
      "stack_out": [
        "0x78676f765f666565"
      ]
    },
    "69": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x78676f765f666565",
        "0"
      ]
    },
    "70": {
      "op": "app_global_put",
      "stack_out": []
    },
    "71": {
      "op": "bytec_1 // 0x78676f7673",
      "defined_out": [
        "0x78676f7673"
      ],
      "stack_out": [
        "0x78676f7673"
      ]
    },
    "72": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x78676f7673",
        "0"
      ]
    },
    "73": {
      "op": "app_global_put",
      "stack_out": []
    },
    "74": {
      "op": "bytec 18 // 0x70726f706f7365725f666565",
      "defined_out": [
        "0x70726f706f7365725f666565"
      ],
      "stack_out": [
        "0x70726f706f7365725f666565"
      ]
    },
    "76": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x70726f706f7365725f666565",
        "0"
      ]
    },
    "77": {
      "op": "app_global_put",
      "stack_out": []
    },
    "78": {
      "op": "bytec 11 // 0x70726f706f73616c5f666565",
      "defined_out": [
        "0x70726f706f73616c5f666565"
      ],
      "stack_out": [
        "0x70726f706f73616c5f666565"
      ]
    },
    "80": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x70726f706f73616c5f666565",
        "0"
      ]
    },
    "81": {
      "op": "app_global_put",
      "stack_out": []
    },
    "82": {
      "op": "bytec 21 // 0x70726f706f73616c5f7075626c697368696e675f627073",
      "defined_out": [
        "0x70726f706f73616c5f7075626c697368696e675f627073"
      ],
      "stack_out": [
        "0x70726f706f73616c5f7075626c697368696e675f627073"
      ]
    },
    "84": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x70726f706f73616c5f7075626c697368696e675f627073",
        "0"
      ]
    },
    "85": {
      "op": "app_global_put",
      "stack_out": []
    },
    "86": {
      "op": "bytec 22 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "88": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "0"
      ]
    },
    "89": {
      "op": "app_global_put",
      "stack_out": []
    },
    "90": {
      "op": "bytec 23 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "92": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "0"
      ]
    },
    "93": {
      "op": "app_global_put",
      "stack_out": []
    },
    "94": {
      "op": "bytec 24 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "96": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "0"
      ]
    },
    "97": {
      "op": "app_global_put",
      "stack_out": []
    },
    "98": {
      "op": "bytec 25 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "100": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "0"
      ]
    },
    "101": {
      "op": "app_global_put",
      "stack_out": []
    },
    "102": {
      "op": "bytec 26 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "104": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "0"
      ]
    },
    "105": {
      "op": "app_global_put",
      "stack_out": []
    },
    "106": {
      "op": "bytec 27 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "0"
      ]
    },
    "109": {
      "op": "app_global_put",
      "stack_out": []
    },
    "110": {
      "op": "bytec 28 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "112": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "0"
      ]
    },
    "113": {
      "op": "app_global_put",
      "stack_out": []
    },
    "114": {
      "op": "bytec 29 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "116": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "0"
      ]
    },
    "117": {
      "op": "app_global_put",
      "stack_out": []
    },
    "118": {
      "op": "bytec 30 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765"
      ]
    },
    "120": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
        "0"
      ]
    },
    "121": {
      "op": "app_global_put",
      "stack_out": []
    },
    "122": {
      "op": "bytec 31 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "124": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "0"
      ]
    },
    "125": {
      "op": "app_global_put",
      "stack_out": []
    },
    "126": {
      "op": "bytec 32 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "128": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "0"
      ]
    },
    "129": {
      "op": "app_global_put",
      "stack_out": []
    },
    "130": {
      "op": "bytec 33 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "132": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "0"
      ]
    },
    "133": {
      "op": "app_global_put",
      "stack_out": []
    },
    "134": {
      "op": "bytec 34 // 0x766f74696e675f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f786c61726765"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f786c61726765"
      ]
    },
    "136": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f786c61726765",
        "0"
      ]
    },
    "137": {
      "op": "app_global_put",
      "stack_out": []
    },
    "138": {
      "op": "bytec 35 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0x71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "140": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x71756f72756d5f736d616c6c",
        "0"
      ]
    },
    "141": {
      "op": "app_global_put",
      "stack_out": []
    },
    "142": {
      "op": "bytec 36 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0x71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x71756f72756d5f6d656469756d",
        "0"
      ]
    },
    "145": {
      "op": "app_global_put",
      "stack_out": []
    },
    "146": {
      "op": "bytec 37 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0x71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x71756f72756d5f6c61726765"
      ]
    },
    "148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x71756f72756d5f6c61726765",
        "0"
      ]
    },
    "149": {
      "op": "app_global_put",
      "stack_out": []
    },
    "150": {
      "op": "bytec 38 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "152": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "0"
      ]
    },
    "153": {
      "op": "app_global_put",
      "stack_out": []
    },
    "154": {
      "op": "bytec 39 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "0"
      ]
    },
    "157": {
      "op": "app_global_put",
      "stack_out": []
    },
    "158": {
      "op": "bytec 40 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "160": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "0"
      ]
    },
    "161": {
      "op": "app_global_put",
      "stack_out": []
    },
    "162": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0x6f75747374616e64696e675f66756e6473"
      ],
      "stack_out": [
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "163": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6f75747374616e64696e675f66756e6473",
        "0"
      ]
    },
    "164": {
      "op": "app_global_put",
      "stack_out": []
    },
    "165": {
      "op": "bytec 41 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "167": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "0"
      ]
    },
    "168": {
      "op": "app_global_put",
      "stack_out": []
    },
    "169": {
      "op": "bytec 42 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "171": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "0"
      ]
    },
    "172": {
      "op": "app_global_put",
      "stack_out": []
    },
    "173": {
      "op": "bytec 4 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0x70656e64696e675f70726f706f73616c73"
      ],
      "stack_out": [
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "175": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x70656e64696e675f70726f706f73616c73",
        "0"
      ]
    },
    "176": {
      "op": "app_global_put",
      "stack_out": []
    },
    "177": {
      "op": "bytec 19 // 0x726571756573745f6964",
      "defined_out": [
        "0x726571756573745f6964"
      ],
      "stack_out": [
        "0x726571756573745f6964"
      ]
    },
    "179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x726571756573745f6964",
        "0"
      ]
    },
    "180": {
      "op": "app_global_put",
      "stack_out": []
    },
    "181": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "183": {
      "op": "bz main_after_if_else@40",
      "stack_out": []
    },
    "186": {
      "op": "pushbytess 0x4c5c61ba 0x86f7e0e6 0x39e26d8a 0x98352e86 0xfa4ed6e2 0xd6c9cc1a 0x5c484055 0x11cf9720 0xd4216b6e 0xba8520f2 0x1677b30e 0xaa348d0d 0x653a0bdb 0x4956c1ab 0xa082cef8 0x76725559 0xe9553f8d 0x04f9322b 0x45077390 0x3c31bc02 0x0d2c7891 0x0da27885 0x7a4fee43 0x52dd10d7 0xd4d37a64 0x34349dcc 0x158f8dd6 0xdb27b9af 0x913ec7db 0x65610a9f 0xfdc695c2 0xba90ab54 0xb3b58482 0x00b3cef5 0x26983200 // method \"create()void\", method \"pause_registry()void\", method \"pause_proposals()void\", method \"resume_registry()void\", method \"resume_proposals()void\", method \"set_xgov_manager(address)void\", method \"set_payor(address)void\", method \"set_xgov_reviewer(address)void\", method \"set_xgov_subscriber(address)void\", method \"set_kyc_provider(address)void\", method \"set_committee_manager(address)void\", method \"set_committee_publisher(address)void\", method \"config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void\", method \"update_xgov_registry()void\", method \"subscribe_xgov(address,pay)void\", method \"unsubscribe_xgov(address)void\", method \"subscribe_xgov_app(uint64,address,pay)void\", method \"unsubscribe_xgov_app(uint64)void\", method \"request_subscribe_xgov(address,address,uint64,pay)void\", method \"approve_subscribe_xgov(uint64)void\", method \"reject_subscribe_xgov(uint64)void\", method \"set_voting_account(address,address)void\", method \"subscribe_proposer(pay)void\", method \"set_proposer_kyc(address,bool,uint64)void\", method \"declare_committee(byte[32],uint64,uint64)void\", method \"open_proposal(pay)uint64\", method \"vote_proposal(uint64,address,uint64,uint64)void\", method \"pay_grant_proposal(uint64)void\", method \"decommission_proposal(uint64)void\", method \"drop_proposal(uint64)void\", method \"deposit_funds(pay)void\", method \"withdraw_funds(uint64)void\", method \"withdraw_balance()void\", method \"get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)\", method \"is_proposal(uint64)void\"",
      "defined_out": [
        "Method(approve_subscribe_xgov(uint64)void)",
        "Method(config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void)",
        "Method(create()void)",
        "Method(declare_committee(byte[32],uint64,uint64)void)",
        "Method(decommission_proposal(uint64)void)",
        "Method(deposit_funds(pay)void)",
        "Method(drop_proposal(uint64)void)",
        "Method(get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64))",
        "Method(is_proposal(uint64)void)",
        "Method(open_proposal(pay)uint64)",
        "Method(pause_proposals()void)",
        "Method(pause_registry()void)",
        "Method(pay_grant_proposal(uint64)void)",
        "Method(reject_subscribe_xgov(uint64)void)",
        "Method(request_subscribe_xgov(address,address,uint64,pay)void)",
        "Method(resume_proposals()void)",
        "Method(resume_registry()void)",
        "Method(set_committee_manager(address)void)",
        "Method(set_committee_publisher(address)void)",
        "Method(set_kyc_provider(address)void)",
        "Method(set_payor(address)void)",
        "Method(set_proposer_kyc(address,bool,uint64)void)",
        "Method(set_voting_account(address,address)void)",
        "Method(set_xgov_manager(address)void)",
        "Method(set_xgov_reviewer(address)void)",
        "Method(set_xgov_subscriber(address)void)",
        "Method(subscribe_proposer(pay)void)",
        "Method(subscribe_xgov(address,pay)void)",
        "Method(subscribe_xgov_app(uint64,address,pay)void)",
        "Method(unsubscribe_xgov(address)void)",
        "Method(unsubscribe_xgov_app(uint64)void)",
        "Method(update_xgov_registry()void)",
        "Method(vote_proposal(uint64,address,uint64,uint64)void)",
        "Method(withdraw_balance()void)",
        "Method(withdraw_funds(uint64)void)"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(pause_registry()void)",
        "Method(pause_proposals()void)",
        "Method(resume_registry()void)",
        "Method(resume_proposals()void)",
        "Method(set_xgov_manager(address)void)",
        "Method(set_payor(address)void)",
        "Method(set_xgov_reviewer(address)void)",
        "Method(set_xgov_subscriber(address)void)",
        "Method(set_kyc_provider(address)void)",
        "Method(set_committee_manager(address)void)",
        "Method(set_committee_publisher(address)void)",
        "Method(config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void)",
        "Method(update_xgov_registry()void)",
        "Method(subscribe_xgov(address,pay)void)",
        "Method(unsubscribe_xgov(address)void)",
        "Method(subscribe_xgov_app(uint64,address,pay)void)",
        "Method(unsubscribe_xgov_app(uint64)void)",
        "Method(request_subscribe_xgov(address,address,uint64,pay)void)",
        "Method(approve_subscribe_xgov(uint64)void)",
        "Method(reject_subscribe_xgov(uint64)void)",
        "Method(set_voting_account(address,address)void)",
        "Method(subscribe_proposer(pay)void)",
        "Method(set_proposer_kyc(address,bool,uint64)void)",
        "Method(declare_committee(byte[32],uint64,uint64)void)",
        "Method(open_proposal(pay)uint64)",
        "Method(vote_proposal(uint64,address,uint64,uint64)void)",
        "Method(pay_grant_proposal(uint64)void)",
        "Method(decommission_proposal(uint64)void)",
        "Method(drop_proposal(uint64)void)",
        "Method(deposit_funds(pay)void)",
        "Method(withdraw_funds(uint64)void)",
        "Method(withdraw_balance()void)",
        "Method(get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64))",
        "Method(is_proposal(uint64)void)"
      ]
    },
    "363": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(approve_subscribe_xgov(uint64)void)",
        "Method(config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void)",
        "Method(create()void)",
        "Method(declare_committee(byte[32],uint64,uint64)void)",
        "Method(decommission_proposal(uint64)void)",
        "Method(deposit_funds(pay)void)",
        "Method(drop_proposal(uint64)void)",
        "Method(get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64))",
        "Method(is_proposal(uint64)void)",
        "Method(open_proposal(pay)uint64)",
        "Method(pause_proposals()void)",
        "Method(pause_registry()void)",
        "Method(pay_grant_proposal(uint64)void)",
        "Method(reject_subscribe_xgov(uint64)void)",
        "Method(request_subscribe_xgov(address,address,uint64,pay)void)",
        "Method(resume_proposals()void)",
        "Method(resume_registry()void)",
        "Method(set_committee_manager(address)void)",
        "Method(set_committee_publisher(address)void)",
        "Method(set_kyc_provider(address)void)",
        "Method(set_payor(address)void)",
        "Method(set_proposer_kyc(address,bool,uint64)void)",
        "Method(set_voting_account(address,address)void)",
        "Method(set_xgov_manager(address)void)",
        "Method(set_xgov_reviewer(address)void)",
        "Method(set_xgov_subscriber(address)void)",
        "Method(subscribe_proposer(pay)void)",
        "Method(subscribe_xgov(address,pay)void)",
        "Method(subscribe_xgov_app(uint64,address,pay)void)",
        "Method(unsubscribe_xgov(address)void)",
        "Method(unsubscribe_xgov_app(uint64)void)",
        "Method(update_xgov_registry()void)",
        "Method(vote_proposal(uint64,address,uint64,uint64)void)",
        "Method(withdraw_balance()void)",
        "Method(withdraw_funds(uint64)void)",
        "tmp%2#1"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(pause_registry()void)",
        "Method(pause_proposals()void)",
        "Method(resume_registry()void)",
        "Method(resume_proposals()void)",
        "Method(set_xgov_manager(address)void)",
        "Method(set_payor(address)void)",
        "Method(set_xgov_reviewer(address)void)",
        "Method(set_xgov_subscriber(address)void)",
        "Method(set_kyc_provider(address)void)",
        "Method(set_committee_manager(address)void)",
        "Method(set_committee_publisher(address)void)",
        "Method(config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void)",
        "Method(update_xgov_registry()void)",
        "Method(subscribe_xgov(address,pay)void)",
        "Method(unsubscribe_xgov(address)void)",
        "Method(subscribe_xgov_app(uint64,address,pay)void)",
        "Method(unsubscribe_xgov_app(uint64)void)",
        "Method(request_subscribe_xgov(address,address,uint64,pay)void)",
        "Method(approve_subscribe_xgov(uint64)void)",
        "Method(reject_subscribe_xgov(uint64)void)",
        "Method(set_voting_account(address,address)void)",
        "Method(subscribe_proposer(pay)void)",
        "Method(set_proposer_kyc(address,bool,uint64)void)",
        "Method(declare_committee(byte[32],uint64,uint64)void)",
        "Method(open_proposal(pay)uint64)",
        "Method(vote_proposal(uint64,address,uint64,uint64)void)",
        "Method(pay_grant_proposal(uint64)void)",
        "Method(decommission_proposal(uint64)void)",
        "Method(drop_proposal(uint64)void)",
        "Method(deposit_funds(pay)void)",
        "Method(withdraw_funds(uint64)void)",
        "Method(withdraw_balance()void)",
        "Method(get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64))",
        "Method(is_proposal(uint64)void)",
        "tmp%2#1"
      ]
    },
    "366": {
      "op": "match main_create_route@5 main_pause_registry_route@6 main_pause_proposals_route@7 main_resume_registry_route@8 main_resume_proposals_route@9 main_set_xgov_manager_route@10 main_set_payor_route@11 main_set_xgov_reviewer_route@12 main_set_xgov_subscriber_route@13 main_set_kyc_provider_route@14 main_set_committee_manager_route@15 main_set_committee_publisher_route@16 main_config_xgov_registry_route@17 main_update_xgov_registry_route@18 main_subscribe_xgov_route@19 main_unsubscribe_xgov_route@20 main_subscribe_xgov_app_route@21 main_unsubscribe_xgov_app_route@22 main_request_subscribe_xgov_route@23 main_approve_subscribe_xgov_route@24 main_reject_subscribe_xgov_route@25 main_set_voting_account_route@26 main_subscribe_proposer_route@27 main_set_proposer_kyc_route@28 main_declare_committee_route@29 main_open_proposal_route@30 main_vote_proposal_route@31 main_pay_grant_proposal_route@32 main_decommission_proposal_route@33 main_drop_proposal_route@34 main_deposit_funds_route@35 main_withdraw_funds_route@36 main_withdraw_balance_route@37 main_get_state_route@38 main_is_proposal_route@39",
      "stack_out": []
    },
    "438": {
      "block": "main_after_if_else@40",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "439": {
      "op": "return",
      "stack_out": []
    },
    "440": {
      "block": "main_is_proposal_route@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "442": {
      "op": "!",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "443": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "444": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "446": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "447": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "450": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_proposal",
      "op": "callsub is_proposal",
      "stack_out": []
    },
    "453": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "454": {
      "op": "return",
      "stack_out": []
    },
    "455": {
      "block": "main_get_state_route@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "457": {
      "op": "!",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "458": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "459": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "461": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "462": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.get_state",
      "op": "callsub get_state",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "465": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0",
        "0x151f7c75"
      ]
    },
    "467": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%147#0"
      ]
    },
    "468": {
      "op": "concat",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "469": {
      "op": "log",
      "stack_out": []
    },
    "470": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "471": {
      "op": "return",
      "stack_out": []
    },
    "472": {
      "block": "main_withdraw_balance_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "474": {
      "op": "!",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "475": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "476": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "478": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "479": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_balance",
      "op": "callsub withdraw_balance"
    },
    "482": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "483": {
      "op": "return",
      "stack_out": []
    },
    "484": {
      "block": "main_withdraw_funds_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "486": {
      "op": "!",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "487": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "488": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "490": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "491": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "494": {
      "op": "btoi",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "495": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_funds",
      "op": "callsub withdraw_funds",
      "stack_out": []
    },
    "498": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "499": {
      "op": "return",
      "stack_out": []
    },
    "500": {
      "block": "main_deposit_funds_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "502": {
      "op": "!",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "503": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "504": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "506": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "507": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "509": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0",
        "1"
      ]
    },
    "510": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "511": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "512": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "514": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay"
      ]
    },
    "515": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "516": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "517": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.deposit_funds",
      "op": "callsub deposit_funds",
      "stack_out": []
    },
    "520": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "521": {
      "op": "return",
      "stack_out": []
    },
    "522": {
      "block": "main_drop_proposal_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "524": {
      "op": "!",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "525": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "526": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "528": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "529": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "532": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.drop_proposal",
      "op": "callsub drop_proposal",
      "stack_out": []
    },
    "535": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "536": {
      "op": "return",
      "stack_out": []
    },
    "537": {
      "block": "main_decommission_proposal_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "539": {
      "op": "!",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "540": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "541": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "543": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "544": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "547": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.decommission_proposal",
      "op": "callsub decommission_proposal",
      "stack_out": []
    },
    "550": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "551": {
      "op": "return",
      "stack_out": []
    },
    "552": {
      "block": "main_pay_grant_proposal_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "554": {
      "op": "!",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "555": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "556": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "558": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "559": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "562": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.pay_grant_proposal",
      "op": "callsub pay_grant_proposal",
      "stack_out": []
    },
    "565": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "566": {
      "op": "return",
      "stack_out": []
    },
    "567": {
      "block": "main_vote_proposal_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "569": {
      "op": "!",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "570": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "571": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "573": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "574": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "577": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%16#0",
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[32]%16#0"
      ]
    },
    "580": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%16#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[32]%16#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "583": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%16#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[32]%16#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "586": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.vote_proposal",
      "op": "callsub vote_proposal",
      "stack_out": []
    },
    "589": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "590": {
      "op": "return",
      "stack_out": []
    },
    "591": {
      "block": "main_open_proposal_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "593": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "594": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "595": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "597": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "598": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "600": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "1"
      ]
    },
    "601": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0"
      ]
    },
    "602": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "603": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "605": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "606": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "607": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%4#0"
      ]
    },
    "608": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.open_proposal",
      "op": "callsub open_proposal",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "611": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "612": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "614": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "615": {
      "op": "concat",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "616": {
      "op": "log",
      "stack_out": []
    },
    "617": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "618": {
      "op": "return",
      "stack_out": []
    },
    "619": {
      "block": "main_declare_committee_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "621": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "622": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "623": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "625": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "626": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%15#0"
      ]
    },
    "629": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "632": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%15#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "635": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.declare_committee",
      "op": "callsub declare_committee",
      "stack_out": []
    },
    "638": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "639": {
      "op": "return",
      "stack_out": []
    },
    "640": {
      "block": "main_set_proposer_kyc_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "642": {
      "op": "!",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "643": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "644": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "646": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "647": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0"
      ]
    },
    "650": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "653": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%14#0",
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "656": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_proposer_kyc",
      "op": "callsub set_proposer_kyc",
      "stack_out": []
    },
    "659": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "660": {
      "op": "return",
      "stack_out": []
    },
    "661": {
      "block": "main_subscribe_proposer_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "663": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "664": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "665": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "667": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "668": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "670": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "1"
      ]
    },
    "671": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "672": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "673": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "675": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "pay"
      ]
    },
    "676": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "677": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "678": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_proposer",
      "op": "callsub subscribe_proposer",
      "stack_out": []
    },
    "681": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "682": {
      "op": "return",
      "stack_out": []
    },
    "683": {
      "block": "main_set_voting_account_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "685": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "686": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "687": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "689": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "690": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%12#0"
      ]
    },
    "693": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%12#0",
        "reinterpret_bytes[32]%13#0"
      ]
    },
    "696": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_voting_account",
      "op": "callsub set_voting_account",
      "stack_out": []
    },
    "699": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "700": {
      "op": "return",
      "stack_out": []
    },
    "701": {
      "block": "main_reject_subscribe_xgov_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "703": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "704": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "705": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "707": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "708": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "711": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.reject_subscribe_xgov",
      "op": "callsub reject_subscribe_xgov",
      "stack_out": []
    },
    "714": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "715": {
      "op": "return",
      "stack_out": []
    },
    "716": {
      "block": "main_approve_subscribe_xgov_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "718": {
      "op": "!",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "719": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "720": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "722": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "723": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "726": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.approve_subscribe_xgov",
      "op": "callsub approve_subscribe_xgov",
      "stack_out": []
    },
    "729": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "730": {
      "op": "return",
      "stack_out": []
    },
    "731": {
      "block": "main_request_subscribe_xgov_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "733": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "734": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "735": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "737": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "738": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0"
      ]
    },
    "741": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0"
      ]
    },
    "744": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "747": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%81#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%81#0"
      ]
    },
    "749": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%81#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%81#0",
        "1"
      ]
    },
    "750": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%2#0"
      ]
    },
    "751": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "752": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "754": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "755": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "756": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[32]%10#0",
        "reinterpret_bytes[32]%11#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%2#0"
      ]
    },
    "757": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.request_subscribe_xgov",
      "op": "callsub request_subscribe_xgov",
      "stack_out": []
    },
    "760": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "761": {
      "op": "return",
      "stack_out": []
    },
    "762": {
      "block": "main_unsubscribe_xgov_app_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "764": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "765": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "766": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "768": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "769": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "772": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.unsubscribe_xgov_app",
      "op": "callsub unsubscribe_xgov_app",
      "stack_out": []
    },
    "775": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "776": {
      "op": "return",
      "stack_out": []
    },
    "777": {
      "block": "main_subscribe_xgov_app_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "779": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "780": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "781": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "783": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "784": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "787": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%9#0"
      ]
    },
    "790": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%9#0",
        "tmp%72#0"
      ]
    },
    "792": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%9#0",
        "tmp%72#0",
        "1"
      ]
    },
    "793": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%9#0",
        "gtxn_idx%1#0"
      ]
    },
    "794": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%9#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "795": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%9#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "797": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%9#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "798": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "reinterpret_bytes[32]%9#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%9#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "799": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%9#0",
        "gtxn_idx%1#0"
      ]
    },
    "800": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_xgov_app",
      "op": "callsub subscribe_xgov_app",
      "stack_out": []
    },
    "803": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "804": {
      "op": "return",
      "stack_out": []
    },
    "805": {
      "block": "main_unsubscribe_xgov_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "807": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "808": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "809": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "811": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "812": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "815": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.unsubscribe_xgov",
      "op": "callsub unsubscribe_xgov",
      "stack_out": []
    },
    "818": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "819": {
      "op": "return",
      "stack_out": []
    },
    "820": {
      "block": "main_subscribe_xgov_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "822": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "823": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "824": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "826": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "827": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "830": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[32]%7#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "tmp%63#0"
      ]
    },
    "832": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[32]%7#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "tmp%63#0",
        "1"
      ]
    },
    "833": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0"
      ]
    },
    "834": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "835": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "837": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "838": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "839": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[32]%7#0",
        "gtxn_idx%0#0"
      ]
    },
    "840": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_xgov",
      "op": "callsub subscribe_xgov",
      "stack_out": []
    },
    "843": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "844": {
      "op": "return",
      "stack_out": []
    },
    "845": {
      "block": "main_update_xgov_registry_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "847": {
      "op": "intc_2 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "UpdateApplication"
      ]
    },
    "848": {
      "op": "==",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "849": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "850": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "852": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "853": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.update_xgov_registry",
      "op": "callsub update_xgov_registry"
    },
    "856": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "857": {
      "op": "return",
      "stack_out": []
    },
    "858": {
      "block": "main_config_xgov_registry_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "860": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "861": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "862": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "864": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "865": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[184]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[184]%0#0"
      ]
    },
    "868": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.config_xgov_registry",
      "op": "callsub config_xgov_registry",
      "stack_out": []
    },
    "871": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "872": {
      "op": "return",
      "stack_out": []
    },
    "873": {
      "block": "main_set_committee_publisher_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "875": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "876": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "877": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "879": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "880": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "883": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_committee_publisher",
      "op": "callsub set_committee_publisher",
      "stack_out": []
    },
    "886": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "887": {
      "op": "return",
      "stack_out": []
    },
    "888": {
      "block": "main_set_committee_manager_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "890": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "891": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "892": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "894": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "895": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "898": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_committee_manager",
      "op": "callsub set_committee_manager",
      "stack_out": []
    },
    "901": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "902": {
      "op": "return",
      "stack_out": []
    },
    "903": {
      "block": "main_set_kyc_provider_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "905": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "906": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "907": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "909": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "910": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "913": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_kyc_provider",
      "op": "callsub set_kyc_provider",
      "stack_out": []
    },
    "916": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "917": {
      "op": "return",
      "stack_out": []
    },
    "918": {
      "block": "main_set_xgov_subscriber_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "920": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "921": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "922": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "924": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "925": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "928": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_subscriber",
      "op": "callsub set_xgov_subscriber",
      "stack_out": []
    },
    "931": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "932": {
      "op": "return",
      "stack_out": []
    },
    "933": {
      "block": "main_set_xgov_reviewer_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "935": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "936": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "937": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "939": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "940": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "943": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_reviewer",
      "op": "callsub set_xgov_reviewer",
      "stack_out": []
    },
    "946": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "947": {
      "op": "return",
      "stack_out": []
    },
    "948": {
      "block": "main_set_payor_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "950": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "951": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "952": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "954": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "955": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "958": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_payor",
      "op": "callsub set_payor",
      "stack_out": []
    },
    "961": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "962": {
      "op": "return",
      "stack_out": []
    },
    "963": {
      "block": "main_set_xgov_manager_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "965": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "966": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "967": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "969": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "970": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "973": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_manager",
      "op": "callsub set_xgov_manager",
      "stack_out": []
    },
    "976": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "977": {
      "op": "return",
      "stack_out": []
    },
    "978": {
      "block": "main_resume_proposals_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "980": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "981": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "982": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "984": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "985": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.resume_proposals",
      "op": "callsub resume_proposals"
    },
    "988": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "989": {
      "op": "return",
      "stack_out": []
    },
    "990": {
      "block": "main_resume_registry_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "992": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "993": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "994": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "996": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "997": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.resume_registry",
      "op": "callsub resume_registry"
    },
    "1000": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1001": {
      "op": "return",
      "stack_out": []
    },
    "1002": {
      "block": "main_pause_proposals_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1004": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1005": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1006": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1008": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1009": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.pause_proposals",
      "op": "callsub pause_proposals"
    },
    "1012": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1013": {
      "op": "return",
      "stack_out": []
    },
    "1014": {
      "block": "main_pause_registry_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#1"
      ],
      "stack_out": [
        "tmp%7#1"
      ]
    },
    "1016": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1017": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1018": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1020": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1021": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.pause_registry",
      "op": "callsub pause_registry"
    },
    "1024": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1025": {
      "op": "return",
      "stack_out": []
    },
    "1026": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "1028": {
      "op": "!",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "1029": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1030": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%5#1"
      ]
    },
    "1032": {
      "op": "!",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%6#1"
      ]
    },
    "1033": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1034": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.create",
      "op": "callsub create"
    },
    "1037": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1038": {
      "op": "return",
      "stack_out": []
    },
    "1039": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "params": {},
      "block": "is_xgov_manager",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1041": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1042": {
      "op": "bytec 6 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0",
        "0x78676f765f6d616e61676572",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x78676f765f6d616e61676572"
      ]
    },
    "1044": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1045": {
      "error": "check self.xgov_manager exists",
      "op": "assert // check self.xgov_manager exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1046": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1047": {
      "retsub": true,
      "op": "retsub"
    },
    "1048": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_subscriber",
      "params": {},
      "block": "is_xgov_subscriber",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1050": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1051": {
      "op": "bytec 12 // 0x78676f765f73756273637269626572",
      "defined_out": [
        "0",
        "0x78676f765f73756273637269626572",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x78676f765f73756273637269626572"
      ]
    },
    "1053": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1054": {
      "error": "check self.xgov_subscriber exists",
      "op": "assert // check self.xgov_subscriber exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1055": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1056": {
      "retsub": true,
      "op": "retsub"
    },
    "1057": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "_is_proposal",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1060": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "1062": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1063": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1065": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1066": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%1#0"
      ]
    },
    "1068": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1069": {
      "retsub": true,
      "op": "retsub"
    },
    "1070": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_xgov_payment",
      "params": {
        "payment#0": "uint64"
      },
      "block": "valid_xgov_payment",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1073": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1075": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1077": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1079": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1080": {
      "op": "bz valid_xgov_payment_bool_false@3",
      "stack_out": []
    },
    "1083": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1085": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1087": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "1088": {
      "op": "bytec 17 // 0x78676f765f666565",
      "defined_out": [
        "0",
        "0x78676f765f666565",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "0x78676f765f666565"
      ]
    },
    "1090": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1091": {
      "error": "check self.xgov_fee exists",
      "op": "assert // check self.xgov_fee exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "1092": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1093": {
      "op": "bz valid_xgov_payment_bool_false@3",
      "stack_out": []
    },
    "1096": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1097": {
      "retsub": true,
      "op": "retsub"
    },
    "1098": {
      "block": "valid_xgov_payment_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1099": {
      "retsub": true,
      "op": "retsub"
    },
    "1100": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_kyc",
      "params": {
        "address#0": "bytes"
      },
      "block": "valid_kyc",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1103": {
      "op": "bytec_3 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "1104": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x70",
        "address#0 (copy)"
      ],
      "stack_out": [
        "0x70",
        "address#0 (copy)"
      ]
    },
    "1106": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1107": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1108": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1109": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1110": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "1111": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "is_true%0#0"
      ]
    },
    "1112": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1114": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1115": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1117": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_bool%0#0"
      ]
    },
    "1118": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1119": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1120": {
      "op": "bz valid_kyc_bool_false@3",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1123": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1125": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1126": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1127": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "1128": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1129": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1131": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1132": {
      "op": "bz valid_kyc_bool_false@3",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1135": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "1136": {
      "block": "valid_kyc_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "and_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "and_result%0#0"
      ]
    },
    "1137": {
      "retsub": true,
      "op": "retsub"
    },
    "1138": {
      "block": "valid_kyc_bool_false@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "1139": {
      "op": "b valid_kyc_bool_merge@4"
    },
    "1142": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.create",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "bytec 6 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0x78676f765f6d616e61676572"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572"
      ]
    },
    "1144": {
      "op": "txn Sender",
      "defined_out": [
        "0x78676f765f6d616e61676572",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572",
        "new_state_value%0#0"
      ]
    },
    "1146": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1147": {
      "op": "bytec 49 // TMPL_entropy",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1149": {
      "op": "dup",
      "defined_out": [
        "TMPL_entropy",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "TMPL_entropy"
      ]
    },
    "1150": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1151": {
      "op": "assert",
      "stack_out": []
    },
    "1152": {
      "retsub": true,
      "op": "retsub"
    },
    "1153": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.pause_registry",
      "params": {},
      "block": "pause_registry",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1156": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1157": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "1158": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x7061757365645f7265676973747279",
        "1"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "1"
      ]
    },
    "1159": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1160": {
      "retsub": true,
      "op": "retsub"
    },
    "1161": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.pause_proposals",
      "params": {},
      "block": "pause_proposals",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1164": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1165": {
      "op": "bytec 10 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1167": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73",
        "1"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "1"
      ]
    },
    "1168": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1169": {
      "retsub": true,
      "op": "retsub"
    },
    "1170": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.resume_registry",
      "params": {},
      "block": "resume_registry",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1173": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1174": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "1175": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "0"
      ]
    },
    "1176": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1177": {
      "retsub": true,
      "op": "retsub"
    },
    "1178": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.resume_proposals",
      "params": {},
      "block": "resume_proposals",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1181": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1182": {
      "op": "bytec 10 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1184": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "0"
      ]
    },
    "1185": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1186": {
      "retsub": true,
      "op": "retsub"
    },
    "1187": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_manager",
      "params": {
        "manager#0": "bytes"
      },
      "block": "set_xgov_manager",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1190": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1193": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1194": {
      "op": "bytec 6 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0x78676f765f6d616e61676572"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572"
      ]
    },
    "1196": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f6d616e61676572",
        "manager#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f6d616e61676572",
        "manager#0 (copy)"
      ]
    },
    "1198": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1199": {
      "retsub": true,
      "op": "retsub"
    },
    "1200": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_payor",
      "params": {
        "payor#0": "bytes"
      },
      "block": "set_payor",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1203": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1206": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1207": {
      "op": "bytec 13 // 0x78676f765f7061796f72",
      "defined_out": [
        "0x78676f765f7061796f72"
      ],
      "stack_out": [
        "0x78676f765f7061796f72"
      ]
    },
    "1209": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f7061796f72",
        "payor#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f7061796f72",
        "payor#0 (copy)"
      ]
    },
    "1211": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1212": {
      "retsub": true,
      "op": "retsub"
    },
    "1213": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_reviewer",
      "params": {
        "reviewer#0": "bytes"
      },
      "block": "set_xgov_reviewer",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1216": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1219": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1220": {
      "op": "bytec 20 // 0x78676f765f7265766965776572",
      "defined_out": [
        "0x78676f765f7265766965776572"
      ],
      "stack_out": [
        "0x78676f765f7265766965776572"
      ]
    },
    "1222": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f7265766965776572",
        "reviewer#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f7265766965776572",
        "reviewer#0 (copy)"
      ]
    },
    "1224": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1225": {
      "retsub": true,
      "op": "retsub"
    },
    "1226": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_xgov_subscriber",
      "params": {
        "subscriber#0": "bytes"
      },
      "block": "set_xgov_subscriber",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1229": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1232": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1233": {
      "op": "bytec 12 // 0x78676f765f73756273637269626572",
      "defined_out": [
        "0x78676f765f73756273637269626572"
      ],
      "stack_out": [
        "0x78676f765f73756273637269626572"
      ]
    },
    "1235": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f73756273637269626572",
        "subscriber#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f73756273637269626572",
        "subscriber#0 (copy)"
      ]
    },
    "1237": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1238": {
      "retsub": true,
      "op": "retsub"
    },
    "1239": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_kyc_provider",
      "params": {
        "provider#0": "bytes"
      },
      "block": "set_kyc_provider",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1242": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1245": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1246": {
      "op": "bytec 14 // 0x6b79635f70726f7669646572",
      "defined_out": [
        "0x6b79635f70726f7669646572"
      ],
      "stack_out": [
        "0x6b79635f70726f7669646572"
      ]
    },
    "1248": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6b79635f70726f7669646572",
        "provider#0 (copy)"
      ],
      "stack_out": [
        "0x6b79635f70726f7669646572",
        "provider#0 (copy)"
      ]
    },
    "1250": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1251": {
      "retsub": true,
      "op": "retsub"
    },
    "1252": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_committee_manager",
      "params": {
        "manager#0": "bytes"
      },
      "block": "set_committee_manager",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1255": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1258": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1259": {
      "op": "bytec 15 // 0x636f6d6d69747465655f6d616e61676572",
      "defined_out": [
        "0x636f6d6d69747465655f6d616e61676572"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d616e61676572"
      ]
    },
    "1261": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x636f6d6d69747465655f6d616e61676572",
        "manager#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d616e61676572",
        "manager#0 (copy)"
      ]
    },
    "1263": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1264": {
      "retsub": true,
      "op": "retsub"
    },
    "1265": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_committee_publisher",
      "params": {
        "publisher#0": "bytes"
      },
      "block": "set_committee_publisher",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1268": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1271": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1272": {
      "op": "bytec 16 // 0x636f6d6d69747465655f7075626c6973686572",
      "defined_out": [
        "0x636f6d6d69747465655f7075626c6973686572"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f7075626c6973686572"
      ]
    },
    "1274": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x636f6d6d69747465655f7075626c6973686572",
        "publisher#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f7075626c6973686572",
        "publisher#0 (copy)"
      ]
    },
    "1276": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1277": {
      "retsub": true,
      "op": "retsub"
    },
    "1278": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.config_xgov_registry",
      "params": {
        "config#0": "bytes"
      },
      "block": "config_xgov_registry",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1281": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1284": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1285": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1286": {
      "op": "bytec 4 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ],
      "stack_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "1288": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1289": {
      "error": "check self.pending_proposals exists",
      "op": "assert // check self.pending_proposals exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1290": {
      "op": "!",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1291": {
      "error": "Cannot perform operation with pending proposals",
      "op": "assert // Cannot perform operation with pending proposals",
      "stack_out": []
    },
    "1292": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1294": {
      "op": "intc_0 // 0",
      "stack_out": [
        "config#0 (copy)",
        "0"
      ]
    },
    "1295": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1296": {
      "op": "bytec 17 // 0x78676f765f666565",
      "defined_out": [
        "0x78676f765f666565",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "0x78676f765f666565"
      ]
    },
    "1298": {
      "op": "swap",
      "stack_out": [
        "0x78676f765f666565",
        "new_state_value%0#0"
      ]
    },
    "1299": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1300": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1302": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "8"
      ]
    },
    "1303": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "1304": {
      "op": "bytec 18 // 0x70726f706f7365725f666565",
      "defined_out": [
        "0x70726f706f7365725f666565",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "0x70726f706f7365725f666565"
      ]
    },
    "1306": {
      "op": "swap",
      "stack_out": [
        "0x70726f706f7365725f666565",
        "new_state_value%1#0"
      ]
    },
    "1307": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1308": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1310": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "16"
      ]
    },
    "1312": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "1313": {
      "op": "bytec 11 // 0x70726f706f73616c5f666565",
      "defined_out": [
        "0x70726f706f73616c5f666565",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "0x70726f706f73616c5f666565"
      ]
    },
    "1315": {
      "op": "swap",
      "stack_out": [
        "0x70726f706f73616c5f666565",
        "new_state_value%2#0"
      ]
    },
    "1316": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1317": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1319": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "24"
      ]
    },
    "1321": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "1322": {
      "op": "bytec 21 // 0x70726f706f73616c5f7075626c697368696e675f627073",
      "defined_out": [
        "0x70726f706f73616c5f7075626c697368696e675f627073",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "0x70726f706f73616c5f7075626c697368696e675f627073"
      ]
    },
    "1324": {
      "op": "swap",
      "stack_out": [
        "0x70726f706f73616c5f7075626c697368696e675f627073",
        "new_state_value%3#0"
      ]
    },
    "1325": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1326": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1328": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "32"
      ]
    },
    "1330": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0"
      ]
    },
    "1331": {
      "op": "bytec 22 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0",
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "1333": {
      "op": "swap",
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "new_state_value%4#0"
      ]
    },
    "1334": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1335": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1337": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "40"
      ]
    },
    "1339": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0"
      ]
    },
    "1340": {
      "op": "bytec 23 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0",
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "1342": {
      "op": "swap",
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "new_state_value%5#0"
      ]
    },
    "1343": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1344": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1346": {
      "error": "Index access is out of bounds",
      "op": "extract 48 24 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1349": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "1350": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "0"
      ]
    },
    "1351": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_state_value%6#0"
      ]
    },
    "1352": {
      "op": "bytec 24 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "new_state_value%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_state_value%6#0",
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "1354": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "new_state_value%6#0"
      ]
    },
    "1355": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1356": {
      "op": "dup",
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "1357": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "8"
      ]
    },
    "1358": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_state_value%7#0"
      ]
    },
    "1359": {
      "op": "bytec 25 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "new_state_value%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_state_value%7#0",
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "1361": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "new_state_value%7#0"
      ]
    },
    "1362": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1363": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "tmp%8#0",
        "16"
      ]
    },
    "1365": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0"
      ]
    },
    "1366": {
      "op": "bytec 26 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0",
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "1368": {
      "op": "swap",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "new_state_value%8#0"
      ]
    },
    "1369": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1370": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1372": {
      "error": "Index access is out of bounds",
      "op": "extract 72 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1375": {
      "op": "dup",
      "defined_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "1376": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "0"
      ]
    },
    "1377": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%9#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "new_state_value%9#0"
      ]
    },
    "1378": {
      "op": "bytec 27 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "new_state_value%9#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "new_state_value%9#0",
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "1380": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "new_state_value%9#0"
      ]
    },
    "1381": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1382": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "1383": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "8"
      ]
    },
    "1384": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%10#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "new_state_value%10#0"
      ]
    },
    "1385": {
      "op": "bytec 28 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "new_state_value%10#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "new_state_value%10#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "1387": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "new_state_value%10#0"
      ]
    },
    "1388": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1389": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "1390": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "16"
      ]
    },
    "1392": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%11#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "new_state_value%11#0"
      ]
    },
    "1393": {
      "op": "bytec 29 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "new_state_value%11#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "new_state_value%11#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "1395": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "new_state_value%11#0"
      ]
    },
    "1396": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1397": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tmp%14#0",
        "24"
      ]
    },
    "1399": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0"
      ]
    },
    "1400": {
      "op": "bytec 30 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0",
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765"
      ]
    },
    "1402": {
      "op": "swap",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
        "new_state_value%12#0"
      ]
    },
    "1403": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1404": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1406": {
      "error": "Index access is out of bounds",
      "op": "extract 104 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1409": {
      "op": "dup",
      "defined_out": [
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ]
    },
    "1410": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%22#0",
        "tmp%22#0 (copy)",
        "0"
      ]
    },
    "1411": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%13#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "new_state_value%13#0"
      ]
    },
    "1412": {
      "op": "bytec 31 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "new_state_value%13#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "new_state_value%13#0",
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "1414": {
      "op": "swap",
      "stack_out": [
        "tmp%22#0",
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "new_state_value%13#0"
      ]
    },
    "1415": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1416": {
      "op": "dup",
      "stack_out": [
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ]
    },
    "1417": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%22#0",
        "tmp%22#0 (copy)",
        "8"
      ]
    },
    "1418": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%14#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "new_state_value%14#0"
      ]
    },
    "1419": {
      "op": "bytec 32 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "new_state_value%14#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "new_state_value%14#0",
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "1421": {
      "op": "swap",
      "stack_out": [
        "tmp%22#0",
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "new_state_value%14#0"
      ]
    },
    "1422": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1423": {
      "op": "dup",
      "stack_out": [
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ]
    },
    "1424": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "tmp%22#0",
        "tmp%22#0 (copy)",
        "16"
      ]
    },
    "1426": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%15#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "new_state_value%15#0"
      ]
    },
    "1427": {
      "op": "bytec 33 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "new_state_value%15#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "new_state_value%15#0",
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "1429": {
      "op": "swap",
      "stack_out": [
        "tmp%22#0",
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "new_state_value%15#0"
      ]
    },
    "1430": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1431": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "tmp%22#0",
        "24"
      ]
    },
    "1433": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%16#0"
      ],
      "stack_out": [
        "new_state_value%16#0"
      ]
    },
    "1434": {
      "op": "bytec 34 // 0x766f74696e675f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f786c61726765",
        "new_state_value%16#0"
      ],
      "stack_out": [
        "new_state_value%16#0",
        "0x766f74696e675f6475726174696f6e5f786c61726765"
      ]
    },
    "1436": {
      "op": "swap",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f786c61726765",
        "new_state_value%16#0"
      ]
    },
    "1437": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1438": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1440": {
      "error": "Index access is out of bounds",
      "op": "extract 136 24 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1443": {
      "op": "dup",
      "defined_out": [
        "tmp%30#0",
        "tmp%30#0 (copy)"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%30#0 (copy)"
      ]
    },
    "1444": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%30#0",
        "tmp%30#0 (copy)",
        "0"
      ]
    },
    "1445": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%17#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "new_state_value%17#0"
      ]
    },
    "1446": {
      "op": "bytec 35 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0x71756f72756d5f736d616c6c",
        "new_state_value%17#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "new_state_value%17#0",
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "1448": {
      "op": "swap",
      "stack_out": [
        "tmp%30#0",
        "0x71756f72756d5f736d616c6c",
        "new_state_value%17#0"
      ]
    },
    "1449": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1450": {
      "op": "dup",
      "stack_out": [
        "tmp%30#0",
        "tmp%30#0 (copy)"
      ]
    },
    "1451": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%30#0",
        "tmp%30#0 (copy)",
        "8"
      ]
    },
    "1452": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%18#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "new_state_value%18#0"
      ]
    },
    "1453": {
      "op": "bytec 36 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0x71756f72756d5f6d656469756d",
        "new_state_value%18#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "new_state_value%18#0",
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "1455": {
      "op": "swap",
      "stack_out": [
        "tmp%30#0",
        "0x71756f72756d5f6d656469756d",
        "new_state_value%18#0"
      ]
    },
    "1456": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1457": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "tmp%30#0",
        "16"
      ]
    },
    "1459": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%19#0"
      ],
      "stack_out": [
        "new_state_value%19#0"
      ]
    },
    "1460": {
      "op": "bytec 37 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0x71756f72756d5f6c61726765",
        "new_state_value%19#0"
      ],
      "stack_out": [
        "new_state_value%19#0",
        "0x71756f72756d5f6c61726765"
      ]
    },
    "1462": {
      "op": "swap",
      "stack_out": [
        "0x71756f72756d5f6c61726765",
        "new_state_value%19#0"
      ]
    },
    "1463": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1464": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "1466": {
      "error": "Index access is out of bounds",
      "op": "extract 160 24 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1469": {
      "op": "dup",
      "defined_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "1470": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)",
        "0"
      ]
    },
    "1471": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%20#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "new_state_value%20#0"
      ]
    },
    "1472": {
      "op": "bytec 38 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "new_state_value%20#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "new_state_value%20#0",
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "1474": {
      "op": "swap",
      "stack_out": [
        "tmp%36#0",
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "new_state_value%20#0"
      ]
    },
    "1475": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1476": {
      "op": "dup",
      "stack_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "1477": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)",
        "8"
      ]
    },
    "1478": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%21#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "new_state_value%21#0"
      ]
    },
    "1479": {
      "op": "bytec 39 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "new_state_value%21#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "new_state_value%21#0",
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "1481": {
      "op": "swap",
      "stack_out": [
        "tmp%36#0",
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "new_state_value%21#0"
      ]
    },
    "1482": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1483": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "tmp%36#0",
        "16"
      ]
    },
    "1485": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%22#0"
      ],
      "stack_out": [
        "new_state_value%22#0"
      ]
    },
    "1486": {
      "op": "bytec 40 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "new_state_value%22#0"
      ],
      "stack_out": [
        "new_state_value%22#0",
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "1488": {
      "op": "swap",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "new_state_value%22#0"
      ]
    },
    "1489": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1490": {
      "retsub": true,
      "op": "retsub"
    },
    "1491": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.update_xgov_registry",
      "params": {},
      "block": "update_xgov_registry",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1494": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1495": {
      "retsub": true,
      "op": "retsub"
    },
    "1496": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_xgov",
      "params": {
        "voting_address#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "subscribe_xgov",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1499": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1500": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1501": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1502": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1503": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1504": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1505": {
      "op": "bytec 5 // 0x78",
      "defined_out": [
        "0x78"
      ],
      "stack_out": [
        "0x78"
      ]
    },
    "1507": {
      "op": "txn Sender",
      "defined_out": [
        "0x78",
        "tmp%1#0"
      ],
      "stack_out": [
        "0x78",
        "tmp%1#0"
      ]
    },
    "1509": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1510": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1511": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1513": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1514": {
      "error": "Already an xGov",
      "op": "assert // Already an xGov",
      "stack_out": []
    },
    "1515": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1517": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_xgov_payment",
      "op": "callsub valid_xgov_payment",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1520": {
      "error": "Invalid payment",
      "op": "assert // Invalid payment",
      "stack_out": []
    },
    "1521": {
      "op": "frame_dig -2",
      "defined_out": [
        "voting_address#0 (copy)"
      ],
      "stack_out": [
        "voting_address#0 (copy)"
      ]
    },
    "1523": {
      "op": "bytec 9 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "voting_address#0 (copy)"
      ],
      "stack_out": [
        "voting_address#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "1525": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1526": {
      "op": "bytec 9 // 0x0000000000000000",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "1528": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1529": {
      "op": "bytec 5 // 0x78",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x78"
      ]
    },
    "1531": {
      "op": "txn Sender",
      "defined_out": [
        "0x78",
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x78",
        "tmp%5#0"
      ]
    },
    "1533": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%6#0"
      ]
    },
    "1534": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1535": {
      "op": "box_put",
      "stack_out": []
    },
    "1536": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1537": {
      "op": "bytec_1 // 0x78676f7673",
      "defined_out": [
        "0",
        "0x78676f7673"
      ],
      "stack_out": [
        "0",
        "0x78676f7673"
      ]
    },
    "1538": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1539": {
      "error": "check self.xgovs exists",
      "op": "assert // check self.xgovs exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1540": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "1541": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1542": {
      "op": "bytec_1 // 0x78676f7673",
      "stack_out": [
        "new_state_value%0#0",
        "0x78676f7673"
      ]
    },
    "1543": {
      "op": "swap",
      "stack_out": [
        "0x78676f7673",
        "new_state_value%0#0"
      ]
    },
    "1544": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1545": {
      "retsub": true,
      "op": "retsub"
    },
    "1546": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.unsubscribe_xgov",
      "params": {
        "xgov_address#0": "bytes"
      },
      "block": "unsubscribe_xgov",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1549": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1550": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1551": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1552": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1553": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1554": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1555": {
      "op": "bytec 5 // 0x78",
      "defined_out": [
        "0x78"
      ],
      "stack_out": [
        "0x78"
      ]
    },
    "1557": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ]
    },
    "1559": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1560": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1562": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1563": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1565": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1566": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1567": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "1568": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1571": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "xgov_address#0 (copy)"
      ]
    },
    "1573": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "voting_address#0",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "xgov_address#0 (copy)",
        "tmp%3#0"
      ]
    },
    "1575": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "tmp%4#0"
      ]
    },
    "1576": {
      "op": "bnz unsubscribe_xgov_bool_true@2",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1579": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "voting_address#0"
      ]
    },
    "1581": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%5#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "voting_address#0",
        "tmp%5#0"
      ]
    },
    "1583": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "tmp%6#0"
      ]
    },
    "1584": {
      "op": "bz unsubscribe_xgov_bool_false@3",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1587": {
      "block": "unsubscribe_xgov_bool_true@2",
      "stack_in": [
        "tmp%1#0",
        "voting_address#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "or_result%0#0"
      ]
    },
    "1588": {
      "block": "unsubscribe_xgov_bool_merge@4",
      "stack_in": [
        "tmp%1#0",
        "voting_address#0",
        "or_result%0#0"
      ],
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "defined_out": [],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1589": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "tmp%1#0"
      ]
    },
    "1591": {
      "op": "box_del",
      "defined_out": [
        "tmp%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "{box_del}"
      ]
    },
    "1592": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1593": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "0"
      ]
    },
    "1594": {
      "op": "bytec_1 // 0x78676f7673",
      "defined_out": [
        "0",
        "0x78676f7673",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "0",
        "0x78676f7673"
      ]
    },
    "1595": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1596": {
      "error": "check self.xgovs exists",
      "op": "assert // check self.xgovs exists",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "maybe_value%3#0"
      ]
    },
    "1597": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "1598": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "new_state_value%0#0"
      ]
    },
    "1599": {
      "op": "bytec_1 // 0x78676f7673",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "new_state_value%0#0",
        "0x78676f7673"
      ]
    },
    "1600": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "0x78676f7673",
        "new_state_value%0#0"
      ]
    },
    "1601": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "voting_address#0"
      ]
    },
    "1602": {
      "retsub": true,
      "op": "retsub"
    },
    "1603": {
      "block": "unsubscribe_xgov_bool_false@3",
      "stack_in": [
        "tmp%1#0",
        "voting_address#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "voting_address#0",
        "or_result%0#0"
      ]
    },
    "1604": {
      "op": "b unsubscribe_xgov_bool_merge@4"
    },
    "1607": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_xgov_app",
      "params": {
        "app_id#0": "bytes",
        "voting_address#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "subscribe_xgov_app",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1610": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1611": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1612": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1613": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1614": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1615": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1616": {
      "op": "frame_dig -3",
      "defined_out": [
        "app_id#0 (copy)"
      ],
      "stack_out": [
        "app_id#0 (copy)"
      ]
    },
    "1618": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1619": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1620": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "app_creator#0",
        "check%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "app_creator#0",
        "check%0#0"
      ]
    },
    "1622": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%1#0",
        "app_creator#0"
      ]
    },
    "1623": {
      "op": "swap",
      "stack_out": [
        "app_creator#0",
        "tmp%1#0"
      ]
    },
    "1624": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "app_address#0",
        "app_creator#0",
        "check%1#0"
      ],
      "stack_out": [
        "app_creator#0",
        "app_address#0",
        "check%1#0"
      ]
    },
    "1626": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "app_creator#0",
        "app_address#0"
      ]
    },
    "1627": {
      "op": "txn Sender",
      "defined_out": [
        "app_address#0",
        "app_creator#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app_creator#0",
        "app_address#0",
        "tmp%3#0"
      ]
    },
    "1629": {
      "op": "uncover 2",
      "stack_out": [
        "app_address#0",
        "tmp%3#0",
        "app_creator#0"
      ]
    },
    "1631": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app_address#0",
        "tmp%4#0"
      ]
    },
    "1632": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "app_address#0"
      ]
    },
    "1633": {
      "op": "bytec 5 // 0x78",
      "defined_out": [
        "0x78",
        "app_address#0"
      ],
      "stack_out": [
        "app_address#0",
        "0x78"
      ]
    },
    "1635": {
      "op": "swap",
      "stack_out": [
        "0x78",
        "app_address#0"
      ]
    },
    "1636": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1637": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1638": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1639": {
      "op": "bury 1",
      "stack_out": [
        "tmp%5#0",
        "maybe_exists%1#0"
      ]
    },
    "1641": {
      "op": "!",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1642": {
      "error": "Already an xGov",
      "op": "assert // Already an xGov",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1643": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "payment#0 (copy)"
      ]
    },
    "1645": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_xgov_payment",
      "op": "callsub valid_xgov_payment",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "1648": {
      "error": "Invalid payment",
      "op": "assert // Invalid payment",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1649": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%5#0",
        "voting_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "voting_address#0 (copy)"
      ]
    },
    "1651": {
      "op": "bytec 9 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "tmp%5#0",
        "voting_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%5#0",
        "voting_address#0 (copy)",
        "0x0000000000000000"
      ]
    },
    "1653": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1654": {
      "op": "bytec 9 // 0x0000000000000000",
      "stack_out": [
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "1656": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1657": {
      "op": "box_put",
      "stack_out": []
    },
    "1658": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1659": {
      "op": "bytec_1 // 0x78676f7673",
      "defined_out": [
        "0",
        "0x78676f7673"
      ],
      "stack_out": [
        "0",
        "0x78676f7673"
      ]
    },
    "1660": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1661": {
      "error": "check self.xgovs exists",
      "op": "assert // check self.xgovs exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1662": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "1663": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1664": {
      "op": "bytec_1 // 0x78676f7673",
      "stack_out": [
        "new_state_value%0#0",
        "0x78676f7673"
      ]
    },
    "1665": {
      "op": "swap",
      "stack_out": [
        "0x78676f7673",
        "new_state_value%0#0"
      ]
    },
    "1666": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1667": {
      "retsub": true,
      "op": "retsub"
    },
    "1668": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.unsubscribe_xgov_app",
      "params": {
        "app_id#0": "bytes"
      },
      "block": "unsubscribe_xgov_app",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1671": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1672": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1673": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1674": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1675": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1676": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1677": {
      "op": "frame_dig -1",
      "defined_out": [
        "app_id#0 (copy)"
      ],
      "stack_out": [
        "app_id#0 (copy)"
      ]
    },
    "1679": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1680": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1681": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "app_creator#0",
        "check%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "app_creator#0",
        "check%0#0"
      ]
    },
    "1683": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%1#0",
        "app_creator#0"
      ]
    },
    "1684": {
      "op": "swap",
      "stack_out": [
        "app_creator#0",
        "tmp%1#0"
      ]
    },
    "1685": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "app_address#0",
        "app_creator#0",
        "check%1#0"
      ],
      "stack_out": [
        "app_creator#0",
        "app_address#0",
        "check%1#0"
      ]
    },
    "1687": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "app_creator#0",
        "app_address#0"
      ]
    },
    "1688": {
      "op": "bytec 5 // 0x78",
      "defined_out": [
        "0x78",
        "app_address#0",
        "app_creator#0"
      ],
      "stack_out": [
        "app_creator#0",
        "app_address#0",
        "0x78"
      ]
    },
    "1690": {
      "op": "swap",
      "stack_out": [
        "app_creator#0",
        "0x78",
        "app_address#0"
      ]
    },
    "1691": {
      "op": "concat",
      "defined_out": [
        "app_creator#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app_creator#0",
        "tmp%3#0"
      ]
    },
    "1692": {
      "op": "dup",
      "stack_out": [
        "app_creator#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "1693": {
      "op": "cover 2",
      "defined_out": [
        "app_creator#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "app_creator#0",
        "tmp%3#0"
      ]
    },
    "1695": {
      "op": "dup",
      "defined_out": [
        "app_creator#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "app_creator#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1696": {
      "op": "box_len",
      "defined_out": [
        "app_creator#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "app_creator#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1697": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "app_creator#0",
        "tmp%3#0",
        "maybe_exists%1#0"
      ]
    },
    "1699": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "tmp%3#0",
        "app_creator#0",
        "tmp%3#0"
      ]
    },
    "1700": {
      "op": "box_get",
      "defined_out": [
        "app_creator#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "app_creator#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1701": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%3#0",
        "app_creator#0",
        "maybe_value%2#0"
      ]
    },
    "1702": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "app_creator#0",
        "tmp%3#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "app_creator#0",
        "voting_address#0"
      ]
    },
    "1705": {
      "op": "swap",
      "defined_out": [
        "app_creator#0",
        "tmp%3#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "app_creator#0"
      ]
    },
    "1706": {
      "op": "txn Sender",
      "defined_out": [
        "app_creator#0",
        "tmp%3#0",
        "tmp%5#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "app_creator#0",
        "tmp%5#0"
      ]
    },
    "1708": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "tmp%6#0"
      ]
    },
    "1709": {
      "op": "bnz unsubscribe_xgov_app_bool_true@2",
      "stack_out": [
        "tmp%3#0",
        "voting_address#0"
      ]
    },
    "1712": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "voting_address#0"
      ]
    },
    "1714": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%7#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "voting_address#0",
        "tmp%7#0"
      ]
    },
    "1716": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%8#0",
        "voting_address#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "tmp%8#0"
      ]
    },
    "1717": {
      "op": "bz unsubscribe_xgov_app_bool_false@3",
      "stack_out": [
        "tmp%3#0",
        "voting_address#0"
      ]
    },
    "1720": {
      "block": "unsubscribe_xgov_app_bool_true@2",
      "stack_in": [
        "tmp%3#0",
        "voting_address#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "or_result%0#0"
      ]
    },
    "1721": {
      "block": "unsubscribe_xgov_app_bool_merge@4",
      "stack_in": [
        "tmp%3#0",
        "voting_address#0",
        "or_result%0#0"
      ],
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "defined_out": [],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0"
      ]
    },
    "1722": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "tmp%3#0"
      ]
    },
    "1724": {
      "op": "box_del",
      "defined_out": [
        "tmp%3#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "{box_del}"
      ]
    },
    "1725": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "voting_address#0"
      ]
    },
    "1726": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "0"
      ]
    },
    "1727": {
      "op": "bytec_1 // 0x78676f7673",
      "defined_out": [
        "0",
        "0x78676f7673",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "0",
        "0x78676f7673"
      ]
    },
    "1728": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1729": {
      "error": "check self.xgovs exists",
      "op": "assert // check self.xgovs exists",
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "maybe_value%3#0"
      ]
    },
    "1730": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "1731": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "new_state_value%0#0"
      ]
    },
    "1732": {
      "op": "bytec_1 // 0x78676f7673",
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "new_state_value%0#0",
        "0x78676f7673"
      ]
    },
    "1733": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "0x78676f7673",
        "new_state_value%0#0"
      ]
    },
    "1734": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0",
        "voting_address#0"
      ]
    },
    "1735": {
      "retsub": true,
      "op": "retsub"
    },
    "1736": {
      "block": "unsubscribe_xgov_app_bool_false@3",
      "stack_in": [
        "tmp%3#0",
        "voting_address#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "voting_address#0",
        "or_result%0#0"
      ]
    },
    "1737": {
      "op": "b unsubscribe_xgov_app_bool_merge@4"
    },
    "1740": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.request_subscribe_xgov",
      "params": {
        "xgov_address#0": "bytes",
        "owner_address#0": "bytes",
        "relation_type#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "request_subscribe_xgov",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1743": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1744": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1745": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1746": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1747": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1748": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1749": {
      "op": "bytec 5 // 0x78",
      "defined_out": [
        "0x78"
      ],
      "stack_out": [
        "0x78"
      ]
    },
    "1751": {
      "op": "frame_dig -4",
      "defined_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ]
    },
    "1753": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1754": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1755": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1757": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1758": {
      "error": "Already an xGov",
      "op": "assert // Already an xGov",
      "stack_out": []
    },
    "1759": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1761": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_xgov_payment",
      "op": "callsub valid_xgov_payment",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1764": {
      "error": "Invalid payment",
      "op": "assert // Invalid payment",
      "stack_out": []
    },
    "1765": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1766": {
      "op": "bytec 19 // 0x726571756573745f6964",
      "defined_out": [
        "0",
        "0x726571756573745f6964"
      ],
      "stack_out": [
        "0",
        "0x726571756573745f6964"
      ]
    },
    "1768": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "rid#0"
      ],
      "stack_out": [
        "rid#0",
        "maybe_exists%2#0"
      ]
    },
    "1769": {
      "error": "check self.request_id exists",
      "op": "assert // check self.request_id exists",
      "stack_out": [
        "rid#0"
      ]
    },
    "1770": {
      "op": "frame_dig -4",
      "stack_out": [
        "rid#0",
        "xgov_address#0 (copy)"
      ]
    },
    "1772": {
      "op": "frame_dig -3",
      "defined_out": [
        "owner_address#0 (copy)",
        "rid#0",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "rid#0",
        "xgov_address#0 (copy)",
        "owner_address#0 (copy)"
      ]
    },
    "1774": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "rid#0"
      ],
      "stack_out": [
        "rid#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1775": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "relation_type#0 (copy)",
        "rid#0"
      ],
      "stack_out": [
        "rid#0",
        "encoded_tuple_buffer%2#0",
        "relation_type#0 (copy)"
      ]
    },
    "1777": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "rid#0"
      ],
      "stack_out": [
        "rid#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1778": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "rid#0"
      ]
    },
    "1779": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%4#0"
      ]
    },
    "1780": {
      "op": "bytec 43 // 0x72",
      "defined_out": [
        "0x72",
        "encoded_tuple_buffer%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%4#0",
        "0x72"
      ]
    },
    "1782": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x72",
        "tmp%4#0"
      ]
    },
    "1783": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ]
    },
    "1784": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1785": {
      "op": "box_put",
      "stack_out": []
    },
    "1786": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1787": {
      "op": "bytec 19 // 0x726571756573745f6964",
      "stack_out": [
        "0",
        "0x726571756573745f6964"
      ]
    },
    "1789": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1790": {
      "error": "check self.request_id exists",
      "op": "assert // check self.request_id exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1791": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "1792": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1793": {
      "op": "bytec 19 // 0x726571756573745f6964",
      "stack_out": [
        "new_state_value%0#0",
        "0x726571756573745f6964"
      ]
    },
    "1795": {
      "op": "swap",
      "stack_out": [
        "0x726571756573745f6964",
        "new_state_value%0#0"
      ]
    },
    "1796": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1797": {
      "retsub": true,
      "op": "retsub"
    },
    "1798": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.approve_subscribe_xgov",
      "params": {
        "request_id#0": "bytes"
      },
      "block": "approve_subscribe_xgov",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1801": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_subscriber",
      "op": "callsub is_xgov_subscriber",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1804": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1805": {
      "op": "frame_dig -1",
      "defined_out": [
        "request_id#0 (copy)"
      ],
      "stack_out": [
        "request_id#0 (copy)"
      ]
    },
    "1807": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1808": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1809": {
      "op": "bytec 43 // 0x72",
      "defined_out": [
        "0x72",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x72"
      ]
    },
    "1811": {
      "op": "swap",
      "stack_out": [
        "0x72",
        "tmp%2#0"
      ]
    },
    "1812": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1813": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1814": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "request#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "maybe_exists%0#0"
      ]
    },
    "1815": {
      "error": "check self.request_box entry exists",
      "op": "assert // check self.request_box entry exists",
      "stack_out": [
        "tmp%3#0",
        "request#0"
      ]
    },
    "1816": {
      "op": "dup",
      "defined_out": [
        "request#0",
        "request#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "request#0 (copy)"
      ]
    },
    "1817": {
      "error": "Index access is out of bounds",
      "op": "extract 32 32 // on error: Index access is out of bounds",
      "defined_out": [
        "request#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "tmp%4#0"
      ]
    },
    "1820": {
      "op": "bytec 9 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "request#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "tmp%4#0",
        "0x0000000000000000"
      ]
    },
    "1822": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "request#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1823": {
      "op": "bytec 9 // 0x0000000000000000",
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "1825": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "request#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "request#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1826": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "request#0"
      ]
    },
    "1827": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1830": {
      "op": "bytec 5 // 0x78",
      "defined_out": [
        "0x78",
        "encoded_tuple_buffer%3#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "reinterpret_bytes[32]%0#0",
        "0x78"
      ]
    },
    "1832": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "0x78",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1833": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ]
    },
    "1834": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1835": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1836": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "1837": {
      "op": "bytec_1 // 0x78676f7673",
      "defined_out": [
        "0",
        "0x78676f7673",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "0x78676f7673"
      ]
    },
    "1838": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1839": {
      "error": "check self.xgovs exists",
      "op": "assert // check self.xgovs exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "1840": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "1841": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_state_value%0#0"
      ]
    },
    "1842": {
      "op": "bytec_1 // 0x78676f7673",
      "stack_out": [
        "tmp%3#0",
        "new_state_value%0#0",
        "0x78676f7673"
      ]
    },
    "1843": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "0x78676f7673",
        "new_state_value%0#0"
      ]
    },
    "1844": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1845": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1846": {
      "op": "pop",
      "stack_out": []
    },
    "1847": {
      "retsub": true,
      "op": "retsub"
    },
    "1848": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.reject_subscribe_xgov",
      "params": {
        "request_id#0": "bytes"
      },
      "block": "reject_subscribe_xgov",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1851": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_subscriber",
      "op": "callsub is_xgov_subscriber",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1854": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1855": {
      "op": "frame_dig -1",
      "defined_out": [
        "request_id#0 (copy)"
      ],
      "stack_out": [
        "request_id#0 (copy)"
      ]
    },
    "1857": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1858": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1859": {
      "op": "bytec 43 // 0x72",
      "defined_out": [
        "0x72",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x72"
      ]
    },
    "1861": {
      "op": "swap",
      "stack_out": [
        "0x72",
        "tmp%2#0"
      ]
    },
    "1862": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1863": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1864": {
      "op": "pop",
      "stack_out": []
    },
    "1865": {
      "retsub": true,
      "op": "retsub"
    },
    "1866": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_voting_account",
      "params": {
        "xgov_address#0": "bytes",
        "voting_address#0": "bytes"
      },
      "block": "set_voting_account",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1869": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1870": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1871": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1872": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1873": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1874": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1875": {
      "op": "bytec 5 // 0x78",
      "defined_out": [
        "0x78"
      ],
      "stack_out": [
        "0x78"
      ]
    },
    "1877": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "0x78",
        "xgov_address#0 (copy)"
      ]
    },
    "1879": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1880": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1882": {
      "op": "box_len",
      "defined_out": [
        "exists#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "exists#0"
      ]
    },
    "1883": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "exists#0"
      ]
    },
    "1885": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1886": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "tmp%1#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "xgov_box#0",
        "maybe_exists%2#0"
      ]
    },
    "1887": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%1#0",
        "xgov_box#0"
      ]
    },
    "1888": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "xgov_box#0",
        "tmp%3#0"
      ]
    },
    "1890": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "xgov_box#0"
      ]
    },
    "1891": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1894": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1895": {
      "op": "bnz set_voting_account_bool_true@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1898": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "xgov_address#0 (copy)"
      ]
    },
    "1900": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%5#0",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "xgov_address#0 (copy)",
        "tmp%5#0"
      ]
    },
    "1902": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1903": {
      "op": "bz set_voting_account_bool_false@3",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1906": {
      "block": "set_voting_account_bool_true@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "or_result%0#0"
      ]
    },
    "1907": {
      "block": "set_voting_account_bool_merge@4",
      "stack_in": [
        "tmp%1#0",
        "or_result%0#0"
      ],
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "defined_out": [],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1908": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1910": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1911": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1912": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0"
      ]
    },
    "1913": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%1#0",
        "voting_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%3#0",
        "voting_address#0 (copy)"
      ]
    },
    "1915": {
      "op": "replace2 0",
      "defined_out": [
        "tmp%1#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "updated_data%0#0"
      ]
    },
    "1917": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1918": {
      "retsub": true,
      "op": "retsub"
    },
    "1919": {
      "block": "set_voting_account_bool_false@3",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "or_result%0#0"
      ]
    },
    "1920": {
      "op": "b set_voting_account_bool_merge@4"
    },
    "1923": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.subscribe_proposer",
      "params": {
        "payment#0": "uint64"
      },
      "block": "subscribe_proposer",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1926": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1927": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "1928": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1929": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1930": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1931": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "1932": {
      "op": "bytec_3 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "1933": {
      "op": "txn Sender",
      "defined_out": [
        "0x70",
        "tmp%1#0"
      ],
      "stack_out": [
        "0x70",
        "tmp%1#0"
      ]
    },
    "1935": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1936": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1937": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1939": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1940": {
      "error": "Already a proposer",
      "op": "assert // Already a proposer",
      "stack_out": []
    },
    "1941": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1943": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1945": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1947": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1948": {
      "error": "Wrong Receiver",
      "op": "assert // Wrong Receiver",
      "stack_out": []
    },
    "1949": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "1951": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1953": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "1954": {
      "op": "bytec 18 // 0x70726f706f7365725f666565",
      "defined_out": [
        "0",
        "0x70726f706f7365725f666565",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "0x70726f706f7365725f666565"
      ]
    },
    "1956": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1957": {
      "error": "check self.proposer_fee exists",
      "op": "assert // check self.proposer_fee exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%2#0"
      ]
    },
    "1958": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1959": {
      "error": "Wrong payment amount",
      "op": "assert // Wrong payment amount",
      "stack_out": []
    },
    "1960": {
      "op": "bytec_3 // 0x70",
      "stack_out": [
        "0x70"
      ]
    },
    "1961": {
      "op": "txn Sender",
      "defined_out": [
        "0x70",
        "tmp%9#0"
      ],
      "stack_out": [
        "0x70",
        "tmp%9#0"
      ]
    },
    "1963": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1964": {
      "op": "pushbytes 0x000000000000000000",
      "defined_out": [
        "0x000000000000000000",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x000000000000000000"
      ]
    },
    "1975": {
      "op": "box_put",
      "stack_out": []
    },
    "1976": {
      "retsub": true,
      "op": "retsub"
    },
    "1977": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.set_proposer_kyc",
      "params": {
        "proposer#0": "bytes",
        "kyc_status#0": "bytes",
        "kyc_expiring#0": "bytes"
      },
      "block": "set_proposer_kyc",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1980": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1982": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1983": {
      "op": "bytec 14 // 0x6b79635f70726f7669646572",
      "defined_out": [
        "0",
        "0x6b79635f70726f7669646572",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x6b79635f70726f7669646572"
      ]
    },
    "1985": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1986": {
      "error": "check self.kyc_provider exists",
      "op": "assert // check self.kyc_provider exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1987": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1988": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1989": {
      "op": "bytec_3 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "1990": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x70",
        "proposer#0 (copy)"
      ],
      "stack_out": [
        "0x70",
        "proposer#0 (copy)"
      ]
    },
    "1992": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1993": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1994": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1995": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "1997": {
      "error": "Proposer does not exist",
      "op": "assert // Proposer does not exist",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1998": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1999": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2000": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0"
      ]
    },
    "2001": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "2002": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "is_true%0#0"
      ]
    },
    "2003": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "2005": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "2006": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "2008": {
      "op": "setbit",
      "defined_out": [
        "active_proposal#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "active_proposal#0"
      ]
    },
    "2009": {
      "op": "frame_dig -2",
      "defined_out": [
        "active_proposal#0",
        "kyc_status#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "active_proposal#0",
        "kyc_status#0 (copy)"
      ]
    },
    "2011": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "active_proposal#0",
        "kyc_status#0 (copy)",
        "0"
      ]
    },
    "2012": {
      "op": "getbit",
      "defined_out": [
        "active_proposal#0",
        "is_true%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "active_proposal#0",
        "is_true%1#0"
      ]
    },
    "2013": {
      "op": "intc_1 // 1"
    },
    "2014": {
      "op": "swap",
      "defined_out": [
        "1",
        "active_proposal#0",
        "is_true%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "active_proposal#0",
        "1",
        "is_true%1#0"
      ]
    },
    "2015": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2016": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "kyc_expiring#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%2#0",
        "kyc_expiring#0 (copy)"
      ]
    },
    "2018": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2019": {
      "op": "box_put",
      "stack_out": []
    },
    "2020": {
      "retsub": true,
      "op": "retsub"
    },
    "2021": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.declare_committee",
      "params": {
        "committee_id#0": "bytes",
        "size#0": "bytes",
        "votes#0": "bytes"
      },
      "block": "declare_committee",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2024": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "2026": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "2027": {
      "op": "bytec 15 // 0x636f6d6d69747465655f6d616e61676572",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d616e61676572",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0",
        "0x636f6d6d69747465655f6d616e61676572"
      ]
    },
    "2029": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2030": {
      "error": "check self.committee_manager exists",
      "op": "assert // check self.committee_manager exists",
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "2031": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "2032": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "2033": {
      "op": "bytec 45 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "2035": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x636f6d6d69747465655f6964",
        "committee_id#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "committee_id#0 (copy)"
      ]
    },
    "2037": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2038": {
      "op": "frame_dig -2",
      "defined_out": [
        "size#0 (copy)"
      ],
      "stack_out": [
        "size#0 (copy)"
      ]
    },
    "2040": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2041": {
      "op": "bytec 41 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "2043": {
      "op": "swap",
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "new_state_value%0#0"
      ]
    },
    "2044": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2045": {
      "op": "frame_dig -1",
      "defined_out": [
        "votes#0 (copy)"
      ],
      "stack_out": [
        "votes#0 (copy)"
      ]
    },
    "2047": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "2048": {
      "op": "bytec 42 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "2050": {
      "op": "swap",
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "new_state_value%1#0"
      ]
    },
    "2051": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2052": {
      "retsub": true,
      "op": "retsub"
    },
    "2053": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.open_proposal",
      "params": {
        "payment#0": "uint64"
      },
      "block": "open_proposal",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2056": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2057": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "2058": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2059": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2060": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2061": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "2062": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2063": {
      "op": "bytec 10 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "2065": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2066": {
      "error": "check self.paused_proposals exists",
      "op": "assert // check self.paused_proposals exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2067": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2068": {
      "error": "Creation of proposals is paused",
      "op": "assert // Creation of proposals is paused",
      "stack_out": []
    },
    "2069": {
      "op": "bytec_3 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "0x70"
      ]
    },
    "2070": {
      "op": "txn Sender",
      "defined_out": [
        "0x70",
        "tmp%2#0"
      ],
      "stack_out": [
        "0x70",
        "tmp%2#0"
      ]
    },
    "2072": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2073": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2074": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "2076": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "2077": {
      "op": "bytec_3 // 0x70",
      "stack_out": [
        "0x70"
      ]
    },
    "2078": {
      "op": "txn Sender",
      "defined_out": [
        "0x70",
        "tmp%4#0"
      ],
      "stack_out": [
        "0x70",
        "tmp%4#0"
      ]
    },
    "2080": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2081": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2082": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2083": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "2084": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0"
      ]
    },
    "2085": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0"
      ],
      "stack_out": [
        "is_true%0#0",
        "0x00"
      ]
    },
    "2087": {
      "op": "intc_0 // 0",
      "stack_out": [
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "2088": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "2090": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "2091": {
      "op": "bytec 8 // 0x00",
      "stack_out": [
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "2093": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2094": {
      "error": "Proposer already has an active proposal",
      "op": "assert // Proposer already has an active proposal",
      "stack_out": []
    },
    "2095": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2097": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_kyc",
      "op": "callsub valid_kyc",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2100": {
      "error": "Invalid KYC",
      "op": "assert // Invalid KYC",
      "stack_out": []
    },
    "2101": {
      "op": "txn Fee",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2103": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "2105": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "3"
      ]
    },
    "2107": {
      "op": "*",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "2108": {
      "op": ">=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2109": {
      "error": "Insufficient fee",
      "op": "assert // Insufficient fee",
      "stack_out": []
    },
    "2110": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "2112": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "2114": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2116": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "2117": {
      "error": "Wrong Receiver",
      "op": "assert // Wrong Receiver",
      "stack_out": []
    },
    "2118": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "2120": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "2122": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%16#0",
        "0"
      ]
    },
    "2123": {
      "op": "bytec 11 // 0x70726f706f73616c5f666565",
      "defined_out": [
        "0",
        "0x70726f706f73616c5f666565",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0",
        "0x70726f706f73616c5f666565"
      ]
    },
    "2125": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2126": {
      "error": "check self.proposal_fee exists",
      "op": "assert // check self.proposal_fee exists",
      "stack_out": [
        "tmp%16#0",
        "maybe_value%4#0"
      ]
    },
    "2127": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "2128": {
      "error": "Wrong payment amount",
      "op": "assert // Wrong payment amount",
      "stack_out": []
    },
    "2129": {
      "op": "itxn_begin"
    },
    "2130": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2132": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "18"
      ]
    },
    "2134": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2136": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "tmp%18#0",
        "3"
      ]
    },
    "2138": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2140": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "1"
      ]
    },
    "2141": {
      "op": "itxn_field ExtraProgramPages",
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2143": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw==",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "CoEBQw=="
      ]
    },
    "2149": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2151": {
      "op": "pushbytes base64(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)",
      "defined_out": [
        "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",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "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"
      ]
    },
    "5712": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "5714": {
      "op": "pushbytes 0xcc694eaa // method \"create(address)void\"",
      "defined_out": [
        "Method(create(address)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "Method(create(address)void)"
      ]
    },
    "5720": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "5722": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5724": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5726": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5728": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5729": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5731": {
      "op": "itxn_submit"
    },
    "5732": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5734": {
      "op": "bytec_3 // 0x70",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0x70"
      ]
    },
    "5735": {
      "op": "txn Sender",
      "defined_out": [
        "0x70",
        "res.CreatedApplicationID#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0x70",
        "tmp%19#0"
      ]
    },
    "5737": {
      "op": "concat",
      "defined_out": [
        "res.CreatedApplicationID#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "tmp%20#0"
      ]
    },
    "5738": {
      "op": "dup",
      "defined_out": [
        "res.CreatedApplicationID#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "5739": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "res.CreatedApplicationID#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5740": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "tmp%20#0",
        "maybe_value%5#0"
      ]
    },
    "5741": {
      "op": "intc_0 // 0",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "5742": {
      "op": "intc_1 // 1",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "0",
        "1"
      ]
    },
    "5743": {
      "op": "setbit",
      "defined_out": [
        "res.CreatedApplicationID#0",
        "tmp%20#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "tmp%20#0",
        "updated_data%0#0"
      ]
    },
    "5744": {
      "op": "box_put",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5745": {
      "op": "itxn_begin"
    },
    "5746": {
      "op": "dup",
      "defined_out": [
        "res.CreatedApplicationID#0",
        "res.CreatedApplicationID#0 (copy)"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "res.CreatedApplicationID#0 (copy)"
      ]
    },
    "5747": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "res.CreatedApplicationID#0",
        "value%0#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "5749": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%0#0"
      ]
    },
    "5750": {
      "op": "intc_0 // 0",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%0#0",
        "0"
      ]
    },
    "5751": {
      "op": "bytec 11 // 0x70726f706f73616c5f666565",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%0#0",
        "0",
        "0x70726f706f73616c5f666565"
      ]
    },
    "5753": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "res.CreatedApplicationID#0",
        "value%0#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "5754": {
      "error": "check self.proposal_fee exists",
      "op": "assert // check self.proposal_fee exists",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%0#0",
        "maybe_value%6#0"
      ]
    },
    "5755": {
      "op": "pushint 863000 // 863000",
      "defined_out": [
        "863000",
        "maybe_value%6#0",
        "res.CreatedApplicationID#0",
        "value%0#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%0#0",
        "maybe_value%6#0",
        "863000"
      ]
    },
    "5759": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "res.CreatedApplicationID#0",
        "value%0#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%0#0",
        "inner_txn_params%1%%param_Amount_idx_0#0"
      ]
    },
    "5760": {
      "op": "itxn_field Amount",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%0#0"
      ]
    },
    "5762": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5764": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "pay"
      ]
    },
    "5765": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5767": {
      "op": "intc_0 // 0",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0"
      ]
    },
    "5768": {
      "op": "itxn_field Fee",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5770": {
      "op": "itxn_submit"
    },
    "5771": {
      "op": "intc_0 // 0",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0"
      ]
    },
    "5772": {
      "op": "bytec 4 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "5774": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "5775": {
      "error": "check self.pending_proposals exists",
      "op": "assert // check self.pending_proposals exists",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "maybe_value%7#0"
      ]
    },
    "5776": {
      "op": "intc_1 // 1",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "5777": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "new_state_value%0#0"
      ]
    },
    "5778": {
      "op": "bytec 4 // 0x70656e64696e675f70726f706f73616c73",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "new_state_value%0#0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "5780": {
      "op": "swap",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0x70656e64696e675f70726f706f73616c73",
        "new_state_value%0#0"
      ]
    },
    "5781": {
      "op": "app_global_put",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5782": {
      "retsub": true,
      "op": "retsub"
    },
    "5783": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.vote_proposal",
      "params": {
        "proposal_id#0": "bytes",
        "xgov_address#0": "bytes",
        "approval_votes#0": "bytes",
        "rejection_votes#0": "bytes"
      },
      "block": "vote_proposal",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "5786": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5787": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "5788": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5789": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5790": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5791": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "5792": {
      "op": "frame_dig -4",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "5794": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "op": "callsub _is_proposal",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "5797": {
      "error": "Invalid proposal",
      "op": "assert // Invalid proposal",
      "stack_out": []
    },
    "5798": {
      "op": "frame_dig -4",
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "5800": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5801": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "5802": {
      "op": "bytec 46 // 0x737461747573",
      "defined_out": [
        "0x737461747573",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0x737461747573"
      ]
    },
    "5804": {
      "op": "app_global_get_ex",
      "defined_out": [
        "status#0",
        "status_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "status#0",
        "status_exists#0"
      ]
    },
    "5805": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "status#0"
      ]
    },
    "5806": {
      "op": "pushint 25 // 25",
      "defined_out": [
        "25",
        "status#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "status#0",
        "25"
      ]
    },
    "5808": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "5809": {
      "error": "Proposal is not in voting phase",
      "op": "assert // Proposal is not in voting phase",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5810": {
      "op": "bytec 5 // 0x78",
      "defined_out": [
        "0x78",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x78"
      ]
    },
    "5812": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x78",
        "tmp%2#0",
        "xgov_address#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x78",
        "xgov_address#0 (copy)"
      ]
    },
    "5814": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "5815": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5816": {
      "op": "box_len",
      "defined_out": [
        "exists#0",
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "maybe_value%1#0",
        "exists#0"
      ]
    },
    "5817": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "exists#0"
      ]
    },
    "5819": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "5820": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5821": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "maybe_exists%2#0"
      ]
    },
    "5822": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0"
      ]
    },
    "5823": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "xgov_box#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "xgov_box#0 (copy)"
      ]
    },
    "5824": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "xgov_box#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "xgov_box#0 (copy)",
        "32"
      ]
    },
    "5826": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "tmp%7#0"
      ]
    },
    "5827": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "tmp%7#0",
        "1"
      ]
    },
    "5828": {
      "op": "+",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "to_encode%0#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "to_encode%0#0"
      ]
    },
    "5829": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%0#0"
      ]
    },
    "5830": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5832": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%2#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5833": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%0#0",
        "maybe_value%3#0"
      ]
    },
    "5834": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "5835": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "updated_data%0#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "updated_data%0#0"
      ]
    },
    "5837": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "updated_data%0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5839": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "tmp%4#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "5840": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0"
      ]
    },
    "5841": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "to_encode%1#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "to_encode%1#0"
      ]
    },
    "5843": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "val_as_bytes%1#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%1#0"
      ]
    },
    "5844": {
      "op": "dig 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5846": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%2#0",
        "tmp%4#0",
        "val_as_bytes%1#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%1#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5847": {
      "error": "check self.xgov_box entry exists",
      "op": "assert // check self.xgov_box entry exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "val_as_bytes%1#0",
        "maybe_value%4#0"
      ]
    },
    "5848": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "5849": {
      "op": "replace2 40",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "updated_data%1#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "xgov_box#0",
        "updated_data%1#0"
      ]
    },
    "5851": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "xgov_box#0",
        "updated_data%1#0",
        "tmp%4#0"
      ]
    },
    "5853": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "xgov_box#0",
        "tmp%4#0",
        "updated_data%1#0"
      ]
    },
    "5854": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "xgov_box#0"
      ]
    },
    "5855": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0",
        "tmp%2#0",
        "xgov_box#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "xgov_box#0",
        "tmp%10#0"
      ]
    },
    "5857": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%10#0",
        "xgov_box#0"
      ]
    },
    "5858": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%10#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "5861": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%11#0"
      ]
    },
    "5862": {
      "error": "Must be voting address",
      "op": "assert // Must be voting address",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5863": {
      "op": "itxn_begin"
    },
    "5864": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5866": {
      "op": "pushbytes 0x1841a0d2 // method \"vote(address,uint64,uint64)string\"",
      "defined_out": [
        "Method(vote(address,uint64,uint64)string)"
      ],
      "stack_out": [
        "Method(vote(address,uint64,uint64)string)"
      ]
    },
    "5872": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5874": {
      "op": "frame_dig -3",
      "stack_out": [
        "xgov_address#0 (copy)"
      ]
    },
    "5876": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5878": {
      "op": "frame_dig -2",
      "defined_out": [
        "approval_votes#0 (copy)"
      ],
      "stack_out": [
        "approval_votes#0 (copy)"
      ]
    },
    "5880": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5882": {
      "op": "frame_dig -1",
      "defined_out": [
        "rejection_votes#0 (copy)"
      ],
      "stack_out": [
        "rejection_votes#0 (copy)"
      ]
    },
    "5884": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5886": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5888": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5890": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5891": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5893": {
      "op": "itxn_submit"
    },
    "5894": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "5896": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "5899": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "5901": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "5902": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "5903": {
      "retsub": true,
      "op": "retsub"
    },
    "5904": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.pay_grant_proposal",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "pay_grant_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5907": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5909": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "5910": {
      "op": "bytec 13 // 0x78676f765f7061796f72",
      "defined_out": [
        "0",
        "0x78676f765f7061796f72",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x78676f765f7061796f72"
      ]
    },
    "5912": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5913": {
      "error": "check self.xgov_payor exists",
      "op": "assert // check self.xgov_payor exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "5914": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "5915": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "5916": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "5918": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "op": "callsub _is_proposal",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5921": {
      "error": "Invalid proposal",
      "op": "assert // Invalid proposal",
      "stack_out": []
    },
    "5922": {
      "op": "frame_dig -1",
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "5924": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "5925": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5926": {
      "op": "bytec 46 // 0x737461747573",
      "defined_out": [
        "0x737461747573",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0x737461747573"
      ]
    },
    "5928": {
      "op": "app_global_get_ex",
      "defined_out": [
        "status#0",
        "status_exists#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "status#0",
        "status_exists#0"
      ]
    },
    "5929": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "status#0"
      ]
    },
    "5930": {
      "op": "swap",
      "stack_out": [
        "status#0",
        "tmp%3#0"
      ]
    },
    "5931": {
      "op": "dup",
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5932": {
      "op": "bytec 44 // 0x70726f706f736572",
      "defined_out": [
        "0x70726f706f736572",
        "status#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0x70726f706f736572"
      ]
    },
    "5934": {
      "op": "app_global_get_ex",
      "defined_out": [
        "proposer_bytes#0",
        "proposer_exists#0",
        "status#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "proposer_exists#0"
      ]
    },
    "5935": {
      "op": "pop",
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5936": {
      "op": "dup",
      "defined_out": [
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)",
        "status#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)"
      ]
    },
    "5937": {
      "op": "len",
      "defined_out": [
        "proposer_bytes#0",
        "status#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%5#0"
      ]
    },
    "5938": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "proposer_bytes#0",
        "status#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%5#0",
        "32"
      ]
    },
    "5940": {
      "op": "==",
      "defined_out": [
        "proposer_bytes#0",
        "status#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%6#0"
      ]
    },
    "5941": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5942": {
      "op": "dig 1",
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5944": {
      "op": "pushbytes 0x7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x7265717565737465645f616d6f756e74",
        "proposer_bytes#0",
        "status#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%3#0 (copy)",
        "0x7265717565737465645f616d6f756e74"
      ]
    },
    "5962": {
      "op": "app_global_get_ex",
      "defined_out": [
        "proposer_bytes#0",
        "requested_amount#0",
        "requested_amount_exists#0",
        "status#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "requested_amount#0",
        "requested_amount_exists#0"
      ]
    },
    "5963": {
      "op": "pop",
      "stack_out": [
        "status#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "requested_amount#0"
      ]
    },
    "5964": {
      "op": "cover 2",
      "stack_out": [
        "status#0",
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5966": {
      "op": "uncover 3",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "status#0"
      ]
    },
    "5968": {
      "op": "pushint 45 // 45",
      "defined_out": [
        "45",
        "proposer_bytes#0",
        "requested_amount#0",
        "status#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "status#0",
        "45"
      ]
    },
    "5970": {
      "op": "==",
      "defined_out": [
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%8#0"
      ]
    },
    "5971": {
      "error": "Proposal was not reviewed",
      "op": "assert // Proposal was not reviewed",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5972": {
      "op": "bytec_3 // 0x70",
      "defined_out": [
        "0x70",
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "0x70"
      ]
    },
    "5973": {
      "op": "dig 1",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "0x70",
        "proposer_bytes#0 (copy)"
      ]
    },
    "5975": {
      "op": "concat",
      "defined_out": [
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%9#0"
      ]
    },
    "5976": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5977": {
      "op": "bury 1",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "maybe_exists%1#0"
      ]
    },
    "5979": {
      "error": "Wrong proposer",
      "op": "assert // Wrong proposer",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5980": {
      "op": "dup",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)"
      ]
    },
    "5981": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.valid_kyc",
      "op": "callsub valid_kyc",
      "defined_out": [
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%10#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%10#0"
      ]
    },
    "5984": {
      "error": "Invalid KYC",
      "op": "assert // Invalid KYC",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5985": {
      "op": "intc_0 // 0",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "0"
      ]
    },
    "5986": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473",
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "5987": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5988": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "maybe_value%2#0"
      ]
    },
    "5989": {
      "op": "dig 3",
      "defined_out": [
        "maybe_value%2#0",
        "proposer_bytes#0",
        "requested_amount#0",
        "requested_amount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "maybe_value%2#0",
        "requested_amount#0 (copy)"
      ]
    },
    "5991": {
      "op": ">=",
      "defined_out": [
        "proposer_bytes#0",
        "requested_amount#0",
        "tmp%11#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "tmp%11#0"
      ]
    },
    "5992": {
      "error": "Insufficient treasury funds",
      "op": "assert // Insufficient treasury funds",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5993": {
      "op": "itxn_begin"
    },
    "5994": {
      "op": "dig 2",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0",
        "requested_amount#0 (copy)"
      ]
    },
    "5996": {
      "op": "itxn_field Amount",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "proposer_bytes#0"
      ]
    },
    "5998": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0"
      ]
    },
    "6000": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "pay"
      ]
    },
    "6001": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0"
      ]
    },
    "6003": {
      "op": "intc_0 // 0",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "0"
      ]
    },
    "6004": {
      "op": "itxn_field Fee",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0"
      ]
    },
    "6006": {
      "op": "itxn_submit"
    },
    "6007": {
      "op": "intc_0 // 0",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "0"
      ]
    },
    "6008": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6009": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "6010": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "requested_amount#0",
        "tmp%3#0",
        "maybe_value%0#1"
      ]
    },
    "6011": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#1",
        "requested_amount#0"
      ]
    },
    "6013": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_state_value%0#0"
      ]
    },
    "6014": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "stack_out": [
        "tmp%3#0",
        "new_state_value%0#0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6015": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "0x6f75747374616e64696e675f66756e6473",
        "new_state_value%0#0"
      ]
    },
    "6016": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "6017": {
      "op": "itxn_begin"
    },
    "6018": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "6020": {
      "op": "pushbytes 0x8a5e4c80 // method \"fund()string\"",
      "defined_out": [
        "Method(fund()string)"
      ],
      "stack_out": [
        "Method(fund()string)"
      ]
    },
    "6026": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "6028": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "6030": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6032": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "6033": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6035": {
      "op": "itxn_submit"
    },
    "6036": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "6038": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "6041": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "6043": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "6044": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "6045": {
      "retsub": true,
      "op": "retsub"
    },
    "6046": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.decommission_proposal",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "decommission_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6049": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6051": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "6052": {
      "op": "bytec 16 // 0x636f6d6d69747465655f7075626c6973686572",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f7075626c6973686572",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x636f6d6d69747465655f7075626c6973686572"
      ]
    },
    "6054": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6055": {
      "error": "check self.committee_publisher exists",
      "op": "assert // check self.committee_publisher exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "6056": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "6057": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "6058": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "6060": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "op": "callsub _is_proposal",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "6063": {
      "error": "Invalid proposal",
      "op": "assert // Invalid proposal",
      "stack_out": []
    },
    "6064": {
      "op": "itxn_begin"
    },
    "6065": {
      "op": "frame_dig -1",
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "6067": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6068": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6069": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6071": {
      "op": "pushbytes 0x69ecf4a2 // method \"decommission()string\"",
      "defined_out": [
        "Method(decommission()string)",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "Method(decommission()string)"
      ]
    },
    "6077": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6079": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "appl"
      ]
    },
    "6081": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6083": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "0"
      ]
    },
    "6084": {
      "op": "itxn_field Fee",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6086": {
      "op": "itxn_submit"
    },
    "6087": {
      "op": "itxn LastLog"
    },
    "6089": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6091": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "6094": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "6096": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "6097": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "6098": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6101": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "6102": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6103": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "6104": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "4"
      ]
    },
    "6105": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "6106": {
      "op": "bz decommission_proposal_ternary_false@3",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6109": {
      "op": "intc_0 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "ternary_result%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "ternary_result%0#0"
      ]
    },
    "6110": {
      "block": "decommission_proposal_ternary_merge@4",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "ternary_result%0#0"
      ],
      "op": "bz decommission_proposal_after_if_else@10",
      "defined_out": [],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6113": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "4"
      ]
    },
    "6114": {
      "op": "frame_dig 3",
      "defined_out": [
        "4",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "4",
        "tmp%7#0"
      ]
    },
    "6116": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "4",
        "tmp%7#0 (copy)",
        "tmp%7#0 (copy)"
      ]
    },
    "6117": {
      "op": "cover 2",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "4",
        "tmp%7#0 (copy)"
      ]
    },
    "6119": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "6120": {
      "op": "intc_2 // 4",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "6121": {
      "op": "dig 2",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%7#0 (copy)"
      ]
    },
    "6123": {
      "op": "uncover 2",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "4",
        "tmp%7#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "6125": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "bounded_index%0#0"
      ]
    },
    "6126": {
      "op": "frame_dig 2",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6128": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "6129": {
      "op": "uncover 2",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%7#0"
      ]
    },
    "6131": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "error_without_prefix#0"
      ]
    },
    "6132": {
      "op": "bytec 47 // \"Wrong Proposal Status\"",
      "defined_out": [
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\""
      ]
    },
    "6134": {
      "op": "pushbytess \"Missing Config\" \"There are voters assigned to this proposal\" // \"Missing Config\", \"There are voters assigned to this proposal\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\"",
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\"",
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\""
      ]
    },
    "6194": {
      "op": "uncover 3",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "\"Wrong Proposal Status\"",
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\"",
        "error_without_prefix#0"
      ]
    },
    "6196": {
      "op": "match decommission_proposal_switch_case_0@6 decommission_proposal_switch_case_1@7 decommission_proposal_switch_case_2@8",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6204": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "6205": {
      "block": "decommission_proposal_switch_case_2@8",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "error": "There are voters assigned to this proposal",
      "op": "err // There are voters assigned to this proposal"
    },
    "6206": {
      "block": "decommission_proposal_switch_case_1@7",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "error": "Missing Config",
      "op": "err // Missing Config"
    },
    "6207": {
      "block": "decommission_proposal_switch_case_0@6",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "error": "Wrong Proposal Status",
      "op": "err // Wrong Proposal Status"
    },
    "6208": {
      "block": "decommission_proposal_after_if_else@10",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "0"
      ]
    },
    "6209": {
      "op": "bytec 4 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "6211": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6212": {
      "error": "check self.pending_proposals exists",
      "op": "assert // check self.pending_proposals exists",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "6213": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "6214": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "new_state_value%0#0"
      ]
    },
    "6215": {
      "op": "bytec 4 // 0x70656e64696e675f70726f706f73616c73",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "new_state_value%0#0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "6217": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "0x70656e64696e675f70726f706f73616c73",
        "new_state_value%0#0"
      ]
    },
    "6218": {
      "op": "app_global_put",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6219": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6221": {
      "op": "bytec 44 // 0x70726f706f736572",
      "defined_out": [
        "0x70726f706f736572",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "0x70726f706f736572"
      ]
    },
    "6223": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0",
        "proposer_exists#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "proposer_exists#0"
      ]
    },
    "6224": {
      "op": "pop",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0"
      ]
    },
    "6225": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)"
      ]
    },
    "6226": {
      "op": "len",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "tmp%12#0"
      ]
    },
    "6227": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "tmp%12#0",
        "32"
      ]
    },
    "6229": {
      "op": "==",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "tmp%13#0"
      ]
    },
    "6230": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0"
      ]
    },
    "6231": {
      "op": "bytec_3 // 0x70",
      "defined_out": [
        "0x70",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "proposer_bytes#0",
        "0x70"
      ]
    },
    "6232": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "0x70",
        "proposer_bytes#0"
      ]
    },
    "6233": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0"
      ]
    },
    "6234": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "6235": {
      "op": "box_get",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6236": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "maybe_value%2#0"
      ]
    },
    "6237": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "6238": {
      "op": "dup",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "maybe_value%2#0",
        "0",
        "0"
      ]
    },
    "6239": {
      "op": "setbit",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "tmp%14#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%14#0",
        "updated_data%0#0"
      ]
    },
    "6240": {
      "op": "box_put",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "6241": {
      "retsub": true,
      "op": "retsub"
    },
    "6242": {
      "block": "decommission_proposal_ternary_false@3",
      "stack_in": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "awst_tmp%0#0"
      ]
    },
    "6244": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "6247": {
      "op": "bytec 48 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%9#0",
        "\"ERR:\""
      ]
    },
    "6249": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "ternary_result%0#0"
      ]
    },
    "6250": {
      "op": "b decommission_proposal_ternary_merge@4"
    },
    "6253": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.drop_proposal",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "drop_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6256": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6257": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "6258": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6259": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6260": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6261": {
      "error": "Registry's non-admin methods are paused",
      "op": "assert // Registry's non-admin methods are paused",
      "stack_out": []
    },
    "6262": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "6264": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "op": "callsub _is_proposal",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "6267": {
      "error": "Invalid proposal",
      "op": "assert // Invalid proposal",
      "stack_out": []
    },
    "6268": {
      "op": "frame_dig -1",
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "6270": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "6271": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "6272": {
      "op": "bytec 44 // 0x70726f706f736572",
      "defined_out": [
        "0x70726f706f736572",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0x70726f706f736572"
      ]
    },
    "6274": {
      "op": "app_global_get_ex",
      "defined_out": [
        "proposer_bytes#0",
        "proposer_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "proposer_bytes#0",
        "proposer_exists#0"
      ]
    },
    "6275": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "proposer_bytes#0"
      ]
    },
    "6276": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "proposer_bytes#0",
        "proposer_bytes#0"
      ]
    },
    "6277": {
      "op": "cover 2",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0"
      ]
    },
    "6279": {
      "op": "dup",
      "defined_out": [
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0",
        "proposer_bytes#0 (copy)"
      ]
    },
    "6280": {
      "op": "len",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0",
        "tmp%3#0"
      ]
    },
    "6281": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0",
        "tmp%3#0",
        "32"
      ]
    },
    "6283": {
      "op": "==",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0",
        "tmp%4#0"
      ]
    },
    "6284": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0"
      ]
    },
    "6285": {
      "op": "txn Sender",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "proposer_bytes#0",
        "tmp%5#0"
      ]
    },
    "6287": {
      "op": "==",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0",
        "tmp%6#0"
      ]
    },
    "6288": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "proposer_bytes#0",
        "tmp%2#0"
      ]
    },
    "6289": {
      "op": "itxn_begin"
    },
    "6290": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "proposer_bytes#0"
      ]
    },
    "6292": {
      "op": "pushbytes 0x7371321a // method \"drop()string\"",
      "defined_out": [
        "Method(drop()string)",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "Method(drop()string)"
      ]
    },
    "6298": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "proposer_bytes#0"
      ]
    },
    "6300": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "appl"
      ]
    },
    "6302": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "proposer_bytes#0"
      ]
    },
    "6304": {
      "op": "intc_0 // 0",
      "stack_out": [
        "proposer_bytes#0",
        "0"
      ]
    },
    "6305": {
      "op": "itxn_field Fee",
      "stack_out": [
        "proposer_bytes#0"
      ]
    },
    "6307": {
      "op": "itxn_submit"
    },
    "6308": {
      "op": "itxn LastLog"
    },
    "6310": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6312": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "proposer_bytes#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "6315": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "proposer_bytes#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "6317": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "proposer_bytes#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "6318": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "6319": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6322": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "6323": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6324": {
      "op": "dup",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0"
      ]
    },
    "6325": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "4"
      ]
    },
    "6326": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "6327": {
      "op": "bz drop_proposal_ternary_false@3",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6330": {
      "op": "intc_0 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "proposer_bytes#0",
        "ternary_result%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "ternary_result%0#0"
      ]
    },
    "6331": {
      "block": "drop_proposal_ternary_merge@4",
      "stack_in": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "ternary_result%0#0"
      ],
      "op": "bz drop_proposal_after_if_else@8",
      "defined_out": [],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6334": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "4"
      ]
    },
    "6335": {
      "op": "frame_dig 3",
      "defined_out": [
        "4",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "4",
        "tmp%11#0"
      ]
    },
    "6337": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "4",
        "tmp%11#0 (copy)",
        "tmp%11#0 (copy)"
      ]
    },
    "6338": {
      "op": "cover 2",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "4",
        "tmp%11#0 (copy)"
      ]
    },
    "6340": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "6341": {
      "op": "intc_2 // 4",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "6342": {
      "op": "dig 2",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%11#0 (copy)"
      ]
    },
    "6344": {
      "op": "uncover 2",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "4",
        "tmp%11#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "6346": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "bounded_index%0#0"
      ]
    },
    "6347": {
      "op": "frame_dig 2",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6349": {
      "op": "swap",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%11#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "6350": {
      "op": "uncover 2",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%11#0"
      ]
    },
    "6352": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "error_without_prefix#0"
      ]
    },
    "6353": {
      "op": "bytec 47 // \"Wrong Proposal Status\"",
      "defined_out": [
        "\"Wrong Proposal Status\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status\""
      ]
    },
    "6355": {
      "op": "swap",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "\"Wrong Proposal Status\"",
        "error_without_prefix#0"
      ]
    },
    "6356": {
      "op": "match drop_proposal_switch_case_0@6",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6360": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "6361": {
      "block": "drop_proposal_switch_case_0@6",
      "stack_in": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ],
      "error": "Wrong Proposal Status",
      "op": "err // Wrong Proposal Status"
    },
    "6362": {
      "block": "drop_proposal_after_if_else@8",
      "stack_in": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "0"
      ]
    },
    "6363": {
      "op": "bytec 4 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "6365": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6366": {
      "error": "check self.pending_proposals exists",
      "op": "assert // check self.pending_proposals exists",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "maybe_value%1#0"
      ]
    },
    "6367": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "6368": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "new_state_value%0#0"
      ]
    },
    "6369": {
      "op": "bytec 4 // 0x70656e64696e675f70726f706f73616c73",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "new_state_value%0#0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "6371": {
      "op": "swap",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "0x70656e64696e675f70726f706f73616c73",
        "new_state_value%0#0"
      ]
    },
    "6372": {
      "op": "app_global_put",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6373": {
      "op": "bytec_3 // 0x70",
      "defined_out": [
        "0x70"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "0x70"
      ]
    },
    "6374": {
      "op": "frame_dig 0",
      "defined_out": [
        "0x70",
        "proposer_bytes#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "0x70",
        "proposer_bytes#0"
      ]
    },
    "6376": {
      "op": "concat",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0"
      ]
    },
    "6377": {
      "op": "dup",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "6378": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "proposer_bytes#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6379": {
      "error": "check self.proposer_box entry exists",
      "op": "assert // check self.proposer_box entry exists",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "maybe_value%2#0"
      ]
    },
    "6380": {
      "op": "intc_0 // 0",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "6381": {
      "op": "dup",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "maybe_value%2#0",
        "0",
        "0"
      ]
    },
    "6382": {
      "op": "setbit",
      "defined_out": [
        "proposer_bytes#0",
        "tmp%15#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%15#0",
        "updated_data%0#0"
      ]
    },
    "6383": {
      "op": "box_put",
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ]
    },
    "6384": {
      "retsub": true,
      "op": "retsub"
    },
    "6385": {
      "block": "drop_proposal_ternary_false@3",
      "stack_in": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "awst_tmp%0#0"
      ]
    },
    "6387": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "6390": {
      "op": "bytec 48 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "\"ERR:\""
      ]
    },
    "6392": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "proposer_bytes#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "ternary_result%0#0"
      ]
    },
    "6393": {
      "op": "b drop_proposal_ternary_merge@4"
    },
    "6396": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.deposit_funds",
      "params": {
        "payment#0": "uint64"
      },
      "block": "deposit_funds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6399": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "6401": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6403": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "6405": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "6406": {
      "error": "Wrong Receiver",
      "op": "assert // Wrong Receiver",
      "stack_out": []
    },
    "6407": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6408": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ],
      "stack_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6409": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6410": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6411": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "payment#0 (copy)"
      ]
    },
    "6413": {
      "op": "gtxns Amount",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "6415": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "6416": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "stack_out": [
        "new_state_value%0#0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6417": {
      "op": "swap",
      "stack_out": [
        "0x6f75747374616e64696e675f66756e6473",
        "new_state_value%0#0"
      ]
    },
    "6418": {
      "op": "app_global_put",
      "stack_out": []
    },
    "6419": {
      "retsub": true,
      "op": "retsub"
    },
    "6420": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_funds",
      "params": {
        "amount#0": "uint64"
      },
      "block": "withdraw_funds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6423": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6426": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "6427": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6428": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ],
      "stack_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6429": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6430": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6431": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "6433": {
      "op": ">=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "6434": {
      "error": "Insufficient funds",
      "op": "assert // Insufficient funds",
      "stack_out": []
    },
    "6435": {
      "op": "txn Fee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "6437": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "6439": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "2"
      ]
    },
    "6441": {
      "op": "*",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "6442": {
      "op": ">=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "6443": {
      "error": "Insufficient fee",
      "op": "assert // Insufficient fee",
      "stack_out": []
    },
    "6444": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "6445": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "stack_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6446": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6447": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "6448": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "6450": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "6451": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "stack_out": [
        "new_state_value%0#0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6452": {
      "op": "swap",
      "stack_out": [
        "0x6f75747374616e64696e675f66756e6473",
        "new_state_value%0#0"
      ]
    },
    "6453": {
      "op": "app_global_put",
      "stack_out": []
    },
    "6454": {
      "op": "itxn_begin"
    },
    "6455": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "6456": {
      "op": "bytec 6 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0",
        "0x78676f765f6d616e61676572"
      ],
      "stack_out": [
        "0",
        "0x78676f765f6d616e61676572"
      ]
    },
    "6458": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6459": {
      "error": "check self.xgov_manager exists",
      "op": "assert // check self.xgov_manager exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "6460": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "6462": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "6464": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "6466": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "6467": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6469": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "6470": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6472": {
      "op": "itxn_submit"
    },
    "6473": {
      "retsub": true,
      "op": "retsub"
    },
    "6474": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.withdraw_balance",
      "params": {},
      "block": "withdraw_balance",
      "stack_in": [],
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry.is_xgov_manager",
      "op": "callsub is_xgov_manager",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6477": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "6478": {
      "op": "txn Fee",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "6480": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "6482": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "2"
      ]
    },
    "6484": {
      "op": "*",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "6485": {
      "op": ">=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "6486": {
      "error": "Insufficient fee",
      "op": "assert // Insufficient fee",
      "stack_out": []
    },
    "6487": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "6489": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "6491": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "6492": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%6#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%6#0"
      ]
    },
    "6494": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%1#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "6496": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0",
        "value%1#0"
      ]
    },
    "6497": {
      "op": "-",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "6498": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "6499": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6500": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6501": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%0#0"
      ]
    },
    "6502": {
      "op": "-",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "amount#0"
      ]
    },
    "6503": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0",
        "amount#0 (copy)"
      ]
    },
    "6504": {
      "error": "Insufficient funds",
      "op": "assert // Insufficient funds",
      "stack_out": [
        "amount#0"
      ]
    },
    "6505": {
      "op": "itxn_begin"
    },
    "6506": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount#0",
        "0"
      ]
    },
    "6507": {
      "op": "bytec 6 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0",
        "0x78676f765f6d616e61676572",
        "amount#0"
      ],
      "stack_out": [
        "amount#0",
        "0",
        "0x78676f765f6d616e61676572"
      ]
    },
    "6509": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "amount#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6510": {
      "error": "check self.xgov_manager exists",
      "op": "assert // check self.xgov_manager exists",
      "stack_out": [
        "amount#0",
        "maybe_value%1#0"
      ]
    },
    "6511": {
      "op": "itxn_field Receiver"
    },
    "6513": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "6515": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "6516": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6518": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "6519": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6521": {
      "op": "itxn_submit"
    },
    "6522": {
      "retsub": true,
      "op": "retsub"
    },
    "6523": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.get_state",
      "params": {},
      "block": "get_state",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6524": {
      "op": "bytec_0 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ]
    },
    "6525": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6526": {
      "error": "check self.paused_registry exists",
      "op": "assert // check self.paused_registry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "6527": {
      "op": "bytec 8 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "6529": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0x00",
        "0"
      ]
    },
    "6530": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_value%0#0"
      ]
    },
    "6532": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "6533": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "0"
      ]
    },
    "6534": {
      "op": "bytec 10 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x7061757365645f70726f706f73616c73",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0",
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "6536": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6537": {
      "error": "check self.paused_proposals exists",
      "op": "assert // check self.paused_proposals exists",
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%1#0"
      ]
    },
    "6538": {
      "op": "bytec 8 // 0x00",
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%1#0",
        "0x00"
      ]
    },
    "6540": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%1#0",
        "0x00",
        "0"
      ]
    },
    "6541": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "0x00",
        "0",
        "maybe_value%1#0"
      ]
    },
    "6543": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "6544": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "6545": {
      "op": "bytec 6 // 0x78676f765f6d616e61676572",
      "defined_out": [
        "0",
        "0x78676f765f6d616e61676572",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0",
        "0x78676f765f6d616e61676572"
      ]
    },
    "6547": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6548": {
      "error": "check self.xgov_manager exists",
      "op": "assert // check self.xgov_manager exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0"
      ]
    },
    "6549": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "6550": {
      "op": "bytec 13 // 0x78676f765f7061796f72",
      "defined_out": [
        "0",
        "0x78676f765f7061796f72",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "0",
        "0x78676f765f7061796f72"
      ]
    },
    "6552": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6553": {
      "error": "check self.xgov_payor exists",
      "op": "assert // check self.xgov_payor exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "6554": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "6555": {
      "op": "bytec 20 // 0x78676f765f7265766965776572",
      "defined_out": [
        "0",
        "0x78676f765f7265766965776572",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "0x78676f765f7265766965776572"
      ]
    },
    "6557": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%4#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6558": {
      "error": "check self.xgov_reviewer exists",
      "op": "assert // check self.xgov_reviewer exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "6559": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "6560": {
      "op": "bytec 12 // 0x78676f765f73756273637269626572",
      "defined_out": [
        "0",
        "0x78676f765f73756273637269626572",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "0x78676f765f73756273637269626572"
      ]
    },
    "6562": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%5#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "6563": {
      "error": "check self.xgov_subscriber exists",
      "op": "assert // check self.xgov_subscriber exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "6564": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "6565": {
      "op": "bytec 14 // 0x6b79635f70726f7669646572",
      "defined_out": [
        "0",
        "0x6b79635f70726f7669646572",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0",
        "0x6b79635f70726f7669646572"
      ]
    },
    "6567": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%6#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "6568": {
      "error": "check self.kyc_provider exists",
      "op": "assert // check self.kyc_provider exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "6569": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "0"
      ]
    },
    "6570": {
      "op": "bytec 15 // 0x636f6d6d69747465655f6d616e61676572",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d616e61676572",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "0",
        "0x636f6d6d69747465655f6d616e61676572"
      ]
    },
    "6572": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%7#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "6573": {
      "error": "check self.committee_manager exists",
      "op": "assert // check self.committee_manager exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ]
    },
    "6574": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "6575": {
      "op": "bytec 16 // 0x636f6d6d69747465655f7075626c6973686572",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f7075626c6973686572",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "0",
        "0x636f6d6d69747465655f7075626c6973686572"
      ]
    },
    "6577": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%8#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "6578": {
      "error": "check self.committee_publisher exists",
      "op": "assert // check self.committee_publisher exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "6579": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "0"
      ]
    },
    "6580": {
      "op": "bytec 17 // 0x78676f765f666565",
      "defined_out": [
        "0",
        "0x78676f765f666565",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "0",
        "0x78676f765f666565"
      ]
    },
    "6582": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%9#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "6583": {
      "error": "check self.xgov_fee exists",
      "op": "assert // check self.xgov_fee exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ]
    },
    "6584": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0"
      ]
    },
    "6585": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "6586": {
      "op": "bytec 18 // 0x70726f706f7365725f666565",
      "defined_out": [
        "0",
        "0x70726f706f7365725f666565",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "0",
        "0x70726f706f7365725f666565"
      ]
    },
    "6588": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "6589": {
      "error": "check self.proposer_fee exists",
      "op": "assert // check self.proposer_fee exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "maybe_value%10#0"
      ]
    },
    "6590": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "6591": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "6592": {
      "op": "bytec 11 // 0x70726f706f73616c5f666565",
      "defined_out": [
        "0",
        "0x70726f706f73616c5f666565",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "0x70726f706f73616c5f666565"
      ]
    },
    "6594": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "6595": {
      "error": "check self.proposal_fee exists",
      "op": "assert // check self.proposal_fee exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%11#0"
      ]
    },
    "6596": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "6597": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "6598": {
      "op": "bytec 21 // 0x70726f706f73616c5f7075626c697368696e675f627073",
      "defined_out": [
        "0",
        "0x70726f706f73616c5f7075626c697368696e675f627073",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "0x70726f706f73616c5f7075626c697368696e675f627073"
      ]
    },
    "6600": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%12#0",
        "maybe_value%12#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "6601": {
      "error": "check self.proposal_publishing_bps exists",
      "op": "assert // check self.proposal_publishing_bps exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%12#0"
      ]
    },
    "6602": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "6603": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "6604": {
      "op": "bytec 22 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0",
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "6606": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%13#0",
        "maybe_value%13#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "6607": {
      "error": "check self.proposal_commitment_bps exists",
      "op": "assert // check self.proposal_commitment_bps exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%13#0"
      ]
    },
    "6608": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "6609": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0"
      ]
    },
    "6610": {
      "op": "bytec 23 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0",
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0",
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "6612": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%14#0",
        "maybe_value%14#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%14#0",
        "maybe_exists%14#0"
      ]
    },
    "6613": {
      "error": "check self.min_requested_amount exists",
      "op": "assert // check self.min_requested_amount exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%14#0"
      ]
    },
    "6614": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "6615": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0"
      ]
    },
    "6616": {
      "op": "bytec 24 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "6618": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%15#0",
        "maybe_value%15#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%15#0",
        "maybe_exists%15#0"
      ]
    },
    "6619": {
      "error": "check self.max_requested_amount_small exists",
      "op": "assert // check self.max_requested_amount_small exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%15#0"
      ]
    },
    "6620": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "6621": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0"
      ]
    },
    "6622": {
      "op": "bytec 25 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "6624": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%16#0",
        "maybe_value%16#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%16#0",
        "maybe_exists%16#0"
      ]
    },
    "6625": {
      "error": "check self.max_requested_amount_medium exists",
      "op": "assert // check self.max_requested_amount_medium exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%16#0"
      ]
    },
    "6626": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "6627": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "6628": {
      "op": "bytec 26 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0",
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "6630": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%17#0",
        "maybe_value%17#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%17#0",
        "maybe_exists%17#0"
      ]
    },
    "6631": {
      "error": "check self.max_requested_amount_large exists",
      "op": "assert // check self.max_requested_amount_large exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%17#0"
      ]
    },
    "6632": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "6633": {
      "op": "cover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%8#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "6635": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%8#0",
        "result%1#0"
      ]
    },
    "6636": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%1#0",
        "val_as_bytes%8#0"
      ]
    },
    "6637": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0"
      ]
    },
    "6638": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "0"
      ]
    },
    "6639": {
      "op": "bytec 27 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "6641": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%18#0",
        "maybe_value%18#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "maybe_value%18#0",
        "maybe_exists%18#0"
      ]
    },
    "6642": {
      "error": "check self.discussion_duration_small exists",
      "op": "assert // check self.discussion_duration_small exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "maybe_value%18#0"
      ]
    },
    "6643": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0"
      ]
    },
    "6644": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "6645": {
      "op": "bytec 28 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "6647": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%19#0",
        "maybe_value%19#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "maybe_value%19#0",
        "maybe_exists%19#0"
      ]
    },
    "6648": {
      "error": "check self.discussion_duration_medium exists",
      "op": "assert // check self.discussion_duration_medium exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "maybe_value%19#0"
      ]
    },
    "6649": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "6650": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "6651": {
      "op": "bytec 29 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "6653": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%20#0",
        "maybe_value%2#0",
        "maybe_value%20#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%20#0",
        "maybe_exists%20#0"
      ]
    },
    "6654": {
      "error": "check self.discussion_duration_large exists",
      "op": "assert // check self.discussion_duration_large exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%20#0"
      ]
    },
    "6655": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "6656": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0"
      ]
    },
    "6657": {
      "op": "bytec 30 // 0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0",
        "0x64697363757373696f6e5f6475726174696f6e5f786c61726765"
      ]
    },
    "6659": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%21#0",
        "maybe_value%2#0",
        "maybe_value%21#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%21#0",
        "maybe_exists%21#0"
      ]
    },
    "6660": {
      "error": "check self.discussion_duration_xlarge exists",
      "op": "assert // check self.discussion_duration_xlarge exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%21#0"
      ]
    },
    "6661": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "6662": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%9#0"
      ]
    },
    "6664": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "6666": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "result%4#0"
      ]
    },
    "6667": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%12#0",
        "result%4#0",
        "val_as_bytes%11#0"
      ]
    },
    "6669": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "val_as_bytes%12#0",
        "result%5#0"
      ]
    },
    "6670": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%5#0",
        "val_as_bytes%12#0"
      ]
    },
    "6671": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0"
      ]
    },
    "6672": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "0"
      ]
    },
    "6673": {
      "op": "bytec 31 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0",
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "0",
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "6675": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%22#0",
        "maybe_value%2#0",
        "maybe_value%22#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "maybe_value%22#0",
        "maybe_exists%22#0"
      ]
    },
    "6676": {
      "error": "check self.voting_duration_small exists",
      "op": "assert // check self.voting_duration_small exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "maybe_value%22#0"
      ]
    },
    "6677": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0"
      ]
    },
    "6678": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "0"
      ]
    },
    "6679": {
      "op": "bytec 32 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0",
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "0",
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "6681": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%23#0",
        "maybe_value%2#0",
        "maybe_value%23#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "maybe_value%23#0",
        "maybe_exists%23#0"
      ]
    },
    "6682": {
      "error": "check self.voting_duration_medium exists",
      "op": "assert // check self.voting_duration_medium exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "maybe_value%23#0"
      ]
    },
    "6683": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ]
    },
    "6684": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0"
      ]
    },
    "6685": {
      "op": "bytec 33 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0",
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0",
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "6687": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%24#0",
        "maybe_value%2#0",
        "maybe_value%24#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%24#0",
        "maybe_exists%24#0"
      ]
    },
    "6688": {
      "error": "check self.voting_duration_large exists",
      "op": "assert // check self.voting_duration_large exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%24#0"
      ]
    },
    "6689": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ]
    },
    "6690": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "0"
      ]
    },
    "6691": {
      "op": "bytec 34 // 0x766f74696e675f6475726174696f6e5f786c61726765",
      "defined_out": [
        "0",
        "0x766f74696e675f6475726174696f6e5f786c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "0",
        "0x766f74696e675f6475726174696f6e5f786c61726765"
      ]
    },
    "6693": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%25#0",
        "maybe_value%2#0",
        "maybe_value%25#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "maybe_value%25#0",
        "maybe_exists%25#0"
      ]
    },
    "6694": {
      "error": "check self.voting_duration_xlarge exists",
      "op": "assert // check self.voting_duration_xlarge exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "maybe_value%25#0"
      ]
    },
    "6695": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0"
      ]
    },
    "6696": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%13#0"
      ]
    },
    "6698": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ]
    },
    "6700": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "result%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "result%8#0"
      ]
    },
    "6701": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%16#0",
        "result%8#0",
        "val_as_bytes%15#0"
      ]
    },
    "6703": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%2#0",
        "result%6#0",
        "result%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%16#0",
        "result%9#0"
      ]
    },
    "6704": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%9#0",
        "val_as_bytes%16#0"
      ]
    },
    "6705": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0"
      ]
    },
    "6706": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "0"
      ]
    },
    "6707": {
      "op": "bytec 35 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0",
        "0x71756f72756d5f736d616c6c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "0",
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "6709": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%26#0",
        "maybe_value%2#0",
        "maybe_value%26#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "maybe_value%26#0",
        "maybe_exists%26#0"
      ]
    },
    "6710": {
      "error": "check self.quorum_small exists",
      "op": "assert // check self.quorum_small exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "maybe_value%26#0"
      ]
    },
    "6711": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0"
      ]
    },
    "6712": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "0"
      ]
    },
    "6713": {
      "op": "bytec 36 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0",
        "0x71756f72756d5f6d656469756d",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "0",
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "6715": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%27#0",
        "maybe_value%2#0",
        "maybe_value%27#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "maybe_value%27#0",
        "maybe_exists%27#0"
      ]
    },
    "6716": {
      "error": "check self.quorum_medium exists",
      "op": "assert // check self.quorum_medium exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "maybe_value%27#0"
      ]
    },
    "6717": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0"
      ]
    },
    "6718": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "0"
      ]
    },
    "6719": {
      "op": "bytec 37 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0",
        "0x71756f72756d5f6c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "0",
        "0x71756f72756d5f6c61726765"
      ]
    },
    "6721": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%28#0",
        "maybe_value%2#0",
        "maybe_value%28#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "maybe_value%28#0",
        "maybe_exists%28#0"
      ]
    },
    "6722": {
      "error": "check self.quorum_large exists",
      "op": "assert // check self.quorum_large exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "maybe_value%28#0"
      ]
    },
    "6723": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0"
      ]
    },
    "6724": {
      "op": "cover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%19#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0"
      ]
    },
    "6726": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%12#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "val_as_bytes%19#0",
        "result%12#0"
      ]
    },
    "6727": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%12#0",
        "val_as_bytes%19#0"
      ]
    },
    "6728": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0"
      ]
    },
    "6729": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "0"
      ]
    },
    "6730": {
      "op": "bytec 38 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0",
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "0",
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "6732": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%29#0",
        "maybe_value%2#0",
        "maybe_value%29#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "maybe_value%29#0",
        "maybe_exists%29#0"
      ]
    },
    "6733": {
      "error": "check self.weighted_quorum_small exists",
      "op": "assert // check self.weighted_quorum_small exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "maybe_value%29#0"
      ]
    },
    "6734": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0"
      ]
    },
    "6735": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "0"
      ]
    },
    "6736": {
      "op": "bytec 39 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0",
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "0",
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "6738": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%30#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%30#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "maybe_value%30#0",
        "maybe_exists%30#0"
      ]
    },
    "6739": {
      "error": "check self.weighted_quorum_medium exists",
      "op": "assert // check self.weighted_quorum_medium exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "maybe_value%30#0"
      ]
    },
    "6740": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0"
      ]
    },
    "6741": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "0"
      ]
    },
    "6742": {
      "op": "bytec 40 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0",
        "0x77656967687465645f71756f72756d5f6c61726765",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "0",
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "6744": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%31#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%31#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "maybe_value%31#0",
        "maybe_exists%31#0"
      ]
    },
    "6745": {
      "error": "check self.weighted_quorum_large exists",
      "op": "assert // check self.weighted_quorum_large exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "maybe_value%31#0"
      ]
    },
    "6746": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "val_as_bytes%22#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0",
        "val_as_bytes%22#0"
      ]
    },
    "6747": {
      "op": "cover 2",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%22#0",
        "val_as_bytes%20#0",
        "val_as_bytes%21#0"
      ]
    },
    "6749": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%15#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%22#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "val_as_bytes%22#0",
        "result%15#0"
      ]
    },
    "6750": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%15#0",
        "val_as_bytes%22#0"
      ]
    },
    "6751": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0"
      ]
    },
    "6752": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "0"
      ]
    },
    "6753": {
      "op": "bytec_2 // 0x6f75747374616e64696e675f66756e6473",
      "defined_out": [
        "0",
        "0x6f75747374616e64696e675f66756e6473",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "0",
        "0x6f75747374616e64696e675f66756e6473"
      ]
    },
    "6754": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%32#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%32#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "maybe_value%32#0",
        "maybe_exists%32#0"
      ]
    },
    "6755": {
      "error": "check self.outstanding_funds exists",
      "op": "assert // check self.outstanding_funds exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "maybe_value%32#0"
      ]
    },
    "6756": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0"
      ]
    },
    "6757": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "0"
      ]
    },
    "6758": {
      "op": "bytec 4 // 0x70656e64696e675f70726f706f73616c73",
      "defined_out": [
        "0",
        "0x70656e64696e675f70726f706f73616c73",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "0",
        "0x70656e64696e675f70726f706f73616c73"
      ]
    },
    "6760": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%33#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%33#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "maybe_value%33#0",
        "maybe_exists%33#0"
      ]
    },
    "6761": {
      "error": "check self.pending_proposals exists",
      "op": "assert // check self.pending_proposals exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "maybe_value%33#0"
      ]
    },
    "6762": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0"
      ]
    },
    "6763": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "0"
      ]
    },
    "6764": {
      "op": "bytec 45 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6964",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "0",
        "0x636f6d6d69747465655f6964"
      ]
    },
    "6766": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%34#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "maybe_exists%34#0"
      ]
    },
    "6767": {
      "error": "check self.committee_id exists",
      "op": "assert // check self.committee_id exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0"
      ]
    },
    "6768": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "0"
      ]
    },
    "6769": {
      "op": "bytec 41 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d656d62657273",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "6771": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%35#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%35#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "maybe_value%35#0",
        "maybe_exists%35#0"
      ]
    },
    "6772": {
      "error": "check self.committee_members exists",
      "op": "assert // check self.committee_members exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "maybe_value%35#0"
      ]
    },
    "6773": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0"
      ]
    },
    "6774": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "0"
      ]
    },
    "6775": {
      "op": "bytec 42 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f766f746573",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "0",
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "6777": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_exists%36#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%36#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "maybe_value%36#0",
        "maybe_exists%36#0"
      ]
    },
    "6778": {
      "error": "check self.committee_votes exists",
      "op": "assert // check self.committee_votes exists",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "maybe_value%36#0"
      ]
    },
    "6779": {
      "op": "itob",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ]
    },
    "6780": {
      "op": "uncover 23",
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_bool%1#0"
      ]
    },
    "6782": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "6783": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%0#0",
        "is_true%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "is_true%0#0"
      ]
    },
    "6784": {
      "op": "uncover 24",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "is_true%0#0",
        "encoded_bool%0#0"
      ]
    },
    "6786": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded_bool%0#0",
        "is_true%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "is_true%0#0",
        "encoded_bool%0#0",
        "1"
      ]
    },
    "6787": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_bool%0#0",
        "1",
        "is_true%0#0"
      ]
    },
    "6789": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "6790": {
      "op": "uncover 23",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%2#0",
        "maybe_value%2#0"
      ]
    },
    "6792": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6793": {
      "op": "uncover 22",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0"
      ]
    },
    "6795": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "maybe_value%34#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "6796": {
      "op": "uncover 21",
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%4#0"
      ]
    },
    "6798": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "maybe_value%34#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "6799": {
      "op": "uncover 20",
      "stack_out": [
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%5#0",
        "maybe_value%5#0"
      ]
    },
    "6801": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "maybe_value%34#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "6802": {
      "op": "uncover 19",
      "stack_out": [
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%6#0"
      ]
    },
    "6804": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "maybe_value%34#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%7#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "6805": {
      "op": "uncover 18",
      "stack_out": [
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%7#0"
      ]
    },
    "6807": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%34#0",
        "maybe_value%8#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "6808": {
      "op": "uncover 17",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%8#0"
      ]
    },
    "6810": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "6811": {
      "op": "uncover 16",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "6813": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "6814": {
      "op": "uncover 15",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%1#0"
      ]
    },
    "6816": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%2#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "6817": {
      "op": "uncover 14",
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%2#0"
      ]
    },
    "6819": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "6820": {
      "op": "uncover 13",
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%3#0"
      ]
    },
    "6822": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "6823": {
      "op": "uncover 12",
      "stack_out": [
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%4#0"
      ]
    },
    "6825": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "6826": {
      "op": "uncover 11",
      "stack_out": [
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%5#0"
      ]
    },
    "6828": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%2#0",
        "result%6#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "result%2#0",
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "6829": {
      "op": "uncover 10",
      "stack_out": [
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%15#0",
        "result%2#0"
      ]
    },
    "6831": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "result%6#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "result%6#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "6832": {
      "op": "uncover 9",
      "stack_out": [
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%16#0",
        "result%6#0"
      ]
    },
    "6834": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0",
        "maybe_value%34#0",
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "result%10#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "6835": {
      "op": "uncover 8",
      "stack_out": [
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%17#0",
        "result%10#0"
      ]
    },
    "6837": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0",
        "maybe_value%34#0",
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "result%13#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "6838": {
      "op": "uncover 7",
      "stack_out": [
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%18#0",
        "result%13#0"
      ]
    },
    "6840": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "maybe_value%34#0",
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "result%16#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "6841": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%19#0",
        "result%16#0"
      ]
    },
    "6843": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0",
        "maybe_value%34#0",
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "val_as_bytes%23#0",
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "6844": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%20#0",
        "val_as_bytes%23#0"
      ]
    },
    "6846": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0",
        "maybe_value%34#0",
        "val_as_bytes%24#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "val_as_bytes%24#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "6847": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%21#0",
        "val_as_bytes%24#0"
      ]
    },
    "6849": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "maybe_value%34#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "6850": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%22#0",
        "maybe_value%34#0"
      ]
    },
    "6852": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%23#0",
        "val_as_bytes%25#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "val_as_bytes%25#0",
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%23#0"
      ]
    },
    "6853": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%23#0",
        "val_as_bytes%25#0"
      ]
    },
    "6855": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%24#0",
        "val_as_bytes%26#0"
      ],
      "stack_out": [
        "val_as_bytes%26#0",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "6856": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%24#0",
        "val_as_bytes%26#0"
      ]
    },
    "6857": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%25#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%25#0"
      ]
    },
    "6858": {
      "retsub": true,
      "op": "retsub"
    },
    "6859": {
      "subroutine": "smart_contracts.xgov_registry.contract.XGovRegistry.is_proposal",
      "params": {
        "proposal_id#0": "bytes"
      },
      "block": "is_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6862": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "6864": {
      "callsub": "smart_contracts.xgov_registry.contract.XGovRegistry._is_proposal",
      "op": "callsub _is_proposal",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6867": {
      "error": "Invalid proposal",
      "op": "assert // Invalid proposal",
      "stack_out": []
    },
    "6868": {
      "retsub": true,
      "op": "retsub"
    }
  }
}