# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "create", "returns": {"type": "void"}, "desc": "Create the xGov Registry.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "pause_registry", "returns": {"type": "void"}, "desc": "Pauses the xGov Registry non-administrative methods.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "pause_proposals", "returns": {"type": "void"}, "desc": "Pauses the creation of new Proposals.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "resume_registry", "returns": {"type": "void"}, "desc": "Resumes the xGov Registry non-administrative methods.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "resume_proposals", "returns": {"type": "void"}, "desc": "Resumes the creation of new Proposals.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Address of the new xGov Manager", "name": "manager"}], "name": "set_xgov_manager", "returns": {"type": "void"}, "desc": "Sets the xGov Manager.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Address of the new xGov Payor", "name": "payor"}], "name": "set_payor", "returns": {"type": "void"}, "desc": "Sets the xGov Payor.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Address of the new xGov Council", "name": "council"}], "name": "set_xgov_council", "returns": {"type": "void"}, "desc": "Sets the xGov Council.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Address of the new xGov Subscriber", "name": "subscriber"}], "name": "set_xgov_subscriber", "returns": {"type": "void"}, "desc": "Sets the xGov Subscriber.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Address of the new KYC Provider", "name": "provider"}], "name": "set_kyc_provider", "returns": {"type": "void"}, "desc": "Sets the KYC provider.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Address of the new xGov Manager", "name": "manager"}], "name": "set_committee_manager", "returns": {"type": "void"}, "desc": "Sets the Committee Manager.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Address of the new xGov Daemon", "name": "xgov_daemon"}], "name": "set_xgov_daemon", "returns": {"type": "void"}, "desc": "Sets the xGov Daemon.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3])", "desc": "Configuration class containing the field data", "name": "config", "struct": "XGovRegistryConfig"}], "name": "config_xgov_registry", "returns": {"type": "void"}, "desc": "Sets the configuration of the xGov Registry.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["UpdateApplication"], "create": []}, "args": [], "name": "update_xgov_registry", "returns": {"type": "void"}, "desc": "Updates the xGov Registry contract.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The address of the voting account for the xGov", "name": "voting_address"}, {"type": "pay", "desc": "The payment transaction covering the xGov fee", "name": "payment"}], "name": "subscribe_xgov", "returns": {"type": "void"}, "desc": "Subscribes the sender to being an xGov.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The address of the xGov to unsubscribe", "name": "xgov_address"}], "name": "unsubscribe_xgov", "returns": {"type": "void"}, "desc": "Unsubscribes the designated address from being an xGov.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The address of the xGov", "name": "xgov_address"}, {"type": "address", "desc": "The address of the xGov Address owner/controller (Voting Address)", "name": "owner_address"}, {"type": "uint64", "desc": "The type of relationship enum", "name": "relation_type"}, {"type": "pay", "desc": "The payment transaction covering the xGov fee", "name": "payment"}], "name": "request_subscribe_xgov", "returns": {"type": "void"}, "desc": "Requests to subscribe to the xGov.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The ID of the request to approve", "name": "request_id"}], "name": "approve_subscribe_xgov", "returns": {"type": "void"}, "desc": "Approves a subscribe request to xGov.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The ID of the request to reject", "name": "request_id"}], "name": "reject_subscribe_xgov", "returns": {"type": "void"}, "desc": "Rejects a subscribe request to xGov.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The xGov address delegating voting power", "name": "xgov_address"}, {"type": "address", "desc": "The voting account address to delegate voting power to", "name": "voting_address"}], "name": "set_voting_account", "returns": {"type": "void"}, "desc": "Sets the Voting Address for the xGov.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "desc": "The payment transaction covering the Proposer fee", "name": "payment"}], "name": "subscribe_proposer", "returns": {"type": "void"}, "desc": "Subscribes the sender to being a Proposer.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The address of the Proposer", "name": "proposer"}, {"type": "bool", "desc": "The new status of the Proposer", "name": "kyc_status"}, {"type": "uint64", "desc": "The expiration date as a unix timestamp of the time the KYC expires", "name": "kyc_expiring"}], "name": "set_proposer_kyc", "returns": {"type": "void"}, "desc": "Sets a proposer's KYC status.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[32]", "desc": "The ID of the xGov Committee", "name": "committee_id"}, {"type": "uint64", "desc": "The size of the xGov Committee", "name": "size"}, {"type": "uint64", "desc": "The voting power of the xGov Committee", "name": "votes"}], "name": "declare_committee", "returns": {"type": "void"}, "desc": "Sets the xGov Committee in charge.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "desc": "payment for covering the proposal fee (includes child contract MBR)", "name": "payment"}], "name": "open_proposal", "returns": {"type": "uint64"}, "desc": "Creates a new Proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The application ID of the Proposal app being voted on", "name": "proposal_id"}, {"type": "address", "desc": "(arc4.Address): The address of the xGov being voted on behalf of", "name": "xgov_address"}, {"type": "uint64", "desc": "(arc4.UInt64): The number of approvals votes allocated", "name": "approval_votes"}, {"type": "uint64", "desc": "(arc4.UInt64): The number of rejections votes allocated", "name": "rejection_votes"}], "name": "vote_proposal", "returns": {"type": "void"}, "desc": "Votes on a Proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The application ID of the approved Proposal", "name": "proposal_id"}], "name": "pay_grant_proposal", "returns": {"type": "void"}, "desc": "Disburses the funds for an approved Proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The application ID of the Proposal app to finalize", "name": "proposal_id"}], "name": "finalize_proposal", "returns": {"type": "void"}, "desc": "Finalize a Proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The application ID of the Proposal app to drop", "name": "proposal_id"}], "name": "drop_proposal", "returns": {"type": "void"}, "desc": "Drops a Proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "desc": "the deposit transaction", "name": "payment"}], "name": "deposit_funds", "returns": {"type": "void"}, "desc": "Deposits xGov program funds into the xGov Treasury (xGov Registry Account).", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "the amount to remove", "name": "amount"}], "name": "withdraw_funds", "returns": {"type": "void"}, "desc": "Remove xGov program funds from the xGov Treasury (xGov Registry Account).", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "withdraw_balance", "returns": {"type": "void"}, "desc": "Withdraw outstanding Algos, excluding MBR and outstanding funds, from the xGov Registry.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_state", "returns": {"type": "(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)", "struct": "TypedGlobalState"}, "desc": "Returns the xGov Registry state.", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The address of the xGov", "name": "xgov_address"}], "name": "get_xgov_box", "returns": {"type": "(address,uint64,uint64,uint64)", "desc": "The xGov box value", "struct": "XGovBoxValue"}, "desc": "Returns the xGov box for the given address.", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The address of the Proposer", "name": "proposer_address"}], "name": "get_proposer_box", "returns": {"type": "(bool,bool,uint64)", "desc": "The Proposer box value", "struct": "ProposerBoxValue"}, "desc": "Returns the Proposer box for the given address.", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "proposal_id"}], "name": "is_proposal", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "XGovRegistry", "state": {"keys": {"box": {}, "global": {"paused_registry": {"key": "cGF1c2VkX3JlZ2lzdHJ5", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "paused_proposals": {"key": "cGF1c2VkX3Byb3Bvc2Fscw==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "xgov_manager": {"key": "eGdvdl9tYW5hZ2Vy", "keyType": "AVMBytes", "valueType": "address"}, "xgov_subscriber": {"key": "eGdvdl9zdWJzY3JpYmVy", "keyType": "AVMBytes", "valueType": "address"}, "xgov_payor": {"key": "eGdvdl9wYXlvcg==", "keyType": "AVMBytes", "valueType": "address"}, "xgov_council": {"key": "eGdvdl9jb3VuY2ls", "keyType": "AVMBytes", "valueType": "address"}, "kyc_provider": {"key": "a3ljX3Byb3ZpZGVy", "keyType": "AVMBytes", "valueType": "address"}, "committee_manager": {"key": "Y29tbWl0dGVlX21hbmFnZXI=", "keyType": "AVMBytes", "valueType": "address"}, "xgov_daemon": {"key": "eGdvdl9kYWVtb24=", "keyType": "AVMBytes", "valueType": "address"}, "xgov_fee": {"key": "eGdvdl9mZWU=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "xgovs": {"key": "eGdvdnM=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "proposer_fee": {"key": "cHJvcG9zZXJfZmVl", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "open_proposal_fee": {"key": "b3Blbl9wcm9wb3NhbF9mZWU=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "daemon_ops_funding_bps": {"key": "ZGFlbW9uX29wZXJhdGlvbl9mdW5kaW5nX2Jwcw==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "proposal_commitment_bps": {"key": "cHJvcG9zYWxfY29tbWl0bWVudF9icHM=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "min_requested_amount": {"key": "bWluX3JlcXVlc3RlZF9hbW91bnQ=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "max_requested_amount_small": {"key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGw=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "max_requested_amount_medium": {"key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVt", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "max_requested_amount_large": {"key": "bWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2U=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "discussion_duration_small": {"key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9zbWFsbA==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "discussion_duration_medium": {"key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9tZWRpdW0=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "discussion_duration_large": {"key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl9sYXJnZQ==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "discussion_duration_xlarge": {"key": "ZGlzY3Vzc2lvbl9kdXJhdGlvbl94bGFyZ2U=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "voting_duration_small": {"key": "dm90aW5nX2R1cmF0aW9uX3NtYWxs", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "voting_duration_medium": {"key": "dm90aW5nX2R1cmF0aW9uX21lZGl1bQ==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "voting_duration_large": {"key": "dm90aW5nX2R1cmF0aW9uX2xhcmdl", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "voting_duration_xlarge": {"key": "dm90aW5nX2R1cmF0aW9uX3hsYXJnZQ==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "quorum_small": {"key": "cXVvcnVtX3NtYWxs", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "quorum_medium": {"key": "cXVvcnVtX21lZGl1bQ==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "quorum_large": {"key": "cXVvcnVtX2xhcmdl", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "weighted_quorum_small": {"key": "d2VpZ2h0ZWRfcXVvcnVtX3NtYWxs", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "weighted_quorum_medium": {"key": "d2VpZ2h0ZWRfcXVvcnVtX21lZGl1bQ==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "weighted_quorum_large": {"key": "d2VpZ2h0ZWRfcXVvcnVtX2xhcmdl", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "outstanding_funds": {"key": "b3V0c3RhbmRpbmdfZnVuZHM=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "committee_id": {"key": "Y29tbWl0dGVlX2lk", "keyType": "AVMBytes", "valueType": "byte[32]"}, "committee_members": {"key": "Y29tbWl0dGVlX21lbWJlcnM=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "committee_votes": {"key": "Y29tbWl0dGVlX3ZvdGVz", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "pending_proposals": {"key": "cGVuZGluZ19wcm9wb3NhbHM=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "request_id": {"key": "cmVxdWVzdF9pZA==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "max_committee_size": {"key": "bWF4X2NvbW1pdHRlZV9zaXpl", "keyType": "AVMBytes", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"xgov_box": {"keyType": "address", "valueType": "XGovBoxValue", "prefix": "eA=="}, "request_box": {"keyType": "uint64", "valueType": "XGovSubscribeRequestBoxValue", "prefix": "cg=="}, "proposer_box": {"keyType": "address", "valueType": "ProposerBoxValue", "prefix": "cA=="}, "voters": {"keyType": "address", "valueType": "VoterBox", "prefix": "Vg=="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 28, "ints": 36}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"ProposerBoxValue": [{"name": "active_proposal", "type": "bool"}, {"name": "kyc_status", "type": "bool"}, {"name": "kyc_expiring", "type": "uint64"}], "TypedGlobalState": [{"name": "paused_registry", "type": "bool"}, {"name": "paused_proposals", "type": "bool"}, {"name": "xgov_manager", "type": "address"}, {"name": "xgov_payor", "type": "address"}, {"name": "xgov_council", "type": "address"}, {"name": "xgov_subscriber", "type": "address"}, {"name": "kyc_provider", "type": "address"}, {"name": "committee_manager", "type": "address"}, {"name": "xgov_daemon", "type": "address"}, {"name": "xgov_fee", "type": "uint64"}, {"name": "proposer_fee", "type": "uint64"}, {"name": "open_proposal_fee", "type": "uint64"}, {"name": "daemon_ops_funding_bps", "type": "uint64"}, {"name": "proposal_commitment_bps", "type": "uint64"}, {"name": "min_requested_amount", "type": "uint64"}, {"name": "max_requested_amount", "type": "uint64[3]"}, {"name": "discussion_duration", "type": "uint64[4]"}, {"name": "voting_duration", "type": "uint64[4]"}, {"name": "quorum", "type": "uint64[3]"}, {"name": "weighted_quorum", "type": "uint64[3]"}, {"name": "outstanding_funds", "type": "uint64"}, {"name": "pending_proposals", "type": "uint64"}, {"name": "committee_id", "type": "byte[32]"}, {"name": "committee_members", "type": "uint64"}, {"name": "committee_votes", "type": "uint64"}], "VoterBox": [{"name": "votes", "type": "uint64"}, {"name": "voted", "type": "bool"}], "XGovBoxValue": [{"name": "voting_address", "type": "address"}, {"name": "voted_proposals", "type": "uint64"}, {"name": "last_vote_timestamp", "type": "uint64"}, {"name": "subscription_round", "type": "uint64"}], "XGovRegistryConfig": [{"name": "xgov_fee", "type": "uint64"}, {"name": "proposer_fee", "type": "uint64"}, {"name": "open_proposal_fee", "type": "uint64"}, {"name": "daemon_ops_funding_bps", "type": "uint64"}, {"name": "proposal_commitment_bps", "type": "uint64"}, {"name": "min_requested_amount", "type": "uint64"}, {"name": "max_requested_amount", "type": "uint64[3]"}, {"name": "discussion_duration", "type": "uint64[4]"}, {"name": "voting_duration", "type": "uint64[4]"}, {"name": "quorum", "type": "uint64[3]"}, {"name": "weighted_quorum", "type": "uint64[3]"}], "XGovSubscribeRequestBoxValue": [{"name": "xgov_addr", "type": "address"}, {"name": "owner_addr", "type": "address"}, {"name": "relation_type", "type": "uint64"}]}, "byteCode": {"approval": "", "clear": "CoEBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [1089], "errorMessage": "Address length is 32 bytes"}, {"pc": [1986], "errorMessage": "Already a proposer"}, {"pc": [1697, 1809], "errorMessage": "Already an xGov"}, {"pc": [1364], "errorMessage": "Cannot perform operation with pending proposals"}, {"pc": [2090], "errorMessage": "Committee size is too large"}, {"pc": [2123], "errorMessage": "Creation of proposals is paused"}, {"pc": [1451], "errorMessage": "Inconsistent requested amount config"}, {"pc": [1411, 1547, 1581, 1615, 1641, 1750, 1864, 1871, 1937, 6154], "errorMessage": "Index access is out of bounds"}, {"pc": [2164, 6886, 6925], "errorMessage": "Insufficient fee"}, {"pc": [6877, 6943], "errorMessage": "Insufficient funds"}, {"pc": [6416], "errorMessage": "Insufficient treasury funds"}, {"pc": [2155, 6407], "errorMessage": "Invalid KYC"}, {"pc": [1479], "errorMessage": "Invalid open proposal fee"}, {"pc": [1703, 1815], "errorMessage": "Invalid payment"}, {"pc": [6116, 6367, 6573, 6739, 7328], "errorMessage": "Invalid proposal"}, {"pc": [1400], "errorMessage": "Invalid proposer fee"}, {"pc": [1389], "errorMessage": "Invalid xGov fee"}, {"pc": [6334, 6703], "errorMessage": "Missing Config"}, {"pc": [1083, 6393, 6546], "errorMessage": "Missing key in state"}, {"pc": [6158], "errorMessage": "Must be voting address"}, {"pc": [448, 463, 482, 501, 517, 529, 545, 567, 582, 597, 612, 636, 663, 684, 705, 727, 745, 760, 775, 806, 821, 859, 874, 889, 904, 919, 934, 949, 964, 979, 991, 1003, 1015, 1027], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [847], "errorMessage": "OnCompletion is not UpdateApplication"}, {"pc": [2149], "errorMessage": "Proposer already has an active proposal"}, {"pc": [2043], "errorMessage": "Proposer does not exist"}, {"pc": [1687, 1736, 1799, 1920, 1977, 2116, 6108, 6730], "errorMessage": "Registry's non-admin methods are paused"}, {"pc": [6702], "errorMessage": "There are voters assigned to this proposal"}, {"pc": [1224, 1232, 1241, 1249, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1357, 1677, 1747, 1770, 1851, 1900, 1931, 1953, 2034, 2078, 2131, 6126, 6359, 6566, 6747, 6867, 6916], "errorMessage": "Unauthorized"}, {"pc": [6329, 6508, 6701, 6818], "errorMessage": "Unknown error"}, {"pc": [6332], "errorMessage": "Voter already voted"}, {"pc": [6333], "errorMessage": "Voter not found"}, {"pc": [6331], "errorMessage": "Votes exceeded"}, {"pc": [6330], "errorMessage": "Voting Period Expired"}, {"pc": [10], "errorMessage": "Wrong Global Bytes allocation"}, {"pc": [16], "errorMessage": "Wrong Global UInts allocation"}, {"pc": [20], "errorMessage": "Wrong Local Bytes allocation"}, {"pc": [24], "errorMessage": "Wrong Local UInts allocation"}, {"pc": [6335, 6509, 6704, 6819], "errorMessage": "Wrong Proposal Status or finalized"}, {"pc": [1994, 2172, 6847], "errorMessage": "Wrong Receiver"}, {"pc": [2005, 2186], "errorMessage": "Wrong payment amount"}, {"pc": [6401], "errorMessage": "Wrong proposer"}, {"pc": [2191, 6051, 6930, 6935], "errorMessage": "account funded"}, {"pc": [1062, 6068], "errorMessage": "application exists"}, {"pc": [6044, 6199, 6466, 6604, 6776], "errorMessage": "application log value is not the result of an ABI return"}, {"pc": [1031], "errorMessage": "can only call when creating"}, {"pc": [451, 466, 485, 504, 520, 532, 548, 570, 585, 600, 615, 639, 666, 687, 708, 730, 748, 763, 778, 809, 824, 850, 862, 877, 892, 907, 922, 937, 952, 967, 982, 994, 1006, 1018], "errorMessage": "can only call when not creating"}, {"pc": [7206], "errorMessage": "check self.committee_id exists"}, {"pc": [2076, 7012], "errorMessage": "check self.committee_manager exists"}, {"pc": [7211], "errorMessage": "check self.committee_members exists"}, {"pc": [7217], "errorMessage": "check self.committee_votes exists"}, {"pc": [7040], "errorMessage": "check self.daemon_ops_funding_bps exists"}, {"pc": [7093], "errorMessage": "check self.discussion_duration_large exists"}, {"pc": [7087], "errorMessage": "check self.discussion_duration_medium exists"}, {"pc": [7081], "errorMessage": "check self.discussion_duration_small exists"}, {"pc": [7099], "errorMessage": "check self.discussion_duration_xlarge exists"}, {"pc": [2032, 7007], "errorMessage": "check self.kyc_provider exists"}, {"pc": [2086], "errorMessage": "check self.max_committee_size exists"}, {"pc": [7070], "errorMessage": "check self.max_requested_amount_large exists"}, {"pc": [7064], "errorMessage": "check self.max_requested_amount_medium exists"}, {"pc": [7058], "errorMessage": "check self.max_requested_amount_small exists"}, {"pc": [7052], "errorMessage": "check self.min_requested_amount exists"}, {"pc": [2181, 7034], "errorMessage": "check self.open_proposal_fee exists"}, {"pc": [6411, 6851, 6871, 6940, 7194], "errorMessage": "check self.outstanding_funds exists"}, {"pc": [2121, 6976], "errorMessage": "check self.paused_proposals exists"}, {"pc": [1685, 1734, 1797, 1918, 1975, 2114, 6106, 6728, 6965], "errorMessage": "check self.paused_registry exists"}, {"pc": [1170, 1362, 6092, 7200], "errorMessage": "check self.pending_proposals exists"}, {"pc": [7046], "errorMessage": "check self.proposal_commitment_bps exists"}, {"pc": [1130, 1147, 1187, 2046, 2137, 6058, 7317], "errorMessage": "check self.proposer_box entry exists"}, {"pc": [2003, 7028], "errorMessage": "check self.proposer_fee exists"}, {"pc": [7161], "errorMessage": "check self.quorum_large exists"}, {"pc": [7155], "errorMessage": "check self.quorum_medium exists"}, {"pc": [7149], "errorMessage": "check self.quorum_small exists"}, {"pc": [1862], "errorMessage": "check self.request_box entry exists"}, {"pc": [1820], "errorMessage": "check self.request_id exists"}, {"pc": [7127], "errorMessage": "check self.voting_duration_large exists"}, {"pc": [7121], "errorMessage": "check self.voting_duration_medium exists"}, {"pc": [7115], "errorMessage": "check self.voting_duration_small exists"}, {"pc": [7133], "errorMessage": "check self.voting_duration_xlarge exists"}, {"pc": [7184], "errorMessage": "check self.weighted_quorum_large exists"}, {"pc": [7178], "errorMessage": "check self.weighted_quorum_medium exists"}, {"pc": [7172], "errorMessage": "check self.weighted_quorum_small exists"}, {"pc": [1749, 1933, 1958, 6129, 7307], "errorMessage": "check self.xgov_box entry exists"}, {"pc": [6997], "errorMessage": "check self.xgov_council exists"}, {"pc": [6564, 7017], "errorMessage": "check self.xgov_daemon exists"}, {"pc": [1112, 7022], "errorMessage": "check self.xgov_fee exists"}, {"pc": [1043, 6898, 6949, 6987], "errorMessage": "check self.xgov_manager exists"}, {"pc": [6357, 6992], "errorMessage": "check self.xgov_payor exists"}, {"pc": [1052, 7002], "errorMessage": "check self.xgov_subscriber exists"}, {"pc": [1720, 1779, 1884], "errorMessage": "check self.xgovs exists"}, {"pc": [558, 649, 718, 797, 837], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"entropy": {"type": "AVMBytes"}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class ProposerBoxValue:
    """Struct for ProposerBoxValue"""
    active_proposal: bool
    kyc_status: bool
    kyc_expiring: int

@dataclasses.dataclass(frozen=True)
class TypedGlobalState:
    """Struct for TypedGlobalState"""
    paused_registry: bool
    paused_proposals: bool
    xgov_manager: str
    xgov_payor: str
    xgov_council: str
    xgov_subscriber: str
    kyc_provider: str
    committee_manager: str
    xgov_daemon: str
    xgov_fee: int
    proposer_fee: int
    open_proposal_fee: int
    daemon_ops_funding_bps: int
    proposal_commitment_bps: int
    min_requested_amount: int
    max_requested_amount: tuple[int, int, int]
    discussion_duration: tuple[int, int, int, int]
    voting_duration: tuple[int, int, int, int]
    quorum: tuple[int, int, int]
    weighted_quorum: tuple[int, int, int]
    outstanding_funds: int
    pending_proposals: int
    committee_id: bytes
    committee_members: int
    committee_votes: int

@dataclasses.dataclass(frozen=True)
class VoterBox:
    """Struct for VoterBox"""
    votes: int
    voted: bool

@dataclasses.dataclass(frozen=True)
class XGovBoxValue:
    """Struct for XGovBoxValue"""
    voting_address: str
    voted_proposals: int
    last_vote_timestamp: int
    subscription_round: int

@dataclasses.dataclass(frozen=True)
class XGovRegistryConfig:
    """Struct for XGovRegistryConfig"""
    xgov_fee: int
    proposer_fee: int
    open_proposal_fee: int
    daemon_ops_funding_bps: int
    proposal_commitment_bps: int
    min_requested_amount: int
    max_requested_amount: tuple[int, int, int]
    discussion_duration: tuple[int, int, int, int]
    voting_duration: tuple[int, int, int, int]
    quorum: tuple[int, int, int]
    weighted_quorum: tuple[int, int, int]

@dataclasses.dataclass(frozen=True)
class XGovSubscribeRequestBoxValue:
    """Struct for XGovSubscribeRequestBoxValue"""
    xgov_addr: str
    owner_addr: str
    relation_type: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class SetXgovManagerArgs:
    """Dataclass for set_xgov_manager arguments"""
    manager: str

    @property
    def abi_method_signature(self) -> str:
        return "set_xgov_manager(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetPayorArgs:
    """Dataclass for set_payor arguments"""
    payor: str

    @property
    def abi_method_signature(self) -> str:
        return "set_payor(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetXgovCouncilArgs:
    """Dataclass for set_xgov_council arguments"""
    council: str

    @property
    def abi_method_signature(self) -> str:
        return "set_xgov_council(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetXgovSubscriberArgs:
    """Dataclass for set_xgov_subscriber arguments"""
    subscriber: str

    @property
    def abi_method_signature(self) -> str:
        return "set_xgov_subscriber(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetKycProviderArgs:
    """Dataclass for set_kyc_provider arguments"""
    provider: str

    @property
    def abi_method_signature(self) -> str:
        return "set_kyc_provider(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetCommitteeManagerArgs:
    """Dataclass for set_committee_manager arguments"""
    manager: str

    @property
    def abi_method_signature(self) -> str:
        return "set_committee_manager(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetXgovDaemonArgs:
    """Dataclass for set_xgov_daemon arguments"""
    xgov_daemon: str

    @property
    def abi_method_signature(self) -> str:
        return "set_xgov_daemon(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ConfigXgovRegistryArgs:
    """Dataclass for config_xgov_registry arguments"""
    config: XGovRegistryConfig

    @property
    def abi_method_signature(self) -> str:
        return "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SubscribeXgovArgs:
    """Dataclass for subscribe_xgov arguments"""
    voting_address: str
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "subscribe_xgov(address,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UnsubscribeXgovArgs:
    """Dataclass for unsubscribe_xgov arguments"""
    xgov_address: str

    @property
    def abi_method_signature(self) -> str:
        return "unsubscribe_xgov(address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RequestSubscribeXgovArgs:
    """Dataclass for request_subscribe_xgov arguments"""
    xgov_address: str
    owner_address: str
    relation_type: int
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "request_subscribe_xgov(address,address,uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ApproveSubscribeXgovArgs:
    """Dataclass for approve_subscribe_xgov arguments"""
    request_id: int

    @property
    def abi_method_signature(self) -> str:
        return "approve_subscribe_xgov(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RejectSubscribeXgovArgs:
    """Dataclass for reject_subscribe_xgov arguments"""
    request_id: int

    @property
    def abi_method_signature(self) -> str:
        return "reject_subscribe_xgov(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetVotingAccountArgs:
    """Dataclass for set_voting_account arguments"""
    xgov_address: str
    voting_address: str

    @property
    def abi_method_signature(self) -> str:
        return "set_voting_account(address,address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SubscribeProposerArgs:
    """Dataclass for subscribe_proposer arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "subscribe_proposer(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetProposerKycArgs:
    """Dataclass for set_proposer_kyc arguments"""
    proposer: str
    kyc_status: bool
    kyc_expiring: int

    @property
    def abi_method_signature(self) -> str:
        return "set_proposer_kyc(address,bool,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DeclareCommitteeArgs:
    """Dataclass for declare_committee arguments"""
    committee_id: bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    size: int
    votes: int

    @property
    def abi_method_signature(self) -> str:
        return "declare_committee(byte[32],uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class OpenProposalArgs:
    """Dataclass for open_proposal arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "open_proposal(pay)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VoteProposalArgs:
    """Dataclass for vote_proposal arguments"""
    proposal_id: int
    xgov_address: str
    approval_votes: int
    rejection_votes: int

    @property
    def abi_method_signature(self) -> str:
        return "vote_proposal(uint64,address,uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PayGrantProposalArgs:
    """Dataclass for pay_grant_proposal arguments"""
    proposal_id: int

    @property
    def abi_method_signature(self) -> str:
        return "pay_grant_proposal(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class FinalizeProposalArgs:
    """Dataclass for finalize_proposal arguments"""
    proposal_id: int

    @property
    def abi_method_signature(self) -> str:
        return "finalize_proposal(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DropProposalArgs:
    """Dataclass for drop_proposal arguments"""
    proposal_id: int

    @property
    def abi_method_signature(self) -> str:
        return "drop_proposal(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DepositFundsArgs:
    """Dataclass for deposit_funds arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "deposit_funds(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class WithdrawFundsArgs:
    """Dataclass for withdraw_funds arguments"""
    amount: int

    @property
    def abi_method_signature(self) -> str:
        return "withdraw_funds(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetXgovBoxArgs:
    """Dataclass for get_xgov_box arguments"""
    xgov_address: str

    @property
    def abi_method_signature(self) -> str:
        return "get_xgov_box(address)(address,uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetProposerBoxArgs:
    """Dataclass for get_proposer_box arguments"""
    proposer_address: str

    @property
    def abi_method_signature(self) -> str:
        return "get_proposer_box(address)(bool,bool,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class IsProposalArgs:
    """Dataclass for is_proposal arguments"""
    proposal_id: int

    @property
    def abi_method_signature(self) -> str:
        return "is_proposal(uint64)void"


class _XGovRegistryUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_xgov_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppUpdateMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.params.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_xgov_registry()void",
        }))


class XGovRegistryParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_XGovRegistryUpdate":
        return _XGovRegistryUpdate(self.app_client)

    def pause_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_registry()void",
        }))

    def pause_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_proposals()void",
        }))

    def resume_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_registry()void",
        }))

    def resume_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_proposals()void",
        }))

    def set_xgov_manager(
        self,
        args: tuple[str] | SetXgovManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_manager(address)void",
            "args": method_args,
        }))

    def set_payor(
        self,
        args: tuple[str] | SetPayorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_payor(address)void",
            "args": method_args,
        }))

    def set_xgov_council(
        self,
        args: tuple[str] | SetXgovCouncilArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_council(address)void",
            "args": method_args,
        }))

    def set_xgov_subscriber(
        self,
        args: tuple[str] | SetXgovSubscriberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_subscriber(address)void",
            "args": method_args,
        }))

    def set_kyc_provider(
        self,
        args: tuple[str] | SetKycProviderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_kyc_provider(address)void",
            "args": method_args,
        }))

    def set_committee_manager(
        self,
        args: tuple[str] | SetCommitteeManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_manager(address)void",
            "args": method_args,
        }))

    def set_xgov_daemon(
        self,
        args: tuple[str] | SetXgovDaemonArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_daemon(address)void",
            "args": method_args,
        }))

    def config_xgov_registry(
        self,
        args: tuple[XGovRegistryConfig] | ConfigXgovRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void",
            "args": method_args,
        }))

    def subscribe_xgov(
        self,
        args: tuple[str, algokit_utils.AppMethodCallTransactionArgument] | SubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "subscribe_xgov(address,pay)void",
            "args": method_args,
        }))

    def unsubscribe_xgov(
        self,
        args: tuple[str] | UnsubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unsubscribe_xgov(address)void",
            "args": method_args,
        }))

    def request_subscribe_xgov(
        self,
        args: tuple[str, str, int, algokit_utils.AppMethodCallTransactionArgument] | RequestSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "request_subscribe_xgov(address,address,uint64,pay)void",
            "args": method_args,
        }))

    def approve_subscribe_xgov(
        self,
        args: tuple[int] | ApproveSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "approve_subscribe_xgov(uint64)void",
            "args": method_args,
        }))

    def reject_subscribe_xgov(
        self,
        args: tuple[int] | RejectSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reject_subscribe_xgov(uint64)void",
            "args": method_args,
        }))

    def set_voting_account(
        self,
        args: tuple[str, str] | SetVotingAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_account(address,address)void",
            "args": method_args,
        }))

    def subscribe_proposer(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SubscribeProposerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "subscribe_proposer(pay)void",
            "args": method_args,
        }))

    def set_proposer_kyc(
        self,
        args: tuple[str, bool, int] | SetProposerKycArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_proposer_kyc(address,bool,uint64)void",
            "args": method_args,
        }))

    def declare_committee(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], int, int] | DeclareCommitteeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "declare_committee(byte[32],uint64,uint64)void",
            "args": method_args,
        }))

    def open_proposal(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | OpenProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_proposal(pay)uint64",
            "args": method_args,
        }))

    def vote_proposal(
        self,
        args: tuple[int, str, int, int] | VoteProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote_proposal(uint64,address,uint64,uint64)void",
            "args": method_args,
        }))

    def pay_grant_proposal(
        self,
        args: tuple[int] | PayGrantProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_grant_proposal(uint64)void",
            "args": method_args,
        }))

    def finalize_proposal(
        self,
        args: tuple[int] | FinalizeProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize_proposal(uint64)void",
            "args": method_args,
        }))

    def drop_proposal(
        self,
        args: tuple[int] | DropProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "drop_proposal(uint64)void",
            "args": method_args,
        }))

    def deposit_funds(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | DepositFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deposit_funds(pay)void",
            "args": method_args,
        }))

    def withdraw_funds(
        self,
        args: tuple[int] | WithdrawFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_funds(uint64)void",
            "args": method_args,
        }))

    def withdraw_balance(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_balance()void",
        }))

    def get_state(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)",
        }))

    def get_xgov_box(
        self,
        args: tuple[str] | GetXgovBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_xgov_box(address)(address,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def get_proposer_box(
        self,
        args: tuple[str] | GetProposerBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_proposer_box(address)(bool,bool,uint64)",
            "args": method_args,
        }))

    def is_proposal(
        self,
        args: tuple[int] | IsProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_proposal(uint64)void",
            "args": method_args,
        }))

    def create(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _XGovRegistryUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_xgov_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.create_transaction.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_xgov_registry()void",
        }))


class XGovRegistryCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_XGovRegistryUpdateTransaction":
        return _XGovRegistryUpdateTransaction(self.app_client)

    def pause_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_registry()void",
        }))

    def pause_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_proposals()void",
        }))

    def resume_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_registry()void",
        }))

    def resume_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_proposals()void",
        }))

    def set_xgov_manager(
        self,
        args: tuple[str] | SetXgovManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_manager(address)void",
            "args": method_args,
        }))

    def set_payor(
        self,
        args: tuple[str] | SetPayorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_payor(address)void",
            "args": method_args,
        }))

    def set_xgov_council(
        self,
        args: tuple[str] | SetXgovCouncilArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_council(address)void",
            "args": method_args,
        }))

    def set_xgov_subscriber(
        self,
        args: tuple[str] | SetXgovSubscriberArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_subscriber(address)void",
            "args": method_args,
        }))

    def set_kyc_provider(
        self,
        args: tuple[str] | SetKycProviderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_kyc_provider(address)void",
            "args": method_args,
        }))

    def set_committee_manager(
        self,
        args: tuple[str] | SetCommitteeManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_manager(address)void",
            "args": method_args,
        }))

    def set_xgov_daemon(
        self,
        args: tuple[str] | SetXgovDaemonArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_daemon(address)void",
            "args": method_args,
        }))

    def config_xgov_registry(
        self,
        args: tuple[XGovRegistryConfig] | ConfigXgovRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void",
            "args": method_args,
        }))

    def subscribe_xgov(
        self,
        args: tuple[str, algokit_utils.AppMethodCallTransactionArgument] | SubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "subscribe_xgov(address,pay)void",
            "args": method_args,
        }))

    def unsubscribe_xgov(
        self,
        args: tuple[str] | UnsubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unsubscribe_xgov(address)void",
            "args": method_args,
        }))

    def request_subscribe_xgov(
        self,
        args: tuple[str, str, int, algokit_utils.AppMethodCallTransactionArgument] | RequestSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "request_subscribe_xgov(address,address,uint64,pay)void",
            "args": method_args,
        }))

    def approve_subscribe_xgov(
        self,
        args: tuple[int] | ApproveSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "approve_subscribe_xgov(uint64)void",
            "args": method_args,
        }))

    def reject_subscribe_xgov(
        self,
        args: tuple[int] | RejectSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reject_subscribe_xgov(uint64)void",
            "args": method_args,
        }))

    def set_voting_account(
        self,
        args: tuple[str, str] | SetVotingAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_account(address,address)void",
            "args": method_args,
        }))

    def subscribe_proposer(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SubscribeProposerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "subscribe_proposer(pay)void",
            "args": method_args,
        }))

    def set_proposer_kyc(
        self,
        args: tuple[str, bool, int] | SetProposerKycArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_proposer_kyc(address,bool,uint64)void",
            "args": method_args,
        }))

    def declare_committee(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], int, int] | DeclareCommitteeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "declare_committee(byte[32],uint64,uint64)void",
            "args": method_args,
        }))

    def open_proposal(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | OpenProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_proposal(pay)uint64",
            "args": method_args,
        }))

    def vote_proposal(
        self,
        args: tuple[int, str, int, int] | VoteProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote_proposal(uint64,address,uint64,uint64)void",
            "args": method_args,
        }))

    def pay_grant_proposal(
        self,
        args: tuple[int] | PayGrantProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_grant_proposal(uint64)void",
            "args": method_args,
        }))

    def finalize_proposal(
        self,
        args: tuple[int] | FinalizeProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize_proposal(uint64)void",
            "args": method_args,
        }))

    def drop_proposal(
        self,
        args: tuple[int] | DropProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "drop_proposal(uint64)void",
            "args": method_args,
        }))

    def deposit_funds(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | DepositFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deposit_funds(pay)void",
            "args": method_args,
        }))

    def withdraw_funds(
        self,
        args: tuple[int] | WithdrawFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_funds(uint64)void",
            "args": method_args,
        }))

    def withdraw_balance(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_balance()void",
        }))

    def get_state(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)",
        }))

    def get_xgov_box(
        self,
        args: tuple[str] | GetXgovBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_xgov_box(address)(address,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def get_proposer_box(
        self,
        args: tuple[str] | GetProposerBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_proposer_box(address)(bool,bool,uint64)",
            "args": method_args,
        }))

    def is_proposal(
        self,
        args: tuple[int] | IsProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_proposal(uint64)void",
            "args": method_args,
        }))

    def create(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _XGovRegistryUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_xgov_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        response = self.app_client.send.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_xgov_registry()void",
        }), send_params=send_params, compilation_params=compilation_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppUpdateTransactionResult[None], parsed_response)


class XGovRegistrySend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_XGovRegistryUpdateSend":
        return _XGovRegistryUpdateSend(self.app_client)

    def pause_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_registry()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def pause_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pause_proposals()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def resume_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_registry()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def resume_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "resume_proposals()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_xgov_manager(
        self,
        args: tuple[str] | SetXgovManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_manager(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_payor(
        self,
        args: tuple[str] | SetPayorArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_payor(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_xgov_council(
        self,
        args: tuple[str] | SetXgovCouncilArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_council(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_xgov_subscriber(
        self,
        args: tuple[str] | SetXgovSubscriberArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_subscriber(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_kyc_provider(
        self,
        args: tuple[str] | SetKycProviderArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_kyc_provider(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_committee_manager(
        self,
        args: tuple[str] | SetCommitteeManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_committee_manager(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_xgov_daemon(
        self,
        args: tuple[str] | SetXgovDaemonArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_xgov_daemon(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def config_xgov_registry(
        self,
        args: tuple[XGovRegistryConfig] | ConfigXgovRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def subscribe_xgov(
        self,
        args: tuple[str, algokit_utils.AppMethodCallTransactionArgument] | SubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "subscribe_xgov(address,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def unsubscribe_xgov(
        self,
        args: tuple[str] | UnsubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unsubscribe_xgov(address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def request_subscribe_xgov(
        self,
        args: tuple[str, str, int, algokit_utils.AppMethodCallTransactionArgument] | RequestSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "request_subscribe_xgov(address,address,uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def approve_subscribe_xgov(
        self,
        args: tuple[int] | ApproveSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "approve_subscribe_xgov(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def reject_subscribe_xgov(
        self,
        args: tuple[int] | RejectSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "reject_subscribe_xgov(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_voting_account(
        self,
        args: tuple[str, str] | SetVotingAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_voting_account(address,address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def subscribe_proposer(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SubscribeProposerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "subscribe_proposer(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_proposer_kyc(
        self,
        args: tuple[str, bool, int] | SetProposerKycArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_proposer_kyc(address,bool,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def declare_committee(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], int, int] | DeclareCommitteeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "declare_committee(byte[32],uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def open_proposal(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | OpenProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open_proposal(pay)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def vote_proposal(
        self,
        args: tuple[int, str, int, int] | VoteProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote_proposal(uint64,address,uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def pay_grant_proposal(
        self,
        args: tuple[int] | PayGrantProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "pay_grant_proposal(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def finalize_proposal(
        self,
        args: tuple[int] | FinalizeProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize_proposal(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def drop_proposal(
        self,
        args: tuple[int] | DropProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "drop_proposal(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def deposit_funds(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | DepositFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deposit_funds(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def withdraw_funds(
        self,
        args: tuple[int] | WithdrawFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_funds(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def withdraw_balance(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "withdraw_balance()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_state(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[TypedGlobalState]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(TypedGlobalState, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[TypedGlobalState], parsed_response)

    def get_xgov_box(
        self,
        args: tuple[str] | GetXgovBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[XGovBoxValue]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_xgov_box(address)(address,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(XGovBoxValue, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[XGovBoxValue], parsed_response)

    def get_proposer_box(
        self,
        args: tuple[str] | GetProposerBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[ProposerBoxValue]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_proposer_box(address)(bool,bool,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(ProposerBoxValue, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[ProposerBoxValue], parsed_response)

    def is_proposal(
        self,
        args: tuple[int] | IsProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "is_proposal(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    paused_registry: int
    paused_proposals: int
    xgov_manager: str
    xgov_subscriber: str
    xgov_payor: str
    xgov_council: str
    kyc_provider: str
    committee_manager: str
    xgov_daemon: str
    xgov_fee: int
    xgovs: int
    proposer_fee: int
    open_proposal_fee: int
    daemon_ops_funding_bps: int
    proposal_commitment_bps: int
    min_requested_amount: int
    max_requested_amount_small: int
    max_requested_amount_medium: int
    max_requested_amount_large: int
    discussion_duration_small: int
    discussion_duration_medium: int
    discussion_duration_large: int
    discussion_duration_xlarge: int
    voting_duration_small: int
    voting_duration_medium: int
    voting_duration_large: int
    voting_duration_xlarge: int
    quorum_small: int
    quorum_medium: int
    quorum_large: int
    weighted_quorum_small: int
    weighted_quorum_medium: int
    weighted_quorum_large: int
    outstanding_funds: int
    committee_id: bytes
    committee_members: int
    committee_votes: int
    pending_proposals: int
    request_id: int
    max_committee_size: int

class XGovRegistryState:
    """Methods to access state for the current XGovRegistry app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def paused_registry(self) -> int:
        """Get the current value of the paused_registry key in global_state state"""
        value = self.app_client.state.global_state.get_value("paused_registry")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def paused_proposals(self) -> int:
        """Get the current value of the paused_proposals key in global_state state"""
        value = self.app_client.state.global_state.get_value("paused_proposals")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def xgov_manager(self) -> str:
        """Get the current value of the xgov_manager key in global_state state"""
        value = self.app_client.state.global_state.get_value("xgov_manager")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def xgov_subscriber(self) -> str:
        """Get the current value of the xgov_subscriber key in global_state state"""
        value = self.app_client.state.global_state.get_value("xgov_subscriber")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def xgov_payor(self) -> str:
        """Get the current value of the xgov_payor key in global_state state"""
        value = self.app_client.state.global_state.get_value("xgov_payor")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def xgov_council(self) -> str:
        """Get the current value of the xgov_council key in global_state state"""
        value = self.app_client.state.global_state.get_value("xgov_council")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def kyc_provider(self) -> str:
        """Get the current value of the kyc_provider key in global_state state"""
        value = self.app_client.state.global_state.get_value("kyc_provider")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def committee_manager(self) -> str:
        """Get the current value of the committee_manager key in global_state state"""
        value = self.app_client.state.global_state.get_value("committee_manager")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def xgov_daemon(self) -> str:
        """Get the current value of the xgov_daemon key in global_state state"""
        value = self.app_client.state.global_state.get_value("xgov_daemon")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def xgov_fee(self) -> int:
        """Get the current value of the xgov_fee key in global_state state"""
        value = self.app_client.state.global_state.get_value("xgov_fee")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def xgovs(self) -> int:
        """Get the current value of the xgovs key in global_state state"""
        value = self.app_client.state.global_state.get_value("xgovs")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def proposer_fee(self) -> int:
        """Get the current value of the proposer_fee key in global_state state"""
        value = self.app_client.state.global_state.get_value("proposer_fee")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def open_proposal_fee(self) -> int:
        """Get the current value of the open_proposal_fee key in global_state state"""
        value = self.app_client.state.global_state.get_value("open_proposal_fee")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def daemon_ops_funding_bps(self) -> int:
        """Get the current value of the daemon_ops_funding_bps key in global_state state"""
        value = self.app_client.state.global_state.get_value("daemon_ops_funding_bps")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def proposal_commitment_bps(self) -> int:
        """Get the current value of the proposal_commitment_bps key in global_state state"""
        value = self.app_client.state.global_state.get_value("proposal_commitment_bps")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def min_requested_amount(self) -> int:
        """Get the current value of the min_requested_amount key in global_state state"""
        value = self.app_client.state.global_state.get_value("min_requested_amount")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def max_requested_amount_small(self) -> int:
        """Get the current value of the max_requested_amount_small key in global_state state"""
        value = self.app_client.state.global_state.get_value("max_requested_amount_small")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def max_requested_amount_medium(self) -> int:
        """Get the current value of the max_requested_amount_medium key in global_state state"""
        value = self.app_client.state.global_state.get_value("max_requested_amount_medium")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def max_requested_amount_large(self) -> int:
        """Get the current value of the max_requested_amount_large key in global_state state"""
        value = self.app_client.state.global_state.get_value("max_requested_amount_large")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def discussion_duration_small(self) -> int:
        """Get the current value of the discussion_duration_small key in global_state state"""
        value = self.app_client.state.global_state.get_value("discussion_duration_small")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def discussion_duration_medium(self) -> int:
        """Get the current value of the discussion_duration_medium key in global_state state"""
        value = self.app_client.state.global_state.get_value("discussion_duration_medium")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def discussion_duration_large(self) -> int:
        """Get the current value of the discussion_duration_large key in global_state state"""
        value = self.app_client.state.global_state.get_value("discussion_duration_large")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def discussion_duration_xlarge(self) -> int:
        """Get the current value of the discussion_duration_xlarge key in global_state state"""
        value = self.app_client.state.global_state.get_value("discussion_duration_xlarge")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voting_duration_small(self) -> int:
        """Get the current value of the voting_duration_small key in global_state state"""
        value = self.app_client.state.global_state.get_value("voting_duration_small")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voting_duration_medium(self) -> int:
        """Get the current value of the voting_duration_medium key in global_state state"""
        value = self.app_client.state.global_state.get_value("voting_duration_medium")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voting_duration_large(self) -> int:
        """Get the current value of the voting_duration_large key in global_state state"""
        value = self.app_client.state.global_state.get_value("voting_duration_large")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voting_duration_xlarge(self) -> int:
        """Get the current value of the voting_duration_xlarge key in global_state state"""
        value = self.app_client.state.global_state.get_value("voting_duration_xlarge")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def quorum_small(self) -> int:
        """Get the current value of the quorum_small key in global_state state"""
        value = self.app_client.state.global_state.get_value("quorum_small")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def quorum_medium(self) -> int:
        """Get the current value of the quorum_medium key in global_state state"""
        value = self.app_client.state.global_state.get_value("quorum_medium")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def quorum_large(self) -> int:
        """Get the current value of the quorum_large key in global_state state"""
        value = self.app_client.state.global_state.get_value("quorum_large")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def weighted_quorum_small(self) -> int:
        """Get the current value of the weighted_quorum_small key in global_state state"""
        value = self.app_client.state.global_state.get_value("weighted_quorum_small")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def weighted_quorum_medium(self) -> int:
        """Get the current value of the weighted_quorum_medium key in global_state state"""
        value = self.app_client.state.global_state.get_value("weighted_quorum_medium")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def weighted_quorum_large(self) -> int:
        """Get the current value of the weighted_quorum_large key in global_state state"""
        value = self.app_client.state.global_state.get_value("weighted_quorum_large")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def outstanding_funds(self) -> int:
        """Get the current value of the outstanding_funds key in global_state state"""
        value = self.app_client.state.global_state.get_value("outstanding_funds")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def committee_id(self) -> bytes:
        """Get the current value of the committee_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("committee_id")
        if isinstance(value, dict) and "byte[32]" in self._struct_classes:
            return _init_dataclass(self._struct_classes["byte[32]"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def committee_members(self) -> int:
        """Get the current value of the committee_members key in global_state state"""
        value = self.app_client.state.global_state.get_value("committee_members")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def committee_votes(self) -> int:
        """Get the current value of the committee_votes key in global_state state"""
        value = self.app_client.state.global_state.get_value("committee_votes")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def pending_proposals(self) -> int:
        """Get the current value of the pending_proposals key in global_state state"""
        value = self.app_client.state.global_state.get_value("pending_proposals")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def request_id(self) -> int:
        """Get the current value of the request_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("request_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def max_committee_size(self) -> int:
        """Get the current value of the max_committee_size key in global_state state"""
        value = self.app_client.state.global_state.get_value("max_committee_size")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "XGovBoxValue": XGovBoxValue,
            "XGovSubscribeRequestBoxValue": XGovSubscribeRequestBoxValue,
            "ProposerBoxValue": ProposerBoxValue,
            "VoterBox": VoterBox
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def xgov_box(self) -> "_MapState[str, XGovBoxValue]":
        """Get values from the xgov_box map in box state"""
        return _MapState(
            self.app_client.state.box,
            "xgov_box",
            self._struct_classes.get("XGovBoxValue")
        )

    @property
    def request_box(self) -> "_MapState[int, XGovSubscribeRequestBoxValue]":
        """Get values from the request_box map in box state"""
        return _MapState(
            self.app_client.state.box,
            "request_box",
            self._struct_classes.get("XGovSubscribeRequestBoxValue")
        )

    @property
    def proposer_box(self) -> "_MapState[str, ProposerBoxValue]":
        """Get values from the proposer_box map in box state"""
        return _MapState(
            self.app_client.state.box,
            "proposer_box",
            self._struct_classes.get("ProposerBoxValue")
        )

    @property
    def voters(self) -> "_MapState[str, VoterBox]":
        """Get values from the voters map in box state"""
        return _MapState(
            self.app_client.state.box,
            "voters",
            self._struct_classes.get("VoterBox")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class XGovRegistryClient:
    """Client for interacting with XGovRegistry smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = XGovRegistryParams(self.app_client)
        self.create_transaction = XGovRegistryCreateTransactionParams(self.app_client)
        self.send = XGovRegistrySend(self.app_client)
        self.state = XGovRegistryState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "XGovRegistryClient":
        return XGovRegistryClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "XGovRegistryClient":
        return XGovRegistryClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "XGovRegistryClient":
        return XGovRegistryClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "XGovRegistryComposer":
        return XGovRegistryComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["pause_registry()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["pause_proposals()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["resume_registry()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["resume_proposals()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_xgov_manager(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_payor(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_xgov_council(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_xgov_subscriber(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_kyc_provider(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_committee_manager(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_xgov_daemon(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["subscribe_xgov(address,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["unsubscribe_xgov(address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["request_subscribe_xgov(address,address,uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["approve_subscribe_xgov(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["reject_subscribe_xgov(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_voting_account(address,address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["subscribe_proposer(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_proposer_kyc(address,bool,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["declare_committee(byte[32],uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["open_proposal(pay)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vote_proposal(uint64,address,uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["pay_grant_proposal(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["finalize_proposal(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["drop_proposal(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["deposit_funds(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["withdraw_funds(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["withdraw_balance()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> TypedGlobalState | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_xgov_box(address)(address,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> XGovBoxValue | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_proposer_box(address)(bool,bool,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> ProposerBoxValue | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["is_proposal(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_xgov_registry()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | ProposerBoxValue | TypedGlobalState | XGovBoxValue | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class XGovRegistryMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating XGovRegistry contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class XGovRegistryMethodCallUpdateParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling XGovRegistry contract using ABI"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class XGovRegistryFactory(algokit_utils.TypedAppFactoryProtocol[XGovRegistryMethodCallCreateParams, XGovRegistryMethodCallUpdateParams, None]):
    """Factory for deploying and managing XGovRegistryClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = XGovRegistryFactoryParams(self.app_factory)
        self.create_transaction = XGovRegistryFactoryCreateTransaction(self.app_factory)
        self.send = XGovRegistryFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: XGovRegistryMethodCallCreateParams | None = None,
        update_params: XGovRegistryMethodCallUpdateParams | None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[XGovRegistryClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return XGovRegistryClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> XGovRegistryClient:
        """Get an app client by creator address and name"""
        return XGovRegistryClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> XGovRegistryClient:
        """Get an app client by app ID"""
        return XGovRegistryClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class XGovRegistryFactoryParams:
    """Parameters for creating transactions for XGovRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = XGovRegistryFactoryCreateParams(app_factory)
        self.update = XGovRegistryFactoryUpdateParams(app_factory)
        self.delete = XGovRegistryFactoryDeleteParams(app_factory)

class XGovRegistryFactoryCreateParams:
    """Parameters for 'create' operations of XGovRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def pause_registry(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the pause_registry()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "pause_registry()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def pause_proposals(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the pause_proposals()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "pause_proposals()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def resume_registry(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the resume_registry()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "resume_registry()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def resume_proposals(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the resume_proposals()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "resume_proposals()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def set_xgov_manager(
        self,
        args: tuple[str] | SetXgovManagerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_xgov_manager(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_xgov_manager(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_payor(
        self,
        args: tuple[str] | SetPayorArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_payor(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_payor(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_xgov_council(
        self,
        args: tuple[str] | SetXgovCouncilArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_xgov_council(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_xgov_council(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_xgov_subscriber(
        self,
        args: tuple[str] | SetXgovSubscriberArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_xgov_subscriber(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_xgov_subscriber(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_kyc_provider(
        self,
        args: tuple[str] | SetKycProviderArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_kyc_provider(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_kyc_provider(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_committee_manager(
        self,
        args: tuple[str] | SetCommitteeManagerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_committee_manager(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_committee_manager(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_xgov_daemon(
        self,
        args: tuple[str] | SetXgovDaemonArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_xgov_daemon(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_xgov_daemon(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def config_xgov_registry(
        self,
        args: tuple[XGovRegistryConfig] | ConfigXgovRegistryArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def subscribe_xgov(
        self,
        args: tuple[str, algokit_utils.AppMethodCallTransactionArgument] | SubscribeXgovArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the subscribe_xgov(address,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "subscribe_xgov(address,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def unsubscribe_xgov(
        self,
        args: tuple[str] | UnsubscribeXgovArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the unsubscribe_xgov(address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "unsubscribe_xgov(address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def request_subscribe_xgov(
        self,
        args: tuple[str, str, int, algokit_utils.AppMethodCallTransactionArgument] | RequestSubscribeXgovArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the request_subscribe_xgov(address,address,uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "request_subscribe_xgov(address,address,uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def approve_subscribe_xgov(
        self,
        args: tuple[int] | ApproveSubscribeXgovArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the approve_subscribe_xgov(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "approve_subscribe_xgov(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def reject_subscribe_xgov(
        self,
        args: tuple[int] | RejectSubscribeXgovArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the reject_subscribe_xgov(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "reject_subscribe_xgov(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_voting_account(
        self,
        args: tuple[str, str] | SetVotingAccountArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_voting_account(address,address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_voting_account(address,address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def subscribe_proposer(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SubscribeProposerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the subscribe_proposer(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "subscribe_proposer(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_proposer_kyc(
        self,
        args: tuple[str, bool, int] | SetProposerKycArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_proposer_kyc(address,bool,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_proposer_kyc(address,bool,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def declare_committee(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], int, int] | DeclareCommitteeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the declare_committee(byte[32],uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "declare_committee(byte[32],uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def open_proposal(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | OpenProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the open_proposal(pay)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "open_proposal(pay)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def vote_proposal(
        self,
        args: tuple[int, str, int, int] | VoteProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the vote_proposal(uint64,address,uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "vote_proposal(uint64,address,uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def pay_grant_proposal(
        self,
        args: tuple[int] | PayGrantProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the pay_grant_proposal(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "pay_grant_proposal(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def finalize_proposal(
        self,
        args: tuple[int] | FinalizeProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the finalize_proposal(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "finalize_proposal(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def drop_proposal(
        self,
        args: tuple[int] | DropProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the drop_proposal(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "drop_proposal(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def deposit_funds(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | DepositFundsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the deposit_funds(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "deposit_funds(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def withdraw_funds(
        self,
        args: tuple[int] | WithdrawFundsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the withdraw_funds(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "withdraw_funds(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def withdraw_balance(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the withdraw_balance()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "withdraw_balance()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_state(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_xgov_box(
        self,
        args: tuple[str] | GetXgovBoxArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_xgov_box(address)(address,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_xgov_box(address)(address,uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_proposer_box(
        self,
        args: tuple[str] | GetProposerBoxArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_proposer_box(address)(bool,bool,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_proposer_box(address)(bool,bool,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def is_proposal(
        self,
        args: tuple[int] | IsProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the is_proposal(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "is_proposal(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def update_xgov_registry(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_xgov_registry()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_xgov_registry()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class XGovRegistryFactoryUpdateParams:
    """Parameters for 'update' operations of XGovRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class XGovRegistryFactoryDeleteParams:
    """Parameters for 'delete' operations of XGovRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class XGovRegistryFactoryCreateTransaction:
    """Create transactions for XGovRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = XGovRegistryFactoryCreateTransactionCreate(app_factory)


class XGovRegistryFactoryCreateTransactionCreate:
    """Create new instances of XGovRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class XGovRegistryFactorySend:
    """Send calls to XGovRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = XGovRegistryFactorySendCreate(app_factory)


class XGovRegistryFactorySendCreate:
    """Send create calls to XGovRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[XGovRegistryClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return XGovRegistryClient(result[0]), result[1]

    def create(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[XGovRegistryClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the create()void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "create()void",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return XGovRegistryClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _XGovRegistryUpdateComposer:
    def __init__(self, composer: "XGovRegistryComposer"):
        self.composer = composer
    def update_xgov_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self.composer._composer.add_app_update_method_call(
            self.composer.client.params.update.update_xgov_registry(
                
                params=params,
                compilation_params=compilation_params
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "update_xgov_registry()void", v
            )
        )
        return self.composer


class XGovRegistryComposer:
    """Composer for creating transaction groups for XGovRegistry contract calls"""

    def __init__(self, client: "XGovRegistryClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def update(self) -> "_XGovRegistryUpdateComposer":
        return _XGovRegistryUpdateComposer(self)

    def pause_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.pause_registry(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "pause_registry()void", v
            )
        )
        return self

    def pause_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.pause_proposals(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "pause_proposals()void", v
            )
        )
        return self

    def resume_registry(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.resume_registry(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "resume_registry()void", v
            )
        )
        return self

    def resume_proposals(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.resume_proposals(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "resume_proposals()void", v
            )
        )
        return self

    def set_xgov_manager(
        self,
        args: tuple[str] | SetXgovManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_xgov_manager(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_xgov_manager(address)void", v
            )
        )
        return self

    def set_payor(
        self,
        args: tuple[str] | SetPayorArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_payor(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_payor(address)void", v
            )
        )
        return self

    def set_xgov_council(
        self,
        args: tuple[str] | SetXgovCouncilArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_xgov_council(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_xgov_council(address)void", v
            )
        )
        return self

    def set_xgov_subscriber(
        self,
        args: tuple[str] | SetXgovSubscriberArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_xgov_subscriber(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_xgov_subscriber(address)void", v
            )
        )
        return self

    def set_kyc_provider(
        self,
        args: tuple[str] | SetKycProviderArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_kyc_provider(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_kyc_provider(address)void", v
            )
        )
        return self

    def set_committee_manager(
        self,
        args: tuple[str] | SetCommitteeManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_committee_manager(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_committee_manager(address)void", v
            )
        )
        return self

    def set_xgov_daemon(
        self,
        args: tuple[str] | SetXgovDaemonArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_xgov_daemon(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_xgov_daemon(address)void", v
            )
        )
        return self

    def config_xgov_registry(
        self,
        args: tuple[XGovRegistryConfig] | ConfigXgovRegistryArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.config_xgov_registry(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "config_xgov_registry((uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3]))void", v
            )
        )
        return self

    def subscribe_xgov(
        self,
        args: tuple[str, algokit_utils.AppMethodCallTransactionArgument] | SubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.subscribe_xgov(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "subscribe_xgov(address,pay)void", v
            )
        )
        return self

    def unsubscribe_xgov(
        self,
        args: tuple[str] | UnsubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.unsubscribe_xgov(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "unsubscribe_xgov(address)void", v
            )
        )
        return self

    def request_subscribe_xgov(
        self,
        args: tuple[str, str, int, algokit_utils.AppMethodCallTransactionArgument] | RequestSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.request_subscribe_xgov(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "request_subscribe_xgov(address,address,uint64,pay)void", v
            )
        )
        return self

    def approve_subscribe_xgov(
        self,
        args: tuple[int] | ApproveSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.approve_subscribe_xgov(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "approve_subscribe_xgov(uint64)void", v
            )
        )
        return self

    def reject_subscribe_xgov(
        self,
        args: tuple[int] | RejectSubscribeXgovArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.reject_subscribe_xgov(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "reject_subscribe_xgov(uint64)void", v
            )
        )
        return self

    def set_voting_account(
        self,
        args: tuple[str, str] | SetVotingAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_voting_account(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_voting_account(address,address)void", v
            )
        )
        return self

    def subscribe_proposer(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | SubscribeProposerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.subscribe_proposer(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "subscribe_proposer(pay)void", v
            )
        )
        return self

    def set_proposer_kyc(
        self,
        args: tuple[str, bool, int] | SetProposerKycArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_proposer_kyc(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_proposer_kyc(address,bool,uint64)void", v
            )
        )
        return self

    def declare_committee(
        self,
        args: tuple[bytes | str | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], int, int] | DeclareCommitteeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.declare_committee(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "declare_committee(byte[32],uint64,uint64)void", v
            )
        )
        return self

    def open_proposal(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | OpenProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.open_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "open_proposal(pay)uint64", v
            )
        )
        return self

    def vote_proposal(
        self,
        args: tuple[int, str, int, int] | VoteProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vote_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vote_proposal(uint64,address,uint64,uint64)void", v
            )
        )
        return self

    def pay_grant_proposal(
        self,
        args: tuple[int] | PayGrantProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.pay_grant_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "pay_grant_proposal(uint64)void", v
            )
        )
        return self

    def finalize_proposal(
        self,
        args: tuple[int] | FinalizeProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.finalize_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "finalize_proposal(uint64)void", v
            )
        )
        return self

    def drop_proposal(
        self,
        args: tuple[int] | DropProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.drop_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "drop_proposal(uint64)void", v
            )
        )
        return self

    def deposit_funds(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | DepositFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.deposit_funds(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "deposit_funds(pay)void", v
            )
        )
        return self

    def withdraw_funds(
        self,
        args: tuple[int] | WithdrawFundsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.withdraw_funds(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "withdraw_funds(uint64)void", v
            )
        )
        return self

    def withdraw_balance(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.withdraw_balance(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "withdraw_balance()void", v
            )
        )
        return self

    def get_state(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_state(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_state()(bool,bool,address,address,address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64[3],uint64[4],uint64[4],uint64[3],uint64[3],uint64,uint64,byte[32],uint64,uint64)", v
            )
        )
        return self

    def get_xgov_box(
        self,
        args: tuple[str] | GetXgovBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_xgov_box(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_xgov_box(address)(address,uint64,uint64,uint64)", v
            )
        )
        return self

    def get_proposer_box(
        self,
        args: tuple[str] | GetProposerBoxArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_proposer_box(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_proposer_box(address)(bool,bool,uint64)", v
            )
        )
        return self

    def is_proposal(
        self,
        args: tuple[int] | IsProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.is_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "is_proposal(uint64)void", v
            )
        )
        return self

    def create(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "XGovRegistryComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "XGovRegistryComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
