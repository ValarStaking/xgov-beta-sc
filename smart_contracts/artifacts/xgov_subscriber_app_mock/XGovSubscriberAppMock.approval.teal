#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 6
    // smart_contracts/xgov_subscriber_app_mock/contract.py:15
    // class XGovSubscriberAppMock(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x42317b4f 0x5a2a3f16 // method "subscribe_xgov(uint64,address)void", method "unsubscribe_xgov(uint64)void"
    txna ApplicationArgs 0
    match main_subscribe_xgov_route@3 main_unsubscribe_xgov_route@4

main_after_if_else@11:
    // smart_contracts/xgov_subscriber_app_mock/contract.py:15
    // class XGovSubscriberAppMock(ARC4Contract):
    intc_1 // 0
    return

main_unsubscribe_xgov_route@4:
    // smart_contracts/xgov_subscriber_app_mock/contract.py:35
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_subscriber_app_mock/contract.py:15
    // class XGovSubscriberAppMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_subscriber_app_mock/contract.py:35
    // @arc4.abimethod()
    callsub unsubscribe_xgov
    intc_0 // 1
    return

main_subscribe_xgov_route@3:
    // smart_contracts/xgov_subscriber_app_mock/contract.py:16
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_subscriber_app_mock/contract.py:15
    // class XGovSubscriberAppMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // smart_contracts/xgov_subscriber_app_mock/contract.py:16
    // @arc4.abimethod()
    callsub subscribe_xgov
    intc_0 // 1
    return

main_bare_routing@7:
    // smart_contracts/xgov_subscriber_app_mock/contract.py:15
    // class XGovSubscriberAppMock(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.xgov_subscriber_app_mock.contract.XGovSubscriberAppMock.subscribe_xgov(app_id: uint64, voting_address: bytes) -> void:
subscribe_xgov:
    // smart_contracts/xgov_subscriber_app_mock/contract.py:16-17
    // @arc4.abimethod()
    // def subscribe_xgov(self, app_id: UInt64, voting_address: arc4.Address) -> None:
    proto 2 0
    // smart_contracts/xgov_subscriber_app_mock/contract.py:19-21
    // xgov_fee, xgov_min_balance_exists = op.AppGlobal.get_ex_uint64(
    //     app_id, rcfg.GS_KEY_XGOV_FEE
    // )
    frame_dig -2
    // smart_contracts/xgov_subscriber_app_mock/contract.py:20
    // app_id, rcfg.GS_KEY_XGOV_FEE
    pushbytes 0x78676f765f666565
    // smart_contracts/xgov_subscriber_app_mock/contract.py:19-21
    // xgov_fee, xgov_min_balance_exists = op.AppGlobal.get_ex_uint64(
    //     app_id, rcfg.GS_KEY_XGOV_FEE
    // )
    app_global_get_ex
    pop
    // smart_contracts/xgov_subscriber_app_mock/contract.py:24
    // receiver=Application(app_id).address,
    frame_dig -2
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/xgov_subscriber_app_mock/contract.py:28-33
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.subscribe_xgov,
    //     voting_address,
    //     payment,
    //     app_id=app_id,
    // )
    itxn_begin
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/xgov_subscriber_app_mock/contract.py:23
    // payment = itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_subscriber_app_mock/contract.py:28-33
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.subscribe_xgov,
    //     voting_address,
    //     payment,
    //     app_id=app_id,
    // )
    itxn_next
    frame_dig -2
    itxn_field ApplicationID
    pushbytes 0xa082cef8 // method "subscribe_xgov(address,pay)void"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    intc_2 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    retsub


// smart_contracts.xgov_subscriber_app_mock.contract.XGovSubscriberAppMock.unsubscribe_xgov(app_id: uint64) -> void:
unsubscribe_xgov:
    // smart_contracts/xgov_subscriber_app_mock/contract.py:35-36
    // @arc4.abimethod()
    // def unsubscribe_xgov(self, app_id: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_subscriber_app_mock/contract.py:37-42
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.unsubscribe_xgov,
    //     arc4.Address(Global.current_application_address),
    //     app_id=app_id,
    //     fee=(Global.min_txn_fee * 2),
    // )
    itxn_begin
    // smart_contracts/xgov_subscriber_app_mock/contract.py:41
    // fee=(Global.min_txn_fee * 2),
    global MinTxnFee
    pushint 2 // 2
    *
    // smart_contracts/xgov_subscriber_app_mock/contract.py:39
    // arc4.Address(Global.current_application_address),
    global CurrentApplicationAddress
    frame_dig -1
    itxn_field ApplicationID
    // smart_contracts/xgov_subscriber_app_mock/contract.py:37-42
    // arc4.abi_call(
    //     registry_contract.XGovRegistry.unsubscribe_xgov,
    //     arc4.Address(Global.current_application_address),
    //     app_id=app_id,
    //     fee=(Global.min_txn_fee * 2),
    // )
    pushbytes 0x76725559 // method "unsubscribe_xgov(address)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_2 // appl
    itxn_field TypeEnum
    itxn_field Fee
    itxn_submit
    retsub
