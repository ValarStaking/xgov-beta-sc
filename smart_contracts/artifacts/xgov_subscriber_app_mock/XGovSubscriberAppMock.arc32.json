{
    "hints": {
        "subscribe_xgov(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unsubscribe_xgov(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMueGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrLmNvbnRyYWN0LlhHb3ZTdWJzY3JpYmVyQXBwTW9jay5hcHByb3ZhbF9wcm9ncmFtOgogICAgaW50Y2Jsb2NrIDAgMSA2CiAgICBjYWxsc3ViIF9fcHV5YV9hcmM0X3JvdXRlcl9fCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMueGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrLmNvbnRyYWN0LlhHb3ZTdWJzY3JpYmVyQXBwTW9jay5fX3B1eWFfYXJjNF9yb3V0ZXJfXygpIC0+IHVpbnQ2NDoKX19wdXlhX2FyYzRfcm91dGVyX186CiAgICAvLyBzbWFydF9jb250cmFjdHMveGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrL2NvbnRyYWN0LnB5OjE1CiAgICAvLyBjbGFzcyBYR292U3Vic2NyaWJlckFwcE1vY2soQVJDNENvbnRyYWN0KToKICAgIHByb3RvIDAgMQogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2JhcmVfcm91dGluZ0A2CiAgICBwdXNoYnl0ZXNzIDB4NDIzMTdiNGYgMHg1YTJhM2YxNiAvLyBtZXRob2QgInN1YnNjcmliZV94Z292KHVpbnQ2NCxhZGRyZXNzKXZvaWQiLCBtZXRob2QgInVuc3Vic2NyaWJlX3hnb3YodWludDY0KXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBfX3B1eWFfYXJjNF9yb3V0ZXJfX19zdWJzY3JpYmVfeGdvdl9yb3V0ZUAyIF9fcHV5YV9hcmM0X3JvdXRlcl9fX3Vuc3Vic2NyaWJlX3hnb3Zfcm91dGVAMwogICAgaW50Y18wIC8vIDAKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fc3Vic2NyaWJlX3hnb3Zfcm91dGVAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy94Z292X3N1YnNjcmliZXJfYXBwX21vY2svY29udHJhY3QucHk6MTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy94Z292X3N1YnNjcmliZXJfYXBwX21vY2svY29udHJhY3QucHk6MTUKICAgIC8vIGNsYXNzIFhHb3ZTdWJzY3JpYmVyQXBwTW9jayhBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3hnb3Zfc3Vic2NyaWJlcl9hcHBfbW9jay9jb250cmFjdC5weToxNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgc3Vic2NyaWJlX3hnb3YKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX3Vuc3Vic2NyaWJlX3hnb3Zfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy94Z292X3N1YnNjcmliZXJfYXBwX21vY2svY29udHJhY3QucHk6MzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy94Z292X3N1YnNjcmliZXJfYXBwX21vY2svY29udHJhY3QucHk6MTUKICAgIC8vIGNsYXNzIFhHb3ZTdWJzY3JpYmVyQXBwTW9jayhBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL3hnb3Zfc3Vic2NyaWJlcl9hcHBfbW9jay9jb250cmFjdC5weTozNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgdW5zdWJzY3JpYmVfeGdvdgogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYmFyZV9yb3V0aW5nQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMveGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrL2NvbnRyYWN0LnB5OjE1CiAgICAvLyBjbGFzcyBYR292U3Vic2NyaWJlckFwcE1vY2soQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19hZnRlcl9pZl9lbHNlQDEwCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYWZ0ZXJfaWZfZWxzZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy94Z292X3N1YnNjcmliZXJfYXBwX21vY2svY29udHJhY3QucHk6MTUKICAgIC8vIGNsYXNzIFhHb3ZTdWJzY3JpYmVyQXBwTW9jayhBUkM0Q29udHJhY3QpOgogICAgaW50Y18wIC8vIDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy54Z292X3N1YnNjcmliZXJfYXBwX21vY2suY29udHJhY3QuWEdvdlN1YnNjcmliZXJBcHBNb2NrLnN1YnNjcmliZV94Z292KGFwcF9pZDogdWludDY0LCB2b3RpbmdfYWRkcmVzczogYnl0ZXMpIC0+IHZvaWQ6CnN1YnNjcmliZV94Z292OgogICAgLy8gc21hcnRfY29udHJhY3RzL3hnb3Zfc3Vic2NyaWJlcl9hcHBfbW9jay9jb250cmFjdC5weToxNi0xNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBzdWJzY3JpYmVfeGdvdihzZWxmLCBhcHBfaWQ6IFVJbnQ2NCwgdm90aW5nX2FkZHJlc3M6IGFyYzQuQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3hnb3Zfc3Vic2NyaWJlcl9hcHBfbW9jay9jb250cmFjdC5weToxOS0yMQogICAgLy8geGdvdl9mZWUsIHhnb3ZfbWluX2JhbGFuY2VfZXhpc3RzID0gb3AuQXBwR2xvYmFsLmdldF9leF91aW50NjQoCiAgICAvLyAgICAgYXBwX2lkLCByY2ZnLkdTX0tFWV9YR09WX0ZFRQogICAgLy8gKQogICAgZnJhbWVfZGlnIC0yCiAgICAvLyBzbWFydF9jb250cmFjdHMveGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrL2NvbnRyYWN0LnB5OjIwCiAgICAvLyBhcHBfaWQsIHJjZmcuR1NfS0VZX1hHT1ZfRkVFCiAgICBwdXNoYnl0ZXMgMHg3ODY3NmY3NjVmNjY2NTY1CiAgICAvLyBzbWFydF9jb250cmFjdHMveGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrL2NvbnRyYWN0LnB5OjE5LTIxCiAgICAvLyB4Z292X2ZlZSwgeGdvdl9taW5fYmFsYW5jZV9leGlzdHMgPSBvcC5BcHBHbG9iYWwuZ2V0X2V4X3VpbnQ2NCgKICAgIC8vICAgICBhcHBfaWQsIHJjZmcuR1NfS0VZX1hHT1ZfRkVFCiAgICAvLyApCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMveGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrL2NvbnRyYWN0LnB5OjI0CiAgICAvLyByZWNlaXZlcj1BcHBsaWNhdGlvbihhcHBfaWQpLmFkZHJlc3MsCiAgICBmcmFtZV9kaWcgLTIKICAgIGFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKICAgIGFzc2VydCAvLyBhcHBsaWNhdGlvbiBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy94Z292X3N1YnNjcmliZXJfYXBwX21vY2svY29udHJhY3QucHk6MjgtMzMKICAgIC8vIGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgcmVnaXN0cnlfY29udHJhY3QuWEdvdlJlZ2lzdHJ5LnN1YnNjcmliZV94Z292LAogICAgLy8gICAgIHZvdGluZ19hZGRyZXNzLAogICAgLy8gICAgIHBheW1lbnQsCiAgICAvLyAgICAgYXBwX2lkPWFwcF9pZCwKICAgIC8vICkKICAgIGl0eG5fYmVnaW4KICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMveGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrL2NvbnRyYWN0LnB5OjIzCiAgICAvLyBwYXltZW50ID0gaXR4bi5QYXltZW50KAogICAgaW50Y18xIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMveGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrL2NvbnRyYWN0LnB5OjI4LTMzCiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIHJlZ2lzdHJ5X2NvbnRyYWN0LlhHb3ZSZWdpc3RyeS5zdWJzY3JpYmVfeGdvdiwKICAgIC8vICAgICB2b3RpbmdfYWRkcmVzcywKICAgIC8vICAgICBwYXltZW50LAogICAgLy8gICAgIGFwcF9pZD1hcHBfaWQsCiAgICAvLyApCiAgICBpdHhuX25leHQKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBwdXNoYnl0ZXMgMHhhMDgyY2VmOCAvLyBtZXRob2QgInN1YnNjcmliZV94Z292KGFkZHJlc3MscGF5KXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy54Z292X3N1YnNjcmliZXJfYXBwX21vY2suY29udHJhY3QuWEdvdlN1YnNjcmliZXJBcHBNb2NrLnVuc3Vic2NyaWJlX3hnb3YoYXBwX2lkOiB1aW50NjQpIC0+IHZvaWQ6CnVuc3Vic2NyaWJlX3hnb3Y6CiAgICAvLyBzbWFydF9jb250cmFjdHMveGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrL2NvbnRyYWN0LnB5OjM1LTM2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIHVuc3Vic2NyaWJlX3hnb3Yoc2VsZiwgYXBwX2lkOiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy94Z292X3N1YnNjcmliZXJfYXBwX21vY2svY29udHJhY3QucHk6MzctNDIKICAgIC8vIGFyYzQuYWJpX2NhbGwoCiAgICAvLyAgICAgcmVnaXN0cnlfY29udHJhY3QuWEdvdlJlZ2lzdHJ5LnVuc3Vic2NyaWJlX3hnb3YsCiAgICAvLyAgICAgYXJjNC5BZGRyZXNzKEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MpLAogICAgLy8gICAgIGFwcF9pZD1hcHBfaWQsCiAgICAvLyAgICAgZmVlPShHbG9iYWwubWluX3R4bl9mZWUgKiAyKSwKICAgIC8vICkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy94Z292X3N1YnNjcmliZXJfYXBwX21vY2svY29udHJhY3QucHk6NDEKICAgIC8vIGZlZT0oR2xvYmFsLm1pbl90eG5fZmVlICogMiksCiAgICBnbG9iYWwgTWluVHhuRmVlCiAgICBwdXNoaW50IDIgLy8gMgogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL3hnb3Zfc3Vic2NyaWJlcl9hcHBfbW9jay9jb250cmFjdC5weTozOQogICAgLy8gYXJjNC5BZGRyZXNzKEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MpLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBzbWFydF9jb250cmFjdHMveGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrL2NvbnRyYWN0LnB5OjM3LTQyCiAgICAvLyBhcmM0LmFiaV9jYWxsKAogICAgLy8gICAgIHJlZ2lzdHJ5X2NvbnRyYWN0LlhHb3ZSZWdpc3RyeS51bnN1YnNjcmliZV94Z292LAogICAgLy8gICAgIGFyYzQuQWRkcmVzcyhHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzKSwKICAgIC8vICAgICBhcHBfaWQ9YXBwX2lkLAogICAgLy8gICAgIGZlZT0oR2xvYmFsLm1pbl90eG5fZmVlICogMiksCiAgICAvLyApCiAgICBwdXNoYnl0ZXMgMHg3NjcyNTU1OSAvLyBtZXRob2QgInVuc3Vic2NyaWJlX3hnb3YoYWRkcmVzcyl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnRjXzIgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMueGdvdl9zdWJzY3JpYmVyX2FwcF9tb2NrLmNvbnRyYWN0LlhHb3ZTdWJzY3JpYmVyQXBwTW9jay5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "XGovSubscriberAppMock",
        "methods": [
            {
                "name": "subscribe_xgov",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app_id"
                    },
                    {
                        "type": "address",
                        "name": "voting_address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "unsubscribe_xgov",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}