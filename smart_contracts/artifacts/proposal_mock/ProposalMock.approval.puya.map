{
  "version": 3,
  "sources": [
    "../../proposal_mock/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBgB;AADJ;;AADJ;AAMQ;AADJ;AADJ;AAMQ;;;;;;;AADJ;AADJ;AAMQ;;;;;;;;;;;;;;;;AADJ;AADJ;AAMQ;;;;;;;;;;;;;;;;;;;;;;AADJ;AADJ;AAMQ;AADJ;AADJ;AAMQ;;;;;;;;;;;;;;;;;;AADJ;AADJ;AAMQ;;;;;;;;;;;;;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;;;;;;;;;;;;;;AADJ;AADJ;AAMQ;;AADmB;AAD3B;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;;;;;;;;;;;;;;AADJ;AADJ;AAMQ;;;;;;;;;;;AADJ;AADJ;AAMQ;;;;;;;;;;;;AADJ;AADJ;AA9DR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AA4FK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAhFL;;;AAAA;;;AAAA;AAAA;;;AAAA;AAgFK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA5EL;;;AAAA;AA4EK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAxEL;;;AAAA;AAwEK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAnEL;;;AAmEK;;;AAAA;;AAAL;;;AAEQ;AAAA;;AAAA;AACA;AAA6B;;AAA7B;;AAER;;;AAEQ;AAAA;;AAAA;;AAER;;;AAEQ;;AAAA;;AAAA;;AAER;;;AAIQ;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.proposal_mock.contract.ProposalMock.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x70726f706f736572 0x72656769737472795f6170705f6964 0x 0x737461747573 0x7265717565737465645f616d6f756e74 0x636f6d6d69747465655f6964 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573"
    },
    "104": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "106": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "109": {
      "op": "bytec_0 // 0x70726f706f736572",
      "defined_out": [
        "0x70726f706f736572"
      ],
      "stack_out": [
        "0x70726f706f736572"
      ]
    },
    "110": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x70726f706f736572",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "0x70726f706f736572",
        "materialized_values%0#0"
      ]
    },
    "112": {
      "op": "app_global_put",
      "stack_out": []
    },
    "113": {
      "op": "bytec_1 // 0x72656769737472795f6170705f6964",
      "defined_out": [
        "0x72656769737472795f6170705f6964"
      ],
      "stack_out": [
        "0x72656769737472795f6170705f6964"
      ]
    },
    "114": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x72656769737472795f6170705f6964"
      ],
      "stack_out": [
        "0x72656769737472795f6170705f6964",
        "0"
      ]
    },
    "115": {
      "op": "app_global_put",
      "stack_out": []
    },
    "116": {
      "op": "pushbytes 0x7469746c65",
      "defined_out": [
        "0x7469746c65"
      ],
      "stack_out": [
        "0x7469746c65"
      ]
    },
    "123": {
      "op": "bytec_2 // \"\"",
      "defined_out": [
        "\"\"",
        "0x7469746c65"
      ],
      "stack_out": [
        "0x7469746c65",
        "\"\""
      ]
    },
    "124": {
      "op": "app_global_put",
      "stack_out": []
    },
    "125": {
      "op": "pushbytes 0x6f70656e5f74696d657374616d70",
      "defined_out": [
        "0x6f70656e5f74696d657374616d70"
      ],
      "stack_out": [
        "0x6f70656e5f74696d657374616d70"
      ]
    },
    "141": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6f70656e5f74696d657374616d70",
        "0"
      ]
    },
    "142": {
      "op": "app_global_put",
      "stack_out": []
    },
    "143": {
      "op": "pushbytes 0x7375626d697373696f6e5f74696d657374616d70",
      "defined_out": [
        "0x7375626d697373696f6e5f74696d657374616d70"
      ],
      "stack_out": [
        "0x7375626d697373696f6e5f74696d657374616d70"
      ]
    },
    "165": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x7375626d697373696f6e5f74696d657374616d70",
        "0"
      ]
    },
    "166": {
      "op": "app_global_put",
      "stack_out": []
    },
    "167": {
      "op": "bytec_3 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "0x737461747573"
      ]
    },
    "168": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x737461747573",
        "0"
      ]
    },
    "169": {
      "op": "app_global_put",
      "stack_out": []
    },
    "170": {
      "op": "pushbytes 0x66756e64696e675f63617465676f7279",
      "defined_out": [
        "0x66756e64696e675f63617465676f7279"
      ],
      "stack_out": [
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "188": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x66756e64696e675f63617465676f7279",
        "0"
      ]
    },
    "189": {
      "op": "app_global_put",
      "stack_out": []
    },
    "190": {
      "op": "pushbytes 0x66756e64696e675f74797065",
      "defined_out": [
        "0x66756e64696e675f74797065"
      ],
      "stack_out": [
        "0x66756e64696e675f74797065"
      ]
    },
    "204": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x66756e64696e675f74797065",
        "0"
      ]
    },
    "205": {
      "op": "app_global_put",
      "stack_out": []
    },
    "206": {
      "op": "bytec 4 // 0x7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x7265717565737465645f616d6f756e74"
      ]
    },
    "208": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x7265717565737465645f616d6f756e74",
        "0"
      ]
    },
    "209": {
      "op": "app_global_put",
      "stack_out": []
    },
    "210": {
      "op": "pushbytes 0x6c6f636b65645f616d6f756e74",
      "defined_out": [
        "0x6c6f636b65645f616d6f756e74"
      ],
      "stack_out": [
        "0x6c6f636b65645f616d6f756e74"
      ]
    },
    "225": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6c6f636b65645f616d6f756e74",
        "0"
      ]
    },
    "226": {
      "op": "app_global_put",
      "stack_out": []
    },
    "227": {
      "op": "bytec 5 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "229": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "0x"
      ]
    },
    "230": {
      "op": "app_global_put",
      "stack_out": []
    },
    "231": {
      "op": "bytec 6 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "233": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "0"
      ]
    },
    "234": {
      "op": "app_global_put",
      "stack_out": []
    },
    "235": {
      "op": "bytec 7 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "0"
      ]
    },
    "238": {
      "op": "app_global_put",
      "stack_out": []
    },
    "239": {
      "op": "pushbytes 0x766f7465645f6d656d62657273",
      "defined_out": [
        "0x766f7465645f6d656d62657273"
      ],
      "stack_out": [
        "0x766f7465645f6d656d62657273"
      ]
    },
    "254": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f7465645f6d656d62657273",
        "0"
      ]
    },
    "255": {
      "op": "app_global_put",
      "stack_out": []
    },
    "256": {
      "op": "pushbytes 0x617070726f76616c73",
      "defined_out": [
        "0x617070726f76616c73"
      ],
      "stack_out": [
        "0x617070726f76616c73"
      ]
    },
    "267": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x617070726f76616c73",
        "0"
      ]
    },
    "268": {
      "op": "app_global_put",
      "stack_out": []
    },
    "269": {
      "op": "pushbytes 0x72656a656374696f6e73",
      "defined_out": [
        "0x72656a656374696f6e73"
      ],
      "stack_out": [
        "0x72656a656374696f6e73"
      ]
    },
    "281": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x72656a656374696f6e73",
        "0"
      ]
    },
    "282": {
      "op": "app_global_put",
      "stack_out": []
    },
    "283": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "285": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "288": {
      "op": "pushbytess 0xcc694eaa 0x1394cc3c 0xd3791253 0x025a9804 0xe94a444d 0xbb8e1d68 // method \"create(address)void\", method \"set_status(uint64)void\", method \"set_requested_amount(uint64)void\", method \"set_committee_details(byte[32],uint64,uint64)void\", method \"release_funds()void\", method \"vote(address,uint64,uint64)void\"",
      "defined_out": [
        "Method(create(address)void)",
        "Method(release_funds()void)",
        "Method(set_committee_details(byte[32],uint64,uint64)void)",
        "Method(set_requested_amount(uint64)void)",
        "Method(set_status(uint64)void)",
        "Method(vote(address,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(create(address)void)",
        "Method(set_status(uint64)void)",
        "Method(set_requested_amount(uint64)void)",
        "Method(set_committee_details(byte[32],uint64,uint64)void)",
        "Method(release_funds()void)",
        "Method(vote(address,uint64,uint64)void)"
      ]
    },
    "320": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create(address)void)",
        "Method(release_funds()void)",
        "Method(set_committee_details(byte[32],uint64,uint64)void)",
        "Method(set_requested_amount(uint64)void)",
        "Method(set_status(uint64)void)",
        "Method(vote(address,uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(address)void)",
        "Method(set_status(uint64)void)",
        "Method(set_requested_amount(uint64)void)",
        "Method(set_committee_details(byte[32],uint64,uint64)void)",
        "Method(release_funds()void)",
        "Method(vote(address,uint64,uint64)void)",
        "tmp%2#0"
      ]
    },
    "323": {
      "op": "match main_create_route@5 main_set_status_route@6 main_set_requested_amount_route@7 main_set_committee_details_route@8 main_release_funds_route@9 main_vote_route@10",
      "stack_out": []
    },
    "337": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "338": {
      "op": "return",
      "stack_out": []
    },
    "339": {
      "block": "main_vote_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "341": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "342": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "343": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "345": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "346": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "347": {
      "op": "return",
      "stack_out": []
    },
    "348": {
      "block": "main_release_funds_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "350": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "351": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "352": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "354": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "355": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "356": {
      "op": "return",
      "stack_out": []
    },
    "357": {
      "block": "main_set_committee_details_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "359": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "360": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "361": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "363": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "364": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "367": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "370": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%21#0"
      ]
    },
    "371": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%21#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "374": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "375": {
      "callsub": "smart_contracts.proposal_mock.contract.ProposalMock.set_committee_details",
      "op": "callsub set_committee_details",
      "stack_out": []
    },
    "378": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "379": {
      "op": "return",
      "stack_out": []
    },
    "380": {
      "block": "main_set_requested_amount_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "382": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "383": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "384": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "386": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "387": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "390": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "391": {
      "callsub": "smart_contracts.proposal_mock.contract.ProposalMock.set_requested_amount",
      "op": "callsub set_requested_amount",
      "stack_out": []
    },
    "394": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "395": {
      "op": "return",
      "stack_out": []
    },
    "396": {
      "block": "main_set_status_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "398": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "399": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "400": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "402": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "403": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "406": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "407": {
      "callsub": "smart_contracts.proposal_mock.contract.ProposalMock.set_status",
      "op": "callsub set_status",
      "stack_out": []
    },
    "410": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "411": {
      "op": "return",
      "stack_out": []
    },
    "412": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "414": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "415": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "416": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "418": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "419": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "420": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "423": {
      "callsub": "smart_contracts.proposal_mock.contract.ProposalMock.create",
      "op": "callsub create",
      "stack_out": []
    },
    "426": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "427": {
      "op": "return",
      "stack_out": []
    },
    "428": {
      "subroutine": "smart_contracts.proposal_mock.contract.ProposalMock.create",
      "params": {
        "proposer#0": "bytes"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "431": {
      "op": "bytec_0 // 0x70726f706f736572",
      "defined_out": [
        "0x70726f706f736572"
      ],
      "stack_out": [
        "0x70726f706f736572"
      ]
    },
    "432": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x70726f706f736572",
        "proposer#0 (copy)"
      ],
      "stack_out": [
        "0x70726f706f736572",
        "proposer#0 (copy)"
      ]
    },
    "434": {
      "op": "app_global_put",
      "stack_out": []
    },
    "435": {
      "op": "bytec_1 // 0x72656769737472795f6170705f6964",
      "defined_out": [
        "0x72656769737472795f6170705f6964"
      ],
      "stack_out": [
        "0x72656769737472795f6170705f6964"
      ]
    },
    "436": {
      "op": "global CallerApplicationID",
      "defined_out": [
        "0x72656769737472795f6170705f6964",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "0x72656769737472795f6170705f6964",
        "materialized_values%0#0"
      ]
    },
    "438": {
      "op": "app_global_put",
      "stack_out": []
    },
    "439": {
      "retsub": true,
      "op": "retsub"
    },
    "440": {
      "subroutine": "smart_contracts.proposal_mock.contract.ProposalMock.set_status",
      "params": {
        "status#0": "uint64"
      },
      "block": "set_status",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "443": {
      "op": "bytec_3 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "0x737461747573"
      ]
    },
    "444": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x737461747573",
        "status#0 (copy)"
      ],
      "stack_out": [
        "0x737461747573",
        "status#0 (copy)"
      ]
    },
    "446": {
      "op": "app_global_put",
      "stack_out": []
    },
    "447": {
      "retsub": true,
      "op": "retsub"
    },
    "448": {
      "subroutine": "smart_contracts.proposal_mock.contract.ProposalMock.set_requested_amount",
      "params": {
        "requested_amount#0": "uint64"
      },
      "block": "set_requested_amount",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "451": {
      "op": "bytec 4 // 0x7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x7265717565737465645f616d6f756e74"
      ]
    },
    "453": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x7265717565737465645f616d6f756e74",
        "requested_amount#0 (copy)"
      ],
      "stack_out": [
        "0x7265717565737465645f616d6f756e74",
        "requested_amount#0 (copy)"
      ]
    },
    "455": {
      "op": "app_global_put",
      "stack_out": []
    },
    "456": {
      "retsub": true,
      "op": "retsub"
    },
    "457": {
      "subroutine": "smart_contracts.proposal_mock.contract.ProposalMock.set_committee_details",
      "params": {
        "metadata_hash#0": "bytes",
        "size#0": "uint64",
        "votes#0": "uint64"
      },
      "block": "set_committee_details",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "460": {
      "op": "bytec 5 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "462": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x636f6d6d69747465655f6964",
        "metadata_hash#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "metadata_hash#0 (copy)"
      ]
    },
    "464": {
      "op": "app_global_put",
      "stack_out": []
    },
    "465": {
      "op": "bytec 6 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "467": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "size#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "size#0 (copy)"
      ]
    },
    "469": {
      "op": "app_global_put",
      "stack_out": []
    },
    "470": {
      "op": "bytec 7 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "472": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573",
        "votes#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "votes#0 (copy)"
      ]
    },
    "474": {
      "op": "app_global_put",
      "stack_out": []
    },
    "475": {
      "retsub": true,
      "op": "retsub"
    }
  }
}