{
    "name": "ProposalMock",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "address",
                    "name": "proposer"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_status",
            "args": [
                {
                    "type": "uint64",
                    "name": "status"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_requested_amount",
            "args": [
                {
                    "type": "uint64",
                    "name": "requested_amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_committee_details",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "metadata_hash"
                },
                {
                    "type": "uint64",
                    "name": "size"
                },
                {
                    "type": "uint64",
                    "name": "votes"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "release_funds",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote",
            "args": [
                {
                    "type": "address",
                    "name": "xgov_address"
                },
                {
                    "type": "uint64",
                    "name": "approval_votes"
                },
                {
                    "type": "uint64",
                    "name": "rejection_votes"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 13,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "proposer": {
                    "keyType": "AVMBytes",
                    "valueType": "address",
                    "key": "cHJvcG9zZXI="
                },
                "registry_app_id": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cmVnaXN0cnlfYXBwX2lk"
                },
                "title": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMString",
                    "key": "dGl0bGU="
                },
                "submission_ts": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "b3Blbl90aW1lc3RhbXA="
                },
                "finalization_ts": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "c3VibWlzc2lvbl90aW1lc3RhbXA="
                },
                "status": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "c3RhdHVz"
                },
                "funding_category": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZnVuZGluZ19jYXRlZ29yeQ=="
                },
                "funding_type": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "ZnVuZGluZ190eXBl"
                },
                "requested_amount": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cmVxdWVzdGVkX2Ftb3VudA=="
                },
                "locked_amount": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "bG9ja2VkX2Ftb3VudA=="
                },
                "committee_id": {
                    "keyType": "AVMBytes",
                    "valueType": "byte[32]",
                    "key": "Y29tbWl0dGVlX2lk"
                },
                "committee_members": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWl0dGVlX21lbWJlcnM="
                },
                "committee_votes": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "Y29tbWl0dGVlX3ZvdGVz"
                },
                "voted_members": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "dm90ZWRfbWVtYmVycw=="
                },
                "approvals": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "YXBwcm92YWxz"
                },
                "rejections": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "key": "cmVqZWN0aW9ucw=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        342,
                        351,
                        360,
                        383,
                        399,
                        415
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        419
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        345,
                        354,
                        363,
                        386,
                        402
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAAEmCAhwcm9wb3Nlcg9yZWdpc3RyeV9hcHBfaWQABnN0YXR1cxByZXF1ZXN0ZWRfYW1vdW50DGNvbW1pdHRlZV9pZBFjb21taXR0ZWVfbWVtYmVycw9jb21taXR0ZWVfdm90ZXMxGEAArigyA2cpImeABXRpdGxlKmeADm9wZW5fdGltZXN0YW1wImeAFHN1Ym1pc3Npb25fdGltZXN0YW1wImcrImeAEGZ1bmRpbmdfY2F0ZWdvcnkiZ4AMZnVuZGluZ190eXBlImcnBCJngA1sb2NrZWRfYW1vdW50ImcnBSpnJwYiZycHImeADXZvdGVkX21lbWJlcnMiZ4AJYXBwcm92YWxzImeACnJlamVjdGlvbnMiZzEbQQAxggYEzGlOqgQTlMw8BNN5ElMEAlqYBATpSkRNBLuOHWg2GgCOBgBLADsAKwAUAAsAAiJDMRkURDEYRCNDMRkURDEYRCNDMRkURDEYRDYaATYaAhc2GgMXiABPI0MxGRREMRhENhoBF4gANiNDMRkURDEYRDYaAReIAB4jQzEZFEQxGBRENhoBiAACI0OKAQAoi/9nKTINZ4mKAQAri/9niYoBACcEi/9niYoDACcFi/1nJwaL/mcnB4v/Z4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}