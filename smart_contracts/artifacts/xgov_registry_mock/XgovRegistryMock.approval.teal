#pragma version 10

smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.approval_program:
    intcblock 1 0 604800 1209600 1814400
    bytecblock 0x70726f706f73616c5f666565 0x636f6d6d69747465655f6964 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x70726f706f73616c5f7075626c697368696e675f627073 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x636f6d6d69747465655f7075626c6973686572 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573 0x766f74696e675f6475726174696f6e5f736d616c6c 0x766f74696e675f6475726174696f6e5f6d656469756d 0x766f74696e675f6475726174696f6e5f6c61726765 0x71756f72756d5f736d616c6c 0x71756f72756d5f6d656469756d 0x71756f72756d5f6c61726765 0x77656967687465645f71756f72756d5f736d616c6c 0x77656967687465645f71756f72756d5f6d656469756d 0x77656967687465645f71756f72756d5f6c61726765
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__init__() -> void:
__init__:
    // smart_contracts/xgov_registry_mock/contract.py:30
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry_mock/contract.py:33
    // Txn.global_num_byte_slice == mock_cfg.GLOBAL_BYTES
    txn GlobalNumByteSlice
    pushint 2 // 2
    ==
    // smart_contracts/xgov_registry_mock/contract.py:31-34
    // # Preconditions
    // assert (
    //     Txn.global_num_byte_slice == mock_cfg.GLOBAL_BYTES
    // ), err.WRONG_GLOBAL_BYTES
    assert // Wrong Global Bytes allocation
    // smart_contracts/xgov_registry_mock/contract.py:35
    // assert Txn.global_num_uint == mock_cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    pushint 21 // 21
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/xgov_registry_mock/contract.py:36
    // assert Txn.local_num_byte_slice == mock_cfg.LOCAL_BYTES, err.WRONG_LOCAL_BYTES
    txn LocalNumByteSlice
    !
    assert // Wrong Local Bytes allocation
    // smart_contracts/xgov_registry_mock/contract.py:37
    // assert Txn.local_num_uint == mock_cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    // smart_contracts/xgov_registry_mock/contract.py:41
    // key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    bytec_2 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    // smart_contracts/xgov_registry_mock/contract.py:40
    // UInt64(mock_cfg.PROPOSAL_COMMITMENT_BPS),
    pushint 100 // 100
    // smart_contracts/xgov_registry_mock/contract.py:39-42
    // self.proposal_commitment_bps = GlobalState(
    //     UInt64(mock_cfg.PROPOSAL_COMMITMENT_BPS),
    //     key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:45
    // key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    bytec_3 // 0x6d696e5f7265717565737465645f616d6f756e74
    // smart_contracts/xgov_registry_mock/contract.py:44
    // UInt64(mock_cfg.MIN_REQUESTED_AMOUNT),
    pushint 10000000000 // 10000000000
    // smart_contracts/xgov_registry_mock/contract.py:43-46
    // self.min_requested_amount = GlobalState(
    //     UInt64(mock_cfg.MIN_REQUESTED_AMOUNT),
    //     key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:49
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    bytec 4 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:48
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    pushint 50000000000 // 50000000000
    // smart_contracts/xgov_registry_mock/contract.py:47-50
    // self.max_requested_amount_small = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:53
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    bytec 5 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:52
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    pushint 250000000000 // 250000000000
    // smart_contracts/xgov_registry_mock/contract.py:51-54
    // self.max_requested_amount_medium = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:57
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    bytec 6 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:56
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    pushint 500000000000 // 500000000000
    // smart_contracts/xgov_registry_mock/contract.py:55-58
    // self.max_requested_amount_large = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:61
    // key=reg_cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS,
    bytec 7 // 0x70726f706f73616c5f7075626c697368696e675f627073
    // smart_contracts/xgov_registry_mock/contract.py:60
    // UInt64(mock_cfg.PUBLISHING_FEE_BPS),
    pushint 500 // 500
    // smart_contracts/xgov_registry_mock/contract.py:59-62
    // self.publishing_fee_bps = GlobalState(
    //     UInt64(mock_cfg.PUBLISHING_FEE_BPS),
    //     key=reg_cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:65
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    bytec 8 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:64
    // UInt64(mock_cfg.DISCUSSION_DURATION_SMALL),
    intc_2 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:63-66
    // self.discussion_duration_small = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:69
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    bytec 9 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:68
    // UInt64(mock_cfg.DISCUSSION_DURATION_MEDIUM),
    intc_3 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:67-70
    // self.discussion_duration_medium = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:73
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    bytec 10 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:72
    // UInt64(mock_cfg.DISCUSSION_DURATION_LARGE),
    intc 4 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:71-74
    // self.discussion_duration_large = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:77
    // key=reg_cfg.GS_KEY_COMMITTEE_PUBLISHER,
    bytec 11 // 0x636f6d6d69747465655f7075626c6973686572
    // smart_contracts/xgov_registry_mock/contract.py:76
    // arc4.Address(mock_cfg.COMMITTEE_PUBLISHER),
    pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // smart_contracts/xgov_registry_mock/contract.py:75-78
    // self.committee_publisher = GlobalState(
    //     arc4.Address(mock_cfg.COMMITTEE_PUBLISHER),
    //     key=reg_cfg.GS_KEY_COMMITTEE_PUBLISHER,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:81
    // key=reg_cfg.GS_KEY_PROPOSAL_FEE,
    bytec_0 // 0x70726f706f73616c5f666565
    // smart_contracts/xgov_registry_mock/contract.py:80
    // UInt64(mock_cfg.PROPOSAL_FEE),
    pushint 100000000 // 100000000
    // smart_contracts/xgov_registry_mock/contract.py:79-82
    // self.proposal_fee = GlobalState(
    //     UInt64(mock_cfg.PROPOSAL_FEE),
    //     key=reg_cfg.GS_KEY_PROPOSAL_FEE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:85
    // key=reg_cfg.GS_KEY_COMMITTEE_ID,
    bytec_1 // 0x636f6d6d69747465655f6964
    // smart_contracts/xgov_registry_mock/contract.py:84
    // CommitteeId.from_bytes(mock_cfg.COMMITTEE_ID),
    pushbytes 0x
    // smart_contracts/xgov_registry_mock/contract.py:83-86
    // self.committee_id = GlobalState(
    //     CommitteeId.from_bytes(mock_cfg.COMMITTEE_ID),
    //     key=reg_cfg.GS_KEY_COMMITTEE_ID,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:89
    // key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    bytec 12 // 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/xgov_registry_mock/contract.py:88
    // UInt64(mock_cfg.COMMITTEE_MEMBERS),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:87-90
    // self.committee_members = GlobalState(
    //     UInt64(mock_cfg.COMMITTEE_MEMBERS),
    //     key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:93
    // key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    bytec 13 // 0x636f6d6d69747465655f766f746573
    // smart_contracts/xgov_registry_mock/contract.py:92
    // UInt64(mock_cfg.COMMITTEE_VOTES),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:91-94
    // self.committee_votes = GlobalState(
    //     UInt64(mock_cfg.COMMITTEE_VOTES),
    //     key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:97
    // key=reg_cfg.GS_KEY_VOTING_DURATION_SMALL,
    bytec 14 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:96
    // UInt64(mock_cfg.VOTING_DURATION_SMALL),
    intc_2 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:95-98
    // self.voting_duration_small = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:101
    // key=reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM,
    bytec 15 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:100
    // UInt64(mock_cfg.VOTING_DURATION_MEDIUM),
    intc_3 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:99-102
    // self.voting_duration_medium = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:105
    // key=reg_cfg.GS_KEY_VOTING_DURATION_LARGE,
    bytec 16 // 0x766f74696e675f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:104
    // UInt64(mock_cfg.VOTING_DURATION_LARGE),
    intc 4 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:103-106
    // self.voting_duration_large = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:109
    // key=reg_cfg.GS_KEY_QUORUM_SMALL,
    bytec 17 // 0x71756f72756d5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:108
    // UInt64(mock_cfg.QUORUM_SMALL_BPS),
    pushint 1000 // 1000
    // smart_contracts/xgov_registry_mock/contract.py:107-110
    // self.quorum_small = GlobalState(
    //     UInt64(mock_cfg.QUORUM_SMALL_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:113
    // key=reg_cfg.GS_KEY_QUORUM_MEDIUM,
    bytec 18 // 0x71756f72756d5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:112
    // UInt64(mock_cfg.QUORUM_MEDIUM_BPS),
    pushint 1500 // 1500
    // smart_contracts/xgov_registry_mock/contract.py:111-114
    // self.quorum_medium = GlobalState(
    //     UInt64(mock_cfg.QUORUM_MEDIUM_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:117
    // key=reg_cfg.GS_KEY_QUORUM_LARGE,
    bytec 19 // 0x71756f72756d5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:116
    // UInt64(mock_cfg.QUORUM_LARGE_BPS),
    pushint 2000 // 2000
    // smart_contracts/xgov_registry_mock/contract.py:115-118
    // self.quorum_large = GlobalState(
    //     UInt64(mock_cfg.QUORUM_LARGE_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:121
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL,
    bytec 20 // 0x77656967687465645f71756f72756d5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:120
    // UInt64(mock_cfg.WEIGHTED_QUORUM_SMALL_BPS),
    pushint 2000 // 2000
    // smart_contracts/xgov_registry_mock/contract.py:119-122
    // self.weighted_quorum_small = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_SMALL_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:125
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM,
    bytec 21 // 0x77656967687465645f71756f72756d5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:124
    // UInt64(mock_cfg.WEIGHTED_QUORUM_MEDIUM_BPS),
    pushint 3000 // 3000
    // smart_contracts/xgov_registry_mock/contract.py:123-126
    // self.weighted_quorum_medium = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_MEDIUM_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:129
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE,
    bytec 22 // 0x77656967687465645f71756f72756d5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:128
    // UInt64(mock_cfg.WEIGHTED_QUORUM_LARGE_BPS),
    pushint 4000 // 4000
    // smart_contracts/xgov_registry_mock/contract.py:127-130
    // self.weighted_quorum_large = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_LARGE_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE,
    // )
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@29
    pushbytess 0xc386b03f 0x6811eb76 0x37235b22 0xbbc72d1b 0xd17676d9 0x7cd79aad 0x77152d58 0x29dfd021 0x34a5dc55 0xbb0db011 0xaa348d0d 0x97f1e857 0x504c31b9 0x56ad1c6f 0xf83579fd 0x520e1f64 0x53802148 0xa4f766f6 0xa9998b1d 0x4e9c607c 0x650dfa8b 0xc887f086 0x4af84ea5 0x2c64e86f 0x16acce3b // method "create_empty_proposal(address)uint64", method "set_proposal_commitment_bps(uint64)void", method "set_min_requested_amount(uint64)void", method "set_max_requested_amount_small(uint64)void", method "set_max_requested_amount_medium(uint64)void", method "set_max_requested_amount_large(uint64)void", method "set_publishing_fee(uint64)void", method "set_discussion_duration_small(uint64)void", method "set_discussion_duration_medium(uint64)void", method "set_discussion_duration_large(uint64)void", method "set_committee_publisher(address)void", method "set_proposal_fee(uint64)void", method "set_committee_id(byte[32])void", method "clear_committee_id()void", method "set_committee_members(uint64)void", method "set_committee_votes(uint64)void", method "set_voting_duration_small(uint64)void", method "set_voting_duration_medium(uint64)void", method "set_voting_duration_large(uint64)void", method "set_quorum_small(uint64)void", method "set_quorum_medium(uint64)void", method "set_quorum_large(uint64)void", method "set_weighted_quorum_small(uint64)void", method "set_weighted_quorum_medium(uint64)void", method "set_weighted_quorum_large(uint64)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_empty_proposal_route@2 __puya_arc4_router___set_proposal_commitment_bps_route@3 __puya_arc4_router___set_min_requested_amount_route@4 __puya_arc4_router___set_max_requested_amount_small_route@5 __puya_arc4_router___set_max_requested_amount_medium_route@6 __puya_arc4_router___set_max_requested_amount_large_route@7 __puya_arc4_router___set_publishing_fee_route@8 __puya_arc4_router___set_discussion_duration_small_route@9 __puya_arc4_router___set_discussion_duration_medium_route@10 __puya_arc4_router___set_discussion_duration_large_route@11 __puya_arc4_router___set_committee_publisher_route@12 __puya_arc4_router___set_proposal_fee_route@13 __puya_arc4_router___set_committee_id_route@14 __puya_arc4_router___clear_committee_id_route@15 __puya_arc4_router___set_committee_members_route@16 __puya_arc4_router___set_committee_votes_route@17 __puya_arc4_router___set_voting_duration_small_route@18 __puya_arc4_router___set_voting_duration_medium_route@19 __puya_arc4_router___set_voting_duration_large_route@20 __puya_arc4_router___set_quorum_small_route@21 __puya_arc4_router___set_quorum_medium_route@22 __puya_arc4_router___set_quorum_large_route@23 __puya_arc4_router___set_weighted_quorum_small_route@24 __puya_arc4_router___set_weighted_quorum_medium_route@25 __puya_arc4_router___set_weighted_quorum_large_route@26
    intc_1 // 0
    retsub

__puya_arc4_router___create_empty_proposal_route@2:
    // smart_contracts/xgov_registry_mock/contract.py:132
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:132
    // @arc4.abimethod()
    callsub create_empty_proposal
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___set_proposal_commitment_bps_route@3:
    // smart_contracts/xgov_registry_mock/contract.py:160
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:160
    // @arc4.abimethod()
    callsub set_proposal_commitment_bps
    intc_0 // 1
    retsub

__puya_arc4_router___set_min_requested_amount_route@4:
    // smart_contracts/xgov_registry_mock/contract.py:171
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:171
    // @arc4.abimethod()
    callsub set_min_requested_amount
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_small_route@5:
    // smart_contracts/xgov_registry_mock/contract.py:182
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:182
    // @arc4.abimethod()
    callsub set_max_requested_amount_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_medium_route@6:
    // smart_contracts/xgov_registry_mock/contract.py:193
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:193
    // @arc4.abimethod()
    callsub set_max_requested_amount_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_large_route@7:
    // smart_contracts/xgov_registry_mock/contract.py:204
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:204
    // @arc4.abimethod()
    callsub set_max_requested_amount_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_publishing_fee_route@8:
    // smart_contracts/xgov_registry_mock/contract.py:215
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:215
    // @arc4.abimethod()
    callsub set_publishing_fee
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_small_route@9:
    // smart_contracts/xgov_registry_mock/contract.py:226
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:226
    // @arc4.abimethod()
    callsub set_discussion_duration_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_medium_route@10:
    // smart_contracts/xgov_registry_mock/contract.py:237
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:237
    // @arc4.abimethod()
    callsub set_discussion_duration_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_large_route@11:
    // smart_contracts/xgov_registry_mock/contract.py:248
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:248
    // @arc4.abimethod()
    callsub set_discussion_duration_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_publisher_route@12:
    // smart_contracts/xgov_registry_mock/contract.py:259
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:259
    // @arc4.abimethod()
    callsub set_committee_publisher
    intc_0 // 1
    retsub

__puya_arc4_router___set_proposal_fee_route@13:
    // smart_contracts/xgov_registry_mock/contract.py:270
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:270
    // @arc4.abimethod()
    callsub set_proposal_fee
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_id_route@14:
    // smart_contracts/xgov_registry_mock/contract.py:281
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:281
    // @arc4.abimethod()
    callsub set_committee_id
    intc_0 // 1
    retsub

__puya_arc4_router___clear_committee_id_route@15:
    // smart_contracts/xgov_registry_mock/contract.py:292
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub clear_committee_id
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_members_route@16:
    // smart_contracts/xgov_registry_mock/contract.py:300
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:300
    // @arc4.abimethod()
    callsub set_committee_members
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_votes_route@17:
    // smart_contracts/xgov_registry_mock/contract.py:311
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:311
    // @arc4.abimethod()
    callsub set_committee_votes
    intc_0 // 1
    retsub

__puya_arc4_router___set_voting_duration_small_route@18:
    // smart_contracts/xgov_registry_mock/contract.py:322
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:322
    // @arc4.abimethod()
    callsub set_voting_duration_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_voting_duration_medium_route@19:
    // smart_contracts/xgov_registry_mock/contract.py:333
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:333
    // @arc4.abimethod()
    callsub set_voting_duration_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_voting_duration_large_route@20:
    // smart_contracts/xgov_registry_mock/contract.py:344
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:344
    // @arc4.abimethod()
    callsub set_voting_duration_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_quorum_small_route@21:
    // smart_contracts/xgov_registry_mock/contract.py:355
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:355
    // @arc4.abimethod()
    callsub set_quorum_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_quorum_medium_route@22:
    // smart_contracts/xgov_registry_mock/contract.py:366
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:366
    // @arc4.abimethod()
    callsub set_quorum_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_quorum_large_route@23:
    // smart_contracts/xgov_registry_mock/contract.py:377
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:377
    // @arc4.abimethod()
    callsub set_quorum_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_weighted_quorum_small_route@24:
    // smart_contracts/xgov_registry_mock/contract.py:388
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:388
    // @arc4.abimethod()
    callsub set_weighted_quorum_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_weighted_quorum_medium_route@25:
    // smart_contracts/xgov_registry_mock/contract.py:399
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:399
    // @arc4.abimethod()
    callsub set_weighted_quorum_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_weighted_quorum_large_route@26:
    // smart_contracts/xgov_registry_mock/contract.py:410
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:410
    // @arc4.abimethod()
    callsub set_weighted_quorum_large
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@29:
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@33
    txn ApplicationID
    !
    assert // is creating
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@33:
    // smart_contracts/xgov_registry_mock/contract.py:21-29
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    intc_1 // 0
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal(proposer: bytes) -> uint64:
create_empty_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:132-136
    // @arc4.abimethod()
    // def create_empty_proposal(
    //     self,
    //     proposer: arc4.Address,
    // ) -> UInt64:
    proto 1 1
    // smart_contracts/xgov_registry_mock/contract.py:147-150
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    itxn_begin
    pushint 20 // 20
    itxn_field GlobalNumUint
    pushint 5 // 5
    itxn_field GlobalNumByteSlice
    intc_0 // 1
    itxn_field ExtraProgramPages
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(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)
    itxn_field ApprovalProgramPages
    // smart_contracts/xgov_registry_mock/contract.py:148
    // Proposal,
    pushbytes 0xcc694eaa // method "create(address)void"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    // smart_contracts/xgov_registry_mock/contract.py:147-150
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    pushint 6 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // smart_contracts/xgov_registry_mock/contract.py:152-156
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.proposal_fee.value - prop_cfg.PROPOSAL_MBR,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry_mock/contract.py:153
    // receiver=res.created_app.address,
    dup
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/xgov_registry_mock/contract.py:154
    // amount=self.proposal_fee.value - prop_cfg.PROPOSAL_MBR,
    intc_1 // 0
    bytec_0 // 0x70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.proposal_fee exists
    pushint 1020000 // 1020000
    -
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry_mock/contract.py:152
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:155
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:152-156
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.proposal_fee.value - prop_cfg.PROPOSAL_MBR,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry_mock/contract.py:158
    // return res.created_app.id
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps(commitment_bps: uint64) -> void:
set_proposal_commitment_bps:
    // smart_contracts/xgov_registry_mock/contract.py:160-161
    // @arc4.abimethod()
    // def set_proposal_commitment_bps(self, commitment_bps: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:169
    // self.proposal_commitment_bps.value = commitment_bps
    bytec_2 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount(min_requested_amount: uint64) -> void:
set_min_requested_amount:
    // smart_contracts/xgov_registry_mock/contract.py:171-172
    // @arc4.abimethod()
    // def set_min_requested_amount(self, min_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:180
    // self.min_requested_amount.value = min_requested_amount
    bytec_3 // 0x6d696e5f7265717565737465645f616d6f756e74
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small(max_requested_amount: uint64) -> void:
set_max_requested_amount_small:
    // smart_contracts/xgov_registry_mock/contract.py:182-183
    // @arc4.abimethod()
    // def set_max_requested_amount_small(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:191
    // self.max_requested_amount_small.value = max_requested_amount
    bytec 4 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium(max_requested_amount: uint64) -> void:
set_max_requested_amount_medium:
    // smart_contracts/xgov_registry_mock/contract.py:193-194
    // @arc4.abimethod()
    // def set_max_requested_amount_medium(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:202
    // self.max_requested_amount_medium.value = max_requested_amount
    bytec 5 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large(max_requested_amount: uint64) -> void:
set_max_requested_amount_large:
    // smart_contracts/xgov_registry_mock/contract.py:204-205
    // @arc4.abimethod()
    // def set_max_requested_amount_large(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:213
    // self.max_requested_amount_large.value = max_requested_amount
    bytec 6 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_publishing_fee(publishing_fee_bps: uint64) -> void:
set_publishing_fee:
    // smart_contracts/xgov_registry_mock/contract.py:215-216
    // @arc4.abimethod()
    // def set_publishing_fee(self, publishing_fee_bps: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:224
    // self.publishing_fee_bps.value = publishing_fee_bps
    bytec 7 // 0x70726f706f73616c5f7075626c697368696e675f627073
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small(discussion_duration: uint64) -> void:
set_discussion_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:226-227
    // @arc4.abimethod()
    // def set_discussion_duration_small(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:235
    // self.discussion_duration_small.value = discussion_duration
    bytec 8 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium(discussion_duration: uint64) -> void:
set_discussion_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:237-238
    // @arc4.abimethod()
    // def set_discussion_duration_medium(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:246
    // self.discussion_duration_medium.value = discussion_duration
    bytec 9 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large(discussion_duration: uint64) -> void:
set_discussion_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:248-249
    // @arc4.abimethod()
    // def set_discussion_duration_large(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:257
    // self.discussion_duration_large.value = discussion_duration
    bytec 10 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_publisher(committee_publisher: bytes) -> void:
set_committee_publisher:
    // smart_contracts/xgov_registry_mock/contract.py:259-260
    // @arc4.abimethod()
    // def set_committee_publisher(self, committee_publisher: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:268
    // self.committee_publisher.value = committee_publisher
    bytec 11 // 0x636f6d6d69747465655f7075626c6973686572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_fee(proposal_fee: uint64) -> void:
set_proposal_fee:
    // smart_contracts/xgov_registry_mock/contract.py:270-271
    // @arc4.abimethod()
    // def set_proposal_fee(self, proposal_fee: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:279
    // self.proposal_fee.value = proposal_fee
    bytec_0 // 0x70726f706f73616c5f666565
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id(committee_id: bytes) -> void:
set_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:281-282
    // @arc4.abimethod()
    // def set_committee_id(self, committee_id: CommitteeId) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:290
    // self.committee_id.value = committee_id.copy()
    bytec_1 // 0x636f6d6d69747465655f6964
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.clear_committee_id() -> void:
clear_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:292-293
    // @arc4.abimethod()
    // def clear_committee_id(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry_mock/contract.py:298
    // self.committee_id.value = CommitteeId.from_bytes(mock_cfg.COMMITTEE_ID)
    bytec_1 // 0x636f6d6d69747465655f6964
    pushbytes 0x
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members(committee_members: uint64) -> void:
set_committee_members:
    // smart_contracts/xgov_registry_mock/contract.py:300-301
    // @arc4.abimethod()
    // def set_committee_members(self, committee_members: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:309
    // self.committee_members.value = committee_members
    bytec 12 // 0x636f6d6d69747465655f6d656d62657273
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes(committee_votes: uint64) -> void:
set_committee_votes:
    // smart_contracts/xgov_registry_mock/contract.py:311-312
    // @arc4.abimethod()
    // def set_committee_votes(self, committee_votes: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:320
    // self.committee_votes.value = committee_votes
    bytec 13 // 0x636f6d6d69747465655f766f746573
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_small(voting_duration: uint64) -> void:
set_voting_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:322-323
    // @arc4.abimethod()
    // def set_voting_duration_small(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:331
    // self.voting_duration_small.value = voting_duration
    bytec 14 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_medium(voting_duration: uint64) -> void:
set_voting_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:333-334
    // @arc4.abimethod()
    // def set_voting_duration_medium(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:342
    // self.voting_duration_medium.value = voting_duration
    bytec 15 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_large(voting_duration: uint64) -> void:
set_voting_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:344-345
    // @arc4.abimethod()
    // def set_voting_duration_large(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:353
    // self.voting_duration_large.value = voting_duration
    bytec 16 // 0x766f74696e675f6475726174696f6e5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_small(quorum: uint64) -> void:
set_quorum_small:
    // smart_contracts/xgov_registry_mock/contract.py:355-356
    // @arc4.abimethod()
    // def set_quorum_small(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:364
    // self.quorum_small.value = quorum
    bytec 17 // 0x71756f72756d5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_medium(quorum: uint64) -> void:
set_quorum_medium:
    // smart_contracts/xgov_registry_mock/contract.py:366-367
    // @arc4.abimethod()
    // def set_quorum_medium(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:375
    // self.quorum_medium.value = quorum
    bytec 18 // 0x71756f72756d5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_large(quorum: uint64) -> void:
set_quorum_large:
    // smart_contracts/xgov_registry_mock/contract.py:377-378
    // @arc4.abimethod()
    // def set_quorum_large(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:386
    // self.quorum_large.value = quorum
    bytec 19 // 0x71756f72756d5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_small(weighted_quorum: uint64) -> void:
set_weighted_quorum_small:
    // smart_contracts/xgov_registry_mock/contract.py:388-389
    // @arc4.abimethod()
    // def set_weighted_quorum_small(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:397
    // self.weighted_quorum_small.value = weighted_quorum
    bytec 20 // 0x77656967687465645f71756f72756d5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_medium(weighted_quorum: uint64) -> void:
set_weighted_quorum_medium:
    // smart_contracts/xgov_registry_mock/contract.py:399-400
    // @arc4.abimethod()
    // def set_weighted_quorum_medium(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:408
    // self.weighted_quorum_medium.value = weighted_quorum
    bytec 21 // 0x77656967687465645f71756f72756d5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_large(weighted_quorum: uint64) -> void:
set_weighted_quorum_large:
    // smart_contracts/xgov_registry_mock/contract.py:410-411
    // @arc4.abimethod()
    // def set_weighted_quorum_large(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:419
    // self.weighted_quorum_large.value = weighted_quorum
    bytec 22 // 0x77656967687465645f71756f72756d5f6c61726765
    frame_dig -1
    app_global_put
    retsub
