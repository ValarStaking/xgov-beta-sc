#pragma version 10

smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.approval_program:
    intcblock 1 0 4 6 1209600 604800 1814400
    bytecblock 0x151f7c75 0x70726f706f73616c5f666565 0x636f6d6d69747465655f6964 "ERR:" "Unauthorized" "Wrong Proposal Status" 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x70726f706f73616c5f7075626c697368696e675f627073 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x636f6d6d69747465655f7075626c6973686572 base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573 0x766f74696e675f6475726174696f6e5f736d616c6c 0x766f74696e675f6475726174696f6e5f6d656469756d 0x766f74696e675f6475726174696f6e5f6c61726765 0x71756f72756d5f736d616c6c 0x71756f72756d5f6d656469756d 0x71756f72756d5f6c61726765 0x77656967687465645f71756f72756d5f736d616c6c 0x77656967687465645f71756f72756d5f6d656469756d 0x77656967687465645f71756f72756d5f6c61726765 0x78676f765f7265766965776572 0x636f6f6c5f646f776e5f6475726174696f6e
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__init__() -> void:
__init__:
    // smart_contracts/xgov_registry_mock/contract.py:23
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry_mock/contract.py:26
    // key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    bytec 6 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    // smart_contracts/xgov_registry_mock/contract.py:25
    // UInt64(mock_cfg.PROPOSAL_COMMITMENT_BPS),
    pushint 100 // 100
    // smart_contracts/xgov_registry_mock/contract.py:24-27
    // self.proposal_commitment_bps = GlobalState(
    //     UInt64(mock_cfg.PROPOSAL_COMMITMENT_BPS),
    //     key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:30
    // key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    bytec 7 // 0x6d696e5f7265717565737465645f616d6f756e74
    // smart_contracts/xgov_registry_mock/contract.py:29
    // UInt64(mock_cfg.MIN_REQUESTED_AMOUNT),
    pushint 10000000000 // 10000000000
    // smart_contracts/xgov_registry_mock/contract.py:28-31
    // self.min_requested_amount = GlobalState(
    //     UInt64(mock_cfg.MIN_REQUESTED_AMOUNT),
    //     key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:34
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    bytec 8 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:33
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    pushint 50000000000 // 50000000000
    // smart_contracts/xgov_registry_mock/contract.py:32-35
    // self.max_requested_amount_small = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:38
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:37
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    pushint 250000000000 // 250000000000
    // smart_contracts/xgov_registry_mock/contract.py:36-39
    // self.max_requested_amount_medium = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:42
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:41
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    pushint 500000000000 // 500000000000
    // smart_contracts/xgov_registry_mock/contract.py:40-43
    // self.max_requested_amount_large = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:46
    // key=reg_cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS,
    bytec 11 // 0x70726f706f73616c5f7075626c697368696e675f627073
    // smart_contracts/xgov_registry_mock/contract.py:45
    // UInt64(mock_cfg.PUBLISHING_FEE_BPS),
    pushint 500 // 500
    // smart_contracts/xgov_registry_mock/contract.py:44-47
    // self.publishing_fee_bps = GlobalState(
    //     UInt64(mock_cfg.PUBLISHING_FEE_BPS),
    //     key=reg_cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:50
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    bytec 12 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:49
    // UInt64(mock_cfg.DISCUSSION_DURATION_SMALL),
    intc 5 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:48-51
    // self.discussion_duration_small = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:54
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:53
    // UInt64(mock_cfg.DISCUSSION_DURATION_MEDIUM),
    intc 4 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:52-55
    // self.discussion_duration_medium = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:58
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:57
    // UInt64(mock_cfg.DISCUSSION_DURATION_LARGE),
    intc 6 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:56-59
    // self.discussion_duration_large = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:62
    // key=reg_cfg.GS_KEY_COMMITTEE_PUBLISHER,
    bytec 15 // 0x636f6d6d69747465655f7075626c6973686572
    // smart_contracts/xgov_registry_mock/contract.py:61
    // arc4.Address(mock_cfg.COMMITTEE_PUBLISHER),
    bytec 16 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // smart_contracts/xgov_registry_mock/contract.py:60-63
    // self.committee_publisher = GlobalState(
    //     arc4.Address(mock_cfg.COMMITTEE_PUBLISHER),
    //     key=reg_cfg.GS_KEY_COMMITTEE_PUBLISHER,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:66
    // key=reg_cfg.GS_KEY_PROPOSAL_FEE,
    bytec_1 // 0x70726f706f73616c5f666565
    // smart_contracts/xgov_registry_mock/contract.py:65
    // UInt64(mock_cfg.PROPOSAL_FEE),
    pushint 100000000 // 100000000
    // smart_contracts/xgov_registry_mock/contract.py:64-67
    // self.proposal_fee = GlobalState(
    //     UInt64(mock_cfg.PROPOSAL_FEE),
    //     key=reg_cfg.GS_KEY_PROPOSAL_FEE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:70
    // key=reg_cfg.GS_KEY_COMMITTEE_ID,
    bytec_2 // 0x636f6d6d69747465655f6964
    // smart_contracts/xgov_registry_mock/contract.py:69
    // Cid.from_bytes(mock_cfg.COMMITTEE_ID),
    pushbytes 0x
    // smart_contracts/xgov_registry_mock/contract.py:68-71
    // self.committee_id = GlobalState(
    //     Cid.from_bytes(mock_cfg.COMMITTEE_ID),
    //     key=reg_cfg.GS_KEY_COMMITTEE_ID,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:74
    // key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    bytec 17 // 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/xgov_registry_mock/contract.py:73
    // UInt64(mock_cfg.COMMITTEE_MEMBERS),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:72-75
    // self.committee_members = GlobalState(
    //     UInt64(mock_cfg.COMMITTEE_MEMBERS),
    //     key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:78
    // key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    bytec 18 // 0x636f6d6d69747465655f766f746573
    // smart_contracts/xgov_registry_mock/contract.py:77
    // UInt64(mock_cfg.COMMITTEE_VOTES),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:76-79
    // self.committee_votes = GlobalState(
    //     UInt64(mock_cfg.COMMITTEE_VOTES),
    //     key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:82
    // key=reg_cfg.GS_KEY_VOTING_DURATION_SMALL,
    bytec 19 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:81
    // UInt64(mock_cfg.VOTING_DURATION_SMALL),
    intc 5 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:80-83
    // self.voting_duration_small = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:86
    // key=reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM,
    bytec 20 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:85
    // UInt64(mock_cfg.VOTING_DURATION_MEDIUM),
    intc 4 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:84-87
    // self.voting_duration_medium = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:90
    // key=reg_cfg.GS_KEY_VOTING_DURATION_LARGE,
    bytec 21 // 0x766f74696e675f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:89
    // UInt64(mock_cfg.VOTING_DURATION_LARGE),
    intc 6 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:88-91
    // self.voting_duration_large = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:94
    // key=reg_cfg.GS_KEY_QUORUM_SMALL,
    bytec 22 // 0x71756f72756d5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:93
    // UInt64(mock_cfg.QUORUM_SMALL_BPS),
    pushint 1000 // 1000
    // smart_contracts/xgov_registry_mock/contract.py:92-95
    // self.quorum_small = GlobalState(
    //     UInt64(mock_cfg.QUORUM_SMALL_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:98
    // key=reg_cfg.GS_KEY_QUORUM_MEDIUM,
    bytec 23 // 0x71756f72756d5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:97
    // UInt64(mock_cfg.QUORUM_MEDIUM_BPS),
    pushint 1500 // 1500
    // smart_contracts/xgov_registry_mock/contract.py:96-99
    // self.quorum_medium = GlobalState(
    //     UInt64(mock_cfg.QUORUM_MEDIUM_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:102
    // key=reg_cfg.GS_KEY_QUORUM_LARGE,
    bytec 24 // 0x71756f72756d5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:101
    // UInt64(mock_cfg.QUORUM_LARGE_BPS),
    pushint 2000 // 2000
    // smart_contracts/xgov_registry_mock/contract.py:100-103
    // self.quorum_large = GlobalState(
    //     UInt64(mock_cfg.QUORUM_LARGE_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:106
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL,
    bytec 25 // 0x77656967687465645f71756f72756d5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:105
    // UInt64(mock_cfg.WEIGHTED_QUORUM_SMALL_BPS),
    pushint 2000 // 2000
    // smart_contracts/xgov_registry_mock/contract.py:104-107
    // self.weighted_quorum_small = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_SMALL_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:110
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM,
    bytec 26 // 0x77656967687465645f71756f72756d5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:109
    // UInt64(mock_cfg.WEIGHTED_QUORUM_MEDIUM_BPS),
    pushint 3000 // 3000
    // smart_contracts/xgov_registry_mock/contract.py:108-111
    // self.weighted_quorum_medium = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_MEDIUM_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:114
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE,
    bytec 27 // 0x77656967687465645f71756f72756d5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:113
    // UInt64(mock_cfg.WEIGHTED_QUORUM_LARGE_BPS),
    pushint 4000 // 4000
    // smart_contracts/xgov_registry_mock/contract.py:112-115
    // self.weighted_quorum_large = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_LARGE_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:118
    // key=reg_cfg.GS_KEY_XGOV_REVIEWER,
    bytec 28 // 0x78676f765f7265766965776572
    // smart_contracts/xgov_registry_mock/contract.py:117
    // arc4.Address(mock_cfg.XGOV_REVIEWER),
    bytec 16 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // smart_contracts/xgov_registry_mock/contract.py:116-119
    // self.xgov_reviewer = GlobalState(
    //     arc4.Address(mock_cfg.XGOV_REVIEWER),
    //     key=reg_cfg.GS_KEY_XGOV_REVIEWER,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:122
    // key=reg_cfg.GS_KEY_COOL_DOWN_DURATION,
    bytec 29 // 0x636f6f6c5f646f776e5f6475726174696f6e
    // smart_contracts/xgov_registry_mock/contract.py:121
    // UInt64(mock_cfg.COOL_DOWN_DURATION),
    intc 4 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:120-123
    // self.cooldown_duration = GlobalState(
    //     UInt64(mock_cfg.COOL_DOWN_DURATION),
    //     key=reg_cfg.GS_KEY_COOL_DOWN_DURATION,
    // )
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@34
    pushbytess 0xc386b03f 0x6811eb76 0x37235b22 0xbbc72d1b 0xd17676d9 0x7cd79aad 0x77152d58 0x29dfd021 0x34a5dc55 0xbb0db011 0xaa348d0d 0x97f1e857 0xb6c22459 0x56ad1c6f 0xf83579fd 0x520e1f64 0x53802148 0xa4f766f6 0xa9998b1d 0x4e9c607c 0x650dfa8b 0xc887f086 0x4af84ea5 0x2c64e86f 0x16acce3b 0x886b3b04 0x11cf9720 0x45f6ca71 0xe23713e9 0x57bf85dc // method "create_empty_proposal(address)uint64", method "set_proposal_commitment_bps(uint64)void", method "set_min_requested_amount(uint64)void", method "set_max_requested_amount_small(uint64)void", method "set_max_requested_amount_medium(uint64)void", method "set_max_requested_amount_large(uint64)void", method "set_publishing_fee(uint64)void", method "set_discussion_duration_small(uint64)void", method "set_discussion_duration_medium(uint64)void", method "set_discussion_duration_large(uint64)void", method "set_committee_publisher(address)void", method "set_proposal_fee(uint64)void", method "set_committee_id(byte[36])void", method "clear_committee_id()void", method "set_committee_members(uint64)void", method "set_committee_votes(uint64)void", method "set_voting_duration_small(uint64)void", method "set_voting_duration_medium(uint64)void", method "set_voting_duration_large(uint64)void", method "set_quorum_small(uint64)void", method "set_quorum_medium(uint64)void", method "set_quorum_large(uint64)void", method "set_weighted_quorum_small(uint64)void", method "set_weighted_quorum_medium(uint64)void", method "set_weighted_quorum_large(uint64)void", method "vote(application,address,uint64,uint64)void", method "set_xgov_reviewer(address)void", method "fund(application)void", method "set_cooldown_duration(uint64)void", method "delete_proposal(application)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_empty_proposal_route@2 __puya_arc4_router___set_proposal_commitment_bps_route@3 __puya_arc4_router___set_min_requested_amount_route@4 __puya_arc4_router___set_max_requested_amount_small_route@5 __puya_arc4_router___set_max_requested_amount_medium_route@6 __puya_arc4_router___set_max_requested_amount_large_route@7 __puya_arc4_router___set_publishing_fee_route@8 __puya_arc4_router___set_discussion_duration_small_route@9 __puya_arc4_router___set_discussion_duration_medium_route@10 __puya_arc4_router___set_discussion_duration_large_route@11 __puya_arc4_router___set_committee_publisher_route@12 __puya_arc4_router___set_proposal_fee_route@13 __puya_arc4_router___set_committee_id_route@14 __puya_arc4_router___clear_committee_id_route@15 __puya_arc4_router___set_committee_members_route@16 __puya_arc4_router___set_committee_votes_route@17 __puya_arc4_router___set_voting_duration_small_route@18 __puya_arc4_router___set_voting_duration_medium_route@19 __puya_arc4_router___set_voting_duration_large_route@20 __puya_arc4_router___set_quorum_small_route@21 __puya_arc4_router___set_quorum_medium_route@22 __puya_arc4_router___set_quorum_large_route@23 __puya_arc4_router___set_weighted_quorum_small_route@24 __puya_arc4_router___set_weighted_quorum_medium_route@25 __puya_arc4_router___set_weighted_quorum_large_route@26 __puya_arc4_router___vote_route@27 __puya_arc4_router___set_xgov_reviewer_route@28 __puya_arc4_router___fund_route@29 __puya_arc4_router___set_cooldown_duration_route@30 __puya_arc4_router___delete_proposal_route@31
    intc_1 // 0
    retsub

__puya_arc4_router___create_empty_proposal_route@2:
    // smart_contracts/xgov_registry_mock/contract.py:125
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:125
    // @arc4.abimethod()
    callsub create_empty_proposal
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___set_proposal_commitment_bps_route@3:
    // smart_contracts/xgov_registry_mock/contract.py:153
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:153
    // @arc4.abimethod()
    callsub set_proposal_commitment_bps
    intc_0 // 1
    retsub

__puya_arc4_router___set_min_requested_amount_route@4:
    // smart_contracts/xgov_registry_mock/contract.py:164
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:164
    // @arc4.abimethod()
    callsub set_min_requested_amount
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_small_route@5:
    // smart_contracts/xgov_registry_mock/contract.py:175
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:175
    // @arc4.abimethod()
    callsub set_max_requested_amount_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_medium_route@6:
    // smart_contracts/xgov_registry_mock/contract.py:186
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:186
    // @arc4.abimethod()
    callsub set_max_requested_amount_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_large_route@7:
    // smart_contracts/xgov_registry_mock/contract.py:197
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:197
    // @arc4.abimethod()
    callsub set_max_requested_amount_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_publishing_fee_route@8:
    // smart_contracts/xgov_registry_mock/contract.py:208
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:208
    // @arc4.abimethod()
    callsub set_publishing_fee
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_small_route@9:
    // smart_contracts/xgov_registry_mock/contract.py:219
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:219
    // @arc4.abimethod()
    callsub set_discussion_duration_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_medium_route@10:
    // smart_contracts/xgov_registry_mock/contract.py:230
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:230
    // @arc4.abimethod()
    callsub set_discussion_duration_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_large_route@11:
    // smart_contracts/xgov_registry_mock/contract.py:241
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:241
    // @arc4.abimethod()
    callsub set_discussion_duration_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_publisher_route@12:
    // smart_contracts/xgov_registry_mock/contract.py:252
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:252
    // @arc4.abimethod()
    callsub set_committee_publisher
    intc_0 // 1
    retsub

__puya_arc4_router___set_proposal_fee_route@13:
    // smart_contracts/xgov_registry_mock/contract.py:263
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:263
    // @arc4.abimethod()
    callsub set_proposal_fee
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_id_route@14:
    // smart_contracts/xgov_registry_mock/contract.py:274
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:274
    // @arc4.abimethod()
    callsub set_committee_id
    intc_0 // 1
    retsub

__puya_arc4_router___clear_committee_id_route@15:
    // smart_contracts/xgov_registry_mock/contract.py:285
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub clear_committee_id
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_members_route@16:
    // smart_contracts/xgov_registry_mock/contract.py:293
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:293
    // @arc4.abimethod()
    callsub set_committee_members
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_votes_route@17:
    // smart_contracts/xgov_registry_mock/contract.py:304
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:304
    // @arc4.abimethod()
    callsub set_committee_votes
    intc_0 // 1
    retsub

__puya_arc4_router___set_voting_duration_small_route@18:
    // smart_contracts/xgov_registry_mock/contract.py:315
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:315
    // @arc4.abimethod()
    callsub set_voting_duration_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_voting_duration_medium_route@19:
    // smart_contracts/xgov_registry_mock/contract.py:326
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:326
    // @arc4.abimethod()
    callsub set_voting_duration_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_voting_duration_large_route@20:
    // smart_contracts/xgov_registry_mock/contract.py:337
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:337
    // @arc4.abimethod()
    callsub set_voting_duration_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_quorum_small_route@21:
    // smart_contracts/xgov_registry_mock/contract.py:348
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:348
    // @arc4.abimethod()
    callsub set_quorum_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_quorum_medium_route@22:
    // smart_contracts/xgov_registry_mock/contract.py:359
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:359
    // @arc4.abimethod()
    callsub set_quorum_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_quorum_large_route@23:
    // smart_contracts/xgov_registry_mock/contract.py:370
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:370
    // @arc4.abimethod()
    callsub set_quorum_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_weighted_quorum_small_route@24:
    // smart_contracts/xgov_registry_mock/contract.py:381
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:381
    // @arc4.abimethod()
    callsub set_weighted_quorum_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_weighted_quorum_medium_route@25:
    // smart_contracts/xgov_registry_mock/contract.py:392
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:392
    // @arc4.abimethod()
    callsub set_weighted_quorum_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_weighted_quorum_large_route@26:
    // smart_contracts/xgov_registry_mock/contract.py:403
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:403
    // @arc4.abimethod()
    callsub set_weighted_quorum_large
    intc_0 // 1
    retsub

__puya_arc4_router___vote_route@27:
    // smart_contracts/xgov_registry_mock/contract.py:414
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/xgov_registry_mock/contract.py:414
    // @arc4.abimethod()
    callsub vote
    intc_0 // 1
    retsub

__puya_arc4_router___set_xgov_reviewer_route@28:
    // smart_contracts/xgov_registry_mock/contract.py:470
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:470
    // @arc4.abimethod()
    callsub set_xgov_reviewer
    intc_0 // 1
    retsub

__puya_arc4_router___fund_route@29:
    // smart_contracts/xgov_registry_mock/contract.py:481
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // smart_contracts/xgov_registry_mock/contract.py:481
    // @arc4.abimethod()
    callsub fund
    intc_0 // 1
    retsub

__puya_arc4_router___set_cooldown_duration_route@30:
    // smart_contracts/xgov_registry_mock/contract.py:511
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:511
    // @arc4.abimethod()
    callsub set_cooldown_duration
    intc_0 // 1
    retsub

__puya_arc4_router___delete_proposal_route@31:
    // smart_contracts/xgov_registry_mock/contract.py:522
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // smart_contracts/xgov_registry_mock/contract.py:522
    // @arc4.abimethod()
    callsub delete_proposal
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@34:
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@38
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@38:
    // smart_contracts/xgov_registry_mock/contract.py:22
    // class XgovRegistryMock(ARC4Contract):
    intc_1 // 0
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal(proposer: bytes) -> uint64:
create_empty_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:125-129
    // @arc4.abimethod()
    // def create_empty_proposal(
    //     self,
    //     proposer: arc4.Address,
    // ) -> UInt64:
    proto 1 1
    // smart_contracts/xgov_registry_mock/contract.py:140-143
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    itxn_begin
    pushint 19 // 19
    itxn_field GlobalNumUint
    intc_2 // 4
    itxn_field GlobalNumByteSlice
    intc_0 // 1
    itxn_field ExtraProgramPages
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(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)
    itxn_field ApprovalProgramPages
    // smart_contracts/xgov_registry_mock/contract.py:141
    // Proposal,
    pushbytes 0xcc694eaa // method "create(address)void"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    // smart_contracts/xgov_registry_mock/contract.py:140-143
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    intc_3 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // smart_contracts/xgov_registry_mock/contract.py:145-149
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.proposal_fee.value - prop_cfg.PROPOSAL_MBR,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry_mock/contract.py:146
    // receiver=res.created_app.address,
    dup
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/xgov_registry_mock/contract.py:147
    // amount=self.proposal_fee.value - prop_cfg.PROPOSAL_MBR,
    intc_1 // 0
    bytec_1 // 0x70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.proposal_fee exists
    pushint 941500 // 941500
    -
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry_mock/contract.py:145
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:148
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:145-149
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.proposal_fee.value - prop_cfg.PROPOSAL_MBR,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry_mock/contract.py:151
    // return res.created_app.id
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps(commitment_bps: uint64) -> void:
set_proposal_commitment_bps:
    // smart_contracts/xgov_registry_mock/contract.py:153-154
    // @arc4.abimethod()
    // def set_proposal_commitment_bps(self, commitment_bps: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:162
    // self.proposal_commitment_bps.value = commitment_bps
    bytec 6 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount(min_requested_amount: uint64) -> void:
set_min_requested_amount:
    // smart_contracts/xgov_registry_mock/contract.py:164-165
    // @arc4.abimethod()
    // def set_min_requested_amount(self, min_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:173
    // self.min_requested_amount.value = min_requested_amount
    bytec 7 // 0x6d696e5f7265717565737465645f616d6f756e74
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small(max_requested_amount: uint64) -> void:
set_max_requested_amount_small:
    // smart_contracts/xgov_registry_mock/contract.py:175-176
    // @arc4.abimethod()
    // def set_max_requested_amount_small(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:184
    // self.max_requested_amount_small.value = max_requested_amount
    bytec 8 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium(max_requested_amount: uint64) -> void:
set_max_requested_amount_medium:
    // smart_contracts/xgov_registry_mock/contract.py:186-187
    // @arc4.abimethod()
    // def set_max_requested_amount_medium(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:195
    // self.max_requested_amount_medium.value = max_requested_amount
    bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large(max_requested_amount: uint64) -> void:
set_max_requested_amount_large:
    // smart_contracts/xgov_registry_mock/contract.py:197-198
    // @arc4.abimethod()
    // def set_max_requested_amount_large(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:206
    // self.max_requested_amount_large.value = max_requested_amount
    bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_publishing_fee(publishing_fee_bps: uint64) -> void:
set_publishing_fee:
    // smart_contracts/xgov_registry_mock/contract.py:208-209
    // @arc4.abimethod()
    // def set_publishing_fee(self, publishing_fee_bps: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:217
    // self.publishing_fee_bps.value = publishing_fee_bps
    bytec 11 // 0x70726f706f73616c5f7075626c697368696e675f627073
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small(discussion_duration: uint64) -> void:
set_discussion_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:219-220
    // @arc4.abimethod()
    // def set_discussion_duration_small(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:228
    // self.discussion_duration_small.value = discussion_duration
    bytec 12 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium(discussion_duration: uint64) -> void:
set_discussion_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:230-231
    // @arc4.abimethod()
    // def set_discussion_duration_medium(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:239
    // self.discussion_duration_medium.value = discussion_duration
    bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large(discussion_duration: uint64) -> void:
set_discussion_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:241-242
    // @arc4.abimethod()
    // def set_discussion_duration_large(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:250
    // self.discussion_duration_large.value = discussion_duration
    bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_publisher(committee_publisher: bytes) -> void:
set_committee_publisher:
    // smart_contracts/xgov_registry_mock/contract.py:252-253
    // @arc4.abimethod()
    // def set_committee_publisher(self, committee_publisher: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:261
    // self.committee_publisher.value = committee_publisher
    bytec 15 // 0x636f6d6d69747465655f7075626c6973686572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_fee(proposal_fee: uint64) -> void:
set_proposal_fee:
    // smart_contracts/xgov_registry_mock/contract.py:263-264
    // @arc4.abimethod()
    // def set_proposal_fee(self, proposal_fee: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:272
    // self.proposal_fee.value = proposal_fee
    bytec_1 // 0x70726f706f73616c5f666565
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id(committee_id: bytes) -> void:
set_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:274-275
    // @arc4.abimethod()
    // def set_committee_id(self, committee_id: Cid) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:283
    // self.committee_id.value = committee_id.copy()
    bytec_2 // 0x636f6d6d69747465655f6964
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.clear_committee_id() -> void:
clear_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:285-286
    // @arc4.abimethod()
    // def clear_committee_id(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry_mock/contract.py:291
    // self.committee_id.value = Cid.from_bytes(mock_cfg.COMMITTEE_ID)
    bytec_2 // 0x636f6d6d69747465655f6964
    pushbytes 0x
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members(committee_members: uint64) -> void:
set_committee_members:
    // smart_contracts/xgov_registry_mock/contract.py:293-294
    // @arc4.abimethod()
    // def set_committee_members(self, committee_members: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:302
    // self.committee_members.value = committee_members
    bytec 17 // 0x636f6d6d69747465655f6d656d62657273
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes(committee_votes: uint64) -> void:
set_committee_votes:
    // smart_contracts/xgov_registry_mock/contract.py:304-305
    // @arc4.abimethod()
    // def set_committee_votes(self, committee_votes: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:313
    // self.committee_votes.value = committee_votes
    bytec 18 // 0x636f6d6d69747465655f766f746573
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_small(voting_duration: uint64) -> void:
set_voting_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:315-316
    // @arc4.abimethod()
    // def set_voting_duration_small(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:324
    // self.voting_duration_small.value = voting_duration
    bytec 19 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_medium(voting_duration: uint64) -> void:
set_voting_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:326-327
    // @arc4.abimethod()
    // def set_voting_duration_medium(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:335
    // self.voting_duration_medium.value = voting_duration
    bytec 20 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_large(voting_duration: uint64) -> void:
set_voting_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:337-338
    // @arc4.abimethod()
    // def set_voting_duration_large(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:346
    // self.voting_duration_large.value = voting_duration
    bytec 21 // 0x766f74696e675f6475726174696f6e5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_small(quorum: uint64) -> void:
set_quorum_small:
    // smart_contracts/xgov_registry_mock/contract.py:348-349
    // @arc4.abimethod()
    // def set_quorum_small(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:357
    // self.quorum_small.value = quorum
    bytec 22 // 0x71756f72756d5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_medium(quorum: uint64) -> void:
set_quorum_medium:
    // smart_contracts/xgov_registry_mock/contract.py:359-360
    // @arc4.abimethod()
    // def set_quorum_medium(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:368
    // self.quorum_medium.value = quorum
    bytec 23 // 0x71756f72756d5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_large(quorum: uint64) -> void:
set_quorum_large:
    // smart_contracts/xgov_registry_mock/contract.py:370-371
    // @arc4.abimethod()
    // def set_quorum_large(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:379
    // self.quorum_large.value = quorum
    bytec 24 // 0x71756f72756d5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_small(weighted_quorum: uint64) -> void:
set_weighted_quorum_small:
    // smart_contracts/xgov_registry_mock/contract.py:381-382
    // @arc4.abimethod()
    // def set_weighted_quorum_small(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:390
    // self.weighted_quorum_small.value = weighted_quorum
    bytec 25 // 0x77656967687465645f71756f72756d5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_medium(weighted_quorum: uint64) -> void:
set_weighted_quorum_medium:
    // smart_contracts/xgov_registry_mock/contract.py:392-393
    // @arc4.abimethod()
    // def set_weighted_quorum_medium(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:401
    // self.weighted_quorum_medium.value = weighted_quorum
    bytec 26 // 0x77656967687465645f71756f72756d5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_large(weighted_quorum: uint64) -> void:
set_weighted_quorum_large:
    // smart_contracts/xgov_registry_mock/contract.py:403-404
    // @arc4.abimethod()
    // def set_weighted_quorum_large(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:412
    // self.weighted_quorum_large.value = weighted_quorum
    bytec 27 // 0x77656967687465645f71756f72756d5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.vote(proposal_app: uint64, voter: bytes, approvals: bytes, rejections: bytes) -> void:
vote:
    // smart_contracts/xgov_registry_mock/contract.py:414-421
    // @arc4.abimethod()
    // def vote(
    //     self,
    //     proposal_app: Application,
    //     voter: arc4.Address,
    //     approvals: arc4.UInt64,
    //     rejections: arc4.UInt64,
    // ) -> None:
    proto 4 0
    // smart_contracts/xgov_registry_mock/contract.py:441-448
    // error, tx = arc4.abi_call(
    //     Proposal.vote,
    //     voter,
    //     approvals,
    //     rejections,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_begin
    frame_dig -4
    itxn_field ApplicationID
    pushbytes 0x1841a0d2 // method "vote(address,uint64,uint64)string"
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:447
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:441-448
    // error, tx = arc4.abi_call(
    //     Proposal.vote,
    //     voter,
    //     approvals,
    //     rejections,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // smart_contracts/xgov_registry_mock/contract.py:450
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 2 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz vote_ternary_false@3
    intc_1 // 0
    b vote_ternary_merge@4

vote_ternary_false@3:
    // smart_contracts/xgov_registry_mock/contract.py:450
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 0
    extract 0 4
    bytec_3 // "ERR:"
    ==

vote_ternary_merge@4:
    // smart_contracts/xgov_registry_mock/contract.py:450
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz vote_after_if_else@14
    // smart_contracts/xgov_registry_mock/contract.py:451
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 1
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 0
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:453
    // case err.UNAUTHORIZED:
    bytec 4 // "Unauthorized"
    // smart_contracts/xgov_registry_mock/contract.py:455
    // case err.VOTER_NOT_FOUND:
    pushbytess "Voter not found" "Voter already voted" "Votes exceeded" "Missing Config" // "Voter not found", "Voter already voted", "Votes exceeded", "Missing Config"
    // smart_contracts/xgov_registry_mock/contract.py:463
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 5 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry_mock/contract.py:465
    // case err.VOTING_PERIOD_EXPIRED:
    pushbytes "Voting Period Expired"
    // smart_contracts/xgov_registry_mock/contract.py:452-468
    // match error_without_prefix:
    //     case err.UNAUTHORIZED:
    //         assert False, err.UNAUTHORIZED  # noqa
    //     case err.VOTER_NOT_FOUND:
    //         assert False, err.VOTER_NOT_FOUND  # noqa
    //     case err.VOTER_ALREADY_VOTED:
    //         assert False, err.VOTER_ALREADY_VOTED  # noqa
    //     case err.VOTES_EXCEEDED:
    //         assert False, err.VOTES_EXCEEDED  # noqa
    //     case err.MISSING_CONFIG:
    //         assert False, err.MISSING_CONFIG  # noqa
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case err.VOTING_PERIOD_EXPIRED:
    //         assert False, err.VOTING_PERIOD_EXPIRED  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 7
    match vote_switch_case_0@6 vote_switch_case_1@7 vote_switch_case_2@8 vote_switch_case_3@9 vote_switch_case_4@10 vote_switch_case_5@11 vote_switch_case_6@12
    // smart_contracts/xgov_registry_mock/contract.py:468
    // assert False, "Unknown error"  # noqa
    err // Unknown error

vote_switch_case_0@6:
    // smart_contracts/xgov_registry_mock/contract.py:454
    // assert False, err.UNAUTHORIZED  # noqa
    err // Unauthorized

vote_switch_case_1@7:
    // smart_contracts/xgov_registry_mock/contract.py:456
    // assert False, err.VOTER_NOT_FOUND  # noqa
    err // Voter not found

vote_switch_case_2@8:
    // smart_contracts/xgov_registry_mock/contract.py:458
    // assert False, err.VOTER_ALREADY_VOTED  # noqa
    err // Voter already voted

vote_switch_case_3@9:
    // smart_contracts/xgov_registry_mock/contract.py:460
    // assert False, err.VOTES_EXCEEDED  # noqa
    err // Votes exceeded

vote_switch_case_4@10:
    // smart_contracts/xgov_registry_mock/contract.py:462
    // assert False, err.MISSING_CONFIG  # noqa
    err // Missing Config

vote_switch_case_5@11:
    // smart_contracts/xgov_registry_mock/contract.py:464
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

vote_switch_case_6@12:
    // smart_contracts/xgov_registry_mock/contract.py:466
    // assert False, err.VOTING_PERIOD_EXPIRED  # noqa
    err // Voting Period Expired

vote_after_if_else@14:
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_reviewer(xgov_reviewer: bytes) -> void:
set_xgov_reviewer:
    // smart_contracts/xgov_registry_mock/contract.py:470-471
    // @arc4.abimethod()
    // def set_xgov_reviewer(self, xgov_reviewer: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:479
    // self.xgov_reviewer.value = xgov_reviewer
    bytec 28 // 0x78676f765f7265766965776572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.fund(proposal_app: uint64) -> void:
fund:
    // smart_contracts/xgov_registry_mock/contract.py:481-482
    // @arc4.abimethod()
    // def fund(self, proposal_app: Application) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:495-499
    // error, tx = arc4.abi_call(
    //     Proposal.fund,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x8a5e4c80 // method "fund()string"
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:498
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:495-499
    // error, tx = arc4.abi_call(
    //     Proposal.fund,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // smart_contracts/xgov_registry_mock/contract.py:501
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 2 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz fund_ternary_false@3
    intc_1 // 0
    b fund_ternary_merge@4

fund_ternary_false@3:
    // smart_contracts/xgov_registry_mock/contract.py:501
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 0
    extract 0 4
    bytec_3 // "ERR:"
    ==

fund_ternary_merge@4:
    // smart_contracts/xgov_registry_mock/contract.py:501
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz fund_after_if_else@9
    // smart_contracts/xgov_registry_mock/contract.py:502
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 1
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 0
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:504
    // case err.UNAUTHORIZED:
    bytec 4 // "Unauthorized"
    // smart_contracts/xgov_registry_mock/contract.py:506
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 5 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry_mock/contract.py:503-509
    // match error_without_prefix:
    //     case err.UNAUTHORIZED:
    //         assert False, err.UNAUTHORIZED  # noqa
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 2
    match fund_switch_case_0@6 fund_switch_case_1@7
    // smart_contracts/xgov_registry_mock/contract.py:509
    // assert False, "Unknown error"  # noqa
    err // Unknown error

fund_switch_case_0@6:
    // smart_contracts/xgov_registry_mock/contract.py:505
    // assert False, err.UNAUTHORIZED  # noqa
    err // Unauthorized

fund_switch_case_1@7:
    // smart_contracts/xgov_registry_mock/contract.py:507
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

fund_after_if_else@9:
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_cooldown_duration(cooldown_duration: uint64) -> void:
set_cooldown_duration:
    // smart_contracts/xgov_registry_mock/contract.py:511-512
    // @arc4.abimethod()
    // def set_cooldown_duration(self, cooldown_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:520
    // self.cooldown_duration.value = cooldown_duration
    bytec 29 // 0x636f6f6c5f646f776e5f6475726174696f6e
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.delete_proposal(proposal_app: uint64) -> void:
delete_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:522-523
    // @arc4.abimethod()
    // def delete_proposal(self, proposal_app: Application) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:524-528
    // error, tx = arc4.abi_call(
    //     Proposal.delete,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_begin
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x1feb95da // method "delete()string"
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:527
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:524-528
    // error, tx = arc4.abi_call(
    //     Proposal.delete,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // smart_contracts/xgov_registry_mock/contract.py:530
    // if error.native.startswith(err.ARC_65_PREFIX):
    extract 2 0
    dup
    len
    dup
    intc_2 // 4
    <
    bz delete_proposal_ternary_false@3
    intc_1 // 0
    b delete_proposal_ternary_merge@4

delete_proposal_ternary_false@3:
    // smart_contracts/xgov_registry_mock/contract.py:530
    // if error.native.startswith(err.ARC_65_PREFIX):
    frame_dig 0
    extract 0 4
    bytec_3 // "ERR:"
    ==

delete_proposal_ternary_merge@4:
    // smart_contracts/xgov_registry_mock/contract.py:530
    // if error.native.startswith(err.ARC_65_PREFIX):
    bz delete_proposal_after_if_else@9
    // smart_contracts/xgov_registry_mock/contract.py:531
    // error_without_prefix = String.from_bytes(error.native.bytes[4:])
    intc_2 // 4
    frame_dig 1
    dup
    cover 2
    >=
    intc_2 // 4
    dig 2
    uncover 2
    select
    frame_dig 0
    swap
    uncover 2
    substring3
    // smart_contracts/xgov_registry_mock/contract.py:533
    // case err.UNAUTHORIZED:
    bytec 4 // "Unauthorized"
    // smart_contracts/xgov_registry_mock/contract.py:535
    // case err.WRONG_PROPOSAL_STATUS:
    bytec 5 // "Wrong Proposal Status"
    // smart_contracts/xgov_registry_mock/contract.py:532-538
    // match error_without_prefix:
    //     case err.UNAUTHORIZED:
    //         assert False, err.UNAUTHORIZED  # noqa
    //     case err.WRONG_PROPOSAL_STATUS:
    //         assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    //     case _:
    //         assert False, "Unknown error"  # noqa
    uncover 2
    match delete_proposal_switch_case_0@6 delete_proposal_switch_case_1@7
    // smart_contracts/xgov_registry_mock/contract.py:538
    // assert False, "Unknown error"  # noqa
    err // Unknown error

delete_proposal_switch_case_0@6:
    // smart_contracts/xgov_registry_mock/contract.py:534
    // assert False, err.UNAUTHORIZED  # noqa
    err // Unauthorized

delete_proposal_switch_case_1@7:
    // smart_contracts/xgov_registry_mock/contract.py:536
    // assert False, err.WRONG_PROPOSAL_STATUS  # noqa
    err // Wrong Proposal Status

delete_proposal_after_if_else@9:
    retsub
