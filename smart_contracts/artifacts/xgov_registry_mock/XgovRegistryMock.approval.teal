#pragma version 10

smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.approval_program:
    intcblock 1 0
    bytecblock 0x636f6d6d69747465655f6964 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x70726f706f73616c5f7075626c697368696e675f627073 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x636f6d6d69747465655f7075626c6973686572 0x70726f706f73616c5f666565 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__init__() -> void:
__init__:
    // smart_contracts/xgov_registry_mock/contract.py:28
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry_mock/contract.py:31
    // Txn.global_num_byte_slice == mock_cfg.GLOBAL_BYTES
    txn GlobalNumByteSlice
    pushint 2 // 2
    ==
    // smart_contracts/xgov_registry_mock/contract.py:29-32
    // # Preconditions
    // assert (
    //     Txn.global_num_byte_slice == mock_cfg.GLOBAL_BYTES
    // ), err.WRONG_GLOBAL_BYTES
    assert // Wrong Global Bytes allocation
    // smart_contracts/xgov_registry_mock/contract.py:33
    // assert Txn.global_num_uint == mock_cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    pushint 12 // 12
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/xgov_registry_mock/contract.py:34
    // assert Txn.local_num_byte_slice == mock_cfg.LOCAL_BYTES, err.WRONG_LOCAL_BYTES
    txn LocalNumByteSlice
    !
    assert // Wrong Local Bytes allocation
    // smart_contracts/xgov_registry_mock/contract.py:35
    // assert Txn.local_num_uint == mock_cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    // smart_contracts/xgov_registry_mock/contract.py:39
    // key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    bytec_1 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    // smart_contracts/xgov_registry_mock/contract.py:38
    // UInt64(mock_cfg.PROPOSAL_COMMITMENT_BPS),
    pushint 100 // 100
    // smart_contracts/xgov_registry_mock/contract.py:37-40
    // self.proposal_commitment_bps = GlobalState(
    //     UInt64(mock_cfg.PROPOSAL_COMMITMENT_BPS),
    //     key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:43
    // key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    bytec_2 // 0x6d696e5f7265717565737465645f616d6f756e74
    // smart_contracts/xgov_registry_mock/contract.py:42
    // UInt64(mock_cfg.MIN_REQUESTED_AMOUNT),
    pushint 10000000000 // 10000000000
    // smart_contracts/xgov_registry_mock/contract.py:41-44
    // self.min_requested_amount = GlobalState(
    //     UInt64(mock_cfg.MIN_REQUESTED_AMOUNT),
    //     key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:47
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    bytec_3 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:46
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    pushint 50000000000 // 50000000000
    // smart_contracts/xgov_registry_mock/contract.py:45-48
    // self.max_requested_amount_small = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:51
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    bytec 4 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:50
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    pushint 250000000000 // 250000000000
    // smart_contracts/xgov_registry_mock/contract.py:49-52
    // self.max_requested_amount_medium = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:55
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    bytec 5 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:54
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    pushint 500000000000 // 500000000000
    // smart_contracts/xgov_registry_mock/contract.py:53-56
    // self.max_requested_amount_large = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:59
    // key=reg_cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS,
    bytec 6 // 0x70726f706f73616c5f7075626c697368696e675f627073
    // smart_contracts/xgov_registry_mock/contract.py:58
    // UInt64(mock_cfg.PUBLISHING_FEE_BPS),
    pushint 500 // 500
    // smart_contracts/xgov_registry_mock/contract.py:57-60
    // self.publishing_fee_bps = GlobalState(
    //     UInt64(mock_cfg.PUBLISHING_FEE_BPS),
    //     key=reg_cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:63
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    bytec 7 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:62
    // UInt64(mock_cfg.DISCUSSION_DURATION_SMALL),
    pushint 604800 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:61-64
    // self.discussion_duration_small = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:67
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    bytec 8 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:66
    // UInt64(mock_cfg.DISCUSSION_DURATION_MEDIUM),
    pushint 1209600 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:65-68
    // self.discussion_duration_medium = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:71
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    bytec 9 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:70
    // UInt64(mock_cfg.DISCUSSION_DURATION_LARGE),
    pushint 1814400 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:69-72
    // self.discussion_duration_large = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:75
    // key=reg_cfg.GS_KEY_COMMITTEE_PUBLISHER,
    bytec 10 // 0x636f6d6d69747465655f7075626c6973686572
    // smart_contracts/xgov_registry_mock/contract.py:74
    // arc4.Address(mock_cfg.COMMITTEE_PUBLISHER),
    pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // smart_contracts/xgov_registry_mock/contract.py:73-76
    // self.committee_publisher = GlobalState(
    //     arc4.Address(mock_cfg.COMMITTEE_PUBLISHER),
    //     key=reg_cfg.GS_KEY_COMMITTEE_PUBLISHER,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:79
    // key=reg_cfg.GS_KEY_PROPOSAL_FEE,
    bytec 11 // 0x70726f706f73616c5f666565
    // smart_contracts/xgov_registry_mock/contract.py:78
    // UInt64(mock_cfg.PROPOSAL_FEE),
    pushint 100000000 // 100000000
    // smart_contracts/xgov_registry_mock/contract.py:77-80
    // self.proposal_fee = GlobalState(
    //     UInt64(mock_cfg.PROPOSAL_FEE),
    //     key=reg_cfg.GS_KEY_PROPOSAL_FEE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:83
    // key=reg_cfg.GS_KEY_COMMITTEE_ID,
    bytec_0 // 0x636f6d6d69747465655f6964
    // smart_contracts/xgov_registry_mock/contract.py:82
    // CommitteeId.from_bytes(mock_cfg.COMMITTEE_ID),
    pushbytes 0x
    // smart_contracts/xgov_registry_mock/contract.py:81-84
    // self.committee_id = GlobalState(
    //     CommitteeId.from_bytes(mock_cfg.COMMITTEE_ID),
    //     key=reg_cfg.GS_KEY_COMMITTEE_ID,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:87
    // key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    bytec 12 // 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/xgov_registry_mock/contract.py:86
    // UInt64(mock_cfg.COMMITTEE_MEMBERS),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:85-88
    // self.committee_members = GlobalState(
    //     UInt64(mock_cfg.COMMITTEE_MEMBERS),
    //     key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:91
    // key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    bytec 13 // 0x636f6d6d69747465655f766f746573
    // smart_contracts/xgov_registry_mock/contract.py:90
    // UInt64(mock_cfg.COMMITTEE_VOTES),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:89-92
    // self.committee_votes = GlobalState(
    //     UInt64(mock_cfg.COMMITTEE_VOTES),
    //     key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    // )
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@20
    pushbytess 0xc386b03f 0x6811eb76 0x37235b22 0xbbc72d1b 0xd17676d9 0x7cd79aad 0x77152d58 0x29dfd021 0x34a5dc55 0xbb0db011 0xaa348d0d 0x97f1e857 0x504c31b9 0x56ad1c6f 0xf83579fd 0x520e1f64 // method "create_empty_proposal(address)uint64", method "set_proposal_commitment_bps(uint64)void", method "set_min_requested_amount(uint64)void", method "set_max_requested_amount_small(uint64)void", method "set_max_requested_amount_medium(uint64)void", method "set_max_requested_amount_large(uint64)void", method "set_publishing_fee(uint64)void", method "set_discussion_duration_small(uint64)void", method "set_discussion_duration_medium(uint64)void", method "set_discussion_duration_large(uint64)void", method "set_committee_publisher(address)void", method "set_proposal_fee(uint64)void", method "set_committee_id(byte[32])void", method "clear_committee_id()void", method "set_committee_members(uint64)void", method "set_committee_votes(uint64)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_empty_proposal_route@2 __puya_arc4_router___set_proposal_commitment_bps_route@3 __puya_arc4_router___set_min_requested_amount_route@4 __puya_arc4_router___set_max_requested_amount_small_route@5 __puya_arc4_router___set_max_requested_amount_medium_route@6 __puya_arc4_router___set_max_requested_amount_large_route@7 __puya_arc4_router___set_publishing_fee_route@8 __puya_arc4_router___set_discussion_duration_small_route@9 __puya_arc4_router___set_discussion_duration_medium_route@10 __puya_arc4_router___set_discussion_duration_large_route@11 __puya_arc4_router___set_committee_publisher_route@12 __puya_arc4_router___set_proposal_fee_route@13 __puya_arc4_router___set_committee_id_route@14 __puya_arc4_router___clear_committee_id_route@15 __puya_arc4_router___set_committee_members_route@16 __puya_arc4_router___set_committee_votes_route@17
    intc_1 // 0
    retsub

__puya_arc4_router___create_empty_proposal_route@2:
    // smart_contracts/xgov_registry_mock/contract.py:94
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:94
    // @arc4.abimethod()
    callsub create_empty_proposal
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___set_proposal_commitment_bps_route@3:
    // smart_contracts/xgov_registry_mock/contract.py:116
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:116
    // @arc4.abimethod()
    callsub set_proposal_commitment_bps
    intc_0 // 1
    retsub

__puya_arc4_router___set_min_requested_amount_route@4:
    // smart_contracts/xgov_registry_mock/contract.py:127
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:127
    // @arc4.abimethod()
    callsub set_min_requested_amount
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_small_route@5:
    // smart_contracts/xgov_registry_mock/contract.py:138
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:138
    // @arc4.abimethod()
    callsub set_max_requested_amount_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_medium_route@6:
    // smart_contracts/xgov_registry_mock/contract.py:149
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:149
    // @arc4.abimethod()
    callsub set_max_requested_amount_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_large_route@7:
    // smart_contracts/xgov_registry_mock/contract.py:160
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:160
    // @arc4.abimethod()
    callsub set_max_requested_amount_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_publishing_fee_route@8:
    // smart_contracts/xgov_registry_mock/contract.py:171
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:171
    // @arc4.abimethod()
    callsub set_publishing_fee
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_small_route@9:
    // smart_contracts/xgov_registry_mock/contract.py:182
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:182
    // @arc4.abimethod()
    callsub set_discussion_duration_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_medium_route@10:
    // smart_contracts/xgov_registry_mock/contract.py:193
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:193
    // @arc4.abimethod()
    callsub set_discussion_duration_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_large_route@11:
    // smart_contracts/xgov_registry_mock/contract.py:204
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:204
    // @arc4.abimethod()
    callsub set_discussion_duration_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_publisher_route@12:
    // smart_contracts/xgov_registry_mock/contract.py:215
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:215
    // @arc4.abimethod()
    callsub set_committee_publisher
    intc_0 // 1
    retsub

__puya_arc4_router___set_proposal_fee_route@13:
    // smart_contracts/xgov_registry_mock/contract.py:226
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:226
    // @arc4.abimethod()
    callsub set_proposal_fee
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_id_route@14:
    // smart_contracts/xgov_registry_mock/contract.py:237
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:237
    // @arc4.abimethod()
    callsub set_committee_id
    intc_0 // 1
    retsub

__puya_arc4_router___clear_committee_id_route@15:
    // smart_contracts/xgov_registry_mock/contract.py:248
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub clear_committee_id
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_members_route@16:
    // smart_contracts/xgov_registry_mock/contract.py:256
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:256
    // @arc4.abimethod()
    callsub set_committee_members
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_votes_route@17:
    // smart_contracts/xgov_registry_mock/contract.py:267
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:267
    // @arc4.abimethod()
    callsub set_committee_votes
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@20:
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@24
    txn ApplicationID
    !
    assert // is creating
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@24:
    // smart_contracts/xgov_registry_mock/contract.py:19-27
    // class XgovRegistryMock(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=mock_cfg.GLOBAL_BYTES,
    //         global_uints=mock_cfg.GLOBAL_UINTS,
    //         local_bytes=mock_cfg.LOCAL_BYTES,
    //         local_uints=mock_cfg.LOCAL_UINTS,
    //     ),
    // ):
    intc_1 // 0
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal(proposer: bytes) -> uint64:
create_empty_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:94-98
    // @arc4.abimethod()
    // def create_empty_proposal(
    //     self,
    //     proposer: arc4.Address,
    // ) -> UInt64:
    proto 1 1
    // smart_contracts/xgov_registry_mock/contract.py:109-112
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    itxn_begin
    pushint 18 // 18
    itxn_field GlobalNumUint
    pushint 5 // 5
    itxn_field GlobalNumByteSlice
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(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)
    itxn_field ApprovalProgramPages
    // smart_contracts/xgov_registry_mock/contract.py:110
    // Proposal,
    pushbytes 0xcc694eaa // method "create(address)void"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    // smart_contracts/xgov_registry_mock/contract.py:109-112
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    pushint 6 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // smart_contracts/xgov_registry_mock/contract.py:114
    // return res.created_app.id
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps(commitment_bps: uint64) -> void:
set_proposal_commitment_bps:
    // smart_contracts/xgov_registry_mock/contract.py:116-117
    // @arc4.abimethod()
    // def set_proposal_commitment_bps(self, commitment_bps: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:125
    // self.proposal_commitment_bps.value = commitment_bps
    bytec_1 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount(min_requested_amount: uint64) -> void:
set_min_requested_amount:
    // smart_contracts/xgov_registry_mock/contract.py:127-128
    // @arc4.abimethod()
    // def set_min_requested_amount(self, min_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:136
    // self.min_requested_amount.value = min_requested_amount
    bytec_2 // 0x6d696e5f7265717565737465645f616d6f756e74
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small(max_requested_amount: uint64) -> void:
set_max_requested_amount_small:
    // smart_contracts/xgov_registry_mock/contract.py:138-139
    // @arc4.abimethod()
    // def set_max_requested_amount_small(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:147
    // self.max_requested_amount_small.value = max_requested_amount
    bytec_3 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium(max_requested_amount: uint64) -> void:
set_max_requested_amount_medium:
    // smart_contracts/xgov_registry_mock/contract.py:149-150
    // @arc4.abimethod()
    // def set_max_requested_amount_medium(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:158
    // self.max_requested_amount_medium.value = max_requested_amount
    bytec 4 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large(max_requested_amount: uint64) -> void:
set_max_requested_amount_large:
    // smart_contracts/xgov_registry_mock/contract.py:160-161
    // @arc4.abimethod()
    // def set_max_requested_amount_large(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:169
    // self.max_requested_amount_large.value = max_requested_amount
    bytec 5 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_publishing_fee(publishing_fee_bps: uint64) -> void:
set_publishing_fee:
    // smart_contracts/xgov_registry_mock/contract.py:171-172
    // @arc4.abimethod()
    // def set_publishing_fee(self, publishing_fee_bps: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:180
    // self.publishing_fee_bps.value = publishing_fee_bps
    bytec 6 // 0x70726f706f73616c5f7075626c697368696e675f627073
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small(discussion_duration: uint64) -> void:
set_discussion_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:182-183
    // @arc4.abimethod()
    // def set_discussion_duration_small(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:191
    // self.discussion_duration_small.value = discussion_duration
    bytec 7 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium(discussion_duration: uint64) -> void:
set_discussion_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:193-194
    // @arc4.abimethod()
    // def set_discussion_duration_medium(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:202
    // self.discussion_duration_medium.value = discussion_duration
    bytec 8 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large(discussion_duration: uint64) -> void:
set_discussion_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:204-205
    // @arc4.abimethod()
    // def set_discussion_duration_large(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:213
    // self.discussion_duration_large.value = discussion_duration
    bytec 9 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_publisher(committee_publisher: bytes) -> void:
set_committee_publisher:
    // smart_contracts/xgov_registry_mock/contract.py:215-216
    // @arc4.abimethod()
    // def set_committee_publisher(self, committee_publisher: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:224
    // self.committee_publisher.value = committee_publisher
    bytec 10 // 0x636f6d6d69747465655f7075626c6973686572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_fee(proposal_fee: uint64) -> void:
set_proposal_fee:
    // smart_contracts/xgov_registry_mock/contract.py:226-227
    // @arc4.abimethod()
    // def set_proposal_fee(self, proposal_fee: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:235
    // self.proposal_fee.value = proposal_fee
    bytec 11 // 0x70726f706f73616c5f666565
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id(committee_id: bytes) -> void:
set_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:237-238
    // @arc4.abimethod()
    // def set_committee_id(self, committee_id: CommitteeId) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:246
    // self.committee_id.value = committee_id.copy()
    bytec_0 // 0x636f6d6d69747465655f6964
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.clear_committee_id() -> void:
clear_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:248-249
    // @arc4.abimethod()
    // def clear_committee_id(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry_mock/contract.py:254
    // self.committee_id.value = CommitteeId.from_bytes(mock_cfg.COMMITTEE_ID)
    bytec_0 // 0x636f6d6d69747465655f6964
    pushbytes 0x
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members(committee_members: uint64) -> void:
set_committee_members:
    // smart_contracts/xgov_registry_mock/contract.py:256-257
    // @arc4.abimethod()
    // def set_committee_members(self, committee_members: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:265
    // self.committee_members.value = committee_members
    bytec 12 // 0x636f6d6d69747465655f6d656d62657273
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes(committee_votes: uint64) -> void:
set_committee_votes:
    // smart_contracts/xgov_registry_mock/contract.py:267-268
    // @arc4.abimethod()
    // def set_committee_votes(self, committee_votes: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:276
    // self.committee_votes.value = committee_votes
    bytec 13 // 0x636f6d6d69747465655f766f746573
    frame_dig -1
    app_global_put
    retsub
