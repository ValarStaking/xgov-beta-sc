#pragma version 10

smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.approval_program:
    intcblock 1 0 604800 1209600 1814400
    bytecblock 0x70726f706f73616c5f666565 0x636f6d6d69747465655f6964 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x70726f706f73616c5f7075626c697368696e675f627073 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x636f6d6d69747465655f7075626c6973686572 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573 0x766f74696e675f6475726174696f6e5f736d616c6c 0x766f74696e675f6475726174696f6e5f6d656469756d 0x766f74696e675f6475726174696f6e5f6c61726765 0x71756f72756d5f736d616c6c 0x71756f72756d5f6d656469756d 0x71756f72756d5f6c61726765 0x77656967687465645f71756f72756d5f736d616c6c 0x77656967687465645f71756f72756d5f6d656469756d 0x77656967687465645f71756f72756d5f6c61726765 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__init__() -> void:
__init__:
    // smart_contracts/xgov_registry_mock/contract.py:21
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry_mock/contract.py:24
    // key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    bytec_2 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    // smart_contracts/xgov_registry_mock/contract.py:23
    // UInt64(mock_cfg.PROPOSAL_COMMITMENT_BPS),
    pushint 100 // 100
    // smart_contracts/xgov_registry_mock/contract.py:22-25
    // self.proposal_commitment_bps = GlobalState(
    //     UInt64(mock_cfg.PROPOSAL_COMMITMENT_BPS),
    //     key=reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:28
    // key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    bytec_3 // 0x6d696e5f7265717565737465645f616d6f756e74
    // smart_contracts/xgov_registry_mock/contract.py:27
    // UInt64(mock_cfg.MIN_REQUESTED_AMOUNT),
    pushint 10000000000 // 10000000000
    // smart_contracts/xgov_registry_mock/contract.py:26-29
    // self.min_requested_amount = GlobalState(
    //     UInt64(mock_cfg.MIN_REQUESTED_AMOUNT),
    //     key=reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:32
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    bytec 4 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:31
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    pushint 50000000000 // 50000000000
    // smart_contracts/xgov_registry_mock/contract.py:30-33
    // self.max_requested_amount_small = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_SMALL),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:36
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    bytec 5 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:35
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    pushint 250000000000 // 250000000000
    // smart_contracts/xgov_registry_mock/contract.py:34-37
    // self.max_requested_amount_medium = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_MEDIUM),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:40
    // key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    bytec 6 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:39
    // UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    pushint 500000000000 // 500000000000
    // smart_contracts/xgov_registry_mock/contract.py:38-41
    // self.max_requested_amount_large = GlobalState(
    //     UInt64(mock_cfg.MAX_REQUESTED_AMOUNT_LARGE),
    //     key=reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:44
    // key=reg_cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS,
    bytec 7 // 0x70726f706f73616c5f7075626c697368696e675f627073
    // smart_contracts/xgov_registry_mock/contract.py:43
    // UInt64(mock_cfg.PUBLISHING_FEE_BPS),
    pushint 500 // 500
    // smart_contracts/xgov_registry_mock/contract.py:42-45
    // self.publishing_fee_bps = GlobalState(
    //     UInt64(mock_cfg.PUBLISHING_FEE_BPS),
    //     key=reg_cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:48
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    bytec 8 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:47
    // UInt64(mock_cfg.DISCUSSION_DURATION_SMALL),
    intc_2 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:46-49
    // self.discussion_duration_small = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:52
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    bytec 9 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:51
    // UInt64(mock_cfg.DISCUSSION_DURATION_MEDIUM),
    intc_3 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:50-53
    // self.discussion_duration_medium = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:56
    // key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    bytec 10 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:55
    // UInt64(mock_cfg.DISCUSSION_DURATION_LARGE),
    intc 4 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:54-57
    // self.discussion_duration_large = GlobalState(
    //     UInt64(mock_cfg.DISCUSSION_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:60
    // key=reg_cfg.GS_KEY_COMMITTEE_PUBLISHER,
    bytec 11 // 0x636f6d6d69747465655f7075626c6973686572
    // smart_contracts/xgov_registry_mock/contract.py:59
    // arc4.Address(mock_cfg.COMMITTEE_PUBLISHER),
    pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
    // smart_contracts/xgov_registry_mock/contract.py:58-61
    // self.committee_publisher = GlobalState(
    //     arc4.Address(mock_cfg.COMMITTEE_PUBLISHER),
    //     key=reg_cfg.GS_KEY_COMMITTEE_PUBLISHER,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:64
    // key=reg_cfg.GS_KEY_PROPOSAL_FEE,
    bytec_0 // 0x70726f706f73616c5f666565
    // smart_contracts/xgov_registry_mock/contract.py:63
    // UInt64(mock_cfg.PROPOSAL_FEE),
    pushint 100000000 // 100000000
    // smart_contracts/xgov_registry_mock/contract.py:62-65
    // self.proposal_fee = GlobalState(
    //     UInt64(mock_cfg.PROPOSAL_FEE),
    //     key=reg_cfg.GS_KEY_PROPOSAL_FEE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:68
    // key=reg_cfg.GS_KEY_COMMITTEE_ID,
    bytec_1 // 0x636f6d6d69747465655f6964
    // smart_contracts/xgov_registry_mock/contract.py:67
    // CommitteeId.from_bytes(mock_cfg.COMMITTEE_ID),
    pushbytes 0x
    // smart_contracts/xgov_registry_mock/contract.py:66-69
    // self.committee_id = GlobalState(
    //     CommitteeId.from_bytes(mock_cfg.COMMITTEE_ID),
    //     key=reg_cfg.GS_KEY_COMMITTEE_ID,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:72
    // key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    bytec 12 // 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/xgov_registry_mock/contract.py:71
    // UInt64(mock_cfg.COMMITTEE_MEMBERS),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:70-73
    // self.committee_members = GlobalState(
    //     UInt64(mock_cfg.COMMITTEE_MEMBERS),
    //     key=reg_cfg.GS_KEY_COMMITTEE_MEMBERS,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:76
    // key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    bytec 13 // 0x636f6d6d69747465655f766f746573
    // smart_contracts/xgov_registry_mock/contract.py:75
    // UInt64(mock_cfg.COMMITTEE_VOTES),
    intc_1 // 0
    // smart_contracts/xgov_registry_mock/contract.py:74-77
    // self.committee_votes = GlobalState(
    //     UInt64(mock_cfg.COMMITTEE_VOTES),
    //     key=reg_cfg.GS_KEY_COMMITTEE_VOTES,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:80
    // key=reg_cfg.GS_KEY_VOTING_DURATION_SMALL,
    bytec 14 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:79
    // UInt64(mock_cfg.VOTING_DURATION_SMALL),
    intc_2 // 604800
    // smart_contracts/xgov_registry_mock/contract.py:78-81
    // self.voting_duration_small = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_SMALL),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:84
    // key=reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM,
    bytec 15 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:83
    // UInt64(mock_cfg.VOTING_DURATION_MEDIUM),
    intc_3 // 1209600
    // smart_contracts/xgov_registry_mock/contract.py:82-85
    // self.voting_duration_medium = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_MEDIUM),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:88
    // key=reg_cfg.GS_KEY_VOTING_DURATION_LARGE,
    bytec 16 // 0x766f74696e675f6475726174696f6e5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:87
    // UInt64(mock_cfg.VOTING_DURATION_LARGE),
    intc 4 // 1814400
    // smart_contracts/xgov_registry_mock/contract.py:86-89
    // self.voting_duration_large = GlobalState(
    //     UInt64(mock_cfg.VOTING_DURATION_LARGE),
    //     key=reg_cfg.GS_KEY_VOTING_DURATION_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:92
    // key=reg_cfg.GS_KEY_QUORUM_SMALL,
    bytec 17 // 0x71756f72756d5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:91
    // UInt64(mock_cfg.QUORUM_SMALL_BPS),
    pushint 1000 // 1000
    // smart_contracts/xgov_registry_mock/contract.py:90-93
    // self.quorum_small = GlobalState(
    //     UInt64(mock_cfg.QUORUM_SMALL_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:96
    // key=reg_cfg.GS_KEY_QUORUM_MEDIUM,
    bytec 18 // 0x71756f72756d5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:95
    // UInt64(mock_cfg.QUORUM_MEDIUM_BPS),
    pushint 1500 // 1500
    // smart_contracts/xgov_registry_mock/contract.py:94-97
    // self.quorum_medium = GlobalState(
    //     UInt64(mock_cfg.QUORUM_MEDIUM_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:100
    // key=reg_cfg.GS_KEY_QUORUM_LARGE,
    bytec 19 // 0x71756f72756d5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:99
    // UInt64(mock_cfg.QUORUM_LARGE_BPS),
    pushint 2000 // 2000
    // smart_contracts/xgov_registry_mock/contract.py:98-101
    // self.quorum_large = GlobalState(
    //     UInt64(mock_cfg.QUORUM_LARGE_BPS),
    //     key=reg_cfg.GS_KEY_QUORUM_LARGE,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:104
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL,
    bytec 20 // 0x77656967687465645f71756f72756d5f736d616c6c
    // smart_contracts/xgov_registry_mock/contract.py:103
    // UInt64(mock_cfg.WEIGHTED_QUORUM_SMALL_BPS),
    pushint 2000 // 2000
    // smart_contracts/xgov_registry_mock/contract.py:102-105
    // self.weighted_quorum_small = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_SMALL_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:108
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM,
    bytec 21 // 0x77656967687465645f71756f72756d5f6d656469756d
    // smart_contracts/xgov_registry_mock/contract.py:107
    // UInt64(mock_cfg.WEIGHTED_QUORUM_MEDIUM_BPS),
    pushint 3000 // 3000
    // smart_contracts/xgov_registry_mock/contract.py:106-109
    // self.weighted_quorum_medium = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_MEDIUM_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM,
    // )
    app_global_put
    // smart_contracts/xgov_registry_mock/contract.py:112
    // key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE,
    bytec 22 // 0x77656967687465645f71756f72756d5f6c61726765
    // smart_contracts/xgov_registry_mock/contract.py:111
    // UInt64(mock_cfg.WEIGHTED_QUORUM_LARGE_BPS),
    pushint 4000 // 4000
    // smart_contracts/xgov_registry_mock/contract.py:110-113
    // self.weighted_quorum_large = GlobalState(
    //     UInt64(mock_cfg.WEIGHTED_QUORUM_LARGE_BPS),
    //     key=reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE,
    // )
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@30
    pushbytess 0xc386b03f 0x6811eb76 0x37235b22 0xbbc72d1b 0xd17676d9 0x7cd79aad 0x77152d58 0x29dfd021 0x34a5dc55 0xbb0db011 0xaa348d0d 0x97f1e857 0x504c31b9 0x56ad1c6f 0xf83579fd 0x520e1f64 0x53802148 0xa4f766f6 0xa9998b1d 0x4e9c607c 0x650dfa8b 0xc887f086 0x4af84ea5 0x2c64e86f 0x16acce3b 0x886b3b04 // method "create_empty_proposal(address)uint64", method "set_proposal_commitment_bps(uint64)void", method "set_min_requested_amount(uint64)void", method "set_max_requested_amount_small(uint64)void", method "set_max_requested_amount_medium(uint64)void", method "set_max_requested_amount_large(uint64)void", method "set_publishing_fee(uint64)void", method "set_discussion_duration_small(uint64)void", method "set_discussion_duration_medium(uint64)void", method "set_discussion_duration_large(uint64)void", method "set_committee_publisher(address)void", method "set_proposal_fee(uint64)void", method "set_committee_id(byte[32])void", method "clear_committee_id()void", method "set_committee_members(uint64)void", method "set_committee_votes(uint64)void", method "set_voting_duration_small(uint64)void", method "set_voting_duration_medium(uint64)void", method "set_voting_duration_large(uint64)void", method "set_quorum_small(uint64)void", method "set_quorum_medium(uint64)void", method "set_quorum_large(uint64)void", method "set_weighted_quorum_small(uint64)void", method "set_weighted_quorum_medium(uint64)void", method "set_weighted_quorum_large(uint64)void", method "vote(application,address,uint64,uint64)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_empty_proposal_route@2 __puya_arc4_router___set_proposal_commitment_bps_route@3 __puya_arc4_router___set_min_requested_amount_route@4 __puya_arc4_router___set_max_requested_amount_small_route@5 __puya_arc4_router___set_max_requested_amount_medium_route@6 __puya_arc4_router___set_max_requested_amount_large_route@7 __puya_arc4_router___set_publishing_fee_route@8 __puya_arc4_router___set_discussion_duration_small_route@9 __puya_arc4_router___set_discussion_duration_medium_route@10 __puya_arc4_router___set_discussion_duration_large_route@11 __puya_arc4_router___set_committee_publisher_route@12 __puya_arc4_router___set_proposal_fee_route@13 __puya_arc4_router___set_committee_id_route@14 __puya_arc4_router___clear_committee_id_route@15 __puya_arc4_router___set_committee_members_route@16 __puya_arc4_router___set_committee_votes_route@17 __puya_arc4_router___set_voting_duration_small_route@18 __puya_arc4_router___set_voting_duration_medium_route@19 __puya_arc4_router___set_voting_duration_large_route@20 __puya_arc4_router___set_quorum_small_route@21 __puya_arc4_router___set_quorum_medium_route@22 __puya_arc4_router___set_quorum_large_route@23 __puya_arc4_router___set_weighted_quorum_small_route@24 __puya_arc4_router___set_weighted_quorum_medium_route@25 __puya_arc4_router___set_weighted_quorum_large_route@26 __puya_arc4_router___vote_route@27
    intc_1 // 0
    retsub

__puya_arc4_router___create_empty_proposal_route@2:
    // smart_contracts/xgov_registry_mock/contract.py:115
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:115
    // @arc4.abimethod()
    callsub create_empty_proposal
    itob
    bytec 23 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___set_proposal_commitment_bps_route@3:
    // smart_contracts/xgov_registry_mock/contract.py:143
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:143
    // @arc4.abimethod()
    callsub set_proposal_commitment_bps
    intc_0 // 1
    retsub

__puya_arc4_router___set_min_requested_amount_route@4:
    // smart_contracts/xgov_registry_mock/contract.py:154
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:154
    // @arc4.abimethod()
    callsub set_min_requested_amount
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_small_route@5:
    // smart_contracts/xgov_registry_mock/contract.py:165
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:165
    // @arc4.abimethod()
    callsub set_max_requested_amount_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_medium_route@6:
    // smart_contracts/xgov_registry_mock/contract.py:176
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:176
    // @arc4.abimethod()
    callsub set_max_requested_amount_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_max_requested_amount_large_route@7:
    // smart_contracts/xgov_registry_mock/contract.py:187
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:187
    // @arc4.abimethod()
    callsub set_max_requested_amount_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_publishing_fee_route@8:
    // smart_contracts/xgov_registry_mock/contract.py:198
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:198
    // @arc4.abimethod()
    callsub set_publishing_fee
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_small_route@9:
    // smart_contracts/xgov_registry_mock/contract.py:209
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:209
    // @arc4.abimethod()
    callsub set_discussion_duration_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_medium_route@10:
    // smart_contracts/xgov_registry_mock/contract.py:220
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:220
    // @arc4.abimethod()
    callsub set_discussion_duration_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_discussion_duration_large_route@11:
    // smart_contracts/xgov_registry_mock/contract.py:231
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:231
    // @arc4.abimethod()
    callsub set_discussion_duration_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_publisher_route@12:
    // smart_contracts/xgov_registry_mock/contract.py:242
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:242
    // @arc4.abimethod()
    callsub set_committee_publisher
    intc_0 // 1
    retsub

__puya_arc4_router___set_proposal_fee_route@13:
    // smart_contracts/xgov_registry_mock/contract.py:253
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:253
    // @arc4.abimethod()
    callsub set_proposal_fee
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_id_route@14:
    // smart_contracts/xgov_registry_mock/contract.py:264
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/xgov_registry_mock/contract.py:264
    // @arc4.abimethod()
    callsub set_committee_id
    intc_0 // 1
    retsub

__puya_arc4_router___clear_committee_id_route@15:
    // smart_contracts/xgov_registry_mock/contract.py:275
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub clear_committee_id
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_members_route@16:
    // smart_contracts/xgov_registry_mock/contract.py:283
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:283
    // @arc4.abimethod()
    callsub set_committee_members
    intc_0 // 1
    retsub

__puya_arc4_router___set_committee_votes_route@17:
    // smart_contracts/xgov_registry_mock/contract.py:294
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:294
    // @arc4.abimethod()
    callsub set_committee_votes
    intc_0 // 1
    retsub

__puya_arc4_router___set_voting_duration_small_route@18:
    // smart_contracts/xgov_registry_mock/contract.py:305
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:305
    // @arc4.abimethod()
    callsub set_voting_duration_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_voting_duration_medium_route@19:
    // smart_contracts/xgov_registry_mock/contract.py:316
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:316
    // @arc4.abimethod()
    callsub set_voting_duration_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_voting_duration_large_route@20:
    // smart_contracts/xgov_registry_mock/contract.py:327
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:327
    // @arc4.abimethod()
    callsub set_voting_duration_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_quorum_small_route@21:
    // smart_contracts/xgov_registry_mock/contract.py:338
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:338
    // @arc4.abimethod()
    callsub set_quorum_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_quorum_medium_route@22:
    // smart_contracts/xgov_registry_mock/contract.py:349
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:349
    // @arc4.abimethod()
    callsub set_quorum_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_quorum_large_route@23:
    // smart_contracts/xgov_registry_mock/contract.py:360
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:360
    // @arc4.abimethod()
    callsub set_quorum_large
    intc_0 // 1
    retsub

__puya_arc4_router___set_weighted_quorum_small_route@24:
    // smart_contracts/xgov_registry_mock/contract.py:371
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:371
    // @arc4.abimethod()
    callsub set_weighted_quorum_small
    intc_0 // 1
    retsub

__puya_arc4_router___set_weighted_quorum_medium_route@25:
    // smart_contracts/xgov_registry_mock/contract.py:382
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:382
    // @arc4.abimethod()
    callsub set_weighted_quorum_medium
    intc_0 // 1
    retsub

__puya_arc4_router___set_weighted_quorum_large_route@26:
    // smart_contracts/xgov_registry_mock/contract.py:393
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/xgov_registry_mock/contract.py:393
    // @arc4.abimethod()
    callsub set_weighted_quorum_large
    intc_0 // 1
    retsub

__puya_arc4_router___vote_route@27:
    // smart_contracts/xgov_registry_mock/contract.py:404
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/xgov_registry_mock/contract.py:404
    // @arc4.abimethod()
    callsub vote
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@30:
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@34
    txn ApplicationID
    !
    assert // is creating
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@34:
    // smart_contracts/xgov_registry_mock/contract.py:20
    // class XgovRegistryMock(ARC4Contract):
    intc_1 // 0
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal(proposer: bytes) -> uint64:
create_empty_proposal:
    // smart_contracts/xgov_registry_mock/contract.py:115-119
    // @arc4.abimethod()
    // def create_empty_proposal(
    //     self,
    //     proposer: arc4.Address,
    // ) -> UInt64:
    proto 1 1
    // smart_contracts/xgov_registry_mock/contract.py:130-133
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    itxn_begin
    pushint 20 // 20
    itxn_field GlobalNumUint
    pushint 5 // 5
    itxn_field GlobalNumByteSlice
    intc_0 // 1
    itxn_field ExtraProgramPages
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(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)
    itxn_field ApprovalProgramPages
    // smart_contracts/xgov_registry_mock/contract.py:131
    // Proposal,
    pushbytes 0xcc694eaa // method "create(address)void"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    // smart_contracts/xgov_registry_mock/contract.py:130-133
    // res = arc4.arc4_create(
    //     Proposal,
    //     proposer,
    // )
    pushint 6 // appl
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // smart_contracts/xgov_registry_mock/contract.py:135-139
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.proposal_fee.value - prop_cfg.PROPOSAL_MBR,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/xgov_registry_mock/contract.py:136
    // receiver=res.created_app.address,
    dup
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/xgov_registry_mock/contract.py:137
    // amount=self.proposal_fee.value - prop_cfg.PROPOSAL_MBR,
    intc_1 // 0
    bytec_0 // 0x70726f706f73616c5f666565
    app_global_get_ex
    assert // check self.proposal_fee exists
    pushint 1020000 // 1020000
    -
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/xgov_registry_mock/contract.py:135
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:138
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:135-139
    // itxn.Payment(
    //     receiver=res.created_app.address,
    //     amount=self.proposal_fee.value - prop_cfg.PROPOSAL_MBR,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/xgov_registry_mock/contract.py:141
    // return res.created_app.id
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps(commitment_bps: uint64) -> void:
set_proposal_commitment_bps:
    // smart_contracts/xgov_registry_mock/contract.py:143-144
    // @arc4.abimethod()
    // def set_proposal_commitment_bps(self, commitment_bps: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:152
    // self.proposal_commitment_bps.value = commitment_bps
    bytec_2 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount(min_requested_amount: uint64) -> void:
set_min_requested_amount:
    // smart_contracts/xgov_registry_mock/contract.py:154-155
    // @arc4.abimethod()
    // def set_min_requested_amount(self, min_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:163
    // self.min_requested_amount.value = min_requested_amount
    bytec_3 // 0x6d696e5f7265717565737465645f616d6f756e74
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small(max_requested_amount: uint64) -> void:
set_max_requested_amount_small:
    // smart_contracts/xgov_registry_mock/contract.py:165-166
    // @arc4.abimethod()
    // def set_max_requested_amount_small(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:174
    // self.max_requested_amount_small.value = max_requested_amount
    bytec 4 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium(max_requested_amount: uint64) -> void:
set_max_requested_amount_medium:
    // smart_contracts/xgov_registry_mock/contract.py:176-177
    // @arc4.abimethod()
    // def set_max_requested_amount_medium(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:185
    // self.max_requested_amount_medium.value = max_requested_amount
    bytec 5 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large(max_requested_amount: uint64) -> void:
set_max_requested_amount_large:
    // smart_contracts/xgov_registry_mock/contract.py:187-188
    // @arc4.abimethod()
    // def set_max_requested_amount_large(self, max_requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:196
    // self.max_requested_amount_large.value = max_requested_amount
    bytec 6 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_publishing_fee(publishing_fee_bps: uint64) -> void:
set_publishing_fee:
    // smart_contracts/xgov_registry_mock/contract.py:198-199
    // @arc4.abimethod()
    // def set_publishing_fee(self, publishing_fee_bps: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:207
    // self.publishing_fee_bps.value = publishing_fee_bps
    bytec 7 // 0x70726f706f73616c5f7075626c697368696e675f627073
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small(discussion_duration: uint64) -> void:
set_discussion_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:209-210
    // @arc4.abimethod()
    // def set_discussion_duration_small(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:218
    // self.discussion_duration_small.value = discussion_duration
    bytec 8 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium(discussion_duration: uint64) -> void:
set_discussion_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:220-221
    // @arc4.abimethod()
    // def set_discussion_duration_medium(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:229
    // self.discussion_duration_medium.value = discussion_duration
    bytec 9 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large(discussion_duration: uint64) -> void:
set_discussion_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:231-232
    // @arc4.abimethod()
    // def set_discussion_duration_large(self, discussion_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:240
    // self.discussion_duration_large.value = discussion_duration
    bytec 10 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_publisher(committee_publisher: bytes) -> void:
set_committee_publisher:
    // smart_contracts/xgov_registry_mock/contract.py:242-243
    // @arc4.abimethod()
    // def set_committee_publisher(self, committee_publisher: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:251
    // self.committee_publisher.value = committee_publisher
    bytec 11 // 0x636f6d6d69747465655f7075626c6973686572
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_fee(proposal_fee: uint64) -> void:
set_proposal_fee:
    // smart_contracts/xgov_registry_mock/contract.py:253-254
    // @arc4.abimethod()
    // def set_proposal_fee(self, proposal_fee: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:262
    // self.proposal_fee.value = proposal_fee
    bytec_0 // 0x70726f706f73616c5f666565
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id(committee_id: bytes) -> void:
set_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:264-265
    // @arc4.abimethod()
    // def set_committee_id(self, committee_id: CommitteeId) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:273
    // self.committee_id.value = committee_id.copy()
    bytec_1 // 0x636f6d6d69747465655f6964
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.clear_committee_id() -> void:
clear_committee_id:
    // smart_contracts/xgov_registry_mock/contract.py:275-276
    // @arc4.abimethod()
    // def clear_committee_id(self) -> None:
    proto 0 0
    // smart_contracts/xgov_registry_mock/contract.py:281
    // self.committee_id.value = CommitteeId.from_bytes(mock_cfg.COMMITTEE_ID)
    bytec_1 // 0x636f6d6d69747465655f6964
    pushbytes 0x
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members(committee_members: uint64) -> void:
set_committee_members:
    // smart_contracts/xgov_registry_mock/contract.py:283-284
    // @arc4.abimethod()
    // def set_committee_members(self, committee_members: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:292
    // self.committee_members.value = committee_members
    bytec 12 // 0x636f6d6d69747465655f6d656d62657273
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes(committee_votes: uint64) -> void:
set_committee_votes:
    // smart_contracts/xgov_registry_mock/contract.py:294-295
    // @arc4.abimethod()
    // def set_committee_votes(self, committee_votes: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:303
    // self.committee_votes.value = committee_votes
    bytec 13 // 0x636f6d6d69747465655f766f746573
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_small(voting_duration: uint64) -> void:
set_voting_duration_small:
    // smart_contracts/xgov_registry_mock/contract.py:305-306
    // @arc4.abimethod()
    // def set_voting_duration_small(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:314
    // self.voting_duration_small.value = voting_duration
    bytec 14 // 0x766f74696e675f6475726174696f6e5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_medium(voting_duration: uint64) -> void:
set_voting_duration_medium:
    // smart_contracts/xgov_registry_mock/contract.py:316-317
    // @arc4.abimethod()
    // def set_voting_duration_medium(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:325
    // self.voting_duration_medium.value = voting_duration
    bytec 15 // 0x766f74696e675f6475726174696f6e5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_large(voting_duration: uint64) -> void:
set_voting_duration_large:
    // smart_contracts/xgov_registry_mock/contract.py:327-328
    // @arc4.abimethod()
    // def set_voting_duration_large(self, voting_duration: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:336
    // self.voting_duration_large.value = voting_duration
    bytec 16 // 0x766f74696e675f6475726174696f6e5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_small(quorum: uint64) -> void:
set_quorum_small:
    // smart_contracts/xgov_registry_mock/contract.py:338-339
    // @arc4.abimethod()
    // def set_quorum_small(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:347
    // self.quorum_small.value = quorum
    bytec 17 // 0x71756f72756d5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_medium(quorum: uint64) -> void:
set_quorum_medium:
    // smart_contracts/xgov_registry_mock/contract.py:349-350
    // @arc4.abimethod()
    // def set_quorum_medium(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:358
    // self.quorum_medium.value = quorum
    bytec 18 // 0x71756f72756d5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_large(quorum: uint64) -> void:
set_quorum_large:
    // smart_contracts/xgov_registry_mock/contract.py:360-361
    // @arc4.abimethod()
    // def set_quorum_large(self, quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:369
    // self.quorum_large.value = quorum
    bytec 19 // 0x71756f72756d5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_small(weighted_quorum: uint64) -> void:
set_weighted_quorum_small:
    // smart_contracts/xgov_registry_mock/contract.py:371-372
    // @arc4.abimethod()
    // def set_weighted_quorum_small(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:380
    // self.weighted_quorum_small.value = weighted_quorum
    bytec 20 // 0x77656967687465645f71756f72756d5f736d616c6c
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_medium(weighted_quorum: uint64) -> void:
set_weighted_quorum_medium:
    // smart_contracts/xgov_registry_mock/contract.py:382-383
    // @arc4.abimethod()
    // def set_weighted_quorum_medium(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:391
    // self.weighted_quorum_medium.value = weighted_quorum
    bytec 21 // 0x77656967687465645f71756f72756d5f6d656469756d
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_large(weighted_quorum: uint64) -> void:
set_weighted_quorum_large:
    // smart_contracts/xgov_registry_mock/contract.py:393-394
    // @arc4.abimethod()
    // def set_weighted_quorum_large(self, weighted_quorum: UInt64) -> None:
    proto 1 0
    // smart_contracts/xgov_registry_mock/contract.py:402
    // self.weighted_quorum_large.value = weighted_quorum
    bytec 22 // 0x77656967687465645f71756f72756d5f6c61726765
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.vote(proposal_app: uint64, voter: bytes, approvals: bytes, rejections: bytes) -> void:
vote:
    // smart_contracts/xgov_registry_mock/contract.py:404-411
    // @arc4.abimethod()
    // def vote(
    //     self,
    //     proposal_app: Application,
    //     voter: arc4.Address,
    //     approvals: arc4.UInt64,
    //     rejections: arc4.UInt64,
    // ) -> None:
    proto 4 0
    // smart_contracts/xgov_registry_mock/contract.py:431-438
    // error, tx = arc4.abi_call(
    //     Proposal.vote,
    //     voter,
    //     approvals,
    //     rejections,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_begin
    frame_dig -4
    itxn_field ApplicationID
    pushbytes 0x1841a0d2 // method "vote(address,uint64,uint64)string"
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/xgov_registry_mock/contract.py:437
    // fee=0,
    intc_1 // 0
    itxn_field Fee
    // smart_contracts/xgov_registry_mock/contract.py:431-438
    // error, tx = arc4.abi_call(
    //     Proposal.vote,
    //     voter,
    //     approvals,
    //     rejections,
    //     app_id=proposal_app,
    //     fee=0,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 23 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // smart_contracts/xgov_registry_mock/contract.py:440
    // if error == "ERR:" + err.UNAUTHORIZED:
    dup
    pushbytes 0x00104552523a556e617574686f72697a6564
    ==
    !
    assert // Unauthorized
    // smart_contracts/xgov_registry_mock/contract.py:442
    // elif error == "ERR:" + err.VOTER_NOT_FOUND:
    dup
    pushbytes 0x00134552523a566f746572206e6f7420666f756e64
    ==
    !
    assert // Voter not found
    // smart_contracts/xgov_registry_mock/contract.py:444
    // elif error == "ERR:" + err.VOTER_ALREADY_VOTED:
    dup
    pushbytes 0x00174552523a566f74657220616c726561647920766f746564
    ==
    !
    assert // Voter already voted
    // smart_contracts/xgov_registry_mock/contract.py:446
    // elif error == "ERR:" + err.VOTES_EXCEEDED:
    dup
    pushbytes 0x00124552523a566f746573206578636565646564
    ==
    !
    assert // Votes exceeded
    // smart_contracts/xgov_registry_mock/contract.py:448
    // elif error == "ERR:" + err.MISSING_CONFIG:
    dup
    pushbytes 0x00124552523a4d697373696e6720436f6e666967
    ==
    !
    assert // Missing Config
    // smart_contracts/xgov_registry_mock/contract.py:450
    // elif error == "ERR:" + err.WRONG_PROPOSAL_STATUS:
    dup
    pushbytes 0x00194552523a57726f6e672050726f706f73616c20537461747573
    ==
    !
    assert // Wrong Proposal Status
    // smart_contracts/xgov_registry_mock/contract.py:452
    // elif error == "ERR:" + err.VOTING_PERIOD_EXPIRED:
    pushbytes 0x00194552523a566f74696e6720506572696f642045787069726564
    ==
    !
    assert // Voting Period Expired
    retsub
