{
  "version": 3,
  "sources": [
    "../../xgov_registry_mock/contract.py"
  ],
  "mappingsuBgB;;AADJ;;;AADJ;AAMQ;;AADJ;;;;;;AADJ;AAMQ;;AADJ;;;;;;AADJ;AAMQ;;AADJ;;;;;;;AADJ;AAMQ;;AADJ;;;;;;;AADJ;AAMQ;;AADJ;;;AADJ;AAMQ;;AADJ;;AADJ;AAMQ;;AADJ;;AADJ;AAMQ;;AADJ;;AADJ;AAMQ;;AADJ;;AADJ;AAMQ;AADJ;;;;;AADJ;AAMQ;;AADe;;AADvB;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;;AADJ;AAMQ;;AADJ;;AADJ;AAMQ;;AADJ;;;;AADJ;AAMQ;;AADJ;;;AADJ;AAMQ;;AADJ;;;AADJ;AAMQ;;AADJ;;;AADJ;AAMQ;;AADJ;;;AADJ;AAMQ;;AADJ;;;AADJ;AAMQ;;AADJ;;;AADJ;AAMQ;;AADJ;;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAtGR;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAmTQ;;AAA6C;;AAA7C;AANH;AAAA;AApKG;;AAA8B;AAA9B;AANH;AAAA;AAFG;;AAA6B;AAA7B;AANH;AAAA;AAFG;;AAA8B;AAA9B;AANH;AAAA;AAFG;;AAA6B;AAA7B;AANH;AAAA;;;;;;;;;AAgCA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAega;;AAAA;;AAAA;AACF;AAAA;AAAA;AAAA;AAAgC;;AAAA;;AAAA;AAAhC;;;;;AAFX;;;AAGQ;;;AAHR;AAtBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAmBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;AATH;AAAA;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASG;;AAAA;AAAA;A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",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 8 0 4 1814400 604800"
    },
    "13": {
      "op": "bytecblock 0x151f7c75 \"Wrong Proposal Status or finalized\" \"ERR:\" 0x6f70656e5f70726f706f73616c5f666565 0x636f6d6d69747465655f6964 0x7061757365645f7265676973747279 0x7061757365645f70726f706f73616c73 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x78676f765f6461656d6f6e 0x3030303030303030303030303030303030303030303030303030303030303030 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573 0x766f74696e675f6475726174696f6e5f736d616c6c 0x766f74696e675f6475726174696f6e5f6d656469756d 0x766f74696e675f6475726174696f6e5f6c61726765 0x71756f72756d5f736d616c6c 0x71756f72756d5f6d656469756d 0x71756f72756d5f6c61726765 0x77656967687465645f71756f72756d5f736d616c6c 0x77656967687465645f71756f72756d5f6d656469756d 0x77656967687465645f71756f72756d5f6c61726765 0x78676f765f636f756e63696c \"Unauthorized\" \"Missing Config\""
    },
    "653": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "655": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "658": {
      "op": "bytec 7 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "660": {
      "op": "pushint 300 // 300",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "300"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "300"
      ]
    },
    "663": {
      "op": "app_global_put",
      "stack_out": []
    },
    "664": {
      "op": "bytec 8 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "666": {
      "op": "pushint 2500000000 // 2500000000",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "2500000000"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "2500000000"
      ]
    },
    "672": {
      "op": "app_global_put",
      "stack_out": []
    },
    "673": {
      "op": "bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "675": {
      "op": "pushint 25000000000 // 25000000000",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "25000000000"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "25000000000"
      ]
    },
    "681": {
      "op": "app_global_put",
      "stack_out": []
    },
    "682": {
      "op": "bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "684": {
      "op": "pushint 100000000000 // 100000000000",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "100000000000"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "100000000000"
      ]
    },
    "691": {
      "op": "app_global_put",
      "stack_out": []
    },
    "692": {
      "op": "bytec 11 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "694": {
      "op": "pushint 200000000000 // 200000000000",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "200000000000"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "200000000000"
      ]
    },
    "701": {
      "op": "app_global_put",
      "stack_out": []
    },
    "702": {
      "op": "bytec 12 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ],
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ]
    },
    "704": {
      "op": "pushint 500 // 500",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "500"
      ],
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "500"
      ]
    },
    "707": {
      "op": "app_global_put",
      "stack_out": []
    },
    "708": {
      "op": "bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "710": {
      "op": "intc 4 // 1814400",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "1814400"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "1814400"
      ]
    },
    "712": {
      "op": "app_global_put",
      "stack_out": []
    },
    "713": {
      "op": "bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "715": {
      "op": "intc 4 // 1814400",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "1814400"
      ]
    },
    "717": {
      "op": "app_global_put",
      "stack_out": []
    },
    "718": {
      "op": "bytec 15 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "720": {
      "op": "intc 4 // 1814400",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "1814400"
      ]
    },
    "722": {
      "op": "app_global_put",
      "stack_out": []
    },
    "723": {
      "op": "bytec 16 // 0x78676f765f6461656d6f6e",
      "defined_out": [
        "0x78676f765f6461656d6f6e"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e"
      ]
    },
    "725": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f6461656d6f6e",
        "tmp%0#2"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e",
        "tmp%0#2"
      ]
    },
    "727": {
      "op": "app_global_put",
      "stack_out": []
    },
    "728": {
      "op": "bytec_3 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565"
      ],
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "729": {
      "op": "pushint 100000000 // 100000000",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "100000000"
      ],
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "100000000"
      ]
    },
    "734": {
      "op": "app_global_put",
      "stack_out": []
    },
    "735": {
      "op": "bytec 4 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "737": {
      "op": "bytec 17 // 0x3030303030303030303030303030303030303030303030303030303030303030",
      "defined_out": [
        "0x3030303030303030303030303030303030303030303030303030303030303030",
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "0x3030303030303030303030303030303030303030303030303030303030303030"
      ]
    },
    "739": {
      "op": "app_global_put",
      "stack_out": []
    },
    "740": {
      "op": "bytec 18 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "742": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "0"
      ]
    },
    "743": {
      "op": "app_global_put",
      "stack_out": []
    },
    "744": {
      "op": "bytec 19 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "746": {
      "op": "intc_2 // 0",
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "0"
      ]
    },
    "747": {
      "op": "app_global_put",
      "stack_out": []
    },
    "748": {
      "op": "bytec 20 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "750": {
      "op": "intc 5 // 604800",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "604800"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "604800"
      ]
    },
    "752": {
      "op": "app_global_put",
      "stack_out": []
    },
    "753": {
      "op": "bytec 21 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "755": {
      "op": "intc 5 // 604800",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "604800"
      ]
    },
    "757": {
      "op": "app_global_put",
      "stack_out": []
    },
    "758": {
      "op": "bytec 22 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "760": {
      "op": "pushint 1209600 // 1209600",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "1209600"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "1209600"
      ]
    },
    "764": {
      "op": "app_global_put",
      "stack_out": []
    },
    "765": {
      "op": "bytec 23 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0x71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "767": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "0x71756f72756d5f736d616c6c",
        "3000"
      ],
      "stack_out": [
        "0x71756f72756d5f736d616c6c",
        "3000"
      ]
    },
    "770": {
      "op": "app_global_put",
      "stack_out": []
    },
    "771": {
      "op": "bytec 24 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0x71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "773": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "0x71756f72756d5f6d656469756d",
        "5000"
      ],
      "stack_out": [
        "0x71756f72756d5f6d656469756d",
        "5000"
      ]
    },
    "776": {
      "op": "app_global_put",
      "stack_out": []
    },
    "777": {
      "op": "bytec 25 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0x71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x71756f72756d5f6c61726765"
      ]
    },
    "779": {
      "op": "pushint 7000 // 7000",
      "defined_out": [
        "0x71756f72756d5f6c61726765",
        "7000"
      ],
      "stack_out": [
        "0x71756f72756d5f6c61726765",
        "7000"
      ]
    },
    "782": {
      "op": "app_global_put",
      "stack_out": []
    },
    "783": {
      "op": "bytec 26 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "785": {
      "op": "pushint 5000 // 5000",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "5000"
      ]
    },
    "788": {
      "op": "app_global_put",
      "stack_out": []
    },
    "789": {
      "op": "bytec 27 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "791": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "6000"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "6000"
      ]
    },
    "794": {
      "op": "app_global_put",
      "stack_out": []
    },
    "795": {
      "op": "bytec 28 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "797": {
      "op": "pushint 7000 // 7000",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "7000"
      ]
    },
    "800": {
      "op": "app_global_put",
      "stack_out": []
    },
    "801": {
      "op": "bytec 29 // 0x78676f765f636f756e63696c",
      "defined_out": [
        "0x78676f765f636f756e63696c"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c"
      ]
    },
    "803": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f636f756e63696c",
        "tmp%1#2"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c",
        "tmp%1#2"
      ]
    },
    "805": {
      "op": "app_global_put",
      "stack_out": []
    },
    "806": {
      "op": "bytec 5 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "808": {
      "op": "intc_2 // 0",
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "0"
      ]
    },
    "809": {
      "op": "app_global_put",
      "stack_out": []
    },
    "810": {
      "op": "bytec 6 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "812": {
      "op": "intc_2 // 0",
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "0"
      ]
    },
    "813": {
      "op": "app_global_put",
      "stack_out": []
    },
    "814": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "816": {
      "op": "bz main___algopy_default_create@44",
      "stack_out": []
    },
    "819": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "821": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "822": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "823": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "825": {
      "op": "assert",
      "stack_out": []
    },
    "826": {
      "op": "pushbytess 0x86f7e0e6 0x39e26d8a 0x98352e86 0xfa4ed6e2 0xc386b03f 0x6811eb76 0x37235b22 0xbbc72d1b 0xd17676d9 0x7cd79aad 0x1c71f4e7 0x29dfd021 0x34a5dc55 0xbb0db011 0x84b7d268 0x839dc51d 0x504c31b9 0x56ad1c6f 0xf83579fd 0x520e1f64 0x53802148 0xa4f766f6 0xa9998b1d 0x4e9c607c 0x650dfa8b 0xc887f086 0x4af84ea5 0x2c64e86f 0x16acce3b 0x910e1aa3 0x37d6adf1 0x6fa6214c 0xf5910756 0x65610a9f 0x26983200 // method \"pause_registry()void\", method \"pause_proposals()void\", method \"resume_registry()void\", method \"resume_proposals()void\", method \"create_empty_proposal(address)uint64\", method \"set_proposal_commitment_bps(uint64)void\", method \"set_min_requested_amount(uint64)void\", method \"set_max_requested_amount_small(uint64)void\", method \"set_max_requested_amount_medium(uint64)void\", method \"set_max_requested_amount_large(uint64)void\", method \"set_daemon_ops_funding_bps(uint64)void\", method \"set_discussion_duration_small(uint64)void\", method \"set_discussion_duration_medium(uint64)void\", method \"set_discussion_duration_large(uint64)void\", method \"set_xgov_daemon(address)void\", method \"set_open_proposal_fee(uint64)void\", method \"set_committee_id(byte[32])void\", method \"clear_committee_id()void\", method \"set_committee_members(uint64)void\", method \"set_committee_votes(uint64)void\", method \"set_voting_duration_small(uint64)void\", method \"set_voting_duration_medium(uint64)void\", method \"set_voting_duration_large(uint64)void\", method \"set_quorum_small(uint64)void\", method \"set_quorum_medium(uint64)void\", method \"set_quorum_large(uint64)void\", method \"set_weighted_quorum_small(uint64)void\", method \"set_weighted_quorum_medium(uint64)void\", method \"set_weighted_quorum_large(uint64)void\", method \"vote(uint64,address,uint64,uint64)void\", method \"set_xgov_council(address)void\", method \"fund(uint64)void\", method \"finalize_proposal(uint64)void\", method \"drop_proposal(uint64)void\", method \"is_proposal(uint64)void\"",
      "defined_out": [
        "Method(clear_committee_id()void)",
        "Method(create_empty_proposal(address)uint64)",
        "Method(drop_proposal(uint64)void)",
        "Method(finalize_proposal(uint64)void)",
        "Method(fund(uint64)void)",
        "Method(is_proposal(uint64)void)",
        "Method(pause_proposals()void)",
        "Method(pause_registry()void)",
        "Method(resume_proposals()void)",
        "Method(resume_registry()void)",
        "Method(set_committee_id(byte[32])void)",
        "Method(set_committee_members(uint64)void)",
        "Method(set_committee_votes(uint64)void)",
        "Method(set_daemon_ops_funding_bps(uint64)void)",
        "Method(set_discussion_duration_large(uint64)void)",
        "Method(set_discussion_duration_medium(uint64)void)",
        "Method(set_discussion_duration_small(uint64)void)",
        "Method(set_max_requested_amount_large(uint64)void)",
        "Method(set_max_requested_amount_medium(uint64)void)",
        "Method(set_max_requested_amount_small(uint64)void)",
        "Method(set_min_requested_amount(uint64)void)",
        "Method(set_open_proposal_fee(uint64)void)",
        "Method(set_proposal_commitment_bps(uint64)void)",
        "Method(set_quorum_large(uint64)void)",
        "Method(set_quorum_medium(uint64)void)",
        "Method(set_quorum_small(uint64)void)",
        "Method(set_voting_duration_large(uint64)void)",
        "Method(set_voting_duration_medium(uint64)void)",
        "Method(set_voting_duration_small(uint64)void)",
        "Method(set_weighted_quorum_large(uint64)void)",
        "Method(set_weighted_quorum_medium(uint64)void)",
        "Method(set_weighted_quorum_small(uint64)void)",
        "Method(set_xgov_council(address)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(vote(uint64,address,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(pause_registry()void)",
        "Method(pause_proposals()void)",
        "Method(resume_registry()void)",
        "Method(resume_proposals()void)",
        "Method(create_empty_proposal(address)uint64)",
        "Method(set_proposal_commitment_bps(uint64)void)",
        "Method(set_min_requested_amount(uint64)void)",
        "Method(set_max_requested_amount_small(uint64)void)",
        "Method(set_max_requested_amount_medium(uint64)void)",
        "Method(set_max_requested_amount_large(uint64)void)",
        "Method(set_daemon_ops_funding_bps(uint64)void)",
        "Method(set_discussion_duration_small(uint64)void)",
        "Method(set_discussion_duration_medium(uint64)void)",
        "Method(set_discussion_duration_large(uint64)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(set_open_proposal_fee(uint64)void)",
        "Method(set_committee_id(byte[32])void)",
        "Method(clear_committee_id()void)",
        "Method(set_committee_members(uint64)void)",
        "Method(set_committee_votes(uint64)void)",
        "Method(set_voting_duration_small(uint64)void)",
        "Method(set_voting_duration_medium(uint64)void)",
        "Method(set_voting_duration_large(uint64)void)",
        "Method(set_quorum_small(uint64)void)",
        "Method(set_quorum_medium(uint64)void)",
        "Method(set_quorum_large(uint64)void)",
        "Method(set_weighted_quorum_small(uint64)void)",
        "Method(set_weighted_quorum_medium(uint64)void)",
        "Method(set_weighted_quorum_large(uint64)void)",
        "Method(vote(uint64,address,uint64,uint64)void)",
        "Method(set_xgov_council(address)void)",
        "Method(fund(uint64)void)",
        "Method(finalize_proposal(uint64)void)",
        "Method(drop_proposal(uint64)void)",
        "Method(is_proposal(uint64)void)"
      ]
    },
    "1003": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(clear_committee_id()void)",
        "Method(create_empty_proposal(address)uint64)",
        "Method(drop_proposal(uint64)void)",
        "Method(finalize_proposal(uint64)void)",
        "Method(fund(uint64)void)",
        "Method(is_proposal(uint64)void)",
        "Method(pause_proposals()void)",
        "Method(pause_registry()void)",
        "Method(resume_proposals()void)",
        "Method(resume_registry()void)",
        "Method(set_committee_id(byte[32])void)",
        "Method(set_committee_members(uint64)void)",
        "Method(set_committee_votes(uint64)void)",
        "Method(set_daemon_ops_funding_bps(uint64)void)",
        "Method(set_discussion_duration_large(uint64)void)",
        "Method(set_discussion_duration_medium(uint64)void)",
        "Method(set_discussion_duration_small(uint64)void)",
        "Method(set_max_requested_amount_large(uint64)void)",
        "Method(set_max_requested_amount_medium(uint64)void)",
        "Method(set_max_requested_amount_small(uint64)void)",
        "Method(set_min_requested_amount(uint64)void)",
        "Method(set_open_proposal_fee(uint64)void)",
        "Method(set_proposal_commitment_bps(uint64)void)",
        "Method(set_quorum_large(uint64)void)",
        "Method(set_quorum_medium(uint64)void)",
        "Method(set_quorum_small(uint64)void)",
        "Method(set_voting_duration_large(uint64)void)",
        "Method(set_voting_duration_medium(uint64)void)",
        "Method(set_voting_duration_small(uint64)void)",
        "Method(set_weighted_quorum_large(uint64)void)",
        "Method(set_weighted_quorum_medium(uint64)void)",
        "Method(set_weighted_quorum_small(uint64)void)",
        "Method(set_xgov_council(address)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(vote(uint64,address,uint64,uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(pause_registry()void)",
        "Method(pause_proposals()void)",
        "Method(resume_registry()void)",
        "Method(resume_proposals()void)",
        "Method(create_empty_proposal(address)uint64)",
        "Method(set_proposal_commitment_bps(uint64)void)",
        "Method(set_min_requested_amount(uint64)void)",
        "Method(set_max_requested_amount_small(uint64)void)",
        "Method(set_max_requested_amount_medium(uint64)void)",
        "Method(set_max_requested_amount_large(uint64)void)",
        "Method(set_daemon_ops_funding_bps(uint64)void)",
        "Method(set_discussion_duration_small(uint64)void)",
        "Method(set_discussion_duration_medium(uint64)void)",
        "Method(set_discussion_duration_large(uint64)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(set_open_proposal_fee(uint64)void)",
        "Method(set_committee_id(byte[32])void)",
        "Method(clear_committee_id()void)",
        "Method(set_committee_members(uint64)void)",
        "Method(set_committee_votes(uint64)void)",
        "Method(set_voting_duration_small(uint64)void)",
        "Method(set_voting_duration_medium(uint64)void)",
        "Method(set_voting_duration_large(uint64)void)",
        "Method(set_quorum_small(uint64)void)",
        "Method(set_quorum_medium(uint64)void)",
        "Method(set_quorum_large(uint64)void)",
        "Method(set_weighted_quorum_small(uint64)void)",
        "Method(set_weighted_quorum_medium(uint64)void)",
        "Method(set_weighted_quorum_large(uint64)void)",
        "Method(vote(uint64,address,uint64,uint64)void)",
        "Method(set_xgov_council(address)void)",
        "Method(fund(uint64)void)",
        "Method(finalize_proposal(uint64)void)",
        "Method(drop_proposal(uint64)void)",
        "Method(is_proposal(uint64)void)",
        "tmp%6#0"
      ]
    },
    "1006": {
      "op": "match main_pause_registry_route@6 main_pause_proposals_route@7 main_resume_registry_route@8 main_resume_proposals_route@9 create_empty_proposal set_proposal_commitment_bps set_min_requested_amount set_max_requested_amount_small set_max_requested_amount_medium set_max_requested_amount_large set_daemon_ops_funding_bps set_discussion_duration_small set_discussion_duration_medium set_discussion_duration_large set_xgov_daemon set_open_proposal_fee set_committee_id main_clear_committee_id_route@23 set_committee_members set_committee_votes set_voting_duration_small set_voting_duration_medium set_voting_duration_large set_quorum_small set_quorum_medium set_quorum_large set_weighted_quorum_small set_weighted_quorum_medium set_weighted_quorum_large vote set_xgov_council fund finalize_proposal drop_proposal is_proposal",
      "stack_out": []
    },
    "1078": {
      "op": "err"
    },
    "1079": {
      "block": "main_clear_committee_id_route@23",
      "stack_in": [],
      "op": "bytec 4 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "1081": {
      "op": "bytec 17 // 0x3030303030303030303030303030303030303030303030303030303030303030",
      "defined_out": [
        "0x3030303030303030303030303030303030303030303030303030303030303030",
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "0x3030303030303030303030303030303030303030303030303030303030303030"
      ]
    },
    "1083": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1084": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1085": {
      "op": "return",
      "stack_out": []
    },
    "1086": {
      "block": "main_resume_proposals_route@9",
      "stack_in": [],
      "op": "bytec 6 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1088": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "0"
      ]
    },
    "1089": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1090": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1091": {
      "op": "return",
      "stack_out": []
    },
    "1092": {
      "block": "main_resume_registry_route@8",
      "stack_in": [],
      "op": "bytec 5 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "1094": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "0"
      ]
    },
    "1095": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1096": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1097": {
      "op": "return",
      "stack_out": []
    },
    "1098": {
      "block": "main_pause_proposals_route@7",
      "stack_in": [],
      "op": "bytec 6 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1100": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73",
        "1"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "1"
      ]
    },
    "1101": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1102": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1103": {
      "op": "return",
      "stack_out": []
    },
    "1104": {
      "block": "main_pause_registry_route@6",
      "stack_in": [],
      "op": "bytec 5 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "1106": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0x7061757365645f7265676973747279",
        "1"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "1"
      ]
    },
    "1107": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1108": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1109": {
      "op": "return",
      "stack_out": []
    },
    "1110": {
      "block": "main___algopy_default_create@44",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1112": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1113": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1115": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "1116": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1117": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "1118": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal[routing]",
      "params": {},
      "block": "create_empty_proposal",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0"
      ]
    },
    "1121": {
      "op": "dup",
      "defined_out": [
        "proposer#0",
        "proposer#0 (copy)"
      ],
      "stack_out": [
        "proposer#0",
        "proposer#0 (copy)"
      ]
    },
    "1122": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0",
        "len%0#0"
      ]
    },
    "1123": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0",
        "len%0#0",
        "32"
      ]
    },
    "1125": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0",
        "eq%0#0"
      ]
    },
    "1126": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "proposer#0"
      ]
    },
    "1127": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "proposer#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "proposer#0",
        "tmp%0#1"
      ]
    },
    "1129": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "mbr_before#0",
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0",
        "mbr_before#0",
        "check%0#0"
      ]
    },
    "1131": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "proposer#0",
        "mbr_before#0"
      ]
    },
    "1132": {
      "op": "itxn_begin"
    },
    "1133": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "mbr_before#0",
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0",
        "mbr_before#0",
        "20"
      ]
    },
    "1135": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "proposer#0",
        "mbr_before#0"
      ]
    },
    "1137": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "mbr_before#0",
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0",
        "mbr_before#0",
        "3"
      ]
    },
    "1139": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "proposer#0",
        "mbr_before#0"
      ]
    },
    "1141": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "mbr_before#0",
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0",
        "mbr_before#0",
        "1"
      ]
    },
    "1142": {
      "op": "itxn_field ExtraProgramPages",
      "stack_out": [
        "proposer#0",
        "mbr_before#0"
      ]
    },
    "1144": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw==",
        "mbr_before#0",
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0",
        "mbr_before#0",
        "CoEBQw=="
      ]
    },
    "1150": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "proposer#0",
        "mbr_before#0"
      ]
    },
    "1152": {
      "op": "pushbytes base64(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)",
      "defined_out": [
        "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",
        "mbr_before#0",
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0",
        "mbr_before#0",
        "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"
      ]
    },
    "4894": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "proposer#0",
        "mbr_before#0"
      ]
    },
    "4896": {
      "op": "pushbytes 0x216b1e07 // method \"create(address)string\"",
      "defined_out": [
        "Method(create(address)string)",
        "mbr_before#0",
        "proposer#0"
      ],
      "stack_out": [
        "proposer#0",
        "mbr_before#0",
        "Method(create(address)string)"
      ]
    },
    "4902": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "proposer#0",
        "mbr_before#0"
      ]
    },
    "4904": {
      "op": "swap",
      "stack_out": [
        "mbr_before#0",
        "proposer#0"
      ]
    },
    "4905": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "4907": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "appl"
      ]
    },
    "4909": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "4911": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "0"
      ]
    },
    "4912": {
      "op": "itxn_field Fee",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "4914": {
      "op": "itxn_submit"
    },
    "4915": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ]
    },
    "4917": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%1#1"
      ]
    },
    "4919": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%1#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "check%1#0"
      ]
    },
    "4921": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0"
      ]
    },
    "4922": {
      "op": "itxn_begin"
    },
    "4923": {
      "op": "dig 1",
      "defined_out": [
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "res.CreatedApplicationID#0 (copy)"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "res.CreatedApplicationID#0 (copy)"
      ]
    },
    "4925": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%2#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "4927": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0"
      ]
    },
    "4928": {
      "op": "intc_2 // 0",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "0"
      ]
    },
    "4929": {
      "op": "bytec_3 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0",
        "0x6f70656e5f70726f706f73616c5f666565",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "0",
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "4930": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4931": {
      "error": "check self.open_proposal_fee exists",
      "op": "assert // check self.open_proposal_fee exists",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "maybe_value%0#0"
      ]
    },
    "4932": {
      "op": "uncover 2",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%0#0",
        "mbr_after#0"
      ]
    },
    "4934": {
      "op": "uncover 4",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%0#0",
        "mbr_after#0",
        "mbr_before#0"
      ]
    },
    "4936": {
      "op": "-",
      "defined_out": [
        "maybe_value%0#0",
        "res.CreatedApplicationID#0",
        "tmp%2#1",
        "value%2#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%0#0",
        "tmp%2#1"
      ]
    },
    "4937": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "inner_txn_params%1%%param_Amount_idx_0#0"
      ]
    },
    "4938": {
      "op": "itxn_field Amount",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0"
      ]
    },
    "4940": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "4942": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "pay"
      ]
    },
    "4943": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "4945": {
      "op": "intc_2 // 0",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0"
      ]
    },
    "4946": {
      "op": "itxn_field Fee",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "4948": {
      "op": "itxn_submit"
    },
    "4949": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4950": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "4951": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "4952": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "4953": {
      "op": "log",
      "stack_out": []
    },
    "4954": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "4955": {
      "op": "return",
      "stack_out": []
    },
    "4956": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps[routing]",
      "params": {},
      "block": "set_proposal_commitment_bps",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4959": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4960": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "4961": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "4962": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "4963": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4964": {
      "op": "btoi",
      "defined_out": [
        "commitment_bps#0"
      ],
      "stack_out": [
        "commitment_bps#0"
      ]
    },
    "4965": {
      "op": "bytec 7 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "commitment_bps#0"
      ],
      "stack_out": [
        "commitment_bps#0",
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "4967": {
      "op": "swap",
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "commitment_bps#0"
      ]
    },
    "4968": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4969": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "4970": {
      "op": "return",
      "stack_out": []
    },
    "4971": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount[routing]",
      "params": {},
      "block": "set_min_requested_amount",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4974": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4975": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "4976": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "4977": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "4978": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4979": {
      "op": "btoi",
      "defined_out": [
        "min_requested_amount#0"
      ],
      "stack_out": [
        "min_requested_amount#0"
      ]
    },
    "4980": {
      "op": "bytec 8 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "min_requested_amount#0"
      ],
      "stack_out": [
        "min_requested_amount#0",
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "4982": {
      "op": "swap",
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "min_requested_amount#0"
      ]
    },
    "4983": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4984": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "4985": {
      "op": "return",
      "stack_out": []
    },
    "4986": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small[routing]",
      "params": {},
      "block": "set_max_requested_amount_small",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4989": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4990": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "4991": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "4992": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "4993": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4994": {
      "op": "btoi",
      "defined_out": [
        "max_requested_amount#0"
      ],
      "stack_out": [
        "max_requested_amount#0"
      ]
    },
    "4995": {
      "op": "bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "max_requested_amount#0"
      ],
      "stack_out": [
        "max_requested_amount#0",
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "4997": {
      "op": "swap",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "max_requested_amount#0"
      ]
    },
    "4998": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4999": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5000": {
      "op": "return",
      "stack_out": []
    },
    "5001": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium[routing]",
      "params": {},
      "block": "set_max_requested_amount_medium",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5004": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5005": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5006": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5007": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5008": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5009": {
      "op": "btoi",
      "defined_out": [
        "max_requested_amount#0"
      ],
      "stack_out": [
        "max_requested_amount#0"
      ]
    },
    "5010": {
      "op": "bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "max_requested_amount#0"
      ],
      "stack_out": [
        "max_requested_amount#0",
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "5012": {
      "op": "swap",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "max_requested_amount#0"
      ]
    },
    "5013": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5014": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5015": {
      "op": "return",
      "stack_out": []
    },
    "5016": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large[routing]",
      "params": {},
      "block": "set_max_requested_amount_large",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5019": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5020": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5021": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5022": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5023": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5024": {
      "op": "btoi",
      "defined_out": [
        "max_requested_amount#0"
      ],
      "stack_out": [
        "max_requested_amount#0"
      ]
    },
    "5025": {
      "op": "bytec 11 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "max_requested_amount#0"
      ],
      "stack_out": [
        "max_requested_amount#0",
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "5027": {
      "op": "swap",
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "max_requested_amount#0"
      ]
    },
    "5028": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5029": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5030": {
      "op": "return",
      "stack_out": []
    },
    "5031": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_daemon_ops_funding_bps[routing]",
      "params": {},
      "block": "set_daemon_ops_funding_bps",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5034": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5035": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5036": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5037": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5038": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5039": {
      "op": "btoi",
      "defined_out": [
        "daemon_ops_funding_bps#0"
      ],
      "stack_out": [
        "daemon_ops_funding_bps#0"
      ]
    },
    "5040": {
      "op": "bytec 12 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "daemon_ops_funding_bps#0"
      ],
      "stack_out": [
        "daemon_ops_funding_bps#0",
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ]
    },
    "5042": {
      "op": "swap",
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "daemon_ops_funding_bps#0"
      ]
    },
    "5043": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5044": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5045": {
      "op": "return",
      "stack_out": []
    },
    "5046": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small[routing]",
      "params": {},
      "block": "set_discussion_duration_small",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5049": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5050": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5051": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5052": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5053": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5054": {
      "op": "btoi",
      "defined_out": [
        "discussion_duration#0"
      ],
      "stack_out": [
        "discussion_duration#0"
      ]
    },
    "5055": {
      "op": "bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "discussion_duration#0"
      ],
      "stack_out": [
        "discussion_duration#0",
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "5057": {
      "op": "swap",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "discussion_duration#0"
      ]
    },
    "5058": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5059": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5060": {
      "op": "return",
      "stack_out": []
    },
    "5061": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium[routing]",
      "params": {},
      "block": "set_discussion_duration_medium",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5064": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5065": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5066": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5067": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5068": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5069": {
      "op": "btoi",
      "defined_out": [
        "discussion_duration#0"
      ],
      "stack_out": [
        "discussion_duration#0"
      ]
    },
    "5070": {
      "op": "bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "discussion_duration#0"
      ],
      "stack_out": [
        "discussion_duration#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "5072": {
      "op": "swap",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "discussion_duration#0"
      ]
    },
    "5073": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5074": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5075": {
      "op": "return",
      "stack_out": []
    },
    "5076": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large[routing]",
      "params": {},
      "block": "set_discussion_duration_large",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5079": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5080": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5081": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5082": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5083": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5084": {
      "op": "btoi",
      "defined_out": [
        "discussion_duration#0"
      ],
      "stack_out": [
        "discussion_duration#0"
      ]
    },
    "5085": {
      "op": "bytec 15 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "discussion_duration#0"
      ],
      "stack_out": [
        "discussion_duration#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "5087": {
      "op": "swap",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "discussion_duration#0"
      ]
    },
    "5088": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5089": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5090": {
      "op": "return",
      "stack_out": []
    },
    "5091": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_daemon[routing]",
      "params": {},
      "block": "set_xgov_daemon",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "xgov_daemon#0"
      ],
      "stack_out": [
        "xgov_daemon#0"
      ]
    },
    "5094": {
      "op": "dup",
      "defined_out": [
        "xgov_daemon#0",
        "xgov_daemon#0 (copy)"
      ],
      "stack_out": [
        "xgov_daemon#0",
        "xgov_daemon#0 (copy)"
      ]
    },
    "5095": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "xgov_daemon#0"
      ],
      "stack_out": [
        "xgov_daemon#0",
        "len%0#0"
      ]
    },
    "5096": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "xgov_daemon#0"
      ],
      "stack_out": [
        "xgov_daemon#0",
        "len%0#0",
        "32"
      ]
    },
    "5098": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "xgov_daemon#0"
      ],
      "stack_out": [
        "xgov_daemon#0",
        "eq%0#0"
      ]
    },
    "5099": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "xgov_daemon#0"
      ]
    },
    "5100": {
      "op": "bytec 16 // 0x78676f765f6461656d6f6e",
      "defined_out": [
        "0x78676f765f6461656d6f6e",
        "xgov_daemon#0"
      ],
      "stack_out": [
        "xgov_daemon#0",
        "0x78676f765f6461656d6f6e"
      ]
    },
    "5102": {
      "op": "swap",
      "stack_out": [
        "0x78676f765f6461656d6f6e",
        "xgov_daemon#0"
      ]
    },
    "5103": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5105": {
      "op": "return",
      "stack_out": []
    },
    "5106": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_open_proposal_fee[routing]",
      "params": {},
      "block": "set_open_proposal_fee",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5109": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5110": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5111": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5112": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5113": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5114": {
      "op": "btoi",
      "defined_out": [
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0"
      ]
    },
    "5115": {
      "op": "bytec_3 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "open_proposal_fee#0"
      ],
      "stack_out": [
        "open_proposal_fee#0",
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "5116": {
      "op": "swap",
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "open_proposal_fee#0"
      ]
    },
    "5117": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5118": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5119": {
      "op": "return",
      "stack_out": []
    },
    "5120": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id[routing]",
      "params": {},
      "block": "set_committee_id",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "committee_id#0"
      ],
      "stack_out": [
        "committee_id#0"
      ]
    },
    "5123": {
      "op": "dup",
      "defined_out": [
        "committee_id#0",
        "committee_id#0 (copy)"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_id#0 (copy)"
      ]
    },
    "5124": {
      "op": "len",
      "defined_out": [
        "committee_id#0",
        "len%0#0"
      ],
      "stack_out": [
        "committee_id#0",
        "len%0#0"
      ]
    },
    "5125": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "committee_id#0",
        "len%0#0"
      ],
      "stack_out": [
        "committee_id#0",
        "len%0#0",
        "32"
      ]
    },
    "5127": {
      "op": "==",
      "defined_out": [
        "committee_id#0",
        "eq%0#0"
      ],
      "stack_out": [
        "committee_id#0",
        "eq%0#0"
      ]
    },
    "5128": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "committee_id#0"
      ]
    },
    "5129": {
      "op": "bytec 4 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964",
        "committee_id#0"
      ],
      "stack_out": [
        "committee_id#0",
        "0x636f6d6d69747465655f6964"
      ]
    },
    "5131": {
      "op": "swap",
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "committee_id#0"
      ]
    },
    "5132": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5133": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5134": {
      "op": "return",
      "stack_out": []
    },
    "5135": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members[routing]",
      "params": {},
      "block": "set_committee_members",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5138": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5139": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5140": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5141": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5142": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5143": {
      "op": "btoi",
      "defined_out": [
        "committee_members#0"
      ],
      "stack_out": [
        "committee_members#0"
      ]
    },
    "5144": {
      "op": "bytec 18 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "committee_members#0"
      ],
      "stack_out": [
        "committee_members#0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "5146": {
      "op": "swap",
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "committee_members#0"
      ]
    },
    "5147": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5148": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5149": {
      "op": "return",
      "stack_out": []
    },
    "5150": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes[routing]",
      "params": {},
      "block": "set_committee_votes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5153": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5154": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5155": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5156": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5157": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5158": {
      "op": "btoi",
      "defined_out": [
        "committee_votes#0"
      ],
      "stack_out": [
        "committee_votes#0"
      ]
    },
    "5159": {
      "op": "bytec 19 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573",
        "committee_votes#0"
      ],
      "stack_out": [
        "committee_votes#0",
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "5161": {
      "op": "swap",
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "committee_votes#0"
      ]
    },
    "5162": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5163": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5164": {
      "op": "return",
      "stack_out": []
    },
    "5165": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_small[routing]",
      "params": {},
      "block": "set_voting_duration_small",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5168": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5169": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5170": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5171": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5172": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5173": {
      "op": "btoi",
      "defined_out": [
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0"
      ]
    },
    "5174": {
      "op": "bytec 20 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "5176": {
      "op": "swap",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "voting_duration#0"
      ]
    },
    "5177": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5178": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5179": {
      "op": "return",
      "stack_out": []
    },
    "5180": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_medium[routing]",
      "params": {},
      "block": "set_voting_duration_medium",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5183": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5184": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5185": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5186": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5187": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5188": {
      "op": "btoi",
      "defined_out": [
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0"
      ]
    },
    "5189": {
      "op": "bytec 21 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "5191": {
      "op": "swap",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "voting_duration#0"
      ]
    },
    "5192": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5193": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5194": {
      "op": "return",
      "stack_out": []
    },
    "5195": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_large[routing]",
      "params": {},
      "block": "set_voting_duration_large",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5198": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5199": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5200": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5201": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5202": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5203": {
      "op": "btoi",
      "defined_out": [
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0"
      ]
    },
    "5204": {
      "op": "bytec 22 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "5206": {
      "op": "swap",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "voting_duration#0"
      ]
    },
    "5207": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5208": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5209": {
      "op": "return",
      "stack_out": []
    },
    "5210": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_small[routing]",
      "params": {},
      "block": "set_quorum_small",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5213": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5214": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5215": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5216": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5217": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5218": {
      "op": "btoi",
      "defined_out": [
        "quorum#0"
      ],
      "stack_out": [
        "quorum#0"
      ]
    },
    "5219": {
      "op": "bytec 23 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0x71756f72756d5f736d616c6c",
        "quorum#0"
      ],
      "stack_out": [
        "quorum#0",
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "5221": {
      "op": "swap",
      "stack_out": [
        "0x71756f72756d5f736d616c6c",
        "quorum#0"
      ]
    },
    "5222": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5223": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5224": {
      "op": "return",
      "stack_out": []
    },
    "5225": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_medium[routing]",
      "params": {},
      "block": "set_quorum_medium",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5228": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5229": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5230": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5231": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5232": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5233": {
      "op": "btoi",
      "defined_out": [
        "quorum#0"
      ],
      "stack_out": [
        "quorum#0"
      ]
    },
    "5234": {
      "op": "bytec 24 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0x71756f72756d5f6d656469756d",
        "quorum#0"
      ],
      "stack_out": [
        "quorum#0",
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "5236": {
      "op": "swap",
      "stack_out": [
        "0x71756f72756d5f6d656469756d",
        "quorum#0"
      ]
    },
    "5237": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5238": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5239": {
      "op": "return",
      "stack_out": []
    },
    "5240": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_large[routing]",
      "params": {},
      "block": "set_quorum_large",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5243": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5244": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5245": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5246": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5247": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5248": {
      "op": "btoi",
      "defined_out": [
        "quorum#0"
      ],
      "stack_out": [
        "quorum#0"
      ]
    },
    "5249": {
      "op": "bytec 25 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0x71756f72756d5f6c61726765",
        "quorum#0"
      ],
      "stack_out": [
        "quorum#0",
        "0x71756f72756d5f6c61726765"
      ]
    },
    "5251": {
      "op": "swap",
      "stack_out": [
        "0x71756f72756d5f6c61726765",
        "quorum#0"
      ]
    },
    "5252": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5253": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5254": {
      "op": "return",
      "stack_out": []
    },
    "5255": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_small[routing]",
      "params": {},
      "block": "set_weighted_quorum_small",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5258": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5259": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5260": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5261": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5262": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5263": {
      "op": "btoi",
      "defined_out": [
        "weighted_quorum#0"
      ],
      "stack_out": [
        "weighted_quorum#0"
      ]
    },
    "5264": {
      "op": "bytec 26 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "weighted_quorum#0"
      ],
      "stack_out": [
        "weighted_quorum#0",
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "5266": {
      "op": "swap",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "weighted_quorum#0"
      ]
    },
    "5267": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5268": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5269": {
      "op": "return",
      "stack_out": []
    },
    "5270": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_medium[routing]",
      "params": {},
      "block": "set_weighted_quorum_medium",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5273": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5274": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5275": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5276": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5277": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5278": {
      "op": "btoi",
      "defined_out": [
        "weighted_quorum#0"
      ],
      "stack_out": [
        "weighted_quorum#0"
      ]
    },
    "5279": {
      "op": "bytec 27 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "weighted_quorum#0"
      ],
      "stack_out": [
        "weighted_quorum#0",
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "5281": {
      "op": "swap",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "weighted_quorum#0"
      ]
    },
    "5282": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5283": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5284": {
      "op": "return",
      "stack_out": []
    },
    "5285": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_large[routing]",
      "params": {},
      "block": "set_weighted_quorum_large",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5288": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5289": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "5290": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "5291": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "5292": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5293": {
      "op": "btoi",
      "defined_out": [
        "weighted_quorum#0"
      ],
      "stack_out": [
        "weighted_quorum#0"
      ]
    },
    "5294": {
      "op": "bytec 28 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "weighted_quorum#0"
      ],
      "stack_out": [
        "weighted_quorum#0",
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "5296": {
      "op": "swap",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "weighted_quorum#0"
      ]
    },
    "5297": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5298": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5299": {
      "op": "return",
      "stack_out": []
    },
    "5300": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.vote[routing]",
      "params": {},
      "block": "vote",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0"
      ]
    },
    "5303": {
      "op": "dup",
      "defined_out": [
        "proposal_app#0",
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0",
        "proposal_app#0 (copy)"
      ]
    },
    "5304": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "len%0#0"
      ]
    },
    "5305": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "len%0#0",
        "8"
      ]
    },
    "5306": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "eq%0#0"
      ]
    },
    "5307": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "proposal_app#0"
      ]
    },
    "5308": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "proposal_app#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0"
      ]
    },
    "5311": {
      "op": "dup",
      "defined_out": [
        "proposal_app#0",
        "voter#0",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "voter#0 (copy)"
      ]
    },
    "5312": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "proposal_app#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "len%1#0"
      ]
    },
    "5313": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "len%1#0",
        "proposal_app#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "len%1#0",
        "32"
      ]
    },
    "5315": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "proposal_app#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "eq%1#0"
      ]
    },
    "5316": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "proposal_app#0",
        "voter#0"
      ]
    },
    "5317": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "approvals#0",
        "proposal_app#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0"
      ]
    },
    "5320": {
      "op": "dup",
      "defined_out": [
        "approvals#0",
        "approvals#0 (copy)",
        "proposal_app#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0",
        "approvals#0 (copy)"
      ]
    },
    "5321": {
      "op": "len",
      "defined_out": [
        "approvals#0",
        "len%2#0",
        "proposal_app#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0",
        "len%2#0"
      ]
    },
    "5322": {
      "op": "intc_1 // 8",
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0",
        "len%2#0",
        "8"
      ]
    },
    "5323": {
      "op": "==",
      "defined_out": [
        "approvals#0",
        "eq%2#0",
        "proposal_app#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0",
        "eq%2#0"
      ]
    },
    "5324": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0"
      ]
    },
    "5325": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "approvals#0",
        "proposal_app#0",
        "rejections#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0",
        "rejections#0"
      ]
    },
    "5328": {
      "op": "dup",
      "defined_out": [
        "approvals#0",
        "proposal_app#0",
        "rejections#0",
        "rejections#0 (copy)",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0",
        "rejections#0",
        "rejections#0 (copy)"
      ]
    },
    "5329": {
      "op": "len",
      "defined_out": [
        "approvals#0",
        "len%3#0",
        "proposal_app#0",
        "rejections#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0",
        "rejections#0",
        "len%3#0"
      ]
    },
    "5330": {
      "op": "intc_1 // 8",
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0",
        "rejections#0",
        "len%3#0",
        "8"
      ]
    },
    "5331": {
      "op": "==",
      "defined_out": [
        "approvals#0",
        "eq%3#0",
        "proposal_app#0",
        "rejections#0",
        "voter#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0",
        "rejections#0",
        "eq%3#0"
      ]
    },
    "5332": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "proposal_app#0",
        "voter#0",
        "approvals#0",
        "rejections#0"
      ]
    },
    "5333": {
      "op": "itxn_begin"
    },
    "5334": {
      "op": "uncover 3",
      "stack_out": [
        "voter#0",
        "approvals#0",
        "rejections#0",
        "proposal_app#0"
      ]
    },
    "5336": {
      "op": "btoi",
      "defined_out": [
        "approvals#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "rejections#0",
        "voter#0"
      ],
      "stack_out": [
        "voter#0",
        "approvals#0",
        "rejections#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "5337": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "voter#0",
        "approvals#0",
        "rejections#0"
      ]
    },
    "5339": {
      "op": "pushbytes 0x1841a0d2 // method \"vote(address,uint64,uint64)string\"",
      "defined_out": [
        "Method(vote(address,uint64,uint64)string)",
        "approvals#0",
        "rejections#0",
        "voter#0"
      ],
      "stack_out": [
        "voter#0",
        "approvals#0",
        "rejections#0",
        "Method(vote(address,uint64,uint64)string)"
      ]
    },
    "5345": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "voter#0",
        "approvals#0",
        "rejections#0"
      ]
    },
    "5347": {
      "op": "uncover 2",
      "stack_out": [
        "approvals#0",
        "rejections#0",
        "voter#0"
      ]
    },
    "5349": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "approvals#0",
        "rejections#0"
      ]
    },
    "5351": {
      "op": "swap",
      "stack_out": [
        "rejections#0",
        "approvals#0"
      ]
    },
    "5352": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "rejections#0"
      ]
    },
    "5354": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5356": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5358": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5360": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5361": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5363": {
      "op": "itxn_submit"
    },
    "5364": {
      "op": "itxn LastLog"
    },
    "5366": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5368": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0"
      ]
    },
    "5371": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)"
      ]
    },
    "5372": {
      "op": "intc_2 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)",
        "0"
      ]
    },
    "5373": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "aggregate%array_length%0#0"
      ]
    },
    "5374": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "5376": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "add%0#0"
      ]
    },
    "5377": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "add%0#0",
        "error#0"
      ]
    },
    "5378": {
      "op": "len",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "5379": {
      "op": "==",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "5380": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5381": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5382": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#1"
      ]
    },
    "5385": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "5386": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%2#1"
      ]
    },
    "5387": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5388": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5391": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "5392": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5393": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5394": {
      "op": "intc_3 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5395": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5396": {
      "op": "bz vote_ternary_false@4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5399": {
      "op": "intc_2 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5400": {
      "block": "vote_ternary_merge@5",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz vote_after_if_else@15",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5403": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5404": {
      "op": "dig 1",
      "defined_out": [
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0"
      ]
    },
    "5406": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "tmp%4#0 (copy)"
      ]
    },
    "5407": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "5409": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "5410": {
      "op": "intc_3 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "5411": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "5413": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "5415": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0"
      ]
    },
    "5416": {
      "op": "dig 3",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5418": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "5419": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ]
    },
    "5421": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0"
      ]
    },
    "5422": {
      "op": "bytec 30 // \"Unauthorized\"",
      "defined_out": [
        "\"Unauthorized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\""
      ]
    },
    "5424": {
      "op": "pushbytess \"Voter not found\" \"Voter already voted\" \"Votes exceeded\" // \"Voter not found\", \"Voter already voted\", \"Votes exceeded\"",
      "defined_out": [
        "\"Unauthorized\"",
        "\"Voter already voted\"",
        "\"Voter not found\"",
        "\"Votes exceeded\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\""
      ]
    },
    "5477": {
      "op": "bytec 31 // \"Missing Config\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Unauthorized\"",
        "\"Voter already voted\"",
        "\"Voter not found\"",
        "\"Votes exceeded\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\"",
        "\"Missing Config\""
      ]
    },
    "5479": {
      "op": "bytec_1 // \"Wrong Proposal Status or finalized\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Unauthorized\"",
        "\"Voter already voted\"",
        "\"Voter not found\"",
        "\"Votes exceeded\"",
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\"",
        "\"Missing Config\"",
        "\"Wrong Proposal Status or finalized\""
      ]
    },
    "5480": {
      "op": "pushbytes \"Voting Period Expired\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Unauthorized\"",
        "\"Voter already voted\"",
        "\"Voter not found\"",
        "\"Votes exceeded\"",
        "\"Voting Period Expired\"",
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\"",
        "\"Missing Config\"",
        "\"Wrong Proposal Status or finalized\"",
        "\"Voting Period Expired\""
      ]
    },
    "5503": {
      "op": "uncover 7",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "\"Unauthorized\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\"",
        "\"Missing Config\"",
        "\"Wrong Proposal Status or finalized\"",
        "\"Voting Period Expired\"",
        "error_without_prefix#0"
      ]
    },
    "5505": {
      "op": "match vote_switch_case_0@7 vote_switch_case_1@8 vote_switch_case_2@9 vote_switch_case_3@10 vote_switch_case_4@11 vote_switch_case_5@12 vote_switch_case_6@13",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5521": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "5522": {
      "error": "Voting Period Expired",
      "block": "vote_switch_case_6@13",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Voting Period Expired"
    },
    "5523": {
      "error": "Wrong Proposal Status or finalized",
      "block": "vote_switch_case_5@12",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Wrong Proposal Status or finalized"
    },
    "5524": {
      "error": "Missing Config",
      "block": "vote_switch_case_4@11",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Missing Config"
    },
    "5525": {
      "error": "Votes exceeded",
      "block": "vote_switch_case_3@10",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Votes exceeded"
    },
    "5526": {
      "error": "Voter already voted",
      "block": "vote_switch_case_2@9",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Voter already voted"
    },
    "5527": {
      "error": "Voter not found",
      "block": "vote_switch_case_1@8",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Voter not found"
    },
    "5528": {
      "error": "Unauthorized",
      "block": "vote_switch_case_0@7",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Unauthorized"
    },
    "5529": {
      "block": "vote_after_if_else@15",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "1"
      ]
    },
    "5530": {
      "op": "return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5531": {
      "block": "vote_ternary_false@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "5533": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "5536": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "5537": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5538": {
      "op": "b vote_ternary_merge@5"
    },
    "5541": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_council[routing]",
      "params": {},
      "block": "set_xgov_council",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "xgov_council#0"
      ],
      "stack_out": [
        "xgov_council#0"
      ]
    },
    "5544": {
      "op": "dup",
      "defined_out": [
        "xgov_council#0",
        "xgov_council#0 (copy)"
      ],
      "stack_out": [
        "xgov_council#0",
        "xgov_council#0 (copy)"
      ]
    },
    "5545": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "xgov_council#0"
      ],
      "stack_out": [
        "xgov_council#0",
        "len%0#0"
      ]
    },
    "5546": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "xgov_council#0"
      ],
      "stack_out": [
        "xgov_council#0",
        "len%0#0",
        "32"
      ]
    },
    "5548": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "xgov_council#0"
      ],
      "stack_out": [
        "xgov_council#0",
        "eq%0#0"
      ]
    },
    "5549": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "xgov_council#0"
      ]
    },
    "5550": {
      "op": "bytec 29 // 0x78676f765f636f756e63696c",
      "defined_out": [
        "0x78676f765f636f756e63696c",
        "xgov_council#0"
      ],
      "stack_out": [
        "xgov_council#0",
        "0x78676f765f636f756e63696c"
      ]
    },
    "5552": {
      "op": "swap",
      "stack_out": [
        "0x78676f765f636f756e63696c",
        "xgov_council#0"
      ]
    },
    "5553": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5554": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5555": {
      "op": "return",
      "stack_out": []
    },
    "5556": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.fund[routing]",
      "params": {},
      "block": "fund",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0"
      ]
    },
    "5559": {
      "op": "dup",
      "defined_out": [
        "proposal_app#0",
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0",
        "proposal_app#0 (copy)"
      ]
    },
    "5560": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "len%0#0"
      ]
    },
    "5561": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "len%0#0",
        "8"
      ]
    },
    "5562": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "eq%0#0"
      ]
    },
    "5563": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "proposal_app#0"
      ]
    },
    "5564": {
      "op": "itxn_begin"
    },
    "5565": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "5566": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5568": {
      "op": "pushbytes 0x8a5e4c80 // method \"fund()string\"",
      "defined_out": [
        "Method(fund()string)"
      ],
      "stack_out": [
        "Method(fund()string)"
      ]
    },
    "5574": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5576": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5578": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5580": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5581": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5583": {
      "op": "itxn_submit"
    },
    "5584": {
      "op": "itxn LastLog"
    },
    "5586": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5588": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0"
      ]
    },
    "5591": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)"
      ]
    },
    "5592": {
      "op": "intc_2 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)",
        "0"
      ]
    },
    "5593": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "aggregate%array_length%0#0"
      ]
    },
    "5594": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "5596": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "add%0#0"
      ]
    },
    "5597": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "add%0#0",
        "error#0"
      ]
    },
    "5598": {
      "op": "len",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "5599": {
      "op": "==",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "5600": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5601": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5602": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "5605": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "5606": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5607": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5608": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5611": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "5612": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5613": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5614": {
      "op": "intc_3 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5615": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5616": {
      "op": "bz fund_ternary_false@4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5619": {
      "op": "intc_2 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5620": {
      "block": "fund_ternary_merge@5",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz fund_after_if_else@10",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5623": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5624": {
      "op": "dig 1",
      "defined_out": [
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0"
      ]
    },
    "5626": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "tmp%4#0 (copy)"
      ]
    },
    "5627": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "5629": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "5630": {
      "op": "intc_3 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "5631": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "5633": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "5635": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0"
      ]
    },
    "5636": {
      "op": "dig 3",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5638": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "5639": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ]
    },
    "5641": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0"
      ]
    },
    "5642": {
      "op": "bytec 30 // \"Unauthorized\"",
      "defined_out": [
        "\"Unauthorized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\""
      ]
    },
    "5644": {
      "op": "bytec_1 // \"Wrong Proposal Status or finalized\"",
      "defined_out": [
        "\"Unauthorized\"",
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\"",
        "\"Wrong Proposal Status or finalized\""
      ]
    },
    "5645": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "\"Unauthorized\"",
        "\"Wrong Proposal Status or finalized\"",
        "error_without_prefix#0"
      ]
    },
    "5647": {
      "op": "match fund_switch_case_0@7 fund_switch_case_1@8",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5653": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "5654": {
      "error": "Wrong Proposal Status or finalized",
      "block": "fund_switch_case_1@8",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Wrong Proposal Status or finalized"
    },
    "5655": {
      "error": "Unauthorized",
      "block": "fund_switch_case_0@7",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Unauthorized"
    },
    "5656": {
      "block": "fund_after_if_else@10",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "1"
      ]
    },
    "5657": {
      "op": "return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5658": {
      "block": "fund_ternary_false@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "5660": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "5663": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "5664": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5665": {
      "op": "b fund_ternary_merge@5"
    },
    "5668": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.finalize_proposal[routing]",
      "params": {},
      "block": "finalize_proposal",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0"
      ]
    },
    "5671": {
      "op": "dup",
      "defined_out": [
        "proposal_app#0",
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0",
        "proposal_app#0 (copy)"
      ]
    },
    "5672": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "len%0#0"
      ]
    },
    "5673": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "len%0#0",
        "8"
      ]
    },
    "5674": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "eq%0#0"
      ]
    },
    "5675": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "proposal_app#0"
      ]
    },
    "5676": {
      "op": "itxn_begin"
    },
    "5677": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "5678": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5680": {
      "op": "pushbytes 0x802069b4 // method \"finalize()string\"",
      "defined_out": [
        "Method(finalize()string)"
      ],
      "stack_out": [
        "Method(finalize()string)"
      ]
    },
    "5686": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5688": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5690": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5692": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5693": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5695": {
      "op": "itxn_submit"
    },
    "5696": {
      "op": "itxn LastLog"
    },
    "5698": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5700": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0"
      ]
    },
    "5703": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)"
      ]
    },
    "5704": {
      "op": "intc_2 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)",
        "0"
      ]
    },
    "5705": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "aggregate%array_length%0#0"
      ]
    },
    "5706": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "5708": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "add%0#0"
      ]
    },
    "5709": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "add%0#0",
        "error#0"
      ]
    },
    "5710": {
      "op": "len",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "5711": {
      "op": "==",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "5712": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5713": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5714": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "5717": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "5718": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5719": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5720": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5723": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "5724": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5725": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5726": {
      "op": "intc_3 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5727": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5728": {
      "op": "bz finalize_proposal_ternary_false@4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5731": {
      "op": "intc_2 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5732": {
      "block": "finalize_proposal_ternary_merge@5",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz finalize_proposal_after_if_else@11",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5735": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5736": {
      "op": "dig 1",
      "defined_out": [
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0"
      ]
    },
    "5738": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "tmp%4#0 (copy)"
      ]
    },
    "5739": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "5741": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "5742": {
      "op": "intc_3 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "5743": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "5745": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "5747": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0"
      ]
    },
    "5748": {
      "op": "dig 3",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5750": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "5751": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ]
    },
    "5753": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0"
      ]
    },
    "5754": {
      "op": "bytec_1 // \"Wrong Proposal Status or finalized\"",
      "defined_out": [
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status or finalized\""
      ]
    },
    "5755": {
      "op": "bytec 31 // \"Missing Config\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status or finalized\"",
        "\"Missing Config\""
      ]
    },
    "5757": {
      "op": "pushbytes \"There are voters assigned to this proposal\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\"",
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status or finalized\"",
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\""
      ]
    },
    "5801": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "\"Wrong Proposal Status or finalized\"",
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\"",
        "error_without_prefix#0"
      ]
    },
    "5803": {
      "op": "match finalize_proposal_switch_case_0@7 finalize_proposal_switch_case_1@8 finalize_proposal_switch_case_2@9",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5811": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "5812": {
      "error": "There are voters assigned to this proposal",
      "block": "finalize_proposal_switch_case_2@9",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // There are voters assigned to this proposal"
    },
    "5813": {
      "error": "Missing Config",
      "block": "finalize_proposal_switch_case_1@8",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Missing Config"
    },
    "5814": {
      "error": "Wrong Proposal Status or finalized",
      "block": "finalize_proposal_switch_case_0@7",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Wrong Proposal Status or finalized"
    },
    "5815": {
      "block": "finalize_proposal_after_if_else@11",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "1"
      ]
    },
    "5816": {
      "op": "return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5817": {
      "block": "finalize_proposal_ternary_false@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "5819": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "5822": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "5823": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5824": {
      "op": "b finalize_proposal_ternary_merge@5"
    },
    "5827": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.drop_proposal[routing]",
      "params": {},
      "block": "drop_proposal",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0"
      ]
    },
    "5830": {
      "op": "dup",
      "defined_out": [
        "proposal_app#0",
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0",
        "proposal_app#0 (copy)"
      ]
    },
    "5831": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "len%0#0"
      ]
    },
    "5832": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "len%0#0",
        "8"
      ]
    },
    "5833": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "proposal_app#0"
      ],
      "stack_out": [
        "proposal_app#0",
        "eq%0#0"
      ]
    },
    "5834": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "proposal_app#0"
      ]
    },
    "5835": {
      "op": "itxn_begin"
    },
    "5836": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "5837": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5839": {
      "op": "pushbytes 0x7371321a // method \"drop()string\"",
      "defined_out": [
        "Method(drop()string)"
      ],
      "stack_out": [
        "Method(drop()string)"
      ]
    },
    "5845": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5847": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5849": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5851": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5852": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5854": {
      "op": "itxn_submit"
    },
    "5855": {
      "op": "itxn LastLog"
    },
    "5857": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5859": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0"
      ]
    },
    "5862": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)"
      ]
    },
    "5863": {
      "op": "intc_2 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "error#0 (copy)",
        "0"
      ]
    },
    "5864": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "aggregate%array_length%0#0"
      ]
    },
    "5865": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "5867": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "error#0",
        "add%0#0"
      ]
    },
    "5868": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "add%0#0",
        "error#0"
      ]
    },
    "5869": {
      "op": "len",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "5870": {
      "op": "==",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "5871": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5872": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5873": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "5876": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "5877": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5878": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5879": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5882": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "5883": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5884": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5885": {
      "op": "intc_3 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5886": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5887": {
      "op": "bz drop_proposal_ternary_false@4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5890": {
      "op": "intc_2 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5891": {
      "block": "drop_proposal_ternary_merge@5",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz drop_proposal_after_if_else@9",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5894": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5895": {
      "op": "dig 1",
      "defined_out": [
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0"
      ]
    },
    "5897": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "tmp%4#0 (copy)"
      ]
    },
    "5898": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "5900": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "5901": {
      "op": "intc_3 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "5902": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "5904": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "5906": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0"
      ]
    },
    "5907": {
      "op": "dig 3",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5909": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "5910": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ]
    },
    "5912": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0"
      ]
    },
    "5913": {
      "op": "bytec_1 // \"Wrong Proposal Status or finalized\"",
      "defined_out": [
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status or finalized\""
      ]
    },
    "5914": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "\"Wrong Proposal Status or finalized\"",
        "error_without_prefix#0"
      ]
    },
    "5915": {
      "op": "match drop_proposal_switch_case_0@7",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5919": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "5920": {
      "error": "Wrong Proposal Status or finalized",
      "block": "drop_proposal_switch_case_0@7",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "err // Wrong Proposal Status or finalized"
    },
    "5921": {
      "block": "drop_proposal_after_if_else@9",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "1"
      ]
    },
    "5922": {
      "op": "return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5923": {
      "block": "drop_proposal_ternary_false@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "5925": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "5928": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "5929": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5930": {
      "op": "b drop_proposal_ternary_merge@5"
    },
    "5933": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.is_proposal[routing]",
      "params": {},
      "block": "is_proposal",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "proposal_id#0"
      ],
      "stack_out": [
        "proposal_id#0"
      ]
    },
    "5936": {
      "op": "len",
      "defined_out": [
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0"
      ]
    },
    "5937": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len%0#0"
      ],
      "stack_out": [
        "len%0#0",
        "8"
      ]
    },
    "5938": {
      "op": "==",
      "defined_out": [
        "eq%0#0"
      ],
      "stack_out": [
        "eq%0#0"
      ]
    },
    "5939": {
      "error": "invalid number of bytes for uint64",
      "op": "return // on error: invalid number of bytes for uint64",
      "defined_out": [],
      "stack_out": []
    }
  }
}