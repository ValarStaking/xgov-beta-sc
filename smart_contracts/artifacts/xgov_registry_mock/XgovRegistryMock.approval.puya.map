{
  "version": 3,
  "sources": [
    "../../xgov_registry_mock/contract.py"
  ],
  "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",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 4 6 1814400 604800"
    },
    "13": {
      "op": "bytecblock 0x151f7c75 \"Wrong Proposal Status or finalized\" \"ERR:\" 0x6f70656e5f70726f706f73616c5f666565 0x636f6d6d69747465655f6964 0x7061757365645f7265676973747279 0x7061757365645f70726f706f73616c73 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x78676f765f6461656d6f6e 0x3030303030303030303030303030303030303030303030303030303030303030 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573 0x766f74696e675f6475726174696f6e5f736d616c6c 0x766f74696e675f6475726174696f6e5f6d656469756d 0x766f74696e675f6475726174696f6e5f6c61726765 0x71756f72756d5f736d616c6c 0x71756f72756d5f6d656469756d 0x71756f72756d5f6c61726765 0x77656967687465645f71756f72756d5f736d616c6c 0x77656967687465645f71756f72756d5f6d656469756d 0x77656967687465645f71756f72756d5f6c61726765 0x78676f765f636f756e63696c \"Unauthorized\" \"Missing Config\""
    },
    "653": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "655": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "658": {
      "op": "bytec 7 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "660": {
      "op": "pushint 300 // 300",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "300"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "300"
      ]
    },
    "663": {
      "op": "app_global_put",
      "stack_out": []
    },
    "664": {
      "op": "bytec 8 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "666": {
      "op": "pushint 2500000000 // 2500000000",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "2500000000"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "2500000000"
      ]
    },
    "672": {
      "op": "app_global_put",
      "stack_out": []
    },
    "673": {
      "op": "bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "675": {
      "op": "pushint 25000000000 // 25000000000",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "25000000000"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "25000000000"
      ]
    },
    "681": {
      "op": "app_global_put",
      "stack_out": []
    },
    "682": {
      "op": "bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "684": {
      "op": "pushint 100000000000 // 100000000000",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "100000000000"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "100000000000"
      ]
    },
    "691": {
      "op": "app_global_put",
      "stack_out": []
    },
    "692": {
      "op": "bytec 11 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "694": {
      "op": "pushint 200000000000 // 200000000000",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "200000000000"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "200000000000"
      ]
    },
    "701": {
      "op": "app_global_put",
      "stack_out": []
    },
    "702": {
      "op": "bytec 12 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ],
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ]
    },
    "704": {
      "op": "pushint 500 // 500",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "500"
      ],
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "500"
      ]
    },
    "707": {
      "op": "app_global_put",
      "stack_out": []
    },
    "708": {
      "op": "bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "710": {
      "op": "intc 4 // 1814400",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "1814400"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "1814400"
      ]
    },
    "712": {
      "op": "app_global_put",
      "stack_out": []
    },
    "713": {
      "op": "bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "715": {
      "op": "intc 4 // 1814400",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "1814400"
      ]
    },
    "717": {
      "op": "app_global_put",
      "stack_out": []
    },
    "718": {
      "op": "bytec 15 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "720": {
      "op": "intc 4 // 1814400",
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "1814400"
      ]
    },
    "722": {
      "op": "app_global_put",
      "stack_out": []
    },
    "723": {
      "op": "bytec 16 // 0x78676f765f6461656d6f6e",
      "defined_out": [
        "0x78676f765f6461656d6f6e"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e"
      ]
    },
    "725": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f6461656d6f6e",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e",
        "materialized_values%0#0"
      ]
    },
    "727": {
      "op": "app_global_put",
      "stack_out": []
    },
    "728": {
      "op": "bytec_3 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565"
      ],
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "729": {
      "op": "pushint 100000000 // 100000000",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "100000000"
      ],
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "100000000"
      ]
    },
    "734": {
      "op": "app_global_put",
      "stack_out": []
    },
    "735": {
      "op": "bytec 4 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "737": {
      "op": "bytec 17 // 0x3030303030303030303030303030303030303030303030303030303030303030",
      "defined_out": [
        "0x3030303030303030303030303030303030303030303030303030303030303030",
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "0x3030303030303030303030303030303030303030303030303030303030303030"
      ]
    },
    "739": {
      "op": "app_global_put",
      "stack_out": []
    },
    "740": {
      "op": "bytec 18 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "742": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "0"
      ]
    },
    "743": {
      "op": "app_global_put",
      "stack_out": []
    },
    "744": {
      "op": "bytec 19 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "746": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "0"
      ]
    },
    "747": {
      "op": "app_global_put",
      "stack_out": []
    },
    "748": {
      "op": "bytec 20 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "750": {
      "op": "intc 5 // 604800",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "604800"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "604800"
      ]
    },
    "752": {
      "op": "app_global_put",
      "stack_out": []
    },
    "753": {
      "op": "bytec 21 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "755": {
      "op": "intc 5 // 604800",
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "604800"
      ]
    },
    "757": {
      "op": "app_global_put",
      "stack_out": []
    },
    "758": {
      "op": "bytec 22 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "760": {
      "op": "pushint 1209600 // 1209600",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "1209600"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "1209600"
      ]
    },
    "764": {
      "op": "app_global_put",
      "stack_out": []
    },
    "765": {
      "op": "bytec 23 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0x71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "767": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "0x71756f72756d5f736d616c6c",
        "3000"
      ],
      "stack_out": [
        "0x71756f72756d5f736d616c6c",
        "3000"
      ]
    },
    "770": {
      "op": "app_global_put",
      "stack_out": []
    },
    "771": {
      "op": "bytec 24 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0x71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "773": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "0x71756f72756d5f6d656469756d",
        "5000"
      ],
      "stack_out": [
        "0x71756f72756d5f6d656469756d",
        "5000"
      ]
    },
    "776": {
      "op": "app_global_put",
      "stack_out": []
    },
    "777": {
      "op": "bytec 25 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0x71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x71756f72756d5f6c61726765"
      ]
    },
    "779": {
      "op": "pushint 7000 // 7000",
      "defined_out": [
        "0x71756f72756d5f6c61726765",
        "7000"
      ],
      "stack_out": [
        "0x71756f72756d5f6c61726765",
        "7000"
      ]
    },
    "782": {
      "op": "app_global_put",
      "stack_out": []
    },
    "783": {
      "op": "bytec 26 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "785": {
      "op": "pushint 5000 // 5000",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "5000"
      ]
    },
    "788": {
      "op": "app_global_put",
      "stack_out": []
    },
    "789": {
      "op": "bytec 27 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "791": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "6000"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "6000"
      ]
    },
    "794": {
      "op": "app_global_put",
      "stack_out": []
    },
    "795": {
      "op": "bytec 28 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "797": {
      "op": "pushint 7000 // 7000",
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "7000"
      ]
    },
    "800": {
      "op": "app_global_put",
      "stack_out": []
    },
    "801": {
      "op": "bytec 29 // 0x78676f765f636f756e63696c",
      "defined_out": [
        "0x78676f765f636f756e63696c"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c"
      ]
    },
    "803": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x78676f765f636f756e63696c",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c",
        "materialized_values%1#0"
      ]
    },
    "805": {
      "op": "app_global_put",
      "stack_out": []
    },
    "806": {
      "op": "bytec 5 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "808": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "0"
      ]
    },
    "809": {
      "op": "app_global_put",
      "stack_out": []
    },
    "810": {
      "op": "bytec 6 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "812": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "0"
      ]
    },
    "813": {
      "op": "app_global_put",
      "stack_out": []
    },
    "814": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "816": {
      "op": "bz main_bare_routing@40",
      "stack_out": []
    },
    "819": {
      "op": "pushbytess 0x86f7e0e6 0x39e26d8a 0x98352e86 0xfa4ed6e2 0xc386b03f 0x6811eb76 0x37235b22 0xbbc72d1b 0xd17676d9 0x7cd79aad 0x1c71f4e7 0x29dfd021 0x34a5dc55 0xbb0db011 0x84b7d268 0x839dc51d 0x504c31b9 0x56ad1c6f 0xf83579fd 0x520e1f64 0x53802148 0xa4f766f6 0xa9998b1d 0x4e9c607c 0x650dfa8b 0xc887f086 0x4af84ea5 0x2c64e86f 0x16acce3b 0x886b3b04 0x37d6adf1 0x45f6ca71 0x5f297bd2 0x9bf22526 0x26983200 // method \"pause_registry()void\", method \"pause_proposals()void\", method \"resume_registry()void\", method \"resume_proposals()void\", method \"create_empty_proposal(address)uint64\", method \"set_proposal_commitment_bps(uint64)void\", method \"set_min_requested_amount(uint64)void\", method \"set_max_requested_amount_small(uint64)void\", method \"set_max_requested_amount_medium(uint64)void\", method \"set_max_requested_amount_large(uint64)void\", method \"set_daemon_ops_funding_bps(uint64)void\", method \"set_discussion_duration_small(uint64)void\", method \"set_discussion_duration_medium(uint64)void\", method \"set_discussion_duration_large(uint64)void\", method \"set_xgov_daemon(address)void\", method \"set_open_proposal_fee(uint64)void\", method \"set_committee_id(byte[32])void\", method \"clear_committee_id()void\", method \"set_committee_members(uint64)void\", method \"set_committee_votes(uint64)void\", method \"set_voting_duration_small(uint64)void\", method \"set_voting_duration_medium(uint64)void\", method \"set_voting_duration_large(uint64)void\", method \"set_quorum_small(uint64)void\", method \"set_quorum_medium(uint64)void\", method \"set_quorum_large(uint64)void\", method \"set_weighted_quorum_small(uint64)void\", method \"set_weighted_quorum_medium(uint64)void\", method \"set_weighted_quorum_large(uint64)void\", method \"vote(application,address,uint64,uint64)void\", method \"set_xgov_council(address)void\", method \"fund(application)void\", method \"finalize_proposal(application)void\", method \"drop_proposal(application)void\", method \"is_proposal(uint64)void\"",
      "defined_out": [
        "Method(clear_committee_id()void)",
        "Method(create_empty_proposal(address)uint64)",
        "Method(drop_proposal(application)void)",
        "Method(finalize_proposal(application)void)",
        "Method(fund(application)void)",
        "Method(is_proposal(uint64)void)",
        "Method(pause_proposals()void)",
        "Method(pause_registry()void)",
        "Method(resume_proposals()void)",
        "Method(resume_registry()void)",
        "Method(set_committee_id(byte[32])void)",
        "Method(set_committee_members(uint64)void)",
        "Method(set_committee_votes(uint64)void)",
        "Method(set_daemon_ops_funding_bps(uint64)void)",
        "Method(set_discussion_duration_large(uint64)void)",
        "Method(set_discussion_duration_medium(uint64)void)",
        "Method(set_discussion_duration_small(uint64)void)",
        "Method(set_max_requested_amount_large(uint64)void)",
        "Method(set_max_requested_amount_medium(uint64)void)",
        "Method(set_max_requested_amount_small(uint64)void)",
        "Method(set_min_requested_amount(uint64)void)",
        "Method(set_open_proposal_fee(uint64)void)",
        "Method(set_proposal_commitment_bps(uint64)void)",
        "Method(set_quorum_large(uint64)void)",
        "Method(set_quorum_medium(uint64)void)",
        "Method(set_quorum_small(uint64)void)",
        "Method(set_voting_duration_large(uint64)void)",
        "Method(set_voting_duration_medium(uint64)void)",
        "Method(set_voting_duration_small(uint64)void)",
        "Method(set_weighted_quorum_large(uint64)void)",
        "Method(set_weighted_quorum_medium(uint64)void)",
        "Method(set_weighted_quorum_small(uint64)void)",
        "Method(set_xgov_council(address)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(vote(application,address,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(pause_registry()void)",
        "Method(pause_proposals()void)",
        "Method(resume_registry()void)",
        "Method(resume_proposals()void)",
        "Method(create_empty_proposal(address)uint64)",
        "Method(set_proposal_commitment_bps(uint64)void)",
        "Method(set_min_requested_amount(uint64)void)",
        "Method(set_max_requested_amount_small(uint64)void)",
        "Method(set_max_requested_amount_medium(uint64)void)",
        "Method(set_max_requested_amount_large(uint64)void)",
        "Method(set_daemon_ops_funding_bps(uint64)void)",
        "Method(set_discussion_duration_small(uint64)void)",
        "Method(set_discussion_duration_medium(uint64)void)",
        "Method(set_discussion_duration_large(uint64)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(set_open_proposal_fee(uint64)void)",
        "Method(set_committee_id(byte[32])void)",
        "Method(clear_committee_id()void)",
        "Method(set_committee_members(uint64)void)",
        "Method(set_committee_votes(uint64)void)",
        "Method(set_voting_duration_small(uint64)void)",
        "Method(set_voting_duration_medium(uint64)void)",
        "Method(set_voting_duration_large(uint64)void)",
        "Method(set_quorum_small(uint64)void)",
        "Method(set_quorum_medium(uint64)void)",
        "Method(set_quorum_large(uint64)void)",
        "Method(set_weighted_quorum_small(uint64)void)",
        "Method(set_weighted_quorum_medium(uint64)void)",
        "Method(set_weighted_quorum_large(uint64)void)",
        "Method(vote(application,address,uint64,uint64)void)",
        "Method(set_xgov_council(address)void)",
        "Method(fund(application)void)",
        "Method(finalize_proposal(application)void)",
        "Method(drop_proposal(application)void)",
        "Method(is_proposal(uint64)void)"
      ]
    },
    "996": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(clear_committee_id()void)",
        "Method(create_empty_proposal(address)uint64)",
        "Method(drop_proposal(application)void)",
        "Method(finalize_proposal(application)void)",
        "Method(fund(application)void)",
        "Method(is_proposal(uint64)void)",
        "Method(pause_proposals()void)",
        "Method(pause_registry()void)",
        "Method(resume_proposals()void)",
        "Method(resume_registry()void)",
        "Method(set_committee_id(byte[32])void)",
        "Method(set_committee_members(uint64)void)",
        "Method(set_committee_votes(uint64)void)",
        "Method(set_daemon_ops_funding_bps(uint64)void)",
        "Method(set_discussion_duration_large(uint64)void)",
        "Method(set_discussion_duration_medium(uint64)void)",
        "Method(set_discussion_duration_small(uint64)void)",
        "Method(set_max_requested_amount_large(uint64)void)",
        "Method(set_max_requested_amount_medium(uint64)void)",
        "Method(set_max_requested_amount_small(uint64)void)",
        "Method(set_min_requested_amount(uint64)void)",
        "Method(set_open_proposal_fee(uint64)void)",
        "Method(set_proposal_commitment_bps(uint64)void)",
        "Method(set_quorum_large(uint64)void)",
        "Method(set_quorum_medium(uint64)void)",
        "Method(set_quorum_small(uint64)void)",
        "Method(set_voting_duration_large(uint64)void)",
        "Method(set_voting_duration_medium(uint64)void)",
        "Method(set_voting_duration_small(uint64)void)",
        "Method(set_weighted_quorum_large(uint64)void)",
        "Method(set_weighted_quorum_medium(uint64)void)",
        "Method(set_weighted_quorum_small(uint64)void)",
        "Method(set_xgov_council(address)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(vote(application,address,uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(pause_registry()void)",
        "Method(pause_proposals()void)",
        "Method(resume_registry()void)",
        "Method(resume_proposals()void)",
        "Method(create_empty_proposal(address)uint64)",
        "Method(set_proposal_commitment_bps(uint64)void)",
        "Method(set_min_requested_amount(uint64)void)",
        "Method(set_max_requested_amount_small(uint64)void)",
        "Method(set_max_requested_amount_medium(uint64)void)",
        "Method(set_max_requested_amount_large(uint64)void)",
        "Method(set_daemon_ops_funding_bps(uint64)void)",
        "Method(set_discussion_duration_small(uint64)void)",
        "Method(set_discussion_duration_medium(uint64)void)",
        "Method(set_discussion_duration_large(uint64)void)",
        "Method(set_xgov_daemon(address)void)",
        "Method(set_open_proposal_fee(uint64)void)",
        "Method(set_committee_id(byte[32])void)",
        "Method(clear_committee_id()void)",
        "Method(set_committee_members(uint64)void)",
        "Method(set_committee_votes(uint64)void)",
        "Method(set_voting_duration_small(uint64)void)",
        "Method(set_voting_duration_medium(uint64)void)",
        "Method(set_voting_duration_large(uint64)void)",
        "Method(set_quorum_small(uint64)void)",
        "Method(set_quorum_medium(uint64)void)",
        "Method(set_quorum_large(uint64)void)",
        "Method(set_weighted_quorum_small(uint64)void)",
        "Method(set_weighted_quorum_medium(uint64)void)",
        "Method(set_weighted_quorum_large(uint64)void)",
        "Method(vote(application,address,uint64,uint64)void)",
        "Method(set_xgov_council(address)void)",
        "Method(fund(application)void)",
        "Method(finalize_proposal(application)void)",
        "Method(drop_proposal(application)void)",
        "Method(is_proposal(uint64)void)",
        "tmp%2#0"
      ]
    },
    "999": {
      "op": "match main_pause_registry_route@5 main_pause_proposals_route@6 main_resume_registry_route@7 main_resume_proposals_route@8 main_create_empty_proposal_route@9 main_set_proposal_commitment_bps_route@10 main_set_min_requested_amount_route@11 main_set_max_requested_amount_small_route@12 main_set_max_requested_amount_medium_route@13 main_set_max_requested_amount_large_route@14 main_set_daemon_ops_funding_bps_route@15 main_set_discussion_duration_small_route@16 main_set_discussion_duration_medium_route@17 main_set_discussion_duration_large_route@18 main_set_xgov_daemon_route@19 main_set_open_proposal_fee_route@20 main_set_committee_id_route@21 main_clear_committee_id_route@22 main_set_committee_members_route@23 main_set_committee_votes_route@24 main_set_voting_duration_small_route@25 main_set_voting_duration_medium_route@26 main_set_voting_duration_large_route@27 main_set_quorum_small_route@28 main_set_quorum_medium_route@29 main_set_quorum_large_route@30 main_set_weighted_quorum_small_route@31 main_set_weighted_quorum_medium_route@32 main_set_weighted_quorum_large_route@33 main_vote_route@34 main_set_xgov_council_route@35 main_fund_route@36 main_finalize_proposal_route@37 main_drop_proposal_route@38 main_is_proposal_route@39",
      "stack_out": []
    },
    "1071": {
      "block": "main_after_if_else@42",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1072": {
      "op": "return",
      "stack_out": []
    },
    "1073": {
      "block": "main_is_proposal_route@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "1075": {
      "op": "!",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "1076": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1077": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "1079": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1080": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1081": {
      "op": "return",
      "stack_out": []
    },
    "1082": {
      "block": "main_drop_proposal_route@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "1084": {
      "op": "!",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "1085": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1086": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1088": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1089": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1092": {
      "op": "btoi",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "1093": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "1095": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.drop_proposal",
      "op": "callsub drop_proposal",
      "stack_out": []
    },
    "1098": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1099": {
      "op": "return",
      "stack_out": []
    },
    "1100": {
      "block": "main_finalize_proposal_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "1102": {
      "op": "!",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "1103": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1104": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "1106": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1107": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1110": {
      "op": "btoi",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "1111": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "1113": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.finalize_proposal",
      "op": "callsub finalize_proposal",
      "stack_out": []
    },
    "1116": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1117": {
      "op": "return",
      "stack_out": []
    },
    "1118": {
      "block": "main_fund_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "1120": {
      "op": "!",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "1121": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1122": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "1124": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1125": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1128": {
      "op": "btoi",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "1129": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "1131": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.fund",
      "op": "callsub fund",
      "stack_out": []
    },
    "1134": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1135": {
      "op": "return",
      "stack_out": []
    },
    "1136": {
      "block": "main_set_xgov_council_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1138": {
      "op": "!",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1139": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "1142": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1143": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "1146": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_council",
      "op": "callsub set_xgov_council",
      "stack_out": []
    },
    "1149": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1150": {
      "op": "return",
      "stack_out": []
    },
    "1151": {
      "block": "main_vote_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1153": {
      "op": "!",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1154": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1155": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "1157": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1158": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1161": {
      "op": "btoi",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "1162": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1164": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%3#0",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "1167": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%21#0",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1170": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1173": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.vote",
      "op": "callsub vote",
      "stack_out": []
    },
    "1176": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1177": {
      "op": "return",
      "stack_out": []
    },
    "1178": {
      "block": "main_set_weighted_quorum_large_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "1180": {
      "op": "!",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "1181": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1182": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "1184": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1185": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1188": {
      "op": "btoi",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1189": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_large",
      "op": "callsub set_weighted_quorum_large",
      "stack_out": []
    },
    "1192": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1193": {
      "op": "return",
      "stack_out": []
    },
    "1194": {
      "block": "main_set_weighted_quorum_medium_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1196": {
      "op": "!",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "1197": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1198": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1200": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1201": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1204": {
      "op": "btoi",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "1205": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_medium",
      "op": "callsub set_weighted_quorum_medium",
      "stack_out": []
    },
    "1208": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1209": {
      "op": "return",
      "stack_out": []
    },
    "1210": {
      "block": "main_set_weighted_quorum_small_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1212": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1213": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1214": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1216": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1217": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1220": {
      "op": "btoi",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1221": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_small",
      "op": "callsub set_weighted_quorum_small",
      "stack_out": []
    },
    "1224": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1225": {
      "op": "return",
      "stack_out": []
    },
    "1226": {
      "block": "main_set_quorum_large_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "1228": {
      "op": "!",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "1229": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1230": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "1232": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1233": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1236": {
      "op": "btoi",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1237": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_large",
      "op": "callsub set_quorum_large",
      "stack_out": []
    },
    "1240": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1241": {
      "op": "return",
      "stack_out": []
    },
    "1242": {
      "block": "main_set_quorum_medium_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1244": {
      "op": "!",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "1245": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1246": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "1248": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1249": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1252": {
      "op": "btoi",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "1253": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_medium",
      "op": "callsub set_quorum_medium",
      "stack_out": []
    },
    "1256": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1257": {
      "op": "return",
      "stack_out": []
    },
    "1258": {
      "block": "main_set_quorum_small_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "1260": {
      "op": "!",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1261": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1262": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "1264": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1265": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1268": {
      "op": "btoi",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "1269": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_small",
      "op": "callsub set_quorum_small",
      "stack_out": []
    },
    "1272": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1273": {
      "op": "return",
      "stack_out": []
    },
    "1274": {
      "block": "main_set_voting_duration_large_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "1276": {
      "op": "!",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "1277": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1278": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "1280": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1281": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1284": {
      "op": "btoi",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "1285": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_large",
      "op": "callsub set_voting_duration_large",
      "stack_out": []
    },
    "1288": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1289": {
      "op": "return",
      "stack_out": []
    },
    "1290": {
      "block": "main_set_voting_duration_medium_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "1292": {
      "op": "!",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "1293": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1294": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "1296": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1297": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1300": {
      "op": "btoi",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "1301": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_medium",
      "op": "callsub set_voting_duration_medium",
      "stack_out": []
    },
    "1304": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1305": {
      "op": "return",
      "stack_out": []
    },
    "1306": {
      "block": "main_set_voting_duration_small_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1308": {
      "op": "!",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1309": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1310": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "1312": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1313": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1316": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "1317": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_small",
      "op": "callsub set_voting_duration_small",
      "stack_out": []
    },
    "1320": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1321": {
      "op": "return",
      "stack_out": []
    },
    "1322": {
      "block": "main_set_committee_votes_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "1324": {
      "op": "!",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "1325": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1326": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "1328": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1329": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1332": {
      "op": "btoi",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1333": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes",
      "op": "callsub set_committee_votes",
      "stack_out": []
    },
    "1336": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1337": {
      "op": "return",
      "stack_out": []
    },
    "1338": {
      "block": "main_set_committee_members_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "1340": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "1341": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1342": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "1344": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1345": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1348": {
      "op": "btoi",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "1349": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members",
      "op": "callsub set_committee_members",
      "stack_out": []
    },
    "1352": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1353": {
      "op": "return",
      "stack_out": []
    },
    "1354": {
      "block": "main_clear_committee_id_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "1356": {
      "op": "!",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "1357": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1358": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "1360": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1361": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.clear_committee_id",
      "op": "callsub clear_committee_id"
    },
    "1364": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1365": {
      "op": "return",
      "stack_out": []
    },
    "1366": {
      "block": "main_set_committee_id_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "1368": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1369": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1370": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1372": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1373": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "1376": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id",
      "op": "callsub set_committee_id",
      "stack_out": []
    },
    "1379": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1380": {
      "op": "return",
      "stack_out": []
    },
    "1381": {
      "block": "main_set_open_proposal_fee_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "1383": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1384": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1385": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1387": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1388": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1391": {
      "op": "btoi",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1392": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_open_proposal_fee",
      "op": "callsub set_open_proposal_fee",
      "stack_out": []
    },
    "1395": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1396": {
      "op": "return",
      "stack_out": []
    },
    "1397": {
      "block": "main_set_xgov_daemon_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1399": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1400": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1401": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1403": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1404": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "1407": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_daemon",
      "op": "callsub set_xgov_daemon",
      "stack_out": []
    },
    "1410": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1411": {
      "op": "return",
      "stack_out": []
    },
    "1412": {
      "block": "main_set_discussion_duration_large_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1414": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1415": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1416": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1418": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1419": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1422": {
      "op": "btoi",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1423": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large",
      "op": "callsub set_discussion_duration_large",
      "stack_out": []
    },
    "1426": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1427": {
      "op": "return",
      "stack_out": []
    },
    "1428": {
      "block": "main_set_discussion_duration_medium_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1430": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1431": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1432": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1434": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1435": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1438": {
      "op": "btoi",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1439": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium",
      "op": "callsub set_discussion_duration_medium",
      "stack_out": []
    },
    "1442": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1443": {
      "op": "return",
      "stack_out": []
    },
    "1444": {
      "block": "main_set_discussion_duration_small_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1446": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1447": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1448": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1450": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1451": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1454": {
      "op": "btoi",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1455": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small",
      "op": "callsub set_discussion_duration_small",
      "stack_out": []
    },
    "1458": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1459": {
      "op": "return",
      "stack_out": []
    },
    "1460": {
      "block": "main_set_daemon_ops_funding_bps_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1462": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1463": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1464": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1466": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1467": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1470": {
      "op": "btoi",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1471": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_daemon_ops_funding_bps",
      "op": "callsub set_daemon_ops_funding_bps",
      "stack_out": []
    },
    "1474": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1475": {
      "op": "return",
      "stack_out": []
    },
    "1476": {
      "block": "main_set_max_requested_amount_large_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1478": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1479": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1480": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1482": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1483": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1486": {
      "op": "btoi",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1487": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large",
      "op": "callsub set_max_requested_amount_large",
      "stack_out": []
    },
    "1490": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1491": {
      "op": "return",
      "stack_out": []
    },
    "1492": {
      "block": "main_set_max_requested_amount_medium_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1494": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1495": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1496": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1498": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1499": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1502": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1503": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium",
      "op": "callsub set_max_requested_amount_medium",
      "stack_out": []
    },
    "1506": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1507": {
      "op": "return",
      "stack_out": []
    },
    "1508": {
      "block": "main_set_max_requested_amount_small_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1510": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1511": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1512": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1514": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1515": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1518": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1519": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small",
      "op": "callsub set_max_requested_amount_small",
      "stack_out": []
    },
    "1522": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1523": {
      "op": "return",
      "stack_out": []
    },
    "1524": {
      "block": "main_set_min_requested_amount_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1526": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1527": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1528": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1530": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1531": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1534": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1535": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount",
      "op": "callsub set_min_requested_amount",
      "stack_out": []
    },
    "1538": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1539": {
      "op": "return",
      "stack_out": []
    },
    "1540": {
      "block": "main_set_proposal_commitment_bps_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1542": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1543": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1544": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1546": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1547": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1550": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1551": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps",
      "op": "callsub set_proposal_commitment_bps",
      "stack_out": []
    },
    "1554": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1555": {
      "op": "return",
      "stack_out": []
    },
    "1556": {
      "block": "main_create_empty_proposal_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1558": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1559": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1560": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1562": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1563": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1566": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal",
      "op": "callsub create_empty_proposal",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1569": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1570": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1571": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1572": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1573": {
      "op": "log",
      "stack_out": []
    },
    "1574": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1575": {
      "op": "return",
      "stack_out": []
    },
    "1576": {
      "block": "main_resume_proposals_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1578": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1579": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1580": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1582": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1583": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.resume_proposals",
      "op": "callsub resume_proposals"
    },
    "1586": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1587": {
      "op": "return",
      "stack_out": []
    },
    "1588": {
      "block": "main_resume_registry_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1590": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1591": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1592": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1594": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1595": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.resume_registry",
      "op": "callsub resume_registry"
    },
    "1598": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1599": {
      "op": "return",
      "stack_out": []
    },
    "1600": {
      "block": "main_pause_proposals_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1602": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1603": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1604": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1606": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1607": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.pause_proposals",
      "op": "callsub pause_proposals"
    },
    "1610": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1611": {
      "op": "return",
      "stack_out": []
    },
    "1612": {
      "block": "main_pause_registry_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1614": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1615": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1616": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1618": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1619": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.pause_registry",
      "op": "callsub pause_registry"
    },
    "1622": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1623": {
      "op": "return",
      "stack_out": []
    },
    "1624": {
      "block": "main_bare_routing@40",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "1626": {
      "op": "bnz main_after_if_else@42",
      "stack_out": []
    },
    "1629": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "1631": {
      "op": "!",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1632": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1633": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1634": {
      "op": "return",
      "stack_out": []
    },
    "1635": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.pause_registry",
      "params": {},
      "block": "pause_registry",
      "stack_in": [],
      "op": "bytec 5 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "1637": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0x7061757365645f7265676973747279",
        "1"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "1"
      ]
    },
    "1638": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1639": {
      "retsub": true,
      "op": "retsub"
    },
    "1640": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.pause_proposals",
      "params": {},
      "block": "pause_proposals",
      "stack_in": [],
      "op": "bytec 6 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1642": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73",
        "1"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "1"
      ]
    },
    "1643": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1644": {
      "retsub": true,
      "op": "retsub"
    },
    "1645": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.resume_registry",
      "params": {},
      "block": "resume_registry",
      "stack_in": [],
      "op": "bytec 5 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "1647": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "0"
      ]
    },
    "1648": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1649": {
      "retsub": true,
      "op": "retsub"
    },
    "1650": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.resume_proposals",
      "params": {},
      "block": "resume_proposals",
      "stack_in": [],
      "op": "bytec 6 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1652": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "0"
      ]
    },
    "1653": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1654": {
      "retsub": true,
      "op": "retsub"
    },
    "1655": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal",
      "params": {
        "proposer#0": "bytes"
      },
      "block": "create_empty_proposal",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1658": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1660": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "check%0#0"
      ]
    },
    "1662": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1663": {
      "op": "itxn_begin"
    },
    "1664": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "20"
      ]
    },
    "1666": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1668": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "3"
      ]
    },
    "1670": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1672": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "1"
      ]
    },
    "1673": {
      "op": "itxn_field ExtraProgramPages",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1675": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw==",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "CoEBQw=="
      ]
    },
    "1681": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1683": {
      "op": "pushbytes base64(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)",
      "defined_out": [
        "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",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "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"
      ]
    },
    "5486": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5488": {
      "op": "pushbytes 0x216b1e07 // method \"create(address)string\"",
      "defined_out": [
        "Method(create(address)string)",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "Method(create(address)string)"
      ]
    },
    "5494": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5496": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_before#0",
        "proposer#0 (copy)"
      ],
      "stack_out": [
        "mbr_before#0",
        "proposer#0 (copy)"
      ]
    },
    "5498": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5500": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "appl"
      ]
    },
    "5501": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5503": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "0"
      ]
    },
    "5504": {
      "op": "itxn_field Fee",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5506": {
      "op": "itxn_submit"
    },
    "5507": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ]
    },
    "5509": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%1#0"
      ]
    },
    "5511": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%1#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "check%1#0"
      ]
    },
    "5513": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0"
      ]
    },
    "5514": {
      "op": "itxn_begin"
    },
    "5515": {
      "op": "dig 1",
      "defined_out": [
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "res.CreatedApplicationID#0 (copy)"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "res.CreatedApplicationID#0 (copy)"
      ]
    },
    "5517": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%2#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "5519": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0"
      ]
    },
    "5520": {
      "op": "intc_1 // 0",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "0"
      ]
    },
    "5521": {
      "op": "bytec_3 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0",
        "0x6f70656e5f70726f706f73616c5f666565",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "0",
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "5522": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5523": {
      "error": "check self.open_proposal_fee exists",
      "op": "assert // check self.open_proposal_fee exists",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "maybe_value%0#0"
      ]
    },
    "5524": {
      "op": "uncover 2",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%0#0",
        "mbr_after#0"
      ]
    },
    "5526": {
      "op": "uncover 4",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%0#0",
        "mbr_after#0",
        "mbr_before#0"
      ]
    },
    "5528": {
      "op": "-",
      "defined_out": [
        "maybe_value%0#0",
        "res.CreatedApplicationID#0",
        "tmp%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ]
    },
    "5529": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "inner_txn_params%1%%param_Amount_idx_0#0"
      ]
    },
    "5530": {
      "op": "itxn_field Amount",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0"
      ]
    },
    "5532": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5534": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "pay"
      ]
    },
    "5535": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5537": {
      "op": "intc_1 // 0",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0"
      ]
    },
    "5538": {
      "op": "itxn_field Fee",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5540": {
      "op": "itxn_submit"
    },
    "5541": {
      "retsub": true,
      "op": "retsub"
    },
    "5542": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps",
      "params": {
        "commitment_bps#0": "uint64"
      },
      "block": "set_proposal_commitment_bps",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5545": {
      "op": "bytec 7 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "5547": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "commitment_bps#0 (copy)"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "commitment_bps#0 (copy)"
      ]
    },
    "5549": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5550": {
      "retsub": true,
      "op": "retsub"
    },
    "5551": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount",
      "params": {
        "min_requested_amount#0": "uint64"
      },
      "block": "set_min_requested_amount",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5554": {
      "op": "bytec 8 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "5556": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "min_requested_amount#0 (copy)"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "min_requested_amount#0 (copy)"
      ]
    },
    "5558": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5559": {
      "retsub": true,
      "op": "retsub"
    },
    "5560": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small",
      "params": {
        "max_requested_amount#0": "uint64"
      },
      "block": "set_max_requested_amount_small",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5563": {
      "op": "bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "5565": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "max_requested_amount#0 (copy)"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "max_requested_amount#0 (copy)"
      ]
    },
    "5567": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5568": {
      "retsub": true,
      "op": "retsub"
    },
    "5569": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium",
      "params": {
        "max_requested_amount#0": "uint64"
      },
      "block": "set_max_requested_amount_medium",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5572": {
      "op": "bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "5574": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "max_requested_amount#0 (copy)"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "max_requested_amount#0 (copy)"
      ]
    },
    "5576": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5577": {
      "retsub": true,
      "op": "retsub"
    },
    "5578": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large",
      "params": {
        "max_requested_amount#0": "uint64"
      },
      "block": "set_max_requested_amount_large",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5581": {
      "op": "bytec 11 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "5583": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "max_requested_amount#0 (copy)"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "max_requested_amount#0 (copy)"
      ]
    },
    "5585": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5586": {
      "retsub": true,
      "op": "retsub"
    },
    "5587": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_daemon_ops_funding_bps",
      "params": {
        "daemon_ops_funding_bps#0": "uint64"
      },
      "block": "set_daemon_ops_funding_bps",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5590": {
      "op": "bytec 12 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ],
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ]
    },
    "5592": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "daemon_ops_funding_bps#0 (copy)"
      ],
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "daemon_ops_funding_bps#0 (copy)"
      ]
    },
    "5594": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5595": {
      "retsub": true,
      "op": "retsub"
    },
    "5596": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small",
      "params": {
        "discussion_duration#0": "uint64"
      },
      "block": "set_discussion_duration_small",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5599": {
      "op": "bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "5601": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "discussion_duration#0 (copy)"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "discussion_duration#0 (copy)"
      ]
    },
    "5603": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5604": {
      "retsub": true,
      "op": "retsub"
    },
    "5605": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium",
      "params": {
        "discussion_duration#0": "uint64"
      },
      "block": "set_discussion_duration_medium",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5608": {
      "op": "bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "5610": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "discussion_duration#0 (copy)"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "discussion_duration#0 (copy)"
      ]
    },
    "5612": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5613": {
      "retsub": true,
      "op": "retsub"
    },
    "5614": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large",
      "params": {
        "discussion_duration#0": "uint64"
      },
      "block": "set_discussion_duration_large",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5617": {
      "op": "bytec 15 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "5619": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "discussion_duration#0 (copy)"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "discussion_duration#0 (copy)"
      ]
    },
    "5621": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5622": {
      "retsub": true,
      "op": "retsub"
    },
    "5623": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_daemon",
      "params": {
        "xgov_daemon#0": "bytes"
      },
      "block": "set_xgov_daemon",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5626": {
      "op": "bytec 16 // 0x78676f765f6461656d6f6e",
      "defined_out": [
        "0x78676f765f6461656d6f6e"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e"
      ]
    },
    "5628": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f6461656d6f6e",
        "xgov_daemon#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e",
        "xgov_daemon#0 (copy)"
      ]
    },
    "5630": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5631": {
      "retsub": true,
      "op": "retsub"
    },
    "5632": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_open_proposal_fee",
      "params": {
        "open_proposal_fee#0": "uint64"
      },
      "block": "set_open_proposal_fee",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5635": {
      "op": "bytec_3 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565"
      ],
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "5636": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "open_proposal_fee#0 (copy)"
      ],
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "open_proposal_fee#0 (copy)"
      ]
    },
    "5638": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5639": {
      "retsub": true,
      "op": "retsub"
    },
    "5640": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id",
      "params": {
        "committee_id#0": "bytes"
      },
      "block": "set_committee_id",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5643": {
      "op": "bytec 4 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "5645": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x636f6d6d69747465655f6964",
        "committee_id#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "committee_id#0 (copy)"
      ]
    },
    "5647": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5648": {
      "retsub": true,
      "op": "retsub"
    },
    "5649": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.clear_committee_id",
      "params": {},
      "block": "clear_committee_id",
      "stack_in": [],
      "op": "bytec 4 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "5651": {
      "op": "bytec 17 // 0x3030303030303030303030303030303030303030303030303030303030303030",
      "defined_out": [
        "0x3030303030303030303030303030303030303030303030303030303030303030",
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "0x3030303030303030303030303030303030303030303030303030303030303030"
      ]
    },
    "5653": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5654": {
      "retsub": true,
      "op": "retsub"
    },
    "5655": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members",
      "params": {
        "committee_members#0": "uint64"
      },
      "block": "set_committee_members",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5658": {
      "op": "bytec 18 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "5660": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "committee_members#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "committee_members#0 (copy)"
      ]
    },
    "5662": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5663": {
      "retsub": true,
      "op": "retsub"
    },
    "5664": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes",
      "params": {
        "committee_votes#0": "uint64"
      },
      "block": "set_committee_votes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5667": {
      "op": "bytec 19 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "5669": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573",
        "committee_votes#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "committee_votes#0 (copy)"
      ]
    },
    "5671": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5672": {
      "retsub": true,
      "op": "retsub"
    },
    "5673": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_small",
      "params": {
        "voting_duration#0": "uint64"
      },
      "block": "set_voting_duration_small",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5676": {
      "op": "bytec 20 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "5678": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "voting_duration#0 (copy)"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "voting_duration#0 (copy)"
      ]
    },
    "5680": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5681": {
      "retsub": true,
      "op": "retsub"
    },
    "5682": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_medium",
      "params": {
        "voting_duration#0": "uint64"
      },
      "block": "set_voting_duration_medium",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5685": {
      "op": "bytec 21 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "5687": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "voting_duration#0 (copy)"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "voting_duration#0 (copy)"
      ]
    },
    "5689": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5690": {
      "retsub": true,
      "op": "retsub"
    },
    "5691": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_large",
      "params": {
        "voting_duration#0": "uint64"
      },
      "block": "set_voting_duration_large",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5694": {
      "op": "bytec 22 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "5696": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "voting_duration#0 (copy)"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "voting_duration#0 (copy)"
      ]
    },
    "5698": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5699": {
      "retsub": true,
      "op": "retsub"
    },
    "5700": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_small",
      "params": {
        "quorum#0": "uint64"
      },
      "block": "set_quorum_small",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5703": {
      "op": "bytec 23 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0x71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "5705": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x71756f72756d5f736d616c6c",
        "quorum#0 (copy)"
      ],
      "stack_out": [
        "0x71756f72756d5f736d616c6c",
        "quorum#0 (copy)"
      ]
    },
    "5707": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5708": {
      "retsub": true,
      "op": "retsub"
    },
    "5709": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_medium",
      "params": {
        "quorum#0": "uint64"
      },
      "block": "set_quorum_medium",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5712": {
      "op": "bytec 24 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0x71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "5714": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x71756f72756d5f6d656469756d",
        "quorum#0 (copy)"
      ],
      "stack_out": [
        "0x71756f72756d5f6d656469756d",
        "quorum#0 (copy)"
      ]
    },
    "5716": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5717": {
      "retsub": true,
      "op": "retsub"
    },
    "5718": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_large",
      "params": {
        "quorum#0": "uint64"
      },
      "block": "set_quorum_large",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5721": {
      "op": "bytec 25 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0x71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x71756f72756d5f6c61726765"
      ]
    },
    "5723": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x71756f72756d5f6c61726765",
        "quorum#0 (copy)"
      ],
      "stack_out": [
        "0x71756f72756d5f6c61726765",
        "quorum#0 (copy)"
      ]
    },
    "5725": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5726": {
      "retsub": true,
      "op": "retsub"
    },
    "5727": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_small",
      "params": {
        "weighted_quorum#0": "uint64"
      },
      "block": "set_weighted_quorum_small",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5730": {
      "op": "bytec 26 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "5732": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "weighted_quorum#0 (copy)"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "weighted_quorum#0 (copy)"
      ]
    },
    "5734": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5735": {
      "retsub": true,
      "op": "retsub"
    },
    "5736": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_medium",
      "params": {
        "weighted_quorum#0": "uint64"
      },
      "block": "set_weighted_quorum_medium",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5739": {
      "op": "bytec 27 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "5741": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "weighted_quorum#0 (copy)"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "weighted_quorum#0 (copy)"
      ]
    },
    "5743": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5744": {
      "retsub": true,
      "op": "retsub"
    },
    "5745": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_large",
      "params": {
        "weighted_quorum#0": "uint64"
      },
      "block": "set_weighted_quorum_large",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5748": {
      "op": "bytec 28 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "5750": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "weighted_quorum#0 (copy)"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "weighted_quorum#0 (copy)"
      ]
    },
    "5752": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5753": {
      "retsub": true,
      "op": "retsub"
    },
    "5754": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.vote",
      "params": {
        "proposal_app#0": "uint64",
        "voter#0": "bytes",
        "approvals#0": "bytes",
        "rejections#0": "bytes"
      },
      "block": "vote",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "5757": {
      "op": "itxn_begin"
    },
    "5758": {
      "op": "frame_dig -4",
      "defined_out": [
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0 (copy)"
      ]
    },
    "5760": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5762": {
      "op": "pushbytes 0x1841a0d2 // method \"vote(address,uint64,uint64)string\"",
      "defined_out": [
        "Method(vote(address,uint64,uint64)string)"
      ],
      "stack_out": [
        "Method(vote(address,uint64,uint64)string)"
      ]
    },
    "5768": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5770": {
      "op": "frame_dig -3",
      "defined_out": [
        "voter#0 (copy)"
      ],
      "stack_out": [
        "voter#0 (copy)"
      ]
    },
    "5772": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5774": {
      "op": "frame_dig -2",
      "defined_out": [
        "approvals#0 (copy)"
      ],
      "stack_out": [
        "approvals#0 (copy)"
      ]
    },
    "5776": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5778": {
      "op": "frame_dig -1",
      "defined_out": [
        "rejections#0 (copy)"
      ],
      "stack_out": [
        "rejections#0 (copy)"
      ]
    },
    "5780": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5782": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5783": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5785": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5786": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5788": {
      "op": "itxn_submit"
    },
    "5789": {
      "op": "itxn LastLog"
    },
    "5791": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5793": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "5796": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "5797": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5798": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5799": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5802": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "5803": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5804": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5805": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5806": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5807": {
      "op": "bz vote_ternary_false@3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5810": {
      "op": "intc_1 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5811": {
      "block": "vote_ternary_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz vote_after_if_else@14",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5814": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5815": {
      "op": "frame_dig 2",
      "defined_out": [
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0"
      ]
    },
    "5817": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "tmp%4#0 (copy)"
      ]
    },
    "5818": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "5820": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "5821": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "5822": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "5824": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "5826": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0"
      ]
    },
    "5827": {
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5829": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "5830": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ]
    },
    "5832": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0"
      ]
    },
    "5833": {
      "op": "bytec 30 // \"Unauthorized\"",
      "defined_out": [
        "\"Unauthorized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\""
      ]
    },
    "5835": {
      "op": "pushbytess \"Voter not found\" \"Voter already voted\" \"Votes exceeded\" // \"Voter not found\", \"Voter already voted\", \"Votes exceeded\"",
      "defined_out": [
        "\"Unauthorized\"",
        "\"Voter already voted\"",
        "\"Voter not found\"",
        "\"Votes exceeded\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\""
      ]
    },
    "5888": {
      "op": "bytec 31 // \"Missing Config\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Unauthorized\"",
        "\"Voter already voted\"",
        "\"Voter not found\"",
        "\"Votes exceeded\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\"",
        "\"Missing Config\""
      ]
    },
    "5890": {
      "op": "bytec_1 // \"Wrong Proposal Status or finalized\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Unauthorized\"",
        "\"Voter already voted\"",
        "\"Voter not found\"",
        "\"Votes exceeded\"",
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\"",
        "\"Missing Config\"",
        "\"Wrong Proposal Status or finalized\""
      ]
    },
    "5891": {
      "op": "pushbytes \"Voting Period Expired\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Unauthorized\"",
        "\"Voter already voted\"",
        "\"Voter not found\"",
        "\"Votes exceeded\"",
        "\"Voting Period Expired\"",
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\"",
        "\"Missing Config\"",
        "\"Wrong Proposal Status or finalized\"",
        "\"Voting Period Expired\""
      ]
    },
    "5914": {
      "op": "uncover 7",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "\"Unauthorized\"",
        "\"Voter not found\"",
        "\"Voter already voted\"",
        "\"Votes exceeded\"",
        "\"Missing Config\"",
        "\"Wrong Proposal Status or finalized\"",
        "\"Voting Period Expired\"",
        "error_without_prefix#0"
      ]
    },
    "5916": {
      "op": "match vote_switch_case_0@6 vote_switch_case_1@7 vote_switch_case_2@8 vote_switch_case_3@9 vote_switch_case_4@10 vote_switch_case_5@11 vote_switch_case_6@12",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5932": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "5933": {
      "block": "vote_switch_case_6@12",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Voting Period Expired",
      "op": "err // Voting Period Expired"
    },
    "5934": {
      "block": "vote_switch_case_5@11",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Wrong Proposal Status or finalized",
      "op": "err // Wrong Proposal Status or finalized"
    },
    "5935": {
      "block": "vote_switch_case_4@10",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Missing Config",
      "op": "err // Missing Config"
    },
    "5936": {
      "block": "vote_switch_case_3@9",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Votes exceeded",
      "op": "err // Votes exceeded"
    },
    "5937": {
      "block": "vote_switch_case_2@8",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Voter already voted",
      "op": "err // Voter already voted"
    },
    "5938": {
      "block": "vote_switch_case_1@7",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Voter not found",
      "op": "err // Voter not found"
    },
    "5939": {
      "block": "vote_switch_case_0@6",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Unauthorized",
      "op": "err // Unauthorized"
    },
    "5940": {
      "block": "vote_after_if_else@14",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "5941": {
      "block": "vote_ternary_false@3",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "5943": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "5946": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "5947": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5948": {
      "op": "b vote_ternary_merge@4"
    },
    "5951": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_council",
      "params": {
        "xgov_council#0": "bytes"
      },
      "block": "set_xgov_council",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5954": {
      "op": "bytec 29 // 0x78676f765f636f756e63696c",
      "defined_out": [
        "0x78676f765f636f756e63696c"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c"
      ]
    },
    "5956": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f636f756e63696c",
        "xgov_council#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c",
        "xgov_council#0 (copy)"
      ]
    },
    "5958": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5959": {
      "retsub": true,
      "op": "retsub"
    },
    "5960": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.fund",
      "params": {
        "proposal_app#0": "uint64"
      },
      "block": "fund",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5963": {
      "op": "itxn_begin"
    },
    "5964": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0 (copy)"
      ]
    },
    "5966": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5968": {
      "op": "pushbytes 0x8a5e4c80 // method \"fund()string\"",
      "defined_out": [
        "Method(fund()string)"
      ],
      "stack_out": [
        "Method(fund()string)"
      ]
    },
    "5974": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5976": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5977": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5979": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5980": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5982": {
      "op": "itxn_submit"
    },
    "5983": {
      "op": "itxn LastLog"
    },
    "5985": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5987": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "5990": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "5991": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5992": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5993": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "5996": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "5997": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5998": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5999": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "6000": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "6001": {
      "op": "bz fund_ternary_false@3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6004": {
      "op": "intc_1 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "6005": {
      "block": "fund_ternary_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz fund_after_if_else@9",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6008": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4"
      ]
    },
    "6009": {
      "op": "frame_dig 2",
      "defined_out": [
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0"
      ]
    },
    "6011": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "tmp%4#0 (copy)"
      ]
    },
    "6012": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "6014": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "6015": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "6016": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "6018": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "6020": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0"
      ]
    },
    "6021": {
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6023": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "6024": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ]
    },
    "6026": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0"
      ]
    },
    "6027": {
      "op": "bytec 30 // \"Unauthorized\"",
      "defined_out": [
        "\"Unauthorized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\""
      ]
    },
    "6029": {
      "op": "bytec_1 // \"Wrong Proposal Status or finalized\"",
      "defined_out": [
        "\"Unauthorized\"",
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Unauthorized\"",
        "\"Wrong Proposal Status or finalized\""
      ]
    },
    "6030": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "\"Unauthorized\"",
        "\"Wrong Proposal Status or finalized\"",
        "error_without_prefix#0"
      ]
    },
    "6032": {
      "op": "match fund_switch_case_0@6 fund_switch_case_1@7",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6038": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "6039": {
      "block": "fund_switch_case_1@7",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Wrong Proposal Status or finalized",
      "op": "err // Wrong Proposal Status or finalized"
    },
    "6040": {
      "block": "fund_switch_case_0@6",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Unauthorized",
      "op": "err // Unauthorized"
    },
    "6041": {
      "block": "fund_after_if_else@9",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "6042": {
      "block": "fund_ternary_false@3",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "6044": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6047": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "6048": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "6049": {
      "op": "b fund_ternary_merge@4"
    },
    "6052": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.finalize_proposal",
      "params": {
        "proposal_app#0": "uint64"
      },
      "block": "finalize_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6055": {
      "op": "itxn_begin"
    },
    "6056": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0 (copy)"
      ]
    },
    "6058": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "6060": {
      "op": "pushbytes 0x802069b4 // method \"finalize()string\"",
      "defined_out": [
        "Method(finalize()string)"
      ],
      "stack_out": [
        "Method(finalize()string)"
      ]
    },
    "6066": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "6068": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "6069": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6071": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6072": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6074": {
      "op": "itxn_submit"
    },
    "6075": {
      "op": "itxn LastLog"
    },
    "6077": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6079": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "6082": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "6083": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "6084": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "6085": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6088": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "6089": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6090": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "6091": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "6092": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "6093": {
      "op": "bz finalize_proposal_ternary_false@3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6096": {
      "op": "intc_1 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "6097": {
      "block": "finalize_proposal_ternary_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz finalize_proposal_after_if_else@10",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6100": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4"
      ]
    },
    "6101": {
      "op": "frame_dig 2",
      "defined_out": [
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0"
      ]
    },
    "6103": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "tmp%4#0 (copy)"
      ]
    },
    "6104": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "6106": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "6107": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "6108": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "6110": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "6112": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0"
      ]
    },
    "6113": {
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6115": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "6116": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ]
    },
    "6118": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0"
      ]
    },
    "6119": {
      "op": "bytec_1 // \"Wrong Proposal Status or finalized\"",
      "defined_out": [
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status or finalized\""
      ]
    },
    "6120": {
      "op": "bytec 31 // \"Missing Config\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status or finalized\"",
        "\"Missing Config\""
      ]
    },
    "6122": {
      "op": "pushbytes \"There are voters assigned to this proposal\"",
      "defined_out": [
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\"",
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status or finalized\"",
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\""
      ]
    },
    "6166": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "\"Wrong Proposal Status or finalized\"",
        "\"Missing Config\"",
        "\"There are voters assigned to this proposal\"",
        "error_without_prefix#0"
      ]
    },
    "6168": {
      "op": "match finalize_proposal_switch_case_0@6 finalize_proposal_switch_case_1@7 finalize_proposal_switch_case_2@8",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6176": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "6177": {
      "block": "finalize_proposal_switch_case_2@8",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "There are voters assigned to this proposal",
      "op": "err // There are voters assigned to this proposal"
    },
    "6178": {
      "block": "finalize_proposal_switch_case_1@7",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Missing Config",
      "op": "err // Missing Config"
    },
    "6179": {
      "block": "finalize_proposal_switch_case_0@6",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Wrong Proposal Status or finalized",
      "op": "err // Wrong Proposal Status or finalized"
    },
    "6180": {
      "block": "finalize_proposal_after_if_else@10",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "6181": {
      "block": "finalize_proposal_ternary_false@3",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "6183": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6186": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "6187": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "6188": {
      "op": "b finalize_proposal_ternary_merge@4"
    },
    "6191": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.drop_proposal",
      "params": {
        "proposal_app#0": "uint64"
      },
      "block": "drop_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6194": {
      "op": "itxn_begin"
    },
    "6195": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0 (copy)"
      ]
    },
    "6197": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "6199": {
      "op": "pushbytes 0x7371321a // method \"drop()string\"",
      "defined_out": [
        "Method(drop()string)"
      ],
      "stack_out": [
        "Method(drop()string)"
      ]
    },
    "6205": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "6207": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "6208": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6210": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6211": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6213": {
      "op": "itxn_submit"
    },
    "6214": {
      "op": "itxn LastLog"
    },
    "6216": {
      "op": "dupn 2",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6218": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "6221": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "6222": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "6223": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "6224": {
      "op": "extract 6 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6227": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "6228": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6229": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "6230": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "6231": {
      "op": "<",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "6232": {
      "op": "bz drop_proposal_ternary_false@3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6235": {
      "op": "intc_1 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "6236": {
      "block": "drop_proposal_ternary_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz drop_proposal_after_if_else@8",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6239": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4"
      ]
    },
    "6240": {
      "op": "frame_dig 2",
      "defined_out": [
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0"
      ]
    },
    "6242": {
      "op": "dup",
      "defined_out": [
        "4",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "tmp%4#0 (copy)"
      ]
    },
    "6243": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "6245": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "6246": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4"
      ]
    },
    "6247": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "is_out_of_bounds%0#0",
        "4",
        "tmp%4#0 (copy)"
      ]
    },
    "6249": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4",
        "tmp%4#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "6251": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0"
      ]
    },
    "6252": {
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "bounded_index%0#0",
        "awst_tmp%1#0"
      ]
    },
    "6254": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0"
      ]
    },
    "6255": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ]
    },
    "6257": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0"
      ]
    },
    "6258": {
      "op": "bytec_1 // \"Wrong Proposal Status or finalized\"",
      "defined_out": [
        "\"Wrong Proposal Status or finalized\"",
        "awst_tmp%1#0",
        "error_without_prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "error_without_prefix#0",
        "\"Wrong Proposal Status or finalized\""
      ]
    },
    "6259": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "\"Wrong Proposal Status or finalized\"",
        "error_without_prefix#0"
      ]
    },
    "6260": {
      "op": "match drop_proposal_switch_case_0@6",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6264": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "6265": {
      "block": "drop_proposal_switch_case_0@6",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Wrong Proposal Status or finalized",
      "op": "err // Wrong Proposal Status or finalized"
    },
    "6266": {
      "block": "drop_proposal_after_if_else@8",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "6267": {
      "block": "drop_proposal_ternary_false@3",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "6269": {
      "op": "extract 6 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6272": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "6273": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "6274": {
      "op": "b drop_proposal_ternary_merge@4"
    }
  }
}