{
  "version": 3,
  "sources": [
    "../../xgov_registry_mock/contract.py"
  ],
  "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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 4 6 604800 1209600 1814400"
    },
    "16": {
      "op": "bytecblock 0x151f7c75 \"Wrong Proposal Status or Decommissioned\" \"ERR:\" 0x6f70656e5f70726f706f73616c5f666565 0x636f6d6d69747465655f6964 0x7061757365645f7265676973747279 0x7061757365645f70726f706f73616c73 0x70726f706f73616c5f636f6d6d69746d656e745f627073 0x6d696e5f7265717565737465645f616d6f756e74 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d 0x6d61785f7265717565737465645f616d6f756e745f6c61726765 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d 0x64697363757373696f6e5f6475726174696f6e5f6c61726765 0x78676f765f6461656d6f6e base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) 0x636f6d6d69747465655f6d656d62657273 0x636f6d6d69747465655f766f746573 0x766f74696e675f6475726174696f6e5f736d616c6c 0x766f74696e675f6475726174696f6e5f6d656469756d 0x766f74696e675f6475726174696f6e5f6c61726765 0x71756f72756d5f736d616c6c 0x71756f72756d5f6d656469756d 0x71756f72756d5f6c61726765 0x77656967687465645f71756f72756d5f736d616c6c 0x77656967687465645f71756f72756d5f6d656469756d 0x77656967687465645f71756f72756d5f6c61726765 0x78676f765f636f756e63696c \"Unauthorized\" \"Missing Config\""
    },
    "661": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "663": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "666": {
      "op": "bytec 7 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073"
    },
    "668": {
      "op": "pushint 100 // 100"
    },
    "670": {
      "op": "app_global_put"
    },
    "671": {
      "op": "bytec 8 // 0x6d696e5f7265717565737465645f616d6f756e74"
    },
    "673": {
      "op": "pushint 10000000000 // 10000000000"
    },
    "679": {
      "op": "app_global_put"
    },
    "680": {
      "op": "bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
    },
    "682": {
      "op": "pushint 50000000000 // 50000000000"
    },
    "689": {
      "op": "app_global_put"
    },
    "690": {
      "op": "bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
    },
    "692": {
      "op": "pushint 250000000000 // 250000000000"
    },
    "699": {
      "op": "app_global_put"
    },
    "700": {
      "op": "bytec 11 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
    },
    "702": {
      "op": "pushint 500000000000 // 500000000000"
    },
    "709": {
      "op": "app_global_put"
    },
    "710": {
      "op": "bytec 12 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
    },
    "712": {
      "op": "pushint 500 // 500"
    },
    "715": {
      "op": "app_global_put"
    },
    "716": {
      "op": "bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
    },
    "718": {
      "op": "intc 4 // 604800"
    },
    "720": {
      "op": "app_global_put"
    },
    "721": {
      "op": "bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
    },
    "723": {
      "op": "intc 5 // 1209600"
    },
    "725": {
      "op": "app_global_put"
    },
    "726": {
      "op": "bytec 15 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
    },
    "728": {
      "op": "intc 6 // 1814400"
    },
    "730": {
      "op": "app_global_put"
    },
    "731": {
      "op": "bytec 16 // 0x78676f765f6461656d6f6e"
    },
    "733": {
      "op": "bytec 17 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"
    },
    "735": {
      "op": "app_global_put"
    },
    "736": {
      "op": "bytec_3 // 0x6f70656e5f70726f706f73616c5f666565"
    },
    "737": {
      "op": "pushint 100000000 // 100000000"
    },
    "742": {
      "op": "app_global_put"
    },
    "743": {
      "op": "bytec 4 // 0x636f6d6d69747465655f6964"
    },
    "745": {
      "op": "pushbytes 0x"
    },
    "747": {
      "op": "app_global_put"
    },
    "748": {
      "op": "bytec 18 // 0x636f6d6d69747465655f6d656d62657273"
    },
    "750": {
      "op": "intc_1 // 0"
    },
    "751": {
      "op": "app_global_put"
    },
    "752": {
      "op": "bytec 19 // 0x636f6d6d69747465655f766f746573"
    },
    "754": {
      "op": "intc_1 // 0"
    },
    "755": {
      "op": "app_global_put"
    },
    "756": {
      "op": "bytec 20 // 0x766f74696e675f6475726174696f6e5f736d616c6c"
    },
    "758": {
      "op": "intc 4 // 604800"
    },
    "760": {
      "op": "app_global_put"
    },
    "761": {
      "op": "bytec 21 // 0x766f74696e675f6475726174696f6e5f6d656469756d"
    },
    "763": {
      "op": "intc 5 // 1209600"
    },
    "765": {
      "op": "app_global_put"
    },
    "766": {
      "op": "bytec 22 // 0x766f74696e675f6475726174696f6e5f6c61726765"
    },
    "768": {
      "op": "intc 6 // 1814400"
    },
    "770": {
      "op": "app_global_put"
    },
    "771": {
      "op": "bytec 23 // 0x71756f72756d5f736d616c6c"
    },
    "773": {
      "op": "pushint 1000 // 1000"
    },
    "776": {
      "op": "app_global_put"
    },
    "777": {
      "op": "bytec 24 // 0x71756f72756d5f6d656469756d"
    },
    "779": {
      "op": "pushint 1500 // 1500"
    },
    "782": {
      "op": "app_global_put"
    },
    "783": {
      "op": "bytec 25 // 0x71756f72756d5f6c61726765"
    },
    "785": {
      "op": "pushint 2000 // 2000"
    },
    "788": {
      "op": "app_global_put"
    },
    "789": {
      "op": "bytec 26 // 0x77656967687465645f71756f72756d5f736d616c6c"
    },
    "791": {
      "op": "pushint 2000 // 2000"
    },
    "794": {
      "op": "app_global_put"
    },
    "795": {
      "op": "bytec 27 // 0x77656967687465645f71756f72756d5f6d656469756d"
    },
    "797": {
      "op": "pushint 3000 // 3000"
    },
    "800": {
      "op": "app_global_put"
    },
    "801": {
      "op": "bytec 28 // 0x77656967687465645f71756f72756d5f6c61726765"
    },
    "803": {
      "op": "pushint 4000 // 4000"
    },
    "806": {
      "op": "app_global_put"
    },
    "807": {
      "op": "bytec 29 // 0x78676f765f636f756e63696c"
    },
    "809": {
      "op": "bytec 17 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"
    },
    "811": {
      "op": "app_global_put"
    },
    "812": {
      "op": "bytec 5 // 0x7061757365645f7265676973747279"
    },
    "814": {
      "op": "intc_1 // 0"
    },
    "815": {
      "op": "app_global_put"
    },
    "816": {
      "op": "bytec 6 // 0x7061757365645f70726f706f73616c73"
    },
    "818": {
      "op": "intc_1 // 0"
    },
    "819": {
      "op": "app_global_put"
    },
    "820": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "822": {
      "op": "bz main_bare_routing@40",
      "stack_out": []
    },
    "825": {
      "op": "pushbytess 0x86f7e0e6 0x39e26d8a 0x98352e86 0xfa4ed6e2 0xc386b03f 0x6811eb76 0x37235b22 0xbbc72d1b 0xd17676d9 0x7cd79aad 0x1c71f4e7 0x29dfd021 0x34a5dc55 0xbb0db011 0x84b7d268 0x839dc51d 0x504c31b9 0x56ad1c6f 0xf83579fd 0x520e1f64 0x53802148 0xa4f766f6 0xa9998b1d 0x4e9c607c 0x650dfa8b 0xc887f086 0x4af84ea5 0x2c64e86f 0x16acce3b 0x886b3b04 0x37d6adf1 0x45f6ca71 0xb6eb1d9b 0x9bf22526 0x26983200 // method \"pause_registry()void\", method \"pause_proposals()void\", method \"resume_registry()void\", method \"resume_proposals()void\", method \"create_empty_proposal(address)uint64\", method \"set_proposal_commitment_bps(uint64)void\", method \"set_min_requested_amount(uint64)void\", method \"set_max_requested_amount_small(uint64)void\", method \"set_max_requested_amount_medium(uint64)void\", method \"set_max_requested_amount_large(uint64)void\", method \"set_daemon_ops_funding_bps(uint64)void\", method \"set_discussion_duration_small(uint64)void\", method \"set_discussion_duration_medium(uint64)void\", method \"set_discussion_duration_large(uint64)void\", method \"set_xgov_daemon(address)void\", method \"set_open_proposal_fee(uint64)void\", method \"set_committee_id(byte[32])void\", method \"clear_committee_id()void\", method \"set_committee_members(uint64)void\", method \"set_committee_votes(uint64)void\", method \"set_voting_duration_small(uint64)void\", method \"set_voting_duration_medium(uint64)void\", method \"set_voting_duration_large(uint64)void\", method \"set_quorum_small(uint64)void\", method \"set_quorum_medium(uint64)void\", method \"set_quorum_large(uint64)void\", method \"set_weighted_quorum_small(uint64)void\", method \"set_weighted_quorum_medium(uint64)void\", method \"set_weighted_quorum_large(uint64)void\", method \"vote(application,address,uint64,uint64)void\", method \"set_xgov_council(address)void\", method \"fund(application)void\", method \"decommission_proposal(application)void\", method \"drop_proposal(application)void\", method \"is_proposal(uint64)void\""
    },
    "1002": {
      "op": "txna ApplicationArgs 0"
    },
    "1005": {
      "op": "match main_pause_registry_route@5 main_pause_proposals_route@6 main_resume_registry_route@7 main_resume_proposals_route@8 main_create_empty_proposal_route@9 main_set_proposal_commitment_bps_route@10 main_set_min_requested_amount_route@11 main_set_max_requested_amount_small_route@12 main_set_max_requested_amount_medium_route@13 main_set_max_requested_amount_large_route@14 main_set_daemon_ops_funding_bps_route@15 main_set_discussion_duration_small_route@16 main_set_discussion_duration_medium_route@17 main_set_discussion_duration_large_route@18 main_set_xgov_daemon_route@19 main_set_open_proposal_fee_route@20 main_set_committee_id_route@21 main_clear_committee_id_route@22 main_set_committee_members_route@23 main_set_committee_votes_route@24 main_set_voting_duration_small_route@25 main_set_voting_duration_medium_route@26 main_set_voting_duration_large_route@27 main_set_quorum_small_route@28 main_set_quorum_medium_route@29 main_set_quorum_large_route@30 main_set_weighted_quorum_small_route@31 main_set_weighted_quorum_medium_route@32 main_set_weighted_quorum_large_route@33 main_vote_route@34 main_set_xgov_council_route@35 main_fund_route@36 main_decommission_proposal_route@37 main_drop_proposal_route@38 main_is_proposal_route@39"
    },
    "1077": {
      "block": "main_after_if_else@42",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1078": {
      "op": "return"
    },
    "1079": {
      "block": "main_is_proposal_route@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "1081": {
      "op": "!",
      "defined_out": [
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0"
      ]
    },
    "1082": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1083": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "1085": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1086": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1087": {
      "op": "return"
    },
    "1088": {
      "block": "main_drop_proposal_route@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "1090": {
      "op": "!",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "1091": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1092": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "1094": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1095": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%198#0"
      ],
      "stack_out": [
        "tmp%198#0"
      ]
    },
    "1098": {
      "op": "btoi",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "1099": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "1101": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.drop_proposal",
      "op": "callsub drop_proposal",
      "stack_out": []
    },
    "1104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1105": {
      "op": "return"
    },
    "1106": {
      "block": "main_decommission_proposal_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "1108": {
      "op": "!",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "1109": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1110": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "1112": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1113": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "1116": {
      "op": "btoi",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "1117": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "1119": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.decommission_proposal",
      "op": "callsub decommission_proposal",
      "stack_out": []
    },
    "1122": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1123": {
      "op": "return"
    },
    "1124": {
      "block": "main_fund_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "1126": {
      "op": "!",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "1127": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1128": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "1130": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1131": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "1134": {
      "op": "btoi",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "1135": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%186#0"
      ]
    },
    "1137": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.fund",
      "op": "callsub fund",
      "stack_out": []
    },
    "1140": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1141": {
      "op": "return"
    },
    "1142": {
      "block": "main_set_xgov_council_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1144": {
      "op": "!",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "1145": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1146": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "1148": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1149": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "1152": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_council",
      "op": "callsub set_xgov_council",
      "stack_out": []
    },
    "1155": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1156": {
      "op": "return"
    },
    "1157": {
      "block": "main_vote_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1159": {
      "op": "!",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "1160": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1161": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "1163": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1164": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "1167": {
      "op": "btoi",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "1168": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "1170": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%171#0",
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%171#0",
        "tmp%172#0"
      ]
    },
    "1173": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%171#0",
        "tmp%172#0",
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%171#0",
        "tmp%172#0",
        "tmp%173#0"
      ]
    },
    "1176": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%171#0",
        "tmp%172#0",
        "tmp%173#0",
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%171#0",
        "tmp%172#0",
        "tmp%173#0",
        "tmp%174#0"
      ]
    },
    "1179": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.vote",
      "op": "callsub vote",
      "stack_out": []
    },
    "1182": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1183": {
      "op": "return"
    },
    "1184": {
      "block": "main_set_weighted_quorum_large_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "1186": {
      "op": "!",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "1187": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1188": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "1190": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1191": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "1194": {
      "op": "btoi",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "1195": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_large",
      "op": "callsub set_weighted_quorum_large",
      "stack_out": []
    },
    "1198": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1199": {
      "op": "return"
    },
    "1200": {
      "block": "main_set_weighted_quorum_medium_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "1202": {
      "op": "!",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "1203": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1204": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "1206": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1207": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "1210": {
      "op": "btoi",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "1211": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_medium",
      "op": "callsub set_weighted_quorum_medium",
      "stack_out": []
    },
    "1214": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1215": {
      "op": "return"
    },
    "1216": {
      "block": "main_set_weighted_quorum_small_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1218": {
      "op": "!",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1219": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1220": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "1222": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1223": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "1226": {
      "op": "btoi",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "1227": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_small",
      "op": "callsub set_weighted_quorum_small",
      "stack_out": []
    },
    "1230": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1231": {
      "op": "return"
    },
    "1232": {
      "block": "main_set_quorum_large_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1234": {
      "op": "!",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1235": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1236": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "1238": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1239": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "1242": {
      "op": "btoi",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1243": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_large",
      "op": "callsub set_quorum_large",
      "stack_out": []
    },
    "1246": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1247": {
      "op": "return"
    },
    "1248": {
      "block": "main_set_quorum_medium_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "1250": {
      "op": "!",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "1251": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1252": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "1254": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1255": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "1258": {
      "op": "btoi",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1259": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_medium",
      "op": "callsub set_quorum_medium",
      "stack_out": []
    },
    "1262": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1263": {
      "op": "return"
    },
    "1264": {
      "block": "main_set_quorum_small_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "1266": {
      "op": "!",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1267": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1268": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1270": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1271": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1274": {
      "op": "btoi",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1275": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_small",
      "op": "callsub set_quorum_small",
      "stack_out": []
    },
    "1278": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1279": {
      "op": "return"
    },
    "1280": {
      "block": "main_set_voting_duration_large_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "1282": {
      "op": "!",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "1283": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1284": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1286": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1287": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1290": {
      "op": "btoi",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1291": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_large",
      "op": "callsub set_voting_duration_large",
      "stack_out": []
    },
    "1294": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1295": {
      "op": "return"
    },
    "1296": {
      "block": "main_set_voting_duration_medium_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "1298": {
      "op": "!",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "1299": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1300": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "1302": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1303": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "1306": {
      "op": "btoi",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "1307": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_medium",
      "op": "callsub set_voting_duration_medium",
      "stack_out": []
    },
    "1310": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1311": {
      "op": "return"
    },
    "1312": {
      "block": "main_set_voting_duration_small_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "1314": {
      "op": "!",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1315": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1316": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "1318": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1319": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "1322": {
      "op": "btoi",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1323": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_small",
      "op": "callsub set_voting_duration_small",
      "stack_out": []
    },
    "1326": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1327": {
      "op": "return"
    },
    "1328": {
      "block": "main_set_committee_votes_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "1330": {
      "op": "!",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "1331": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1332": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "1334": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1335": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "1338": {
      "op": "btoi",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "1339": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes",
      "op": "callsub set_committee_votes",
      "stack_out": []
    },
    "1342": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1343": {
      "op": "return"
    },
    "1344": {
      "block": "main_set_committee_members_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "1346": {
      "op": "!",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "1347": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1348": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "1350": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1351": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "1354": {
      "op": "btoi",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "1355": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members",
      "op": "callsub set_committee_members",
      "stack_out": []
    },
    "1358": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1359": {
      "op": "return"
    },
    "1360": {
      "block": "main_clear_committee_id_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1362": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1363": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1364": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1366": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1367": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.clear_committee_id",
      "op": "callsub clear_committee_id"
    },
    "1370": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1371": {
      "op": "return"
    },
    "1372": {
      "block": "main_set_committee_id_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "1374": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "1375": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1376": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "1378": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1379": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "1382": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id",
      "op": "callsub set_committee_id",
      "stack_out": []
    },
    "1385": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1386": {
      "op": "return"
    },
    "1387": {
      "block": "main_set_open_proposal_fee_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "1389": {
      "op": "!",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "1390": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1391": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "1393": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1394": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "1397": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1398": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_open_proposal_fee",
      "op": "callsub set_open_proposal_fee",
      "stack_out": []
    },
    "1401": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1402": {
      "op": "return"
    },
    "1403": {
      "block": "main_set_xgov_daemon_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1405": {
      "op": "!",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1406": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1407": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1409": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1410": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "1413": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_daemon",
      "op": "callsub set_xgov_daemon",
      "stack_out": []
    },
    "1416": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1417": {
      "op": "return"
    },
    "1418": {
      "block": "main_set_discussion_duration_large_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "1420": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1421": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1422": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1424": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1425": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1428": {
      "op": "btoi",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "1429": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large",
      "op": "callsub set_discussion_duration_large",
      "stack_out": []
    },
    "1432": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1433": {
      "op": "return"
    },
    "1434": {
      "block": "main_set_discussion_duration_medium_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1436": {
      "op": "!",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1437": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1438": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1440": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1441": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1444": {
      "op": "btoi",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1445": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium",
      "op": "callsub set_discussion_duration_medium",
      "stack_out": []
    },
    "1448": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1449": {
      "op": "return"
    },
    "1450": {
      "block": "main_set_discussion_duration_small_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1452": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1453": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1454": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1456": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1457": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1460": {
      "op": "btoi",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1461": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small",
      "op": "callsub set_discussion_duration_small",
      "stack_out": []
    },
    "1464": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1465": {
      "op": "return"
    },
    "1466": {
      "block": "main_set_daemon_ops_funding_bps_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1468": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1469": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1470": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1472": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1473": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1476": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1477": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_daemon_ops_funding_bps",
      "op": "callsub set_daemon_ops_funding_bps",
      "stack_out": []
    },
    "1480": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1481": {
      "op": "return"
    },
    "1482": {
      "block": "main_set_max_requested_amount_large_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1484": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1485": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1486": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1488": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1489": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1492": {
      "op": "btoi",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1493": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large",
      "op": "callsub set_max_requested_amount_large",
      "stack_out": []
    },
    "1496": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1497": {
      "op": "return"
    },
    "1498": {
      "block": "main_set_max_requested_amount_medium_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1500": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1501": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1502": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1504": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1505": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1508": {
      "op": "btoi",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1509": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium",
      "op": "callsub set_max_requested_amount_medium",
      "stack_out": []
    },
    "1512": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1513": {
      "op": "return"
    },
    "1514": {
      "block": "main_set_max_requested_amount_small_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1516": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1517": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1518": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1520": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1521": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1524": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1525": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small",
      "op": "callsub set_max_requested_amount_small",
      "stack_out": []
    },
    "1528": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1529": {
      "op": "return"
    },
    "1530": {
      "block": "main_set_min_requested_amount_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1532": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1533": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1534": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1536": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1537": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1540": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1541": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount",
      "op": "callsub set_min_requested_amount",
      "stack_out": []
    },
    "1544": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1545": {
      "op": "return"
    },
    "1546": {
      "block": "main_set_proposal_commitment_bps_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1548": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1549": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1550": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1552": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1553": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1556": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1557": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps",
      "op": "callsub set_proposal_commitment_bps",
      "stack_out": []
    },
    "1560": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1561": {
      "op": "return"
    },
    "1562": {
      "block": "main_create_empty_proposal_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1564": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1565": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1566": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1568": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1569": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1572": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal",
      "op": "callsub create_empty_proposal",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1575": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1576": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1577": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1578": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1579": {
      "op": "log",
      "stack_out": []
    },
    "1580": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1581": {
      "op": "return"
    },
    "1582": {
      "block": "main_resume_proposals_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1584": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1585": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1586": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1588": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1589": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.resume_proposals",
      "op": "callsub resume_proposals"
    },
    "1592": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1593": {
      "op": "return"
    },
    "1594": {
      "block": "main_resume_registry_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1596": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1597": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1598": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1600": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1601": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.resume_registry",
      "op": "callsub resume_registry"
    },
    "1604": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1605": {
      "op": "return"
    },
    "1606": {
      "block": "main_pause_proposals_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1608": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1609": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1610": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1612": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1613": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.pause_proposals",
      "op": "callsub pause_proposals"
    },
    "1616": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1617": {
      "op": "return"
    },
    "1618": {
      "block": "main_pause_registry_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1620": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1621": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1622": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1624": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1625": {
      "callsub": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.pause_registry",
      "op": "callsub pause_registry"
    },
    "1628": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1629": {
      "op": "return"
    },
    "1630": {
      "block": "main_bare_routing@40",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%206#0"
      ],
      "stack_out": [
        "tmp%206#0"
      ]
    },
    "1632": {
      "op": "bnz main_after_if_else@42",
      "stack_out": []
    },
    "1635": {
      "op": "txn ApplicationID"
    },
    "1637": {
      "op": "!"
    },
    "1638": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "1639": {
      "op": "intc_0 // 1"
    },
    "1640": {
      "op": "return"
    },
    "1641": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.pause_registry",
      "params": {},
      "block": "pause_registry",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1644": {
      "op": "bytec 5 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "1646": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0x7061757365645f7265676973747279",
        "1"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "1"
      ]
    },
    "1647": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1648": {
      "retsub": true,
      "op": "retsub"
    },
    "1649": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.pause_proposals",
      "params": {},
      "block": "pause_proposals",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1652": {
      "op": "bytec 6 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1654": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73",
        "1"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "1"
      ]
    },
    "1655": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1656": {
      "retsub": true,
      "op": "retsub"
    },
    "1657": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.resume_registry",
      "params": {},
      "block": "resume_registry",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1660": {
      "op": "bytec 5 // 0x7061757365645f7265676973747279",
      "defined_out": [
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279"
      ]
    },
    "1662": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f7265676973747279"
      ],
      "stack_out": [
        "0x7061757365645f7265676973747279",
        "0"
      ]
    },
    "1663": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1664": {
      "retsub": true,
      "op": "retsub"
    },
    "1665": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.resume_proposals",
      "params": {},
      "block": "resume_proposals",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1668": {
      "op": "bytec 6 // 0x7061757365645f70726f706f73616c73",
      "defined_out": [
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73"
      ]
    },
    "1670": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x7061757365645f70726f706f73616c73"
      ],
      "stack_out": [
        "0x7061757365645f70726f706f73616c73",
        "0"
      ]
    },
    "1671": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1672": {
      "retsub": true,
      "op": "retsub"
    },
    "1673": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.create_empty_proposal",
      "params": {
        "proposer#0": "bytes"
      },
      "block": "create_empty_proposal",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1676": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1678": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%0#0",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "check%0#0"
      ]
    },
    "1680": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1681": {
      "op": "itxn_begin"
    },
    "1682": {
      "op": "pushint 19 // 19",
      "defined_out": [
        "19",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "19"
      ]
    },
    "1684": {
      "op": "itxn_field GlobalNumUint",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1686": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "3"
      ]
    },
    "1688": {
      "op": "itxn_field GlobalNumByteSlice",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1690": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "1"
      ]
    },
    "1691": {
      "op": "itxn_field ExtraProgramPages",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1693": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw==",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "CoEBQw=="
      ]
    },
    "1699": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "1701": {
      "op": "pushbytes base64(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)",
      "defined_out": [
        "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",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "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"
      ]
    },
    "5334": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5336": {
      "op": "pushbytes 0xcc694eaa // method \"create(address)void\"",
      "defined_out": [
        "Method(create(address)void)",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "Method(create(address)void)"
      ]
    },
    "5342": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5344": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_before#0",
        "proposer#0 (copy)"
      ],
      "stack_out": [
        "mbr_before#0",
        "proposer#0 (copy)"
      ]
    },
    "5346": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5348": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "appl"
      ]
    },
    "5349": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5351": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "mbr_before#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "0"
      ]
    },
    "5352": {
      "op": "itxn_field Fee",
      "stack_out": [
        "mbr_before#0"
      ]
    },
    "5354": {
      "op": "itxn_submit"
    },
    "5355": {
      "op": "itxn CreatedApplicationID",
      "defined_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ]
    },
    "5357": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "tmp%1#0"
      ]
    },
    "5359": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%1#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "check%1#0"
      ]
    },
    "5361": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0"
      ]
    },
    "5362": {
      "op": "itxn_begin"
    },
    "5363": {
      "op": "dig 1",
      "defined_out": [
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "res.CreatedApplicationID#0 (copy)"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "res.CreatedApplicationID#0 (copy)"
      ]
    },
    "5365": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%2#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "5367": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0"
      ]
    },
    "5368": {
      "op": "intc_1 // 0",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "0"
      ]
    },
    "5369": {
      "op": "bytec_3 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0",
        "0x6f70656e5f70726f706f73616c5f666565",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "0",
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "5370": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "mbr_after#0",
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5371": {
      "error": "check self.open_proposal_fee exists",
      "op": "assert // check self.open_proposal_fee exists",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "mbr_after#0",
        "value%2#0",
        "maybe_value%0#0"
      ]
    },
    "5372": {
      "op": "uncover 2",
      "stack_out": [
        "mbr_before#0",
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%0#0",
        "mbr_after#0"
      ]
    },
    "5374": {
      "op": "uncover 4",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%0#0",
        "mbr_after#0",
        "mbr_before#0"
      ]
    },
    "5376": {
      "op": "-",
      "defined_out": [
        "maybe_value%0#0",
        "res.CreatedApplicationID#0",
        "tmp%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ]
    },
    "5377": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "res.CreatedApplicationID#0",
        "value%2#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0",
        "inner_txn_params%1%%param_Amount_idx_0#0"
      ]
    },
    "5378": {
      "op": "itxn_field Amount",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "value%2#0"
      ]
    },
    "5380": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5382": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay",
        "res.CreatedApplicationID#0"
      ],
      "stack_out": [
        "res.CreatedApplicationID#0",
        "pay"
      ]
    },
    "5383": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5385": {
      "op": "intc_1 // 0",
      "stack_out": [
        "res.CreatedApplicationID#0",
        "0"
      ]
    },
    "5386": {
      "op": "itxn_field Fee",
      "stack_out": [
        "res.CreatedApplicationID#0"
      ]
    },
    "5388": {
      "op": "itxn_submit"
    },
    "5389": {
      "retsub": true,
      "op": "retsub"
    },
    "5390": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_proposal_commitment_bps",
      "params": {
        "commitment_bps#0": "uint64"
      },
      "block": "set_proposal_commitment_bps",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5393": {
      "op": "bytec 7 // 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "5395": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "commitment_bps#0 (copy)"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073",
        "commitment_bps#0 (copy)"
      ]
    },
    "5397": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5398": {
      "retsub": true,
      "op": "retsub"
    },
    "5399": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_min_requested_amount",
      "params": {
        "min_requested_amount#0": "uint64"
      },
      "block": "set_min_requested_amount",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5402": {
      "op": "bytec 8 // 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "5404": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "min_requested_amount#0 (copy)"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74",
        "min_requested_amount#0 (copy)"
      ]
    },
    "5406": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5407": {
      "retsub": true,
      "op": "retsub"
    },
    "5408": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_small",
      "params": {
        "max_requested_amount#0": "uint64"
      },
      "block": "set_max_requested_amount_small",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5411": {
      "op": "bytec 9 // 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "5413": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "max_requested_amount#0 (copy)"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
        "max_requested_amount#0 (copy)"
      ]
    },
    "5415": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5416": {
      "retsub": true,
      "op": "retsub"
    },
    "5417": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_medium",
      "params": {
        "max_requested_amount#0": "uint64"
      },
      "block": "set_max_requested_amount_medium",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5420": {
      "op": "bytec 10 // 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "5422": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "max_requested_amount#0 (copy)"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "max_requested_amount#0 (copy)"
      ]
    },
    "5424": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5425": {
      "retsub": true,
      "op": "retsub"
    },
    "5426": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_max_requested_amount_large",
      "params": {
        "max_requested_amount#0": "uint64"
      },
      "block": "set_max_requested_amount_large",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5429": {
      "op": "bytec 11 // 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "5431": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "max_requested_amount#0 (copy)"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "max_requested_amount#0 (copy)"
      ]
    },
    "5433": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5434": {
      "retsub": true,
      "op": "retsub"
    },
    "5435": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_daemon_ops_funding_bps",
      "params": {
        "daemon_ops_funding_bps#0": "uint64"
      },
      "block": "set_daemon_ops_funding_bps",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5438": {
      "op": "bytec 12 // 0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ],
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073"
      ]
    },
    "5440": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "daemon_ops_funding_bps#0 (copy)"
      ],
      "stack_out": [
        "0x6461656d6f6e5f6f7065726174696f6e5f66756e64696e675f627073",
        "daemon_ops_funding_bps#0 (copy)"
      ]
    },
    "5442": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5443": {
      "retsub": true,
      "op": "retsub"
    },
    "5444": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_small",
      "params": {
        "discussion_duration#0": "uint64"
      },
      "block": "set_discussion_duration_small",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5447": {
      "op": "bytec 13 // 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "5449": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "discussion_duration#0 (copy)"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
        "discussion_duration#0 (copy)"
      ]
    },
    "5451": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5452": {
      "retsub": true,
      "op": "retsub"
    },
    "5453": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_medium",
      "params": {
        "discussion_duration#0": "uint64"
      },
      "block": "set_discussion_duration_medium",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5456": {
      "op": "bytec 14 // 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "5458": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "discussion_duration#0 (copy)"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
        "discussion_duration#0 (copy)"
      ]
    },
    "5460": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5461": {
      "retsub": true,
      "op": "retsub"
    },
    "5462": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_discussion_duration_large",
      "params": {
        "discussion_duration#0": "uint64"
      },
      "block": "set_discussion_duration_large",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5465": {
      "op": "bytec 15 // 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "5467": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "discussion_duration#0 (copy)"
      ],
      "stack_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
        "discussion_duration#0 (copy)"
      ]
    },
    "5469": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5470": {
      "retsub": true,
      "op": "retsub"
    },
    "5471": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_daemon",
      "params": {
        "xgov_daemon#0": "bytes"
      },
      "block": "set_xgov_daemon",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5474": {
      "op": "bytec 16 // 0x78676f765f6461656d6f6e",
      "defined_out": [
        "0x78676f765f6461656d6f6e"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e"
      ]
    },
    "5476": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f6461656d6f6e",
        "xgov_daemon#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f6461656d6f6e",
        "xgov_daemon#0 (copy)"
      ]
    },
    "5478": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5479": {
      "retsub": true,
      "op": "retsub"
    },
    "5480": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_open_proposal_fee",
      "params": {
        "open_proposal_fee#0": "uint64"
      },
      "block": "set_open_proposal_fee",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5483": {
      "op": "bytec_3 // 0x6f70656e5f70726f706f73616c5f666565",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565"
      ],
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565"
      ]
    },
    "5484": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "open_proposal_fee#0 (copy)"
      ],
      "stack_out": [
        "0x6f70656e5f70726f706f73616c5f666565",
        "open_proposal_fee#0 (copy)"
      ]
    },
    "5486": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5487": {
      "retsub": true,
      "op": "retsub"
    },
    "5488": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_id",
      "params": {
        "committee_id#0": "bytes"
      },
      "block": "set_committee_id",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5491": {
      "op": "bytec 4 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "5493": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x636f6d6d69747465655f6964",
        "committee_id#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "committee_id#0 (copy)"
      ]
    },
    "5495": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5496": {
      "retsub": true,
      "op": "retsub"
    },
    "5497": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.clear_committee_id",
      "params": {},
      "block": "clear_committee_id",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "5500": {
      "op": "bytec 4 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "5502": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "0x"
      ]
    },
    "5504": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5505": {
      "retsub": true,
      "op": "retsub"
    },
    "5506": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_members",
      "params": {
        "committee_members#0": "uint64"
      },
      "block": "set_committee_members",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5509": {
      "op": "bytec 18 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "5511": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "committee_members#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "committee_members#0 (copy)"
      ]
    },
    "5513": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5514": {
      "retsub": true,
      "op": "retsub"
    },
    "5515": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_committee_votes",
      "params": {
        "committee_votes#0": "uint64"
      },
      "block": "set_committee_votes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5518": {
      "op": "bytec 19 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "5520": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573",
        "committee_votes#0 (copy)"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "committee_votes#0 (copy)"
      ]
    },
    "5522": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5523": {
      "retsub": true,
      "op": "retsub"
    },
    "5524": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_small",
      "params": {
        "voting_duration#0": "uint64"
      },
      "block": "set_voting_duration_small",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5527": {
      "op": "bytec 20 // 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "5529": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "voting_duration#0 (copy)"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c",
        "voting_duration#0 (copy)"
      ]
    },
    "5531": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5532": {
      "retsub": true,
      "op": "retsub"
    },
    "5533": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_medium",
      "params": {
        "voting_duration#0": "uint64"
      },
      "block": "set_voting_duration_medium",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5536": {
      "op": "bytec 21 // 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "5538": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "voting_duration#0 (copy)"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d",
        "voting_duration#0 (copy)"
      ]
    },
    "5540": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5541": {
      "retsub": true,
      "op": "retsub"
    },
    "5542": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_voting_duration_large",
      "params": {
        "voting_duration#0": "uint64"
      },
      "block": "set_voting_duration_large",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5545": {
      "op": "bytec 22 // 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "5547": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "voting_duration#0 (copy)"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765",
        "voting_duration#0 (copy)"
      ]
    },
    "5549": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5550": {
      "retsub": true,
      "op": "retsub"
    },
    "5551": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_small",
      "params": {
        "quorum#0": "uint64"
      },
      "block": "set_quorum_small",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5554": {
      "op": "bytec 23 // 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0x71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "5556": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x71756f72756d5f736d616c6c",
        "quorum#0 (copy)"
      ],
      "stack_out": [
        "0x71756f72756d5f736d616c6c",
        "quorum#0 (copy)"
      ]
    },
    "5558": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5559": {
      "retsub": true,
      "op": "retsub"
    },
    "5560": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_medium",
      "params": {
        "quorum#0": "uint64"
      },
      "block": "set_quorum_medium",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5563": {
      "op": "bytec 24 // 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0x71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "5565": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x71756f72756d5f6d656469756d",
        "quorum#0 (copy)"
      ],
      "stack_out": [
        "0x71756f72756d5f6d656469756d",
        "quorum#0 (copy)"
      ]
    },
    "5567": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5568": {
      "retsub": true,
      "op": "retsub"
    },
    "5569": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_quorum_large",
      "params": {
        "quorum#0": "uint64"
      },
      "block": "set_quorum_large",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5572": {
      "op": "bytec 25 // 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0x71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x71756f72756d5f6c61726765"
      ]
    },
    "5574": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x71756f72756d5f6c61726765",
        "quorum#0 (copy)"
      ],
      "stack_out": [
        "0x71756f72756d5f6c61726765",
        "quorum#0 (copy)"
      ]
    },
    "5576": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5577": {
      "retsub": true,
      "op": "retsub"
    },
    "5578": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_small",
      "params": {
        "weighted_quorum#0": "uint64"
      },
      "block": "set_weighted_quorum_small",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5581": {
      "op": "bytec 26 // 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "5583": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "weighted_quorum#0 (copy)"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c",
        "weighted_quorum#0 (copy)"
      ]
    },
    "5585": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5586": {
      "retsub": true,
      "op": "retsub"
    },
    "5587": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_medium",
      "params": {
        "weighted_quorum#0": "uint64"
      },
      "block": "set_weighted_quorum_medium",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5590": {
      "op": "bytec 27 // 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "5592": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "weighted_quorum#0 (copy)"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d",
        "weighted_quorum#0 (copy)"
      ]
    },
    "5594": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5595": {
      "retsub": true,
      "op": "retsub"
    },
    "5596": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_weighted_quorum_large",
      "params": {
        "weighted_quorum#0": "uint64"
      },
      "block": "set_weighted_quorum_large",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5599": {
      "op": "bytec 28 // 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "5601": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "weighted_quorum#0 (copy)"
      ],
      "stack_out": [
        "0x77656967687465645f71756f72756d5f6c61726765",
        "weighted_quorum#0 (copy)"
      ]
    },
    "5603": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5604": {
      "retsub": true,
      "op": "retsub"
    },
    "5605": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.vote",
      "params": {
        "proposal_app#0": "uint64",
        "voter#0": "bytes",
        "approvals#0": "bytes",
        "rejections#0": "bytes"
      },
      "block": "vote",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "5608": {
      "op": "itxn_begin"
    },
    "5609": {
      "op": "frame_dig -4",
      "defined_out": [
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0 (copy)"
      ]
    },
    "5611": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5613": {
      "op": "pushbytes 0x1841a0d2 // method \"vote(address,uint64,uint64)string\"",
      "defined_out": [
        "Method(vote(address,uint64,uint64)string)"
      ],
      "stack_out": [
        "Method(vote(address,uint64,uint64)string)"
      ]
    },
    "5619": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5621": {
      "op": "frame_dig -3",
      "defined_out": [
        "voter#0 (copy)"
      ],
      "stack_out": [
        "voter#0 (copy)"
      ]
    },
    "5623": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5625": {
      "op": "frame_dig -2",
      "defined_out": [
        "approvals#0 (copy)"
      ],
      "stack_out": [
        "approvals#0 (copy)"
      ]
    },
    "5627": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5629": {
      "op": "frame_dig -1",
      "defined_out": [
        "rejections#0 (copy)"
      ],
      "stack_out": [
        "rejections#0 (copy)"
      ]
    },
    "5631": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5633": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5634": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5636": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5637": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5639": {
      "op": "itxn_submit"
    },
    "5640": {
      "op": "itxn LastLog"
    },
    "5642": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5643": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "error#0"
      ]
    },
    "5646": {
      "op": "swap",
      "stack_out": [
        "error#0",
        "awst_tmp%0#0"
      ]
    },
    "5647": {
      "op": "extract 0 4",
      "defined_out": [
        "error#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0"
      ]
    },
    "5650": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "error#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "5651": {
      "op": "==",
      "defined_out": [
        "error#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%2#0"
      ]
    },
    "5652": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "error#0"
      ]
    },
    "5653": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "5656": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "5657": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5658": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5659": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5660": {
      "op": "<",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5661": {
      "op": "bz vote_ternary_false@3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5664": {
      "op": "intc_1 // 0"
    },
    "5665": {
      "block": "vote_ternary_merge@4",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz vote_after_if_else@14",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5668": {
      "op": "intc_2 // 4"
    },
    "5669": {
      "op": "frame_dig 1"
    },
    "5671": {
      "op": "dup"
    },
    "5672": {
      "op": "cover 2"
    },
    "5674": {
      "op": ">="
    },
    "5675": {
      "op": "intc_2 // 4"
    },
    "5676": {
      "op": "dig 2"
    },
    "5678": {
      "op": "uncover 2"
    },
    "5680": {
      "op": "select"
    },
    "5681": {
      "op": "frame_dig 0"
    },
    "5683": {
      "op": "swap"
    },
    "5684": {
      "op": "uncover 2"
    },
    "5686": {
      "op": "substring3"
    },
    "5687": {
      "op": "bytec 30 // \"Unauthorized\""
    },
    "5689": {
      "op": "pushbytess \"Voter not found\" \"Voter already voted\" \"Votes exceeded\" // \"Voter not found\", \"Voter already voted\", \"Votes exceeded\""
    },
    "5742": {
      "op": "bytec 31 // \"Missing Config\""
    },
    "5744": {
      "op": "bytec_1 // \"Wrong Proposal Status or Decommissioned\""
    },
    "5745": {
      "op": "pushbytes \"Voting Period Expired\""
    },
    "5768": {
      "op": "uncover 7"
    },
    "5770": {
      "op": "match vote_switch_case_0@6 vote_switch_case_1@7 vote_switch_case_2@8 vote_switch_case_3@9 vote_switch_case_4@10 vote_switch_case_5@11 vote_switch_case_6@12"
    },
    "5786": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "5787": {
      "block": "vote_switch_case_6@12",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Voting Period Expired",
      "op": "err // Voting Period Expired"
    },
    "5788": {
      "block": "vote_switch_case_5@11",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Wrong Proposal Status or Decommissioned",
      "op": "err // Wrong Proposal Status or Decommissioned"
    },
    "5789": {
      "block": "vote_switch_case_4@10",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Missing Config",
      "op": "err // Missing Config"
    },
    "5790": {
      "block": "vote_switch_case_3@9",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Votes exceeded",
      "op": "err // Votes exceeded"
    },
    "5791": {
      "block": "vote_switch_case_2@8",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Voter already voted",
      "op": "err // Voter already voted"
    },
    "5792": {
      "block": "vote_switch_case_1@7",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Voter not found",
      "op": "err // Voter not found"
    },
    "5793": {
      "block": "vote_switch_case_0@6",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Unauthorized",
      "op": "err // Unauthorized"
    },
    "5794": {
      "block": "vote_after_if_else@14",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "5795": {
      "block": "vote_ternary_false@3",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "5797": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "5800": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "5801": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5802": {
      "op": "b vote_ternary_merge@4"
    },
    "5805": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.set_xgov_council",
      "params": {
        "xgov_council#0": "bytes"
      },
      "block": "set_xgov_council",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5808": {
      "op": "bytec 29 // 0x78676f765f636f756e63696c",
      "defined_out": [
        "0x78676f765f636f756e63696c"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c"
      ]
    },
    "5810": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x78676f765f636f756e63696c",
        "xgov_council#0 (copy)"
      ],
      "stack_out": [
        "0x78676f765f636f756e63696c",
        "xgov_council#0 (copy)"
      ]
    },
    "5812": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5813": {
      "retsub": true,
      "op": "retsub"
    },
    "5814": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.fund",
      "params": {
        "proposal_app#0": "uint64"
      },
      "block": "fund",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5817": {
      "op": "itxn_begin"
    },
    "5818": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0 (copy)"
      ]
    },
    "5820": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5822": {
      "op": "pushbytes 0x8a5e4c80 // method \"fund()string\"",
      "defined_out": [
        "Method(fund()string)"
      ],
      "stack_out": [
        "Method(fund()string)"
      ]
    },
    "5828": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5830": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5831": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5833": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5834": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5836": {
      "op": "itxn_submit"
    },
    "5837": {
      "op": "itxn LastLog"
    },
    "5839": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5840": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "error#0"
      ]
    },
    "5843": {
      "op": "swap",
      "stack_out": [
        "error#0",
        "awst_tmp%0#0"
      ]
    },
    "5844": {
      "op": "extract 0 4",
      "defined_out": [
        "error#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0"
      ]
    },
    "5847": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "error#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "5848": {
      "op": "==",
      "defined_out": [
        "error#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%2#0"
      ]
    },
    "5849": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "error#0"
      ]
    },
    "5850": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "5853": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "5854": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5855": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5856": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5857": {
      "op": "<",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5858": {
      "op": "bz fund_ternary_false@3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5861": {
      "op": "intc_1 // 0"
    },
    "5862": {
      "block": "fund_ternary_merge@4",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz fund_after_if_else@9",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5865": {
      "op": "intc_2 // 4"
    },
    "5866": {
      "op": "frame_dig 1"
    },
    "5868": {
      "op": "dup"
    },
    "5869": {
      "op": "cover 2"
    },
    "5871": {
      "op": ">="
    },
    "5872": {
      "op": "intc_2 // 4"
    },
    "5873": {
      "op": "dig 2"
    },
    "5875": {
      "op": "uncover 2"
    },
    "5877": {
      "op": "select"
    },
    "5878": {
      "op": "frame_dig 0"
    },
    "5880": {
      "op": "swap"
    },
    "5881": {
      "op": "uncover 2"
    },
    "5883": {
      "op": "substring3"
    },
    "5884": {
      "op": "bytec 30 // \"Unauthorized\""
    },
    "5886": {
      "op": "bytec_1 // \"Wrong Proposal Status or Decommissioned\""
    },
    "5887": {
      "op": "uncover 2"
    },
    "5889": {
      "op": "match fund_switch_case_0@6 fund_switch_case_1@7"
    },
    "5895": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "5896": {
      "block": "fund_switch_case_1@7",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Wrong Proposal Status or Decommissioned",
      "op": "err // Wrong Proposal Status or Decommissioned"
    },
    "5897": {
      "block": "fund_switch_case_0@6",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Unauthorized",
      "op": "err // Unauthorized"
    },
    "5898": {
      "block": "fund_after_if_else@9",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "5899": {
      "block": "fund_ternary_false@3",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "5901": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "5904": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "5905": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "5906": {
      "op": "b fund_ternary_merge@4"
    },
    "5909": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.decommission_proposal",
      "params": {
        "proposal_app#0": "uint64"
      },
      "block": "decommission_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5912": {
      "op": "itxn_begin"
    },
    "5913": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0 (copy)"
      ]
    },
    "5915": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5917": {
      "op": "pushbytes 0x69ecf4a2 // method \"decommission()string\"",
      "defined_out": [
        "Method(decommission()string)"
      ],
      "stack_out": [
        "Method(decommission()string)"
      ]
    },
    "5923": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5925": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5926": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5928": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5929": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5931": {
      "op": "itxn_submit"
    },
    "5932": {
      "op": "itxn LastLog"
    },
    "5934": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5935": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "error#0"
      ]
    },
    "5938": {
      "op": "swap",
      "stack_out": [
        "error#0",
        "awst_tmp%0#0"
      ]
    },
    "5939": {
      "op": "extract 0 4",
      "defined_out": [
        "error#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0"
      ]
    },
    "5942": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "error#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "5943": {
      "op": "==",
      "defined_out": [
        "error#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%2#0"
      ]
    },
    "5944": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "error#0"
      ]
    },
    "5945": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "5948": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "5949": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5950": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5951": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "5952": {
      "op": "<",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5953": {
      "op": "bz decommission_proposal_ternary_false@3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5956": {
      "op": "intc_1 // 0"
    },
    "5957": {
      "block": "decommission_proposal_ternary_merge@4",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz decommission_proposal_after_if_else@10",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5960": {
      "op": "intc_2 // 4"
    },
    "5961": {
      "op": "frame_dig 1"
    },
    "5963": {
      "op": "dup"
    },
    "5964": {
      "op": "cover 2"
    },
    "5966": {
      "op": ">="
    },
    "5967": {
      "op": "intc_2 // 4"
    },
    "5968": {
      "op": "dig 2"
    },
    "5970": {
      "op": "uncover 2"
    },
    "5972": {
      "op": "select"
    },
    "5973": {
      "op": "frame_dig 0"
    },
    "5975": {
      "op": "swap"
    },
    "5976": {
      "op": "uncover 2"
    },
    "5978": {
      "op": "substring3"
    },
    "5979": {
      "op": "bytec_1 // \"Wrong Proposal Status or Decommissioned\""
    },
    "5980": {
      "op": "bytec 31 // \"Missing Config\""
    },
    "5982": {
      "op": "pushbytes \"There are voters assigned to this proposal\""
    },
    "6026": {
      "op": "uncover 3"
    },
    "6028": {
      "op": "match decommission_proposal_switch_case_0@6 decommission_proposal_switch_case_1@7 decommission_proposal_switch_case_2@8"
    },
    "6036": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "6037": {
      "block": "decommission_proposal_switch_case_2@8",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "There are voters assigned to this proposal",
      "op": "err // There are voters assigned to this proposal"
    },
    "6038": {
      "block": "decommission_proposal_switch_case_1@7",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Missing Config",
      "op": "err // Missing Config"
    },
    "6039": {
      "block": "decommission_proposal_switch_case_0@6",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Wrong Proposal Status or Decommissioned",
      "op": "err // Wrong Proposal Status or Decommissioned"
    },
    "6040": {
      "block": "decommission_proposal_after_if_else@10",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "6041": {
      "block": "decommission_proposal_ternary_false@3",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "6043": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6046": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "6047": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "6048": {
      "op": "b decommission_proposal_ternary_merge@4"
    },
    "6051": {
      "subroutine": "smart_contracts.xgov_registry_mock.contract.XgovRegistryMock.drop_proposal",
      "params": {
        "proposal_app#0": "uint64"
      },
      "block": "drop_proposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6054": {
      "op": "itxn_begin"
    },
    "6055": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_app#0 (copy)"
      ],
      "stack_out": [
        "proposal_app#0 (copy)"
      ]
    },
    "6057": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "6059": {
      "op": "pushbytes 0x7371321a // method \"drop()string\"",
      "defined_out": [
        "Method(drop()string)"
      ],
      "stack_out": [
        "Method(drop()string)"
      ]
    },
    "6065": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "6067": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "6068": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6070": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6071": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6073": {
      "op": "itxn_submit"
    },
    "6074": {
      "op": "itxn LastLog"
    },
    "6076": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6077": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "error#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "error#0"
      ]
    },
    "6080": {
      "op": "swap",
      "stack_out": [
        "error#0",
        "awst_tmp%0#0"
      ]
    },
    "6081": {
      "op": "extract 0 4",
      "defined_out": [
        "error#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0"
      ]
    },
    "6084": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "error#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "6085": {
      "op": "==",
      "defined_out": [
        "error#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%2#0"
      ]
    },
    "6086": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "error#0"
      ]
    },
    "6087": {
      "op": "extract 2 0",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "6090": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "6091": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6092": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "6093": {
      "op": "intc_2 // 4",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0",
        "4"
      ]
    },
    "6094": {
      "op": "<",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "6095": {
      "op": "bz drop_proposal_ternary_false@3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6098": {
      "op": "intc_1 // 0"
    },
    "6099": {
      "block": "drop_proposal_ternary_merge@4",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ],
      "op": "bz drop_proposal_after_if_else@8",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6102": {
      "op": "intc_2 // 4"
    },
    "6103": {
      "op": "frame_dig 1"
    },
    "6105": {
      "op": "dup"
    },
    "6106": {
      "op": "cover 2"
    },
    "6108": {
      "op": ">="
    },
    "6109": {
      "op": "intc_2 // 4"
    },
    "6110": {
      "op": "dig 2"
    },
    "6112": {
      "op": "uncover 2"
    },
    "6114": {
      "op": "select"
    },
    "6115": {
      "op": "frame_dig 0"
    },
    "6117": {
      "op": "swap"
    },
    "6118": {
      "op": "uncover 2"
    },
    "6120": {
      "op": "substring3"
    },
    "6121": {
      "op": "bytec_1 // \"Wrong Proposal Status or Decommissioned\""
    },
    "6122": {
      "op": "swap"
    },
    "6123": {
      "op": "match drop_proposal_switch_case_0@6"
    },
    "6127": {
      "error": "Unknown error",
      "op": "err // Unknown error"
    },
    "6128": {
      "block": "drop_proposal_switch_case_0@6",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "error": "Wrong Proposal Status or Decommissioned",
      "op": "err // Wrong Proposal Status or Decommissioned"
    },
    "6129": {
      "block": "drop_proposal_after_if_else@8",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "6130": {
      "block": "drop_proposal_ternary_false@3",
      "stack_in": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "6132": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6135": {
      "op": "bytec_2 // \"ERR:\"",
      "defined_out": [
        "\"ERR:\"",
        "awst_tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%6#0",
        "\"ERR:\""
      ]
    },
    "6136": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "ternary_result%0#0"
      ]
    },
    "6137": {
      "op": "b drop_proposal_ternary_merge@4"
    }
  }
}