{
    "hints": {
        "create_empty_proposal(address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_proposal_commitment_bps(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_min_requested_amount(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_max_requested_amount_small(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_max_requested_amount_medium(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_max_requested_amount_large(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_publishing_fee(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_discussion_duration_small(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_discussion_duration_medium(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_discussion_duration_large(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_publisher(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_proposal_fee(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_id(byte[36])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "clear_committee_id()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_members(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_votes(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_voting_duration_small(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_voting_duration_medium(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_voting_duration_large(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_quorum_small(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_quorum_medium(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_quorum_large(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_weighted_quorum_small(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_weighted_quorum_medium(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_weighted_quorum_large(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote(application,address,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMueGdvdl9yZWdpc3RyeV9tb2NrLmNvbnRyYWN0Llhnb3ZSZWdpc3RyeU1vY2suY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 21
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "committee_id": {
                    "type": "bytes",
                    "key": "committee_id"
                },
                "committee_members": {
                    "type": "uint64",
                    "key": "committee_members"
                },
                "committee_publisher": {
                    "type": "bytes",
                    "key": "committee_publisher"
                },
                "committee_votes": {
                    "type": "uint64",
                    "key": "committee_votes"
                },
                "discussion_duration_large": {
                    "type": "uint64",
                    "key": "discussion_duration_large"
                },
                "discussion_duration_medium": {
                    "type": "uint64",
                    "key": "discussion_duration_medium"
                },
                "discussion_duration_small": {
                    "type": "uint64",
                    "key": "discussion_duration_small"
                },
                "max_requested_amount_large": {
                    "type": "uint64",
                    "key": "max_requested_amount_large"
                },
                "max_requested_amount_medium": {
                    "type": "uint64",
                    "key": "max_requested_amount_medium"
                },
                "max_requested_amount_small": {
                    "type": "uint64",
                    "key": "max_requested_amount_small"
                },
                "min_requested_amount": {
                    "type": "uint64",
                    "key": "min_requested_amount"
                },
                "proposal_commitment_bps": {
                    "type": "uint64",
                    "key": "proposal_commitment_bps"
                },
                "proposal_fee": {
                    "type": "uint64",
                    "key": "proposal_fee"
                },
                "publishing_fee_bps": {
                    "type": "uint64",
                    "key": "proposal_publishing_bps"
                },
                "quorum_large": {
                    "type": "uint64",
                    "key": "quorum_large"
                },
                "quorum_medium": {
                    "type": "uint64",
                    "key": "quorum_medium"
                },
                "quorum_small": {
                    "type": "uint64",
                    "key": "quorum_small"
                },
                "voting_duration_large": {
                    "type": "uint64",
                    "key": "voting_duration_large"
                },
                "voting_duration_medium": {
                    "type": "uint64",
                    "key": "voting_duration_medium"
                },
                "voting_duration_small": {
                    "type": "uint64",
                    "key": "voting_duration_small"
                },
                "weighted_quorum_large": {
                    "type": "uint64",
                    "key": "weighted_quorum_large"
                },
                "weighted_quorum_medium": {
                    "type": "uint64",
                    "key": "weighted_quorum_medium"
                },
                "weighted_quorum_small": {
                    "type": "uint64",
                    "key": "weighted_quorum_small"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "XgovRegistryMock",
        "methods": [
            {
                "name": "create_empty_proposal",
                "args": [
                    {
                        "type": "address",
                        "name": "proposer",
                        "desc": "The proposer's address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The ID of the created proposal"
                },
                "desc": "Create an empty proposal"
            },
            {
                "name": "set_proposal_commitment_bps",
                "args": [
                    {
                        "type": "uint64",
                        "name": "commitment_bps",
                        "desc": "The commitment in basis points"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the proposal commitment in basis points"
            },
            {
                "name": "set_min_requested_amount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "min_requested_amount",
                        "desc": "The minimum requested amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the minimum requested amount"
            },
            {
                "name": "set_max_requested_amount_small",
                "args": [
                    {
                        "type": "uint64",
                        "name": "max_requested_amount",
                        "desc": "The maximum requested amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the maximum requested amount for small proposals"
            },
            {
                "name": "set_max_requested_amount_medium",
                "args": [
                    {
                        "type": "uint64",
                        "name": "max_requested_amount",
                        "desc": "The maximum requested amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the maximum requested amount for medium proposals"
            },
            {
                "name": "set_max_requested_amount_large",
                "args": [
                    {
                        "type": "uint64",
                        "name": "max_requested_amount",
                        "desc": "The maximum requested amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the maximum requested amount for large proposals"
            },
            {
                "name": "set_publishing_fee",
                "args": [
                    {
                        "type": "uint64",
                        "name": "publishing_fee_bps",
                        "desc": "The publishing fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the publishing fee"
            },
            {
                "name": "set_discussion_duration_small",
                "args": [
                    {
                        "type": "uint64",
                        "name": "discussion_duration",
                        "desc": "The discussion duration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the discussion duration for small proposals"
            },
            {
                "name": "set_discussion_duration_medium",
                "args": [
                    {
                        "type": "uint64",
                        "name": "discussion_duration",
                        "desc": "The discussion duration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the discussion duration for medium proposals"
            },
            {
                "name": "set_discussion_duration_large",
                "args": [
                    {
                        "type": "uint64",
                        "name": "discussion_duration",
                        "desc": "The discussion duration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the discussion duration for large proposals"
            },
            {
                "name": "set_committee_publisher",
                "args": [
                    {
                        "type": "address",
                        "name": "committee_publisher",
                        "desc": "The committee publisher"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the committee publisher"
            },
            {
                "name": "set_proposal_fee",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_fee",
                        "desc": "The proposal fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the proposal fee"
            },
            {
                "name": "set_committee_id",
                "args": [
                    {
                        "type": "byte[36]",
                        "name": "committee_id",
                        "desc": "The committee ID"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the committee ID"
            },
            {
                "name": "clear_committee_id",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Clear the committee ID"
            },
            {
                "name": "set_committee_members",
                "args": [
                    {
                        "type": "uint64",
                        "name": "committee_members",
                        "desc": "The number of committee members"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the number of committee members"
            },
            {
                "name": "set_committee_votes",
                "args": [
                    {
                        "type": "uint64",
                        "name": "committee_votes",
                        "desc": "The number of committee votes"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the number of committee votes"
            },
            {
                "name": "set_voting_duration_small",
                "args": [
                    {
                        "type": "uint64",
                        "name": "voting_duration",
                        "desc": "The voting duration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the voting duration for small proposals"
            },
            {
                "name": "set_voting_duration_medium",
                "args": [
                    {
                        "type": "uint64",
                        "name": "voting_duration",
                        "desc": "The voting duration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the voting duration for medium proposals"
            },
            {
                "name": "set_voting_duration_large",
                "args": [
                    {
                        "type": "uint64",
                        "name": "voting_duration",
                        "desc": "The voting duration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the voting duration for large proposals"
            },
            {
                "name": "set_quorum_small",
                "args": [
                    {
                        "type": "uint64",
                        "name": "quorum",
                        "desc": "The quorum"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the quorum for small proposals"
            },
            {
                "name": "set_quorum_medium",
                "args": [
                    {
                        "type": "uint64",
                        "name": "quorum",
                        "desc": "The quorum"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the quorum for medium proposals"
            },
            {
                "name": "set_quorum_large",
                "args": [
                    {
                        "type": "uint64",
                        "name": "quorum",
                        "desc": "The quorum"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the quorum for large proposals"
            },
            {
                "name": "set_weighted_quorum_small",
                "args": [
                    {
                        "type": "uint64",
                        "name": "weighted_quorum",
                        "desc": "The weighted quorum"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the weighted quorum for small proposals"
            },
            {
                "name": "set_weighted_quorum_medium",
                "args": [
                    {
                        "type": "uint64",
                        "name": "weighted_quorum",
                        "desc": "The weighted quorum"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the weighted quorum for medium proposals"
            },
            {
                "name": "set_weighted_quorum_large",
                "args": [
                    {
                        "type": "uint64",
                        "name": "weighted_quorum",
                        "desc": "The weighted quorum"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the weighted quorum for large proposals"
            },
            {
                "name": "vote",
                "args": [
                    {
                        "type": "application",
                        "name": "proposal_app",
                        "desc": "The proposal app"
                    },
                    {
                        "type": "address",
                        "name": "voter",
                        "desc": "The voter"
                    },
                    {
                        "type": "uint64",
                        "name": "approvals",
                        "desc": "The number of approvals"
                    },
                    {
                        "type": "uint64",
                        "name": "rejections",
                        "desc": "The number of rejections"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Vote on a proposal"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}