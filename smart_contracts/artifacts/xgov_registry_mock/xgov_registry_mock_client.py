# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "pause_registry()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pause_proposals()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resume_registry()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resume_proposals()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_empty_proposal(address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_proposal_commitment_bps(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_min_requested_amount(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_max_requested_amount_small(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_max_requested_amount_medium(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_max_requested_amount_large(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_publishing_fee(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_discussion_duration_small(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_discussion_duration_medium(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_discussion_duration_large(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_publisher(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_proposal_fee(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_id(byte[32])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "clear_committee_id()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_members(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_committee_votes(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_voting_duration_small(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_voting_duration_medium(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_voting_duration_large(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_quorum_small(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_quorum_medium(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_quorum_large(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_weighted_quorum_small(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_weighted_quorum_medium(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_weighted_quorum_large(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote(application,address,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_xgov_reviewer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_proposal(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "decommission_proposal(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "drop_proposal(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_proposal(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 23
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "committee_id": {
                    "type": "bytes",
                    "key": "committee_id"
                },
                "committee_members": {
                    "type": "uint64",
                    "key": "committee_members"
                },
                "committee_publisher": {
                    "type": "bytes",
                    "key": "committee_publisher"
                },
                "committee_votes": {
                    "type": "uint64",
                    "key": "committee_votes"
                },
                "discussion_duration_large": {
                    "type": "uint64",
                    "key": "discussion_duration_large"
                },
                "discussion_duration_medium": {
                    "type": "uint64",
                    "key": "discussion_duration_medium"
                },
                "discussion_duration_small": {
                    "type": "uint64",
                    "key": "discussion_duration_small"
                },
                "max_requested_amount_large": {
                    "type": "uint64",
                    "key": "max_requested_amount_large"
                },
                "max_requested_amount_medium": {
                    "type": "uint64",
                    "key": "max_requested_amount_medium"
                },
                "max_requested_amount_small": {
                    "type": "uint64",
                    "key": "max_requested_amount_small"
                },
                "min_requested_amount": {
                    "type": "uint64",
                    "key": "min_requested_amount"
                },
                "paused_proposals": {
                    "type": "uint64",
                    "key": "paused_proposals"
                },
                "paused_registry": {
                    "type": "uint64",
                    "key": "paused_registry"
                },
                "proposal_commitment_bps": {
                    "type": "uint64",
                    "key": "proposal_commitment_bps"
                },
                "proposal_fee": {
                    "type": "uint64",
                    "key": "proposal_fee"
                },
                "publishing_fee_bps": {
                    "type": "uint64",
                    "key": "proposal_publishing_bps"
                },
                "quorum_large": {
                    "type": "uint64",
                    "key": "quorum_large"
                },
                "quorum_medium": {
                    "type": "uint64",
                    "key": "quorum_medium"
                },
                "quorum_small": {
                    "type": "uint64",
                    "key": "quorum_small"
                },
                "voting_duration_large": {
                    "type": "uint64",
                    "key": "voting_duration_large"
                },
                "voting_duration_medium": {
                    "type": "uint64",
                    "key": "voting_duration_medium"
                },
                "voting_duration_small": {
                    "type": "uint64",
                    "key": "voting_duration_small"
                },
                "weighted_quorum_large": {
                    "type": "uint64",
                    "key": "weighted_quorum_large"
                },
                "weighted_quorum_medium": {
                    "type": "uint64",
                    "key": "weighted_quorum_medium"
                },
                "weighted_quorum_small": {
                    "type": "uint64",
                    "key": "weighted_quorum_small"
                },
                "xgov_reviewer": {
                    "type": "bytes",
                    "key": "xgov_reviewer"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "XgovRegistryMock",
        "methods": [
            {
                "name": "pause_registry",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Pauses the xGov Registry non-administrative methods."
            },
            {
                "name": "pause_proposals",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Pauses the creation of new Proposals."
            },
            {
                "name": "resume_registry",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Resumes the xGov Registry non-administrative methods."
            },
            {
                "name": "resume_proposals",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Resumes the creation of new Proposals."
            },
            {
                "name": "create_empty_proposal",
                "args": [
                    {
                        "type": "address",
                        "name": "proposer",
                        "desc": "The proposer's address"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The ID of the created proposal"
                },
                "desc": "Create an empty proposal"
            },
            {
                "name": "set_proposal_commitment_bps",
                "args": [
                    {
                        "type": "uint64",
                        "name": "commitment_bps",
                        "desc": "The commitment in basis points"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the proposal commitment in basis points"
            },
            {
                "name": "set_min_requested_amount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "min_requested_amount",
                        "desc": "The minimum requested amount"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the minimum requested amount"
            },
            {
                "name": "set_max_requested_amount_small",
                "args": [
                    {
                        "type": "uint64",
                        "name": "max_requested_amount",
                        "desc": "The maximum requested amount"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the maximum requested amount for small proposals"
            },
            {
                "name": "set_max_requested_amount_medium",
                "args": [
                    {
                        "type": "uint64",
                        "name": "max_requested_amount",
                        "desc": "The maximum requested amount"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the maximum requested amount for medium proposals"
            },
            {
                "name": "set_max_requested_amount_large",
                "args": [
                    {
                        "type": "uint64",
                        "name": "max_requested_amount",
                        "desc": "The maximum requested amount"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the maximum requested amount for large proposals"
            },
            {
                "name": "set_publishing_fee",
                "args": [
                    {
                        "type": "uint64",
                        "name": "publishing_fee_bps",
                        "desc": "The publishing fee"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the publishing fee"
            },
            {
                "name": "set_discussion_duration_small",
                "args": [
                    {
                        "type": "uint64",
                        "name": "discussion_duration",
                        "desc": "The discussion duration"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the discussion duration for small proposals"
            },
            {
                "name": "set_discussion_duration_medium",
                "args": [
                    {
                        "type": "uint64",
                        "name": "discussion_duration",
                        "desc": "The discussion duration"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the discussion duration for medium proposals"
            },
            {
                "name": "set_discussion_duration_large",
                "args": [
                    {
                        "type": "uint64",
                        "name": "discussion_duration",
                        "desc": "The discussion duration"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the discussion duration for large proposals"
            },
            {
                "name": "set_committee_publisher",
                "args": [
                    {
                        "type": "address",
                        "name": "committee_publisher",
                        "desc": "The committee publisher"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the committee publisher"
            },
            {
                "name": "set_proposal_fee",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_fee",
                        "desc": "The proposal fee"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the proposal fee"
            },
            {
                "name": "set_committee_id",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "committee_id",
                        "desc": "The committee ID"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the committee ID"
            },
            {
                "name": "clear_committee_id",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Clear the committee ID"
            },
            {
                "name": "set_committee_members",
                "args": [
                    {
                        "type": "uint64",
                        "name": "committee_members",
                        "desc": "The number of committee members"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the number of committee members"
            },
            {
                "name": "set_committee_votes",
                "args": [
                    {
                        "type": "uint64",
                        "name": "committee_votes",
                        "desc": "The number of committee votes"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the number of committee votes"
            },
            {
                "name": "set_voting_duration_small",
                "args": [
                    {
                        "type": "uint64",
                        "name": "voting_duration",
                        "desc": "The voting duration"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the voting duration for small proposals"
            },
            {
                "name": "set_voting_duration_medium",
                "args": [
                    {
                        "type": "uint64",
                        "name": "voting_duration",
                        "desc": "The voting duration"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the voting duration for medium proposals"
            },
            {
                "name": "set_voting_duration_large",
                "args": [
                    {
                        "type": "uint64",
                        "name": "voting_duration",
                        "desc": "The voting duration"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the voting duration for large proposals"
            },
            {
                "name": "set_quorum_small",
                "args": [
                    {
                        "type": "uint64",
                        "name": "quorum",
                        "desc": "The quorum"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the quorum for small proposals"
            },
            {
                "name": "set_quorum_medium",
                "args": [
                    {
                        "type": "uint64",
                        "name": "quorum",
                        "desc": "The quorum"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the quorum for medium proposals"
            },
            {
                "name": "set_quorum_large",
                "args": [
                    {
                        "type": "uint64",
                        "name": "quorum",
                        "desc": "The quorum"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the quorum for large proposals"
            },
            {
                "name": "set_weighted_quorum_small",
                "args": [
                    {
                        "type": "uint64",
                        "name": "weighted_quorum",
                        "desc": "The weighted quorum"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the weighted quorum for small proposals"
            },
            {
                "name": "set_weighted_quorum_medium",
                "args": [
                    {
                        "type": "uint64",
                        "name": "weighted_quorum",
                        "desc": "The weighted quorum"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the weighted quorum for medium proposals"
            },
            {
                "name": "set_weighted_quorum_large",
                "args": [
                    {
                        "type": "uint64",
                        "name": "weighted_quorum",
                        "desc": "The weighted quorum"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the weighted quorum for large proposals"
            },
            {
                "name": "vote",
                "args": [
                    {
                        "type": "application",
                        "name": "proposal_app",
                        "desc": "The proposal app"
                    },
                    {
                        "type": "address",
                        "name": "voter",
                        "desc": "The voter"
                    },
                    {
                        "type": "uint64",
                        "name": "approvals",
                        "desc": "The number of approvals"
                    },
                    {
                        "type": "uint64",
                        "name": "rejections",
                        "desc": "The number of rejections"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Vote on a proposal"
            },
            {
                "name": "set_xgov_reviewer",
                "args": [
                    {
                        "type": "address",
                        "name": "xgov_reviewer",
                        "desc": "The XGov reviewer"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Set the XGov reviewer"
            },
            {
                "name": "fund",
                "args": [
                    {
                        "type": "application",
                        "name": "proposal_app",
                        "desc": "The proposal app"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Fund a proposal"
            },
            {
                "name": "delete_proposal",
                "args": [
                    {
                        "type": "application",
                        "name": "proposal_app"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "decommission_proposal",
                "args": [
                    {
                        "type": "application",
                        "name": "proposal_app"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "drop_proposal",
                "args": [
                    {
                        "type": "application",
                        "name": "proposal_app"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "is_proposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_id"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class PauseRegistryArgs(_ArgsBase[None]):
    """Pauses the xGov Registry non-administrative methods."""

    @staticmethod
    def method() -> str:
        return "pause_registry()void"


@dataclasses.dataclass(kw_only=True)
class PauseProposalsArgs(_ArgsBase[None]):
    """Pauses the creation of new Proposals."""

    @staticmethod
    def method() -> str:
        return "pause_proposals()void"


@dataclasses.dataclass(kw_only=True)
class ResumeRegistryArgs(_ArgsBase[None]):
    """Resumes the xGov Registry non-administrative methods."""

    @staticmethod
    def method() -> str:
        return "resume_registry()void"


@dataclasses.dataclass(kw_only=True)
class ResumeProposalsArgs(_ArgsBase[None]):
    """Resumes the creation of new Proposals."""

    @staticmethod
    def method() -> str:
        return "resume_proposals()void"


@dataclasses.dataclass(kw_only=True)
class CreateEmptyProposalArgs(_ArgsBase[int]):
    """Create an empty proposal"""

    proposer: str
    """The proposer's address"""

    @staticmethod
    def method() -> str:
        return "create_empty_proposal(address)uint64"


@dataclasses.dataclass(kw_only=True)
class SetProposalCommitmentBpsArgs(_ArgsBase[None]):
    """Set the proposal commitment in basis points"""

    commitment_bps: int
    """The commitment in basis points"""

    @staticmethod
    def method() -> str:
        return "set_proposal_commitment_bps(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetMinRequestedAmountArgs(_ArgsBase[None]):
    """Set the minimum requested amount"""

    min_requested_amount: int
    """The minimum requested amount"""

    @staticmethod
    def method() -> str:
        return "set_min_requested_amount(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetMaxRequestedAmountSmallArgs(_ArgsBase[None]):
    """Set the maximum requested amount for small proposals"""

    max_requested_amount: int
    """The maximum requested amount"""

    @staticmethod
    def method() -> str:
        return "set_max_requested_amount_small(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetMaxRequestedAmountMediumArgs(_ArgsBase[None]):
    """Set the maximum requested amount for medium proposals"""

    max_requested_amount: int
    """The maximum requested amount"""

    @staticmethod
    def method() -> str:
        return "set_max_requested_amount_medium(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetMaxRequestedAmountLargeArgs(_ArgsBase[None]):
    """Set the maximum requested amount for large proposals"""

    max_requested_amount: int
    """The maximum requested amount"""

    @staticmethod
    def method() -> str:
        return "set_max_requested_amount_large(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetPublishingFeeArgs(_ArgsBase[None]):
    """Set the publishing fee"""

    publishing_fee_bps: int
    """The publishing fee"""

    @staticmethod
    def method() -> str:
        return "set_publishing_fee(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetDiscussionDurationSmallArgs(_ArgsBase[None]):
    """Set the discussion duration for small proposals"""

    discussion_duration: int
    """The discussion duration"""

    @staticmethod
    def method() -> str:
        return "set_discussion_duration_small(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetDiscussionDurationMediumArgs(_ArgsBase[None]):
    """Set the discussion duration for medium proposals"""

    discussion_duration: int
    """The discussion duration"""

    @staticmethod
    def method() -> str:
        return "set_discussion_duration_medium(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetDiscussionDurationLargeArgs(_ArgsBase[None]):
    """Set the discussion duration for large proposals"""

    discussion_duration: int
    """The discussion duration"""

    @staticmethod
    def method() -> str:
        return "set_discussion_duration_large(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetCommitteePublisherArgs(_ArgsBase[None]):
    """Set the committee publisher"""

    committee_publisher: str
    """The committee publisher"""

    @staticmethod
    def method() -> str:
        return "set_committee_publisher(address)void"


@dataclasses.dataclass(kw_only=True)
class SetProposalFeeArgs(_ArgsBase[None]):
    """Set the proposal fee"""

    proposal_fee: int
    """The proposal fee"""

    @staticmethod
    def method() -> str:
        return "set_proposal_fee(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetCommitteeIdArgs(_ArgsBase[None]):
    """Set the committee ID"""

    committee_id: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    """The committee ID"""

    @staticmethod
    def method() -> str:
        return "set_committee_id(byte[32])void"


@dataclasses.dataclass(kw_only=True)
class ClearCommitteeIdArgs(_ArgsBase[None]):
    """Clear the committee ID"""

    @staticmethod
    def method() -> str:
        return "clear_committee_id()void"


@dataclasses.dataclass(kw_only=True)
class SetCommitteeMembersArgs(_ArgsBase[None]):
    """Set the number of committee members"""

    committee_members: int
    """The number of committee members"""

    @staticmethod
    def method() -> str:
        return "set_committee_members(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetCommitteeVotesArgs(_ArgsBase[None]):
    """Set the number of committee votes"""

    committee_votes: int
    """The number of committee votes"""

    @staticmethod
    def method() -> str:
        return "set_committee_votes(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetVotingDurationSmallArgs(_ArgsBase[None]):
    """Set the voting duration for small proposals"""

    voting_duration: int
    """The voting duration"""

    @staticmethod
    def method() -> str:
        return "set_voting_duration_small(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetVotingDurationMediumArgs(_ArgsBase[None]):
    """Set the voting duration for medium proposals"""

    voting_duration: int
    """The voting duration"""

    @staticmethod
    def method() -> str:
        return "set_voting_duration_medium(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetVotingDurationLargeArgs(_ArgsBase[None]):
    """Set the voting duration for large proposals"""

    voting_duration: int
    """The voting duration"""

    @staticmethod
    def method() -> str:
        return "set_voting_duration_large(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetQuorumSmallArgs(_ArgsBase[None]):
    """Set the quorum for small proposals"""

    quorum: int
    """The quorum"""

    @staticmethod
    def method() -> str:
        return "set_quorum_small(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetQuorumMediumArgs(_ArgsBase[None]):
    """Set the quorum for medium proposals"""

    quorum: int
    """The quorum"""

    @staticmethod
    def method() -> str:
        return "set_quorum_medium(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetQuorumLargeArgs(_ArgsBase[None]):
    """Set the quorum for large proposals"""

    quorum: int
    """The quorum"""

    @staticmethod
    def method() -> str:
        return "set_quorum_large(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetWeightedQuorumSmallArgs(_ArgsBase[None]):
    """Set the weighted quorum for small proposals"""

    weighted_quorum: int
    """The weighted quorum"""

    @staticmethod
    def method() -> str:
        return "set_weighted_quorum_small(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetWeightedQuorumMediumArgs(_ArgsBase[None]):
    """Set the weighted quorum for medium proposals"""

    weighted_quorum: int
    """The weighted quorum"""

    @staticmethod
    def method() -> str:
        return "set_weighted_quorum_medium(uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetWeightedQuorumLargeArgs(_ArgsBase[None]):
    """Set the weighted quorum for large proposals"""

    weighted_quorum: int
    """The weighted quorum"""

    @staticmethod
    def method() -> str:
        return "set_weighted_quorum_large(uint64)void"


@dataclasses.dataclass(kw_only=True)
class VoteArgs(_ArgsBase[None]):
    """Vote on a proposal"""

    proposal_app: int
    """The proposal app"""
    voter: str
    """The voter"""
    approvals: int
    """The number of approvals"""
    rejections: int
    """The number of rejections"""

    @staticmethod
    def method() -> str:
        return "vote(application,address,uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetXgovReviewerArgs(_ArgsBase[None]):
    """Set the XGov reviewer"""

    xgov_reviewer: str
    """The XGov reviewer"""

    @staticmethod
    def method() -> str:
        return "set_xgov_reviewer(address)void"


@dataclasses.dataclass(kw_only=True)
class FundArgs(_ArgsBase[None]):
    """Fund a proposal"""

    proposal_app: int
    """The proposal app"""

    @staticmethod
    def method() -> str:
        return "fund(application)void"


@dataclasses.dataclass(kw_only=True)
class DeleteProposalArgs(_ArgsBase[None]):
    proposal_app: int

    @staticmethod
    def method() -> str:
        return "delete_proposal(application)void"


@dataclasses.dataclass(kw_only=True)
class DecommissionProposalArgs(_ArgsBase[None]):
    proposal_app: int

    @staticmethod
    def method() -> str:
        return "decommission_proposal(application)void"


@dataclasses.dataclass(kw_only=True)
class DropProposalArgs(_ArgsBase[None]):
    proposal_app: int

    @staticmethod
    def method() -> str:
        return "drop_proposal(application)void"


@dataclasses.dataclass(kw_only=True)
class IsProposalArgs(_ArgsBase[None]):
    proposal_id: int

    @staticmethod
    def method() -> str:
        return "is_proposal(uint64)void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.committee_id = ByteReader(typing.cast(bytes, data.get(b"committee_id")))
        self.committee_members = typing.cast(int, data.get(b"committee_members"))
        self.committee_publisher = ByteReader(typing.cast(bytes, data.get(b"committee_publisher")))
        self.committee_votes = typing.cast(int, data.get(b"committee_votes"))
        self.discussion_duration_large = typing.cast(int, data.get(b"discussion_duration_large"))
        self.discussion_duration_medium = typing.cast(int, data.get(b"discussion_duration_medium"))
        self.discussion_duration_small = typing.cast(int, data.get(b"discussion_duration_small"))
        self.max_requested_amount_large = typing.cast(int, data.get(b"max_requested_amount_large"))
        self.max_requested_amount_medium = typing.cast(int, data.get(b"max_requested_amount_medium"))
        self.max_requested_amount_small = typing.cast(int, data.get(b"max_requested_amount_small"))
        self.min_requested_amount = typing.cast(int, data.get(b"min_requested_amount"))
        self.paused_proposals = typing.cast(int, data.get(b"paused_proposals"))
        self.paused_registry = typing.cast(int, data.get(b"paused_registry"))
        self.proposal_commitment_bps = typing.cast(int, data.get(b"proposal_commitment_bps"))
        self.proposal_fee = typing.cast(int, data.get(b"proposal_fee"))
        self.publishing_fee_bps = typing.cast(int, data.get(b"proposal_publishing_bps"))
        self.quorum_large = typing.cast(int, data.get(b"quorum_large"))
        self.quorum_medium = typing.cast(int, data.get(b"quorum_medium"))
        self.quorum_small = typing.cast(int, data.get(b"quorum_small"))
        self.voting_duration_large = typing.cast(int, data.get(b"voting_duration_large"))
        self.voting_duration_medium = typing.cast(int, data.get(b"voting_duration_medium"))
        self.voting_duration_small = typing.cast(int, data.get(b"voting_duration_small"))
        self.weighted_quorum_large = typing.cast(int, data.get(b"weighted_quorum_large"))
        self.weighted_quorum_medium = typing.cast(int, data.get(b"weighted_quorum_medium"))
        self.weighted_quorum_small = typing.cast(int, data.get(b"weighted_quorum_small"))
        self.xgov_reviewer = ByteReader(typing.cast(bytes, data.get(b"xgov_reviewer")))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def pause_registry(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Pauses the xGov Registry non-administrative methods.
        
        Adds a call to `pause_registry()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PauseRegistryArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def pause_proposals(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Pauses the creation of new Proposals.
        
        Adds a call to `pause_proposals()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PauseProposalsArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def resume_registry(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Resumes the xGov Registry non-administrative methods.
        
        Adds a call to `resume_registry()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ResumeRegistryArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def resume_proposals(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Resumes the creation of new Proposals.
        
        Adds a call to `resume_proposals()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ResumeProposalsArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_empty_proposal(
        self,
        *,
        proposer: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Create an empty proposal
        
        Adds a call to `create_empty_proposal(address)uint64` ABI method
        
        :param str proposer: The proposer's address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateEmptyProposalArgs(
            proposer=proposer,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_proposal_commitment_bps(
        self,
        *,
        commitment_bps: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the proposal commitment in basis points
        
        Adds a call to `set_proposal_commitment_bps(uint64)void` ABI method
        
        :param int commitment_bps: The commitment in basis points
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetProposalCommitmentBpsArgs(
            commitment_bps=commitment_bps,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_min_requested_amount(
        self,
        *,
        min_requested_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the minimum requested amount
        
        Adds a call to `set_min_requested_amount(uint64)void` ABI method
        
        :param int min_requested_amount: The minimum requested amount
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetMinRequestedAmountArgs(
            min_requested_amount=min_requested_amount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_max_requested_amount_small(
        self,
        *,
        max_requested_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the maximum requested amount for small proposals
        
        Adds a call to `set_max_requested_amount_small(uint64)void` ABI method
        
        :param int max_requested_amount: The maximum requested amount
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetMaxRequestedAmountSmallArgs(
            max_requested_amount=max_requested_amount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_max_requested_amount_medium(
        self,
        *,
        max_requested_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the maximum requested amount for medium proposals
        
        Adds a call to `set_max_requested_amount_medium(uint64)void` ABI method
        
        :param int max_requested_amount: The maximum requested amount
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetMaxRequestedAmountMediumArgs(
            max_requested_amount=max_requested_amount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_max_requested_amount_large(
        self,
        *,
        max_requested_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the maximum requested amount for large proposals
        
        Adds a call to `set_max_requested_amount_large(uint64)void` ABI method
        
        :param int max_requested_amount: The maximum requested amount
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetMaxRequestedAmountLargeArgs(
            max_requested_amount=max_requested_amount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_publishing_fee(
        self,
        *,
        publishing_fee_bps: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the publishing fee
        
        Adds a call to `set_publishing_fee(uint64)void` ABI method
        
        :param int publishing_fee_bps: The publishing fee
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetPublishingFeeArgs(
            publishing_fee_bps=publishing_fee_bps,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_discussion_duration_small(
        self,
        *,
        discussion_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the discussion duration for small proposals
        
        Adds a call to `set_discussion_duration_small(uint64)void` ABI method
        
        :param int discussion_duration: The discussion duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetDiscussionDurationSmallArgs(
            discussion_duration=discussion_duration,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_discussion_duration_medium(
        self,
        *,
        discussion_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the discussion duration for medium proposals
        
        Adds a call to `set_discussion_duration_medium(uint64)void` ABI method
        
        :param int discussion_duration: The discussion duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetDiscussionDurationMediumArgs(
            discussion_duration=discussion_duration,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_discussion_duration_large(
        self,
        *,
        discussion_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the discussion duration for large proposals
        
        Adds a call to `set_discussion_duration_large(uint64)void` ABI method
        
        :param int discussion_duration: The discussion duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetDiscussionDurationLargeArgs(
            discussion_duration=discussion_duration,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_committee_publisher(
        self,
        *,
        committee_publisher: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the committee publisher
        
        Adds a call to `set_committee_publisher(address)void` ABI method
        
        :param str committee_publisher: The committee publisher
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetCommitteePublisherArgs(
            committee_publisher=committee_publisher,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_proposal_fee(
        self,
        *,
        proposal_fee: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the proposal fee
        
        Adds a call to `set_proposal_fee(uint64)void` ABI method
        
        :param int proposal_fee: The proposal fee
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetProposalFeeArgs(
            proposal_fee=proposal_fee,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_committee_id(
        self,
        *,
        committee_id: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the committee ID
        
        Adds a call to `set_committee_id(byte[32])void` ABI method
        
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] committee_id: The committee ID
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetCommitteeIdArgs(
            committee_id=committee_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_committee_id(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Clear the committee ID
        
        Adds a call to `clear_committee_id()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ClearCommitteeIdArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_committee_members(
        self,
        *,
        committee_members: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the number of committee members
        
        Adds a call to `set_committee_members(uint64)void` ABI method
        
        :param int committee_members: The number of committee members
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetCommitteeMembersArgs(
            committee_members=committee_members,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_committee_votes(
        self,
        *,
        committee_votes: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the number of committee votes
        
        Adds a call to `set_committee_votes(uint64)void` ABI method
        
        :param int committee_votes: The number of committee votes
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetCommitteeVotesArgs(
            committee_votes=committee_votes,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_voting_duration_small(
        self,
        *,
        voting_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the voting duration for small proposals
        
        Adds a call to `set_voting_duration_small(uint64)void` ABI method
        
        :param int voting_duration: The voting duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetVotingDurationSmallArgs(
            voting_duration=voting_duration,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_voting_duration_medium(
        self,
        *,
        voting_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the voting duration for medium proposals
        
        Adds a call to `set_voting_duration_medium(uint64)void` ABI method
        
        :param int voting_duration: The voting duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetVotingDurationMediumArgs(
            voting_duration=voting_duration,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_voting_duration_large(
        self,
        *,
        voting_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the voting duration for large proposals
        
        Adds a call to `set_voting_duration_large(uint64)void` ABI method
        
        :param int voting_duration: The voting duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetVotingDurationLargeArgs(
            voting_duration=voting_duration,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_quorum_small(
        self,
        *,
        quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the quorum for small proposals
        
        Adds a call to `set_quorum_small(uint64)void` ABI method
        
        :param int quorum: The quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetQuorumSmallArgs(
            quorum=quorum,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_quorum_medium(
        self,
        *,
        quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the quorum for medium proposals
        
        Adds a call to `set_quorum_medium(uint64)void` ABI method
        
        :param int quorum: The quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetQuorumMediumArgs(
            quorum=quorum,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_quorum_large(
        self,
        *,
        quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the quorum for large proposals
        
        Adds a call to `set_quorum_large(uint64)void` ABI method
        
        :param int quorum: The quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetQuorumLargeArgs(
            quorum=quorum,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_weighted_quorum_small(
        self,
        *,
        weighted_quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the weighted quorum for small proposals
        
        Adds a call to `set_weighted_quorum_small(uint64)void` ABI method
        
        :param int weighted_quorum: The weighted quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetWeightedQuorumSmallArgs(
            weighted_quorum=weighted_quorum,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_weighted_quorum_medium(
        self,
        *,
        weighted_quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the weighted quorum for medium proposals
        
        Adds a call to `set_weighted_quorum_medium(uint64)void` ABI method
        
        :param int weighted_quorum: The weighted quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetWeightedQuorumMediumArgs(
            weighted_quorum=weighted_quorum,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_weighted_quorum_large(
        self,
        *,
        weighted_quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the weighted quorum for large proposals
        
        Adds a call to `set_weighted_quorum_large(uint64)void` ABI method
        
        :param int weighted_quorum: The weighted quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetWeightedQuorumLargeArgs(
            weighted_quorum=weighted_quorum,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def vote(
        self,
        *,
        proposal_app: int,
        voter: str,
        approvals: int,
        rejections: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Vote on a proposal
        
        Adds a call to `vote(application,address,uint64,uint64)void` ABI method
        
        :param int proposal_app: The proposal app
        :param str voter: The voter
        :param int approvals: The number of approvals
        :param int rejections: The number of rejections
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = VoteArgs(
            proposal_app=proposal_app,
            voter=voter,
            approvals=approvals,
            rejections=rejections,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_xgov_reviewer(
        self,
        *,
        xgov_reviewer: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Set the XGov reviewer
        
        Adds a call to `set_xgov_reviewer(address)void` ABI method
        
        :param str xgov_reviewer: The XGov reviewer
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetXgovReviewerArgs(
            xgov_reviewer=xgov_reviewer,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def fund(
        self,
        *,
        proposal_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Fund a proposal
        
        Adds a call to `fund(application)void` ABI method
        
        :param int proposal_app: The proposal app
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = FundArgs(
            proposal_app=proposal_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_proposal(
        self,
        *,
        proposal_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `delete_proposal(application)void` ABI method
        
        :param int proposal_app: The `proposal_app` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DeleteProposalArgs(
            proposal_app=proposal_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def decommission_proposal(
        self,
        *,
        proposal_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `decommission_proposal(application)void` ABI method
        
        :param int proposal_app: The `proposal_app` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DecommissionProposalArgs(
            proposal_app=proposal_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def drop_proposal(
        self,
        *,
        proposal_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `drop_proposal(application)void` ABI method
        
        :param int proposal_app: The `proposal_app` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DropProposalArgs(
            proposal_app=proposal_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def is_proposal(
        self,
        *,
        proposal_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `is_proposal(uint64)void` ABI method
        
        :param int proposal_id: The `proposal_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = IsProposalArgs(
            proposal_id=proposal_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class XgovRegistryMockClient:
    """A class for interacting with the XgovRegistryMock app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        XgovRegistryMockClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def pause_registry(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Pauses the xGov Registry non-administrative methods.
        
        Calls `pause_registry()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = PauseRegistryArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def pause_proposals(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Pauses the creation of new Proposals.
        
        Calls `pause_proposals()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = PauseProposalsArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def resume_registry(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Resumes the xGov Registry non-administrative methods.
        
        Calls `resume_registry()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ResumeRegistryArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def resume_proposals(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Resumes the creation of new Proposals.
        
        Calls `resume_proposals()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ResumeProposalsArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_empty_proposal(
        self,
        *,
        proposer: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Create an empty proposal
        
        Calls `create_empty_proposal(address)uint64` ABI method
        
        :param str proposer: The proposer's address
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The ID of the created proposal"""

        args = CreateEmptyProposalArgs(
            proposer=proposer,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_proposal_commitment_bps(
        self,
        *,
        commitment_bps: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the proposal commitment in basis points
        
        Calls `set_proposal_commitment_bps(uint64)void` ABI method
        
        :param int commitment_bps: The commitment in basis points
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetProposalCommitmentBpsArgs(
            commitment_bps=commitment_bps,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_min_requested_amount(
        self,
        *,
        min_requested_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the minimum requested amount
        
        Calls `set_min_requested_amount(uint64)void` ABI method
        
        :param int min_requested_amount: The minimum requested amount
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetMinRequestedAmountArgs(
            min_requested_amount=min_requested_amount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_max_requested_amount_small(
        self,
        *,
        max_requested_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the maximum requested amount for small proposals
        
        Calls `set_max_requested_amount_small(uint64)void` ABI method
        
        :param int max_requested_amount: The maximum requested amount
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetMaxRequestedAmountSmallArgs(
            max_requested_amount=max_requested_amount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_max_requested_amount_medium(
        self,
        *,
        max_requested_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the maximum requested amount for medium proposals
        
        Calls `set_max_requested_amount_medium(uint64)void` ABI method
        
        :param int max_requested_amount: The maximum requested amount
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetMaxRequestedAmountMediumArgs(
            max_requested_amount=max_requested_amount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_max_requested_amount_large(
        self,
        *,
        max_requested_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the maximum requested amount for large proposals
        
        Calls `set_max_requested_amount_large(uint64)void` ABI method
        
        :param int max_requested_amount: The maximum requested amount
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetMaxRequestedAmountLargeArgs(
            max_requested_amount=max_requested_amount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_publishing_fee(
        self,
        *,
        publishing_fee_bps: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the publishing fee
        
        Calls `set_publishing_fee(uint64)void` ABI method
        
        :param int publishing_fee_bps: The publishing fee
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetPublishingFeeArgs(
            publishing_fee_bps=publishing_fee_bps,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_discussion_duration_small(
        self,
        *,
        discussion_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the discussion duration for small proposals
        
        Calls `set_discussion_duration_small(uint64)void` ABI method
        
        :param int discussion_duration: The discussion duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetDiscussionDurationSmallArgs(
            discussion_duration=discussion_duration,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_discussion_duration_medium(
        self,
        *,
        discussion_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the discussion duration for medium proposals
        
        Calls `set_discussion_duration_medium(uint64)void` ABI method
        
        :param int discussion_duration: The discussion duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetDiscussionDurationMediumArgs(
            discussion_duration=discussion_duration,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_discussion_duration_large(
        self,
        *,
        discussion_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the discussion duration for large proposals
        
        Calls `set_discussion_duration_large(uint64)void` ABI method
        
        :param int discussion_duration: The discussion duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetDiscussionDurationLargeArgs(
            discussion_duration=discussion_duration,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_committee_publisher(
        self,
        *,
        committee_publisher: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the committee publisher
        
        Calls `set_committee_publisher(address)void` ABI method
        
        :param str committee_publisher: The committee publisher
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetCommitteePublisherArgs(
            committee_publisher=committee_publisher,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_proposal_fee(
        self,
        *,
        proposal_fee: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the proposal fee
        
        Calls `set_proposal_fee(uint64)void` ABI method
        
        :param int proposal_fee: The proposal fee
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetProposalFeeArgs(
            proposal_fee=proposal_fee,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_committee_id(
        self,
        *,
        committee_id: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the committee ID
        
        Calls `set_committee_id(byte[32])void` ABI method
        
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] committee_id: The committee ID
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetCommitteeIdArgs(
            committee_id=committee_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_committee_id(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Clear the committee ID
        
        Calls `clear_committee_id()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ClearCommitteeIdArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_committee_members(
        self,
        *,
        committee_members: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the number of committee members
        
        Calls `set_committee_members(uint64)void` ABI method
        
        :param int committee_members: The number of committee members
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetCommitteeMembersArgs(
            committee_members=committee_members,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_committee_votes(
        self,
        *,
        committee_votes: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the number of committee votes
        
        Calls `set_committee_votes(uint64)void` ABI method
        
        :param int committee_votes: The number of committee votes
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetCommitteeVotesArgs(
            committee_votes=committee_votes,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_voting_duration_small(
        self,
        *,
        voting_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the voting duration for small proposals
        
        Calls `set_voting_duration_small(uint64)void` ABI method
        
        :param int voting_duration: The voting duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetVotingDurationSmallArgs(
            voting_duration=voting_duration,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_voting_duration_medium(
        self,
        *,
        voting_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the voting duration for medium proposals
        
        Calls `set_voting_duration_medium(uint64)void` ABI method
        
        :param int voting_duration: The voting duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetVotingDurationMediumArgs(
            voting_duration=voting_duration,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_voting_duration_large(
        self,
        *,
        voting_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the voting duration for large proposals
        
        Calls `set_voting_duration_large(uint64)void` ABI method
        
        :param int voting_duration: The voting duration
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetVotingDurationLargeArgs(
            voting_duration=voting_duration,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_quorum_small(
        self,
        *,
        quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the quorum for small proposals
        
        Calls `set_quorum_small(uint64)void` ABI method
        
        :param int quorum: The quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetQuorumSmallArgs(
            quorum=quorum,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_quorum_medium(
        self,
        *,
        quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the quorum for medium proposals
        
        Calls `set_quorum_medium(uint64)void` ABI method
        
        :param int quorum: The quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetQuorumMediumArgs(
            quorum=quorum,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_quorum_large(
        self,
        *,
        quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the quorum for large proposals
        
        Calls `set_quorum_large(uint64)void` ABI method
        
        :param int quorum: The quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetQuorumLargeArgs(
            quorum=quorum,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_weighted_quorum_small(
        self,
        *,
        weighted_quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the weighted quorum for small proposals
        
        Calls `set_weighted_quorum_small(uint64)void` ABI method
        
        :param int weighted_quorum: The weighted quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetWeightedQuorumSmallArgs(
            weighted_quorum=weighted_quorum,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_weighted_quorum_medium(
        self,
        *,
        weighted_quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the weighted quorum for medium proposals
        
        Calls `set_weighted_quorum_medium(uint64)void` ABI method
        
        :param int weighted_quorum: The weighted quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetWeightedQuorumMediumArgs(
            weighted_quorum=weighted_quorum,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_weighted_quorum_large(
        self,
        *,
        weighted_quorum: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the weighted quorum for large proposals
        
        Calls `set_weighted_quorum_large(uint64)void` ABI method
        
        :param int weighted_quorum: The weighted quorum
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetWeightedQuorumLargeArgs(
            weighted_quorum=weighted_quorum,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def vote(
        self,
        *,
        proposal_app: int,
        voter: str,
        approvals: int,
        rejections: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Vote on a proposal
        
        Calls `vote(application,address,uint64,uint64)void` ABI method
        
        :param int proposal_app: The proposal app
        :param str voter: The voter
        :param int approvals: The number of approvals
        :param int rejections: The number of rejections
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = VoteArgs(
            proposal_app=proposal_app,
            voter=voter,
            approvals=approvals,
            rejections=rejections,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_xgov_reviewer(
        self,
        *,
        xgov_reviewer: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Set the XGov reviewer
        
        Calls `set_xgov_reviewer(address)void` ABI method
        
        :param str xgov_reviewer: The XGov reviewer
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetXgovReviewerArgs(
            xgov_reviewer=xgov_reviewer,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def fund(
        self,
        *,
        proposal_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Fund a proposal
        
        Calls `fund(application)void` ABI method
        
        :param int proposal_app: The proposal app
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = FundArgs(
            proposal_app=proposal_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_proposal(
        self,
        *,
        proposal_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `delete_proposal(application)void` ABI method
        
        :param int proposal_app: The `proposal_app` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DeleteProposalArgs(
            proposal_app=proposal_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def decommission_proposal(
        self,
        *,
        proposal_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `decommission_proposal(application)void` ABI method
        
        :param int proposal_app: The `proposal_app` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DecommissionProposalArgs(
            proposal_app=proposal_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def drop_proposal(
        self,
        *,
        proposal_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `drop_proposal(application)void` ABI method
        
        :param int proposal_app: The `proposal_app` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DropProposalArgs(
            proposal_app=proposal_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def is_proposal(
        self,
        *,
        proposal_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `is_proposal(uint64)void` ABI method
        
        :param int proposal_id: The `proposal_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = IsProposalArgs(
            proposal_id=proposal_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
