#pragma version 10

smart_contracts.proposal.contract.Proposal.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.proposal.contract.Proposal.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/proposal/contract.py:29-37
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@10
    method "create(address)void"
    method "submit_proposal(pay,string,byte[59],uint64,uint64)void"
    method "update_proposal(string,byte[59])void"
    method "drop_proposal()void"
    method "finalize_proposal()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_route@2 __puya_arc4_router___submit_proposal_route@3 __puya_arc4_router___update_proposal_route@4 __puya_arc4_router___drop_proposal_route@5 __puya_arc4_router___finalize_proposal_route@6
    int 0
    retsub

__puya_arc4_router___create_route@2:
    // smart_contracts/proposal/contract.py:285
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/proposal/contract.py:29-37
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/proposal/contract.py:285
    // @arc4.abimethod(create="require")
    callsub create
    int 1
    retsub

__puya_arc4_router___submit_proposal_route@3:
    // smart_contracts/proposal/contract.py:299
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/proposal/contract.py:29-37
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    // smart_contracts/proposal/contract.py:299
    // @arc4.abimethod()
    callsub submit_proposal
    int 1
    retsub

__puya_arc4_router___update_proposal_route@4:
    // smart_contracts/proposal/contract.py:345
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/proposal/contract.py:29-37
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    // smart_contracts/proposal/contract.py:345
    // @arc4.abimethod()
    callsub update_proposal
    int 1
    retsub

__puya_arc4_router___drop_proposal_route@5:
    // smart_contracts/proposal/contract.py:368
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub drop_proposal
    int 1
    retsub

__puya_arc4_router___finalize_proposal_route@6:
    // smart_contracts/proposal/contract.py:395
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub finalize_proposal
    int 1
    retsub

__puya_arc4_router___after_if_else@10:
    // smart_contracts/proposal/contract.py:29-37
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    int 0
    retsub


// smart_contracts.proposal.contract.Proposal.create(proposer: bytes) -> void:
create:
    // smart_contracts/proposal/contract.py:285-286
    // @arc4.abimethod(create="require")
    // def create(self, proposer: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/proposal/contract.py:293
    // Global.caller_application_id != 0
    global CallerApplicationID
    // smart_contracts/proposal/contract.py:292-294
    // assert (
    //     Global.caller_application_id != 0
    // ), err.UNAUTHORIZED  # Only callable by another contract
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:296
    // self.proposer.value = proposer
    byte 0x70726f706f736572
    frame_dig -1
    app_global_put
    // smart_contracts/proposal/contract.py:297
    // self.registry_app_id.value = Global.caller_application_id
    byte 0x72656769737472795f6170705f6964
    global CallerApplicationID
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.submit_proposal(payment: uint64, title: bytes, cid: bytes, funding_type: uint64, requested_amount: uint64) -> void:
submit_proposal:
    // smart_contracts/proposal/contract.py:299-307
    // @arc4.abimethod()
    // def submit_proposal(
    //     self,
    //     payment: gtxn.PaymentTransaction,
    //     title: String,
    //     cid: typ.Cid,
    //     funding_type: UInt64,
    //     requested_amount: UInt64,
    // ) -> None:
    proto 5 0
    // smart_contracts/proposal/contract.py:331
    // self.submit_check_authorization()
    callsub submit_check_authorization
    // smart_contracts/proposal/contract.py:333
    // self.submit_input_validation(title, cid, funding_type, requested_amount)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub submit_input_validation
    frame_bury -3
    // smart_contracts/proposal/contract.py:334
    // self.submit_payment_validation(payment, requested_amount)
    frame_dig -5
    frame_dig -1
    callsub submit_payment_validation
    // smart_contracts/proposal/contract.py:336
    // self.title.value = title
    byte 0x7469746c65
    frame_dig -4
    app_global_put
    // smart_contracts/proposal/contract.py:337
    // self.cid.value = cid.copy()
    byte 0x636964
    frame_dig -3
    app_global_put
    // smart_contracts/proposal/contract.py:338
    // self.set_category(requested_amount)
    frame_dig -1
    callsub set_category
    // smart_contracts/proposal/contract.py:339
    // self.funding_type.value = funding_type
    byte 0x66756e64696e675f74797065
    frame_dig -2
    app_global_put
    // smart_contracts/proposal/contract.py:340
    // self.requested_amount.value = requested_amount
    byte 0x7265717565737465645f616d6f756e74
    frame_dig -1
    app_global_put
    // smart_contracts/proposal/contract.py:341
    // self.locked_amount.value = self.get_expected_locked_amount(requested_amount)
    frame_dig -1
    callsub get_expected_locked_amount
    byte 0x6c6f636b65645f616d6f756e74
    swap
    app_global_put
    // smart_contracts/proposal/contract.py:342
    // self.submission_ts.value = Global.latest_timestamp
    byte 0x7375626d697373696f6e5f74696d657374616d70
    global LatestTimestamp
    app_global_put
    // smart_contracts/proposal/contract.py:343
    // self.status.value = UInt64(enm.STATUS_DRAFT)
    byte 0x737461747573
    int 10
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.submit_check_authorization() -> void:
submit_check_authorization:
    // smart_contracts/proposal/contract.py:184-185
    // @subroutine
    // def submit_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:186
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:187
    // assert self.is_kyc_verified(), err.KYC_NOT_VERIFIED
    callsub is_kyc_verified
    assert // KYC is not verified
    // smart_contracts/proposal/contract.py:188
    // assert self.status.value == enm.STATUS_EMPTY, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    !
    assert // Wrong Proposal Status
    retsub


// smart_contracts.proposal.contract.Proposal.is_proposer() -> uint64:
is_proposer:
    // smart_contracts/proposal/contract.py:281-282
    // @subroutine
    // def is_proposer(self) -> bool:
    proto 0 1
    // smart_contracts/proposal/contract.py:283
    // return Txn.sender == self.proposer.value
    int 0
    byte 0x70726f706f736572
    app_global_get_ex
    assert // check self.proposer exists
    txn Sender
    ==
    retsub


// smart_contracts.proposal.contract.Proposal.is_kyc_verified() -> uint64:
is_kyc_verified:
    // smart_contracts/proposal/contract.py:433-437
    // ####################################################################################################################
    // # Stub subroutines
    // # these subroutines are placeholders for the actual implementation
    // @subroutine
    // def is_kyc_verified(self) -> bool:
    proto 0 1
    // smart_contracts/proposal/contract.py:438
    // return True
    int 1
    retsub


// smart_contracts.proposal.contract.Proposal.submit_input_validation(title: bytes, cid: bytes, funding_type: uint64, requested_amount: uint64) -> bytes:
submit_input_validation:
    // smart_contracts/proposal/contract.py:190-197
    // @subroutine
    // def submit_input_validation(
    //     self,
    //     title: String,
    //     cid: typ.Cid,
    //     funding_type: UInt64,
    //     requested_amount: UInt64,
    // ) -> None:
    proto 4 1
    // smart_contracts/proposal/contract.py:199
    // self.updateable_input_validation(title, cid)
    frame_dig -4
    frame_dig -3
    callsub updateable_input_validation
    frame_bury -3
    // smart_contracts/proposal/contract.py:202
    // funding_type == enm.FUNDING_PROACTIVE
    frame_dig -2
    int 10
    ==
    // smart_contracts/proposal/contract.py:202-203
    // funding_type == enm.FUNDING_PROACTIVE
    // or funding_type == enm.FUNDING_RETROACTIVE
    bnz submit_input_validation_bool_true@2
    // smart_contracts/proposal/contract.py:203
    // or funding_type == enm.FUNDING_RETROACTIVE
    frame_dig -2
    int 20
    ==
    // smart_contracts/proposal/contract.py:202-203
    // funding_type == enm.FUNDING_PROACTIVE
    // or funding_type == enm.FUNDING_RETROACTIVE
    bz submit_input_validation_bool_false@3

submit_input_validation_bool_true@2:
    int 1
    b submit_input_validation_bool_merge@4

submit_input_validation_bool_false@3:
    int 0

submit_input_validation_bool_merge@4:
    // smart_contracts/proposal/contract.py:201-204
    // assert (
    //     funding_type == enm.FUNDING_PROACTIVE
    //     or funding_type == enm.FUNDING_RETROACTIVE
    // ), err.WRONG_FUNDING_TYPE
    assert // Wrong Funding Type
    // smart_contracts/proposal/contract.py:207
    // Bytes(reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT)
    byte 0x6d696e696d756d5f7265717565737465645f616d6f756e74
    // smart_contracts/proposal/contract.py:206-208
    // min_requested_amount = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:210
    // Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE)
    byte 0x6d6178696d756d5f7265717565737465645f616d6f756e745f6c61726765
    // smart_contracts/proposal/contract.py:209-211
    // max_requested_amount_large = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE)
    // )
    callsub get_uint_from_registry_config
    swap
    // smart_contracts/proposal/contract.py:213
    // assert requested_amount >= min_requested_amount, err.WRONG_MIN_REQUESTED_AMOUNT
    frame_dig -1
    <=
    assert // Requested amount is less than the minimum requested amount
    // smart_contracts/proposal/contract.py:215
    // requested_amount <= max_requested_amount_large
    frame_dig -1
    >=
    // smart_contracts/proposal/contract.py:214-216
    // assert (
    //     requested_amount <= max_requested_amount_large
    // ), err.WRONG_MAX_REQUESTED_AMOUNT
    assert // Requested amount is more than the maximum requested amount
    frame_dig -3
    retsub


// smart_contracts.proposal.contract.Proposal.updateable_input_validation(title: bytes, cid: bytes) -> bytes:
updateable_input_validation:
    // smart_contracts/proposal/contract.py:170-171
    // @subroutine
    // def updateable_input_validation(self, title: String, cid: typ.Cid) -> None:
    proto 2 1
    // smart_contracts/proposal/contract.py:172
    // assert title.bytes.length <= const.TITLE_MAX_BYTES, err.WRONG_TITLE_LENGTH
    frame_dig -2
    len
    int 123
    <=
    assert // Wrong Title length
    // smart_contracts/proposal/contract.py:173
    // assert title != "", err.WRONG_TITLE_LENGTH
    frame_dig -2
    byte ""
    !=
    assert // Wrong Title length
    frame_dig -1
    retsub


// smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config(global_state_key: bytes) -> uint64:
get_uint_from_registry_config:
    // smart_contracts/proposal/contract.py:261-262
    // @subroutine
    // def get_uint_from_registry_config(self, global_state_key: Bytes) -> UInt64:
    proto 1 1
    // smart_contracts/proposal/contract.py:264
    // self.registry_app_id.value, global_state_key
    int 0
    byte 0x72656769737472795f6170705f6964
    app_global_get_ex
    assert // check self.registry_app_id exists
    // smart_contracts/proposal/contract.py:263-265
    // value, exists = AppGlobal.get_ex_uint64(
    //     self.registry_app_id.value, global_state_key
    // )
    frame_dig -1
    app_global_get_ex
    // smart_contracts/proposal/contract.py:266
    // assert exists, err.MISSING_CONFIG
    assert // Missing Config
    // smart_contracts/proposal/contract.py:267
    // return value
    retsub


// smart_contracts.proposal.contract.Proposal.submit_payment_validation(payment: uint64, requested_amount: uint64) -> void:
submit_payment_validation:
    // smart_contracts/proposal/contract.py:233-236
    // @subroutine
    // def submit_payment_validation(
    //     self, payment: gtxn.PaymentTransaction, requested_amount: UInt64
    // ) -> None:
    proto 2 0
    // smart_contracts/proposal/contract.py:237
    // expected_lock_amount = self.get_expected_locked_amount(requested_amount)
    frame_dig -1
    callsub get_expected_locked_amount
    // smart_contracts/proposal/contract.py:239
    // assert payment.sender == self.proposer.value, err.WRONG_SENDER
    int 0
    byte 0x70726f706f736572
    app_global_get_ex
    assert // check self.proposer exists
    frame_dig -2
    gtxns Sender
    ==
    assert // Wrong Sender
    // smart_contracts/proposal/contract.py:241
    // payment.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/proposal/contract.py:240-242
    // assert (
    //     payment.receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong Receiver
    // smart_contracts/proposal/contract.py:243
    // assert payment.amount == expected_lock_amount, err.WRONG_LOCKED_AMOUNT
    frame_dig -2
    gtxns Amount
    ==
    assert // Locked amount is incorrect
    retsub


// smart_contracts.proposal.contract.Proposal.get_expected_locked_amount(requested_amount: uint64) -> uint64:
get_expected_locked_amount:
    // smart_contracts/proposal/contract.py:224-225
    // @subroutine
    // def get_expected_locked_amount(self, requested_amount: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/proposal/contract.py:229
    // Bytes(reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS)
    byte 0x70726f706f73616c5f636f6d6d69746d656e74
    // smart_contracts/proposal/contract.py:228-230
    // self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS)
    // ),
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:226-231
    // return self.relative_to_absolute_amount(
    //     requested_amount,
    //     self.get_uint_from_registry_config(
    //         Bytes(reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS)
    //     ),
    // )
    frame_dig -1
    swap
    callsub relative_to_absolute_amount
    retsub


// smart_contracts.proposal.contract.Proposal.relative_to_absolute_amount(amount: uint64, fraction_in_bps: uint64) -> uint64:
relative_to_absolute_amount:
    // smart_contracts/proposal/contract.py:218-221
    // @subroutine
    // def relative_to_absolute_amount(
    //     self, amount: UInt64, fraction_in_bps: UInt64
    // ) -> UInt64:
    proto 2 1
    // smart_contracts/proposal/contract.py:222
    // return amount * fraction_in_bps // const.BPS
    frame_dig -2
    frame_dig -1
    *
    int 10000
    /
    retsub


// smart_contracts.proposal.contract.Proposal.set_category(requested_amount: uint64) -> void:
set_category:
    // smart_contracts/proposal/contract.py:245-246
    // @subroutine
    // def set_category(self, requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/proposal/contract.py:248
    // Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL)
    byte 0x6d6178696d756d5f7265717565737465645f616d6f756e745f736d616c6c
    // smart_contracts/proposal/contract.py:247-249
    // max_requested_amount_small = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:251
    // Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM)
    byte 0x6d6178696d756d5f7265717565737465645f616d6f756e745f6d656469756d
    // smart_contracts/proposal/contract.py:250-252
    // max_requested_amount_medium = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM)
    // )
    callsub get_uint_from_registry_config
    swap
    // smart_contracts/proposal/contract.py:254
    // if requested_amount <= max_requested_amount_small:
    frame_dig -1
    >=
    bz set_category_else_body@2
    // smart_contracts/proposal/contract.py:255
    // self.category.value = UInt64(enm.CATEGORY_SMALL)
    byte 0x63617465676f7279
    int 10
    app_global_put
    b set_category_after_if_else@6

set_category_else_body@2:
    // smart_contracts/proposal/contract.py:256
    // elif requested_amount <= max_requested_amount_medium:
    frame_dig -1
    frame_dig 0
    <=
    bz set_category_else_body@4
    // smart_contracts/proposal/contract.py:257
    // self.category.value = UInt64(enm.CATEGORY_MEDIUM)
    byte 0x63617465676f7279
    int 20
    app_global_put
    b set_category_after_if_else@6

set_category_else_body@4:
    // smart_contracts/proposal/contract.py:259
    // self.category.value = UInt64(enm.CATEGORY_LARGE)
    byte 0x63617465676f7279
    int 33
    app_global_put

set_category_after_if_else@6:
    retsub


// smart_contracts.proposal.contract.Proposal.update_proposal(title: bytes, cid: bytes) -> void:
update_proposal:
    // smart_contracts/proposal/contract.py:345-346
    // @arc4.abimethod()
    // def update_proposal(self, title: String, cid: typ.Cid) -> None:
    proto 2 0
    // smart_contracts/proposal/contract.py:361
    // self.update_check_authorization()
    callsub update_check_authorization
    // smart_contracts/proposal/contract.py:363
    // self.updateable_input_validation(title, cid)
    frame_dig -2
    frame_dig -1
    callsub updateable_input_validation
    frame_bury -1
    // smart_contracts/proposal/contract.py:365
    // self.title.value = title
    byte 0x7469746c65
    frame_dig -2
    app_global_put
    // smart_contracts/proposal/contract.py:366
    // self.cid.value = cid.copy()
    byte 0x636964
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.update_check_authorization() -> void:
update_check_authorization:
    // smart_contracts/proposal/contract.py:178-179
    // @subroutine
    // def update_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:180
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:181
    // assert self.is_kyc_verified(), err.KYC_NOT_VERIFIED
    callsub is_kyc_verified
    assert // KYC is not verified
    // smart_contracts/proposal/contract.py:182
    // assert self.status.value == enm.STATUS_DRAFT, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    int 10
    ==
    assert // Wrong Proposal Status
    retsub


// smart_contracts.proposal.contract.Proposal.drop_proposal() -> void:
drop_proposal:
    // smart_contracts/proposal/contract.py:368-369
    // @arc4.abimethod()
    // def drop_proposal(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:377
    // self.drop_check_authorization()
    callsub drop_check_authorization
    // smart_contracts/proposal/contract.py:379-383
    // itxn.Payment(
    //     receiver=self.proposer.value.native,
    //     amount=self.locked_amount.value,
    //     fee=UInt64(0),  # enforces the proposer to pay the fee
    // ).submit()
    itxn_begin
    // smart_contracts/proposal/contract.py:380
    // receiver=self.proposer.value.native,
    int 0
    byte 0x70726f706f736572
    app_global_get_ex
    assert // check self.proposer exists
    // smart_contracts/proposal/contract.py:381
    // amount=self.locked_amount.value,
    int 0
    byte 0x6c6f636b65645f616d6f756e74
    app_global_get_ex
    assert // check self.locked_amount exists
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/proposal/contract.py:379
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/proposal/contract.py:382
    // fee=UInt64(0),  # enforces the proposer to pay the fee
    int 0
    itxn_field Fee
    // smart_contracts/proposal/contract.py:379-383
    // itxn.Payment(
    //     receiver=self.proposer.value.native,
    //     amount=self.locked_amount.value,
    //     fee=UInt64(0),  # enforces the proposer to pay the fee
    // ).submit()
    itxn_submit
    // smart_contracts/proposal/contract.py:385-386
    // #  Clear the proposal data TODO: check if this can be in a struct and clear the struct
    // self.title.value = String()
    byte 0x7469746c65
    byte ""
    app_global_put
    // smart_contracts/proposal/contract.py:387
    // self.cid.value = typ.Cid.from_bytes(b"")
    byte 0x636964
    byte 0x
    app_global_put
    // smart_contracts/proposal/contract.py:388
    // self.category.value = UInt64(enm.CATEGORY_NULL)
    byte 0x63617465676f7279
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:389
    // self.funding_type.value = UInt64(enm.FUNDING_NULL)
    byte 0x66756e64696e675f74797065
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:390
    // self.requested_amount.value = UInt64(0)
    byte 0x7265717565737465645f616d6f756e74
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:391
    // self.locked_amount.value = UInt64(0)
    byte 0x6c6f636b65645f616d6f756e74
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:392
    // self.submission_ts.value = UInt64(0)
    byte 0x7375626d697373696f6e5f74696d657374616d70
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:393
    // self.status.value = UInt64(enm.STATUS_EMPTY)
    byte 0x737461747573
    int 0
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.drop_check_authorization() -> void:
drop_check_authorization:
    // smart_contracts/proposal/contract.py:165-166
    // @subroutine
    // def drop_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:167
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:168
    // assert self.status.value == enm.STATUS_DRAFT, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    int 10
    ==
    assert // Wrong Proposal Status
    retsub


// smart_contracts.proposal.contract.Proposal.finalize_proposal() -> void:
finalize_proposal:
    // smart_contracts/proposal/contract.py:395-396
    // @arc4.abimethod()
    // def finalize_proposal(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:409
    // self.finalize_check_authorization()
    callsub finalize_check_authorization
    // smart_contracts/proposal/contract.py:411
    // self.verify_and_set_committee()
    callsub verify_and_set_committee
    // smart_contracts/proposal/contract.py:413
    // self.status.value = UInt64(enm.STATUS_FINAL)
    byte 0x737461747573
    int 20
    app_global_put
    // smart_contracts/proposal/contract.py:414
    // self.finalization_ts.value = Global.latest_timestamp
    byte 0x66696e616c697a6174696f6e5f74696d657374616d70
    global LatestTimestamp
    app_global_put
    // smart_contracts/proposal/contract.py:417
    // Bytes(reg_cfg.GS_KEY_PROPOSAL_FEE)
    byte 0x70726f706f73616c5f666565
    // smart_contracts/proposal/contract.py:416-418
    // proposal_fee = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_PROPOSAL_FEE)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:420
    // Bytes(reg_cfg.GS_KEY_PUBLISHING_FEE_BPS)
    byte 0x7075626c697368696e675f666565
    // smart_contracts/proposal/contract.py:419-421
    // publishing_fee_bps = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_PUBLISHING_FEE_BPS)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:423-431
    // itxn.Payment(
    //     receiver=Account(
    //         self.get_bytes_from_registry_config(
    //             Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    //         )
    //     ),
    //     amount=self.relative_to_absolute_amount(proposal_fee, publishing_fee_bps),
    //     fee=UInt64(0),  # enforces the proposer to pay the fee
    // ).submit()
    itxn_begin
    // smart_contracts/proposal/contract.py:426
    // Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    byte 0x636f6d6d69747465655f7075626c6973686572
    // smart_contracts/proposal/contract.py:425-427
    // self.get_bytes_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    // )
    callsub get_bytes_from_registry_config
    // smart_contracts/proposal/contract.py:424-428
    // receiver=Account(
    //     self.get_bytes_from_registry_config(
    //         Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    //     )
    // ),
    dup
    len
    int 32
    ==
    assert // Address length is 32 bytes
    // smart_contracts/proposal/contract.py:429
    // amount=self.relative_to_absolute_amount(proposal_fee, publishing_fee_bps),
    cover 2
    callsub relative_to_absolute_amount
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/proposal/contract.py:423
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/proposal/contract.py:430
    // fee=UInt64(0),  # enforces the proposer to pay the fee
    int 0
    itxn_field Fee
    // smart_contracts/proposal/contract.py:423-431
    // itxn.Payment(
    //     receiver=Account(
    //         self.get_bytes_from_registry_config(
    //             Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    //         )
    //     ),
    //     amount=self.relative_to_absolute_amount(proposal_fee, publishing_fee_bps),
    //     fee=UInt64(0),  # enforces the proposer to pay the fee
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.proposal.contract.Proposal.finalize_check_authorization() -> void:
finalize_check_authorization:
    // smart_contracts/proposal/contract.py:153-154
    // @subroutine
    // def finalize_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:156
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:157
    // assert self.status.value == enm.STATUS_DRAFT, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    int 10
    ==
    assert // Wrong Proposal Status
    // smart_contracts/proposal/contract.py:158
    // assert self.is_kyc_verified(), err.KYC_NOT_VERIFIED
    callsub is_kyc_verified
    assert // KYC is not verified
    // smart_contracts/proposal/contract.py:160
    // discussion_duration = Global.latest_timestamp - self.submission_ts.value
    global LatestTimestamp
    int 0
    byte 0x7375626d697373696f6e5f74696d657374616d70
    app_global_get_ex
    assert // check self.submission_ts exists
    -
    // smart_contracts/proposal/contract.py:161
    // minimum_discussion_duration = self.get_discussion_duration(self.category.value)
    int 0
    byte 0x63617465676f7279
    app_global_get_ex
    assert // check self.category exists
    callsub get_discussion_duration
    // smart_contracts/proposal/contract.py:163
    // assert discussion_duration >= minimum_discussion_duration, err.TOO_EARLY
    >=
    assert // Too early
    retsub


// smart_contracts.proposal.contract.Proposal.get_discussion_duration(category: uint64) -> uint64:
get_discussion_duration:
    // smart_contracts/proposal/contract.py:116-117
    // @subroutine
    // def get_discussion_duration(self, category: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/proposal/contract.py:118
    // if category == enm.CATEGORY_SMALL:
    frame_dig -1
    int 10
    ==
    bz get_discussion_duration_else_body@2
    // smart_contracts/proposal/contract.py:120
    // Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL)
    byte 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    // smart_contracts/proposal/contract.py:119-121
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL)
    // )
    callsub get_uint_from_registry_config
    retsub

get_discussion_duration_else_body@2:
    // smart_contracts/proposal/contract.py:122
    // elif category == enm.CATEGORY_MEDIUM:
    frame_dig -1
    int 20
    ==
    bz get_discussion_duration_else_body@4
    // smart_contracts/proposal/contract.py:124
    // Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM)
    byte 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    // smart_contracts/proposal/contract.py:123-125
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM)
    // )
    callsub get_uint_from_registry_config
    retsub

get_discussion_duration_else_body@4:
    // smart_contracts/proposal/contract.py:128
    // Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE)
    byte 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    // smart_contracts/proposal/contract.py:127-129
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE)
    // )
    callsub get_uint_from_registry_config
    retsub


// smart_contracts.proposal.contract.Proposal.verify_and_set_committee() -> void:
verify_and_set_committee:
    // smart_contracts/proposal/contract.py:131-132
    // @subroutine
    // def verify_and_set_committee(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:135
    // self.get_bytes_from_registry_config(Bytes(reg_cfg.GS_KEY_COMMITTEE_ID))
    byte 0x636f6d6d69747465655f6964
    callsub get_bytes_from_registry_config
    // smart_contracts/proposal/contract.py:137
    // assert committee_id != typ.CommitteeId.from_bytes(b""), err.EMPTY_COMMITTEE_ID
    dup
    byte 0x
    !=
    assert // Empty Committee ID
    // smart_contracts/proposal/contract.py:140
    // Bytes(reg_cfg.GS_KEY_COMMITTEE_MEMBERS)
    byte 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/proposal/contract.py:139-141
    // committee_members = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_COMMITTEE_MEMBERS)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:142
    // assert committee_members > UInt64(0), err.WRONG_COMMITTEE_MEMBERS
    dup
    assert // Wrong Committee Members
    // smart_contracts/proposal/contract.py:145
    // Bytes(reg_cfg.GS_KEY_COMMITTEE_VOTES)
    byte 0x636f6d6d69747465655f766f746573
    // smart_contracts/proposal/contract.py:144-146
    // committee_votes = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_COMMITTEE_VOTES)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:147
    // assert committee_votes > UInt64(0), err.WRONG_COMMITTEE_VOTES
    dup
    assert // Wrong Committee Votes
    // smart_contracts/proposal/contract.py:149
    // self.committee_id.value = committee_id.copy()
    byte 0x636f6d6d69747465655f6964
    uncover 3
    app_global_put
    // smart_contracts/proposal/contract.py:150
    // self.committee_members.value = committee_members
    byte 0x636f6d6d69747465655f6d656d62657273
    uncover 2
    app_global_put
    // smart_contracts/proposal/contract.py:151
    // self.committee_votes.value = committee_votes
    byte 0x636f6d6d69747465655f766f746573
    swap
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.get_bytes_from_registry_config(global_state_key: bytes) -> bytes:
get_bytes_from_registry_config:
    // smart_contracts/proposal/contract.py:269-270
    // @subroutine
    // def get_bytes_from_registry_config(self, global_state_key: Bytes) -> Bytes:
    proto 1 1
    // smart_contracts/proposal/contract.py:272
    // self.registry_app_id.value, global_state_key
    int 0
    byte 0x72656769737472795f6170705f6964
    app_global_get_ex
    assert // check self.registry_app_id exists
    // smart_contracts/proposal/contract.py:271-273
    // value, exists = AppGlobal.get_ex_bytes(
    //     self.registry_app_id.value, global_state_key
    // )
    frame_dig -1
    app_global_get_ex
    // smart_contracts/proposal/contract.py:274
    // assert exists, err.MISSING_CONFIG
    assert // Missing Config
    // smart_contracts/proposal/contract.py:275
    // return value
    retsub


// smart_contracts.proposal.contract.Proposal.__init__() -> void:
__init__:
    // smart_contracts/proposal/contract.py:38
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:41
    // Txn.global_num_byte_slice == prop_cfg.GLOBAL_BYTES
    txn GlobalNumByteSlice
    int 5
    ==
    // smart_contracts/proposal/contract.py:39-42
    // # Preconditions
    // assert (
    //     Txn.global_num_byte_slice == prop_cfg.GLOBAL_BYTES
    // ), err.WRONG_GLOBAL_BYTES
    assert // Wrong Global Bytes allocation
    // smart_contracts/proposal/contract.py:43
    // assert Txn.global_num_uint == prop_cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    int 13
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/proposal/contract.py:44
    // assert Txn.local_num_byte_slice == prop_cfg.LOCAL_BYTES, err.WRONG_LOCAL_BYTES
    txn LocalNumByteSlice
    !
    assert // Wrong Local Bytes allocation
    // smart_contracts/proposal/contract.py:45
    // assert Txn.local_num_uint == prop_cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    // smart_contracts/proposal/contract.py:49
    // key=prop_cfg.GS_KEY_PROPOSER,
    byte 0x70726f706f736572
    // smart_contracts/proposal/contract.py:48
    // arc4.Address(),
    global ZeroAddress
    // smart_contracts/proposal/contract.py:47-50
    // self.proposer = GlobalState(
    //     arc4.Address(),
    //     key=prop_cfg.GS_KEY_PROPOSER,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:53
    // key=prop_cfg.GS_KEY_REGISTRY_APP_ID,
    byte 0x72656769737472795f6170705f6964
    // smart_contracts/proposal/contract.py:52
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:51-54
    // self.registry_app_id = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_REGISTRY_APP_ID,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:57
    // key=prop_cfg.GS_KEY_TITLE,
    byte 0x7469746c65
    // smart_contracts/proposal/contract.py:56
    // String(),
    byte ""
    // smart_contracts/proposal/contract.py:55-58
    // self.title = GlobalState(
    //     String(),
    //     key=prop_cfg.GS_KEY_TITLE,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:61
    // key=prop_cfg.GS_KEY_CID,
    byte 0x636964
    // smart_contracts/proposal/contract.py:60
    // typ.Cid.from_bytes(b""),
    byte 0x
    // smart_contracts/proposal/contract.py:59-62
    // self.cid = GlobalState(
    //     typ.Cid.from_bytes(b""),
    //     key=prop_cfg.GS_KEY_CID,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:65
    // key=prop_cfg.GS_KEY_SUBMISSION_TS,
    byte 0x7375626d697373696f6e5f74696d657374616d70
    // smart_contracts/proposal/contract.py:64
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:63-66
    // self.submission_ts = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_SUBMISSION_TS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:69
    // key=prop_cfg.GS_KEY_FINALIZATION_TS,
    byte 0x66696e616c697a6174696f6e5f74696d657374616d70
    // smart_contracts/proposal/contract.py:68
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:67-70
    // self.finalization_ts = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_FINALIZATION_TS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:73
    // key=prop_cfg.GS_KEY_STATUS,
    byte 0x737461747573
    // smart_contracts/proposal/contract.py:72
    // UInt64(enm.STATUS_EMPTY),
    int 0
    // smart_contracts/proposal/contract.py:71-74
    // self.status = GlobalState(
    //     UInt64(enm.STATUS_EMPTY),
    //     key=prop_cfg.GS_KEY_STATUS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:77
    // key=prop_cfg.GS_KEY_CATEGORY,
    byte 0x63617465676f7279
    // smart_contracts/proposal/contract.py:76
    // UInt64(enm.CATEGORY_NULL),
    int 0
    // smart_contracts/proposal/contract.py:75-78
    // self.category = GlobalState(
    //     UInt64(enm.CATEGORY_NULL),
    //     key=prop_cfg.GS_KEY_CATEGORY,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:81
    // key=prop_cfg.GS_KEY_FUNDING_TYPE,
    byte 0x66756e64696e675f74797065
    // smart_contracts/proposal/contract.py:80
    // UInt64(enm.FUNDING_NULL),
    int 0
    // smart_contracts/proposal/contract.py:79-82
    // self.funding_type = GlobalState(
    //     UInt64(enm.FUNDING_NULL),
    //     key=prop_cfg.GS_KEY_FUNDING_TYPE,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:85
    // key=prop_cfg.GS_KEY_REQUESTED_AMOUNT,
    byte 0x7265717565737465645f616d6f756e74
    // smart_contracts/proposal/contract.py:84
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:83-86
    // self.requested_amount = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_REQUESTED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:89
    // key=prop_cfg.GS_KEY_LOCKED_AMOUNT,
    byte 0x6c6f636b65645f616d6f756e74
    // smart_contracts/proposal/contract.py:88
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:87-90
    // self.locked_amount = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_LOCKED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:93
    // key=prop_cfg.GS_KEY_COMMITTEE_ID,
    byte 0x636f6d6d69747465655f6964
    // smart_contracts/proposal/contract.py:92
    // typ.CommitteeId.from_bytes(b""),
    byte 0x
    // smart_contracts/proposal/contract.py:91-94
    // self.committee_id = GlobalState(
    //     typ.CommitteeId.from_bytes(b""),
    //     key=prop_cfg.GS_KEY_COMMITTEE_ID,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:97
    // key=prop_cfg.GS_KEY_COMMITTEE_MEMBERS,
    byte 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/proposal/contract.py:96
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:95-98
    // self.committee_members = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_COMMITTEE_MEMBERS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:101
    // key=prop_cfg.GS_KEY_COMMITTEE_VOTES,
    byte 0x636f6d6d69747465655f766f746573
    // smart_contracts/proposal/contract.py:100
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:99-102
    // self.committee_votes = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_COMMITTEE_VOTES,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:105
    // key=prop_cfg.GS_KEY_VOTED_MEMBERS,
    byte 0x766f7465645f6d656d62657273
    // smart_contracts/proposal/contract.py:104
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:103-106
    // self.voted_members = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_VOTED_MEMBERS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:109
    // key=prop_cfg.GS_KEY_APPROVALS,
    byte 0x617070726f76616c73
    // smart_contracts/proposal/contract.py:108
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:107-110
    // self.approvals = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_APPROVALS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:113
    // key=prop_cfg.GS_KEY_REJECTIONS,
    byte 0x72656a656374696f6e73
    // smart_contracts/proposal/contract.py:112
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:111-114
    // self.rejections = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_REJECTIONS,
    // )
    app_global_put
    retsub
