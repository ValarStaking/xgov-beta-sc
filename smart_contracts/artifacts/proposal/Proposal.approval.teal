#pragma version 10

smart_contracts.proposal.contract.Proposal.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.proposal.contract.Proposal.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/proposal/contract.py:30-38
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@13
    method "create(address)void"
    method "submit(pay,string,byte[59],uint64,uint64)void"
    method "update(string,byte[59])void"
    method "drop()void"
    method "finalize()void"
    method "assign_voter(address,uint64)void"
    method "vote(string)void"
    method "scrutiny()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_route@2 __puya_arc4_router___submit_route@3 __puya_arc4_router___update_route@4 __puya_arc4_router___drop_route@5 __puya_arc4_router___finalize_route@6 __puya_arc4_router___assign_voter_route@7 __puya_arc4_router___vote_route@8 __puya_arc4_router___scrutiny_route@9
    int 0
    retsub

__puya_arc4_router___create_route@2:
    // smart_contracts/proposal/contract.py:392
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/proposal/contract.py:30-38
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/proposal/contract.py:392
    // @arc4.abimethod(create="require")
    callsub create
    int 1
    retsub

__puya_arc4_router___submit_route@3:
    // smart_contracts/proposal/contract.py:406
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/proposal/contract.py:30-38
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    // smart_contracts/proposal/contract.py:406
    // @arc4.abimethod()
    callsub submit
    int 1
    retsub

__puya_arc4_router___update_route@4:
    // smart_contracts/proposal/contract.py:452
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/proposal/contract.py:30-38
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    // smart_contracts/proposal/contract.py:452
    // @arc4.abimethod()
    callsub update
    int 1
    retsub

__puya_arc4_router___drop_route@5:
    // smart_contracts/proposal/contract.py:474
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub drop
    int 1
    retsub

__puya_arc4_router___finalize_route@6:
    // smart_contracts/proposal/contract.py:501
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub finalize
    int 1
    retsub

__puya_arc4_router___assign_voter_route@7:
    // smart_contracts/proposal/contract.py:539
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/proposal/contract.py:30-38
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // smart_contracts/proposal/contract.py:539
    // @arc4.abimethod()
    callsub assign_voter
    int 1
    retsub

__puya_arc4_router___vote_route@8:
    // smart_contracts/proposal/contract.py:575
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/proposal/contract.py:30-38
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    // smart_contracts/proposal/contract.py:575
    // @arc4.abimethod()
    callsub vote
    int 1
    retsub

__puya_arc4_router___scrutiny_route@9:
    // smart_contracts/proposal/contract.py:610
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub scrutiny
    int 1
    retsub

__puya_arc4_router___after_if_else@13:
    // smart_contracts/proposal/contract.py:30-38
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=prop_cfg.GLOBAL_BYTES,
    //         global_uints=prop_cfg.GLOBAL_UINTS,
    //         local_bytes=prop_cfg.LOCAL_BYTES,
    //         local_uints=prop_cfg.LOCAL_UINTS,
    //     ),
    // ):
    int 0
    retsub


// smart_contracts.proposal.contract.Proposal.create(proposer: bytes) -> void:
create:
    // smart_contracts/proposal/contract.py:392-393
    // @arc4.abimethod(create="require")
    // def create(self, proposer: arc4.Address) -> None:
    proto 1 0
    // smart_contracts/proposal/contract.py:400
    // Global.caller_application_id != 0
    global CallerApplicationID
    // smart_contracts/proposal/contract.py:399-401
    // assert (
    //     Global.caller_application_id != 0
    // ), err.UNAUTHORIZED  # Only callable by another contract
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:403
    // self.proposer.value = proposer
    byte 0x70726f706f736572
    frame_dig -1
    app_global_put
    // smart_contracts/proposal/contract.py:404
    // self.registry_app_id.value = Global.caller_application_id
    byte 0x72656769737472795f6170705f6964
    global CallerApplicationID
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.submit(payment: uint64, title: bytes, cid: bytes, funding_type: uint64, requested_amount: uint64) -> void:
submit:
    // smart_contracts/proposal/contract.py:406-414
    // @arc4.abimethod()
    // def submit(
    //     self,
    //     payment: gtxn.PaymentTransaction,
    //     title: String,
    //     cid: typ.Cid,
    //     funding_type: UInt64,
    //     requested_amount: UInt64,
    // ) -> None:
    proto 5 0
    // smart_contracts/proposal/contract.py:438
    // self.submit_check_authorization()
    callsub submit_check_authorization
    // smart_contracts/proposal/contract.py:440
    // self.submit_input_validation(title, cid, funding_type, requested_amount)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub submit_input_validation
    frame_bury -3
    // smart_contracts/proposal/contract.py:441
    // self.submit_payment_validation(payment, requested_amount)
    frame_dig -5
    frame_dig -1
    callsub submit_payment_validation
    // smart_contracts/proposal/contract.py:443
    // self.title.value = title
    byte 0x7469746c65
    frame_dig -4
    app_global_put
    // smart_contracts/proposal/contract.py:444
    // self.cid.value = cid.copy()
    byte 0x636964
    frame_dig -3
    app_global_put
    // smart_contracts/proposal/contract.py:445
    // self.set_category(requested_amount)
    frame_dig -1
    callsub set_category
    // smart_contracts/proposal/contract.py:446
    // self.funding_type.value = funding_type
    byte 0x66756e64696e675f74797065
    frame_dig -2
    app_global_put
    // smart_contracts/proposal/contract.py:447
    // self.requested_amount.value = requested_amount
    byte 0x7265717565737465645f616d6f756e74
    frame_dig -1
    app_global_put
    // smart_contracts/proposal/contract.py:448
    // self.locked_amount.value = self.get_expected_locked_amount(requested_amount)
    frame_dig -1
    callsub get_expected_locked_amount
    byte 0x6c6f636b65645f616d6f756e74
    swap
    app_global_put
    // smart_contracts/proposal/contract.py:449
    // self.submission_ts.value = Global.latest_timestamp
    byte 0x7375626d697373696f6e5f74696d657374616d70
    global LatestTimestamp
    app_global_put
    // smart_contracts/proposal/contract.py:450
    // self.status.value = UInt64(enm.STATUS_DRAFT)
    byte 0x737461747573
    int 10
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.submit_check_authorization() -> void:
submit_check_authorization:
    // smart_contracts/proposal/contract.py:284-285
    // @subroutine
    // def submit_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:286
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:287
    // assert self.status.value == enm.STATUS_EMPTY, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    !
    assert // Wrong Proposal Status
    retsub


// smart_contracts.proposal.contract.Proposal.is_proposer() -> uint64:
is_proposer:
    // smart_contracts/proposal/contract.py:380-381
    // @subroutine
    // def is_proposer(self) -> bool:
    proto 0 1
    // smart_contracts/proposal/contract.py:382
    // return Txn.sender == self.proposer.value
    int 0
    byte 0x70726f706f736572
    app_global_get_ex
    assert // check self.proposer exists
    txn Sender
    ==
    retsub


// smart_contracts.proposal.contract.Proposal.submit_input_validation(title: bytes, cid: bytes, funding_type: uint64, requested_amount: uint64) -> bytes:
submit_input_validation:
    // smart_contracts/proposal/contract.py:289-296
    // @subroutine
    // def submit_input_validation(
    //     self,
    //     title: String,
    //     cid: typ.Cid,
    //     funding_type: UInt64,
    //     requested_amount: UInt64,
    // ) -> None:
    proto 4 1
    // smart_contracts/proposal/contract.py:298
    // self.updateable_input_validation(title, cid)
    frame_dig -4
    frame_dig -3
    callsub updateable_input_validation
    frame_bury -3
    // smart_contracts/proposal/contract.py:301
    // funding_type == enm.FUNDING_PROACTIVE
    frame_dig -2
    int 10
    ==
    // smart_contracts/proposal/contract.py:301-302
    // funding_type == enm.FUNDING_PROACTIVE
    // or funding_type == enm.FUNDING_RETROACTIVE
    bnz submit_input_validation_bool_true@2
    // smart_contracts/proposal/contract.py:302
    // or funding_type == enm.FUNDING_RETROACTIVE
    frame_dig -2
    int 20
    ==
    // smart_contracts/proposal/contract.py:301-302
    // funding_type == enm.FUNDING_PROACTIVE
    // or funding_type == enm.FUNDING_RETROACTIVE
    bz submit_input_validation_bool_false@3

submit_input_validation_bool_true@2:
    int 1
    b submit_input_validation_bool_merge@4

submit_input_validation_bool_false@3:
    int 0

submit_input_validation_bool_merge@4:
    // smart_contracts/proposal/contract.py:300-303
    // assert (
    //     funding_type == enm.FUNDING_PROACTIVE
    //     or funding_type == enm.FUNDING_RETROACTIVE
    // ), err.WRONG_FUNDING_TYPE
    assert // Wrong Funding Type
    // smart_contracts/proposal/contract.py:306
    // Bytes(reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT)
    byte 0x6d696e5f7265717565737465645f616d6f756e74
    // smart_contracts/proposal/contract.py:305-307
    // min_requested_amount = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_MIN_REQUESTED_AMOUNT)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:309
    // Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE)
    byte 0x6d61785f7265717565737465645f616d6f756e745f6c61726765
    // smart_contracts/proposal/contract.py:308-310
    // max_requested_amount_large = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_LARGE)
    // )
    callsub get_uint_from_registry_config
    swap
    // smart_contracts/proposal/contract.py:312
    // assert requested_amount >= min_requested_amount, err.WRONG_MIN_REQUESTED_AMOUNT
    frame_dig -1
    <=
    assert // Requested amount is less than the minimum requested amount
    // smart_contracts/proposal/contract.py:314
    // requested_amount <= max_requested_amount_large
    frame_dig -1
    >=
    // smart_contracts/proposal/contract.py:313-315
    // assert (
    //     requested_amount <= max_requested_amount_large
    // ), err.WRONG_MAX_REQUESTED_AMOUNT
    assert // Requested amount is more than the maximum requested amount
    frame_dig -3
    retsub


// smart_contracts.proposal.contract.Proposal.updateable_input_validation(title: bytes, cid: bytes) -> bytes:
updateable_input_validation:
    // smart_contracts/proposal/contract.py:271-272
    // @subroutine
    // def updateable_input_validation(self, title: String, cid: typ.Cid) -> None:
    proto 2 1
    // smart_contracts/proposal/contract.py:273
    // assert title.bytes.length <= const.TITLE_MAX_BYTES, err.WRONG_TITLE_LENGTH
    frame_dig -2
    len
    int 123
    <=
    assert // Wrong Title length
    // smart_contracts/proposal/contract.py:274
    // assert title != "", err.WRONG_TITLE_LENGTH
    frame_dig -2
    byte ""
    !=
    assert // Wrong Title length
    frame_dig -1
    retsub


// smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config(global_state_key: bytes) -> uint64:
get_uint_from_registry_config:
    // smart_contracts/proposal/contract.py:360-361
    // @subroutine
    // def get_uint_from_registry_config(self, global_state_key: Bytes) -> UInt64:
    proto 1 1
    // smart_contracts/proposal/contract.py:363
    // self.registry_app_id.value, global_state_key
    int 0
    byte 0x72656769737472795f6170705f6964
    app_global_get_ex
    assert // check self.registry_app_id exists
    // smart_contracts/proposal/contract.py:362-364
    // value, exists = AppGlobal.get_ex_uint64(
    //     self.registry_app_id.value, global_state_key
    // )
    frame_dig -1
    app_global_get_ex
    // smart_contracts/proposal/contract.py:365
    // assert exists, err.MISSING_CONFIG
    assert // Missing Config
    // smart_contracts/proposal/contract.py:366
    // return value
    retsub


// smart_contracts.proposal.contract.Proposal.submit_payment_validation(payment: uint64, requested_amount: uint64) -> void:
submit_payment_validation:
    // smart_contracts/proposal/contract.py:332-335
    // @subroutine
    // def submit_payment_validation(
    //     self, payment: gtxn.PaymentTransaction, requested_amount: UInt64
    // ) -> None:
    proto 2 0
    // smart_contracts/proposal/contract.py:336
    // expected_lock_amount = self.get_expected_locked_amount(requested_amount)
    frame_dig -1
    callsub get_expected_locked_amount
    // smart_contracts/proposal/contract.py:338
    // assert payment.sender == self.proposer.value, err.WRONG_SENDER
    int 0
    byte 0x70726f706f736572
    app_global_get_ex
    assert // check self.proposer exists
    frame_dig -2
    gtxns Sender
    ==
    assert // Wrong Sender
    // smart_contracts/proposal/contract.py:340
    // payment.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/proposal/contract.py:339-341
    // assert (
    //     payment.receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong Receiver
    // smart_contracts/proposal/contract.py:342
    // assert payment.amount == expected_lock_amount, err.WRONG_LOCKED_AMOUNT
    frame_dig -2
    gtxns Amount
    ==
    assert // Locked amount is incorrect
    retsub


// smart_contracts.proposal.contract.Proposal.get_expected_locked_amount(requested_amount: uint64) -> uint64:
get_expected_locked_amount:
    // smart_contracts/proposal/contract.py:323-324
    // @subroutine
    // def get_expected_locked_amount(self, requested_amount: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/proposal/contract.py:328
    // Bytes(reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS)
    byte 0x70726f706f73616c5f636f6d6d69746d656e745f627073
    // smart_contracts/proposal/contract.py:327-329
    // self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS)
    // ),
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:325-330
    // return self.relative_to_absolute_amount(
    //     requested_amount,
    //     self.get_uint_from_registry_config(
    //         Bytes(reg_cfg.GS_KEY_PROPOSAL_COMMITMENT_BPS)
    //     ),
    // )
    frame_dig -1
    swap
    callsub relative_to_absolute_amount
    retsub


// smart_contracts.proposal.contract.Proposal.relative_to_absolute_amount(amount: uint64, fraction_in_bps: uint64) -> uint64:
relative_to_absolute_amount:
    // smart_contracts/proposal/contract.py:317-320
    // @subroutine
    // def relative_to_absolute_amount(
    //     self, amount: UInt64, fraction_in_bps: UInt64
    // ) -> UInt64:
    proto 2 1
    // smart_contracts/proposal/contract.py:321
    // return amount * fraction_in_bps // const.BPS
    frame_dig -2
    frame_dig -1
    *
    int 10000
    /
    retsub


// smart_contracts.proposal.contract.Proposal.set_category(requested_amount: uint64) -> void:
set_category:
    // smart_contracts/proposal/contract.py:344-345
    // @subroutine
    // def set_category(self, requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/proposal/contract.py:347
    // Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL)
    byte 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c
    // smart_contracts/proposal/contract.py:346-348
    // max_requested_amount_small = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_SMALL)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:350
    // Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM)
    byte 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d
    // smart_contracts/proposal/contract.py:349-351
    // max_requested_amount_medium = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_MAX_REQUESTED_AMOUNT_MEDIUM)
    // )
    callsub get_uint_from_registry_config
    swap
    // smart_contracts/proposal/contract.py:353
    // if requested_amount <= max_requested_amount_small:
    frame_dig -1
    >=
    bz set_category_else_body@2
    // smart_contracts/proposal/contract.py:354
    // self.category.value = UInt64(enm.CATEGORY_SMALL)
    byte 0x63617465676f7279
    int 10
    app_global_put
    b set_category_after_if_else@6

set_category_else_body@2:
    // smart_contracts/proposal/contract.py:355
    // elif requested_amount <= max_requested_amount_medium:
    frame_dig -1
    frame_dig 0
    <=
    bz set_category_else_body@4
    // smart_contracts/proposal/contract.py:356
    // self.category.value = UInt64(enm.CATEGORY_MEDIUM)
    byte 0x63617465676f7279
    int 20
    app_global_put
    b set_category_after_if_else@6

set_category_else_body@4:
    // smart_contracts/proposal/contract.py:358
    // self.category.value = UInt64(enm.CATEGORY_LARGE)
    byte 0x63617465676f7279
    int 33
    app_global_put

set_category_after_if_else@6:
    retsub


// smart_contracts.proposal.contract.Proposal.update(title: bytes, cid: bytes) -> void:
update:
    // smart_contracts/proposal/contract.py:452-453
    // @arc4.abimethod()
    // def update(self, title: String, cid: typ.Cid) -> None:
    proto 2 0
    // smart_contracts/proposal/contract.py:467
    // self.update_check_authorization()
    callsub update_check_authorization
    // smart_contracts/proposal/contract.py:469
    // self.updateable_input_validation(title, cid)
    frame_dig -2
    frame_dig -1
    callsub updateable_input_validation
    frame_bury -1
    // smart_contracts/proposal/contract.py:471
    // self.title.value = title
    byte 0x7469746c65
    frame_dig -2
    app_global_put
    // smart_contracts/proposal/contract.py:472
    // self.cid.value = cid.copy()
    byte 0x636964
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.update_check_authorization() -> void:
update_check_authorization:
    // smart_contracts/proposal/contract.py:279-280
    // @subroutine
    // def update_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:281
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:282
    // assert self.status.value == enm.STATUS_DRAFT, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    int 10
    ==
    assert // Wrong Proposal Status
    retsub


// smart_contracts.proposal.contract.Proposal.drop() -> void:
drop:
    // smart_contracts/proposal/contract.py:474-475
    // @arc4.abimethod()
    // def drop(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:483
    // self.drop_check_authorization()
    callsub drop_check_authorization
    // smart_contracts/proposal/contract.py:485-489
    // itxn.Payment(
    //     receiver=self.proposer.value.native,
    //     amount=self.locked_amount.value,
    //     fee=UInt64(0),  # enforces the proposer to pay the fee
    // ).submit()
    itxn_begin
    // smart_contracts/proposal/contract.py:486
    // receiver=self.proposer.value.native,
    int 0
    byte 0x70726f706f736572
    app_global_get_ex
    assert // check self.proposer exists
    // smart_contracts/proposal/contract.py:487
    // amount=self.locked_amount.value,
    int 0
    byte 0x6c6f636b65645f616d6f756e74
    app_global_get_ex
    assert // check self.locked_amount exists
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/proposal/contract.py:485
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/proposal/contract.py:488
    // fee=UInt64(0),  # enforces the proposer to pay the fee
    int 0
    itxn_field Fee
    // smart_contracts/proposal/contract.py:485-489
    // itxn.Payment(
    //     receiver=self.proposer.value.native,
    //     amount=self.locked_amount.value,
    //     fee=UInt64(0),  # enforces the proposer to pay the fee
    // ).submit()
    itxn_submit
    // smart_contracts/proposal/contract.py:491-492
    // #  Clear the proposal data TODO: check if this can be in a struct and clear the struct
    // self.title.value = String()
    byte 0x7469746c65
    byte ""
    app_global_put
    // smart_contracts/proposal/contract.py:493
    // self.cid.value = typ.Cid.from_bytes(b"")
    byte 0x636964
    byte 0x
    app_global_put
    // smart_contracts/proposal/contract.py:494
    // self.category.value = UInt64(enm.CATEGORY_NULL)
    byte 0x63617465676f7279
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:495
    // self.funding_type.value = UInt64(enm.FUNDING_NULL)
    byte 0x66756e64696e675f74797065
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:496
    // self.requested_amount.value = UInt64(0)
    byte 0x7265717565737465645f616d6f756e74
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:497
    // self.locked_amount.value = UInt64(0)
    byte 0x6c6f636b65645f616d6f756e74
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:498
    // self.submission_ts.value = UInt64(0)
    byte 0x7375626d697373696f6e5f74696d657374616d70
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:499
    // self.status.value = UInt64(enm.STATUS_EMPTY)
    byte 0x737461747573
    int 0
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.drop_check_authorization() -> void:
drop_check_authorization:
    // smart_contracts/proposal/contract.py:266-267
    // @subroutine
    // def drop_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:268
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:269
    // assert self.status.value == enm.STATUS_DRAFT, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    int 10
    ==
    assert // Wrong Proposal Status
    retsub


// smart_contracts.proposal.contract.Proposal.finalize() -> void:
finalize:
    // smart_contracts/proposal/contract.py:501-502
    // @arc4.abimethod()
    // def finalize(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:515
    // self.finalize_check_authorization()
    callsub finalize_check_authorization
    // smart_contracts/proposal/contract.py:517
    // self.verify_and_set_committee()
    callsub verify_and_set_committee
    // smart_contracts/proposal/contract.py:519
    // self.status.value = UInt64(enm.STATUS_FINAL)
    byte 0x737461747573
    int 20
    app_global_put
    // smart_contracts/proposal/contract.py:520
    // self.finalization_ts.value = Global.latest_timestamp
    byte 0x66696e616c697a6174696f6e5f74696d657374616d70
    global LatestTimestamp
    app_global_put
    // smart_contracts/proposal/contract.py:523
    // Bytes(reg_cfg.GS_KEY_PROPOSAL_FEE)
    byte 0x70726f706f73616c5f666565
    // smart_contracts/proposal/contract.py:522-524
    // proposal_fee = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_PROPOSAL_FEE)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:526
    // Bytes(reg_cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS)
    byte 0x70726f706f73616c5f7075626c697368696e675f627073
    // smart_contracts/proposal/contract.py:525-527
    // publishing_fee_bps = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_PROPOSAL_PUBLISHING_BPS)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:529-537
    // itxn.Payment(
    //     receiver=Account(
    //         self.get_bytes_from_registry_config(
    //             Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    //         )
    //     ),
    //     amount=self.relative_to_absolute_amount(proposal_fee, publishing_fee_bps),
    //     fee=UInt64(0),  # enforces the proposer to pay the fee
    // ).submit()
    itxn_begin
    // smart_contracts/proposal/contract.py:532
    // Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    byte 0x636f6d6d69747465655f7075626c6973686572
    // smart_contracts/proposal/contract.py:531-533
    // self.get_bytes_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    // )
    callsub get_bytes_from_registry_config
    // smart_contracts/proposal/contract.py:530-534
    // receiver=Account(
    //     self.get_bytes_from_registry_config(
    //         Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    //     )
    // ),
    dup
    len
    int 32
    ==
    assert // Address length is 32 bytes
    // smart_contracts/proposal/contract.py:535
    // amount=self.relative_to_absolute_amount(proposal_fee, publishing_fee_bps),
    cover 2
    callsub relative_to_absolute_amount
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/proposal/contract.py:529
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/proposal/contract.py:536
    // fee=UInt64(0),  # enforces the proposer to pay the fee
    int 0
    itxn_field Fee
    // smart_contracts/proposal/contract.py:529-537
    // itxn.Payment(
    //     receiver=Account(
    //         self.get_bytes_from_registry_config(
    //             Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    //         )
    //     ),
    //     amount=self.relative_to_absolute_amount(proposal_fee, publishing_fee_bps),
    //     fee=UInt64(0),  # enforces the proposer to pay the fee
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.proposal.contract.Proposal.finalize_check_authorization() -> void:
finalize_check_authorization:
    // smart_contracts/proposal/contract.py:255-256
    // @subroutine
    // def finalize_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:258
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:259
    // assert self.status.value == enm.STATUS_DRAFT, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    int 10
    ==
    assert // Wrong Proposal Status
    // smart_contracts/proposal/contract.py:261
    // discussion_duration = Global.latest_timestamp - self.submission_ts.value
    global LatestTimestamp
    int 0
    byte 0x7375626d697373696f6e5f74696d657374616d70
    app_global_get_ex
    assert // check self.submission_ts exists
    -
    // smart_contracts/proposal/contract.py:262
    // minimum_discussion_duration = self.get_discussion_duration(self.category.value)
    int 0
    byte 0x63617465676f7279
    app_global_get_ex
    assert // check self.category exists
    callsub get_discussion_duration
    // smart_contracts/proposal/contract.py:264
    // assert discussion_duration >= minimum_discussion_duration, err.TOO_EARLY
    >=
    assert // Too early
    retsub


// smart_contracts.proposal.contract.Proposal.get_discussion_duration(category: uint64) -> uint64:
get_discussion_duration:
    // smart_contracts/proposal/contract.py:173-174
    // @subroutine
    // def get_discussion_duration(self, category: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/proposal/contract.py:175
    // if category == enm.CATEGORY_SMALL:
    frame_dig -1
    int 10
    ==
    bz get_discussion_duration_else_body@2
    // smart_contracts/proposal/contract.py:177
    // Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL)
    byte 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c
    // smart_contracts/proposal/contract.py:176-178
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_SMALL)
    // )
    callsub get_uint_from_registry_config
    retsub

get_discussion_duration_else_body@2:
    // smart_contracts/proposal/contract.py:179
    // elif category == enm.CATEGORY_MEDIUM:
    frame_dig -1
    int 20
    ==
    bz get_discussion_duration_else_body@4
    // smart_contracts/proposal/contract.py:181
    // Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM)
    byte 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d
    // smart_contracts/proposal/contract.py:180-182
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_MEDIUM)
    // )
    callsub get_uint_from_registry_config
    retsub

get_discussion_duration_else_body@4:
    // smart_contracts/proposal/contract.py:185
    // Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE)
    byte 0x64697363757373696f6e5f6475726174696f6e5f6c61726765
    // smart_contracts/proposal/contract.py:184-186
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_DISCUSSION_DURATION_LARGE)
    // )
    callsub get_uint_from_registry_config
    retsub


// smart_contracts.proposal.contract.Proposal.verify_and_set_committee() -> void:
verify_and_set_committee:
    // smart_contracts/proposal/contract.py:233-234
    // @subroutine
    // def verify_and_set_committee(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:237
    // self.get_bytes_from_registry_config(Bytes(reg_cfg.GS_KEY_COMMITTEE_ID))
    byte 0x636f6d6d69747465655f6964
    callsub get_bytes_from_registry_config
    // smart_contracts/proposal/contract.py:239
    // assert committee_id != typ.CommitteeId.from_bytes(b""), err.EMPTY_COMMITTEE_ID
    dup
    byte 0x
    !=
    assert // Empty Committee ID
    // smart_contracts/proposal/contract.py:242
    // Bytes(reg_cfg.GS_KEY_COMMITTEE_MEMBERS)
    byte 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/proposal/contract.py:241-243
    // committee_members = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_COMMITTEE_MEMBERS)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:244
    // assert committee_members > UInt64(0), err.WRONG_COMMITTEE_MEMBERS
    dup
    assert // Wrong Committee Members
    // smart_contracts/proposal/contract.py:247
    // Bytes(reg_cfg.GS_KEY_COMMITTEE_VOTES)
    byte 0x636f6d6d69747465655f766f746573
    // smart_contracts/proposal/contract.py:246-248
    // committee_votes = self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_COMMITTEE_VOTES)
    // )
    callsub get_uint_from_registry_config
    // smart_contracts/proposal/contract.py:249
    // assert committee_votes > UInt64(0), err.WRONG_COMMITTEE_VOTES
    dup
    assert // Wrong Committee Votes
    // smart_contracts/proposal/contract.py:251
    // self.committee_id.value = committee_id.copy()
    byte 0x636f6d6d69747465655f6964
    uncover 3
    app_global_put
    // smart_contracts/proposal/contract.py:252
    // self.committee_members.value = committee_members
    byte 0x636f6d6d69747465655f6d656d62657273
    uncover 2
    app_global_put
    // smart_contracts/proposal/contract.py:253
    // self.committee_votes.value = committee_votes
    byte 0x636f6d6d69747465655f766f746573
    swap
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.get_bytes_from_registry_config(global_state_key: bytes) -> bytes:
get_bytes_from_registry_config:
    // smart_contracts/proposal/contract.py:368-369
    // @subroutine
    // def get_bytes_from_registry_config(self, global_state_key: Bytes) -> Bytes:
    proto 1 1
    // smart_contracts/proposal/contract.py:371
    // self.registry_app_id.value, global_state_key
    int 0
    byte 0x72656769737472795f6170705f6964
    app_global_get_ex
    assert // check self.registry_app_id exists
    // smart_contracts/proposal/contract.py:370-372
    // value, exists = AppGlobal.get_ex_bytes(
    //     self.registry_app_id.value, global_state_key
    // )
    frame_dig -1
    app_global_get_ex
    // smart_contracts/proposal/contract.py:373
    // assert exists, err.MISSING_CONFIG
    assert // Missing Config
    // smart_contracts/proposal/contract.py:374
    // return value
    retsub


// smart_contracts.proposal.contract.Proposal.assign_voter(voter: bytes, voting_power: uint64) -> void:
assign_voter:
    // smart_contracts/proposal/contract.py:539-540
    // @arc4.abimethod()
    // def assign_voter(self, voter: arc4.Address, voting_power: UInt64) -> None:
    proto 2 0
    // smart_contracts/proposal/contract.py:556
    // self.assign_voter_check_authorization()
    callsub assign_voter_check_authorization
    // smart_contracts/proposal/contract.py:558
    // self.assign_voter_input_validation(voter, voting_power)
    frame_dig -2
    frame_dig -1
    callsub assign_voter_input_validation
    // smart_contracts/proposal/contract.py:561
    // votes=arc4.UInt64(voting_power),
    frame_dig -1
    itob
    // smart_contracts/proposal/contract.py:562
    // voted=arc4.Bool(False),  # noqa: FBT003
    byte 0x00
    // smart_contracts/proposal/contract.py:560-563
    // self.voters[voter.native] = typ.VoterBox(
    //     votes=arc4.UInt64(voting_power),
    //     voted=arc4.Bool(False),  # noqa: FBT003
    // )
    concat
    // smart_contracts/proposal/contract.py:560
    // self.voters[voter.native] = typ.VoterBox(
    byte "V"
    frame_dig -2
    concat
    // smart_contracts/proposal/contract.py:560-563
    // self.voters[voter.native] = typ.VoterBox(
    //     votes=arc4.UInt64(voting_power),
    //     voted=arc4.Bool(False),  # noqa: FBT003
    // )
    swap
    box_put
    // smart_contracts/proposal/contract.py:565
    // self.voters_count += UInt64(1)
    int 0
    byte "voters_count"
    app_global_get_ex
    assert // check self.voters_count exists
    int 1
    +
    byte "voters_count"
    swap
    app_global_put
    // smart_contracts/proposal/contract.py:566
    // self.assigned_votes += voting_power
    int 0
    byte "assigned_votes"
    app_global_get_ex
    assert // check self.assigned_votes exists
    frame_dig -1
    +
    byte "assigned_votes"
    swap
    app_global_put
    // smart_contracts/proposal/contract.py:568
    // if self.voters_count == self.committee_members.value:
    int 0
    byte "voters_count"
    app_global_get_ex
    assert // check self.voters_count exists
    int 0
    byte 0x636f6d6d69747465655f6d656d62657273
    app_global_get_ex
    assert // check self.committee_members exists
    ==
    bz assign_voter_after_if_else@2
    // smart_contracts/proposal/contract.py:570
    // self.assigned_votes == self.committee_votes.value
    int 0
    byte "assigned_votes"
    app_global_get_ex
    assert // check self.assigned_votes exists
    int 0
    byte 0x636f6d6d69747465655f766f746573
    app_global_get_ex
    assert // check self.committee_votes exists
    ==
    // smart_contracts/proposal/contract.py:569-571
    // assert (
    //     self.assigned_votes == self.committee_votes.value
    // ), err.VOTING_POWER_MISMATCH
    assert // Voting Power Mismatch
    // smart_contracts/proposal/contract.py:572
    // self.status.value = UInt64(enm.STATUS_VOTING)
    byte 0x737461747573
    int 25
    app_global_put
    // smart_contracts/proposal/contract.py:573
    // self.vote_open_ts.value = Global.latest_timestamp
    byte 0x766f74655f6f70656e696e675f74696d657374616d70
    global LatestTimestamp
    app_global_put

assign_voter_after_if_else@2:
    retsub


// smart_contracts.proposal.contract.Proposal.assign_voter_check_authorization() -> void:
assign_voter_check_authorization:
    // smart_contracts/proposal/contract.py:161-162
    // @subroutine
    // def assign_voter_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:163
    // assert self.is_committee_publisher(), err.UNAUTHORIZED
    callsub is_committee_publisher
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:164
    // assert self.status.value == enm.STATUS_FINAL, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    int 20
    ==
    assert // Wrong Proposal Status
    retsub


// smart_contracts.proposal.contract.Proposal.is_committee_publisher() -> uint64:
is_committee_publisher:
    // smart_contracts/proposal/contract.py:384-385
    // @subroutine
    // def is_committee_publisher(self) -> bool:
    proto 0 1
    // smart_contracts/proposal/contract.py:386
    // return Txn.sender == Account(
    txn Sender
    // smart_contracts/proposal/contract.py:388
    // Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    byte 0x636f6d6d69747465655f7075626c6973686572
    // smart_contracts/proposal/contract.py:387-389
    // self.get_bytes_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    // )
    callsub get_bytes_from_registry_config
    // smart_contracts/proposal/contract.py:386-390
    // return Txn.sender == Account(
    //     self.get_bytes_from_registry_config(
    //         Bytes(reg_cfg.GS_KEY_COMMITTEE_PUBLISHER)
    //     )
    // )
    dup
    len
    int 32
    ==
    assert // Address length is 32 bytes
    ==
    retsub


// smart_contracts.proposal.contract.Proposal.assign_voter_input_validation(voter: bytes, voting_power: uint64) -> void:
assign_voter_input_validation:
    // smart_contracts/proposal/contract.py:166-169
    // @subroutine
    // def assign_voter_input_validation(
    //     self, voter: arc4.Address, voting_power: UInt64
    // ) -> None:
    proto 2 0
    // smart_contracts/proposal/contract.py:170
    // assert voter.native not in self.voters, err.VOTER_ALREADY_ASSIGNED
    byte "V"
    frame_dig -2
    concat
    box_len
    bury 1
    !
    assert // Voter Already Assigned
    // smart_contracts/proposal/contract.py:171
    // assert voting_power > 0, err.INVALID_VOTING_POWER
    frame_dig -1
    assert // Invalid Voting Power
    retsub


// smart_contracts.proposal.contract.Proposal.vote(vote: bytes) -> void:
vote:
    // smart_contracts/proposal/contract.py:575-576
    // @arc4.abimethod()
    // def vote(self, vote: arc4.String) -> None:
    proto 1 0
    // smart_contracts/proposal/contract.py:590
    // self.vote_check_authorization()
    callsub vote_check_authorization
    // smart_contracts/proposal/contract.py:592
    // voter_box = self.voters[Txn.sender].copy()
    byte "V"
    txn Sender
    concat
    box_get
    assert // check self.voters entry exists
    // smart_contracts/proposal/contract.py:594
    // votes=voter_box.votes,
    extract 0 8 // on error: Index access is out of bounds
    dup
    // smart_contracts/proposal/contract.py:595
    // voted=arc4.Bool(True),  # noqa: FBT003
    byte 0x80
    // smart_contracts/proposal/contract.py:593-596
    // self.voters[Txn.sender] = typ.VoterBox(
    //     votes=voter_box.votes,
    //     voted=arc4.Bool(True),  # noqa: FBT003
    // )
    concat
    // smart_contracts/proposal/contract.py:593
    // self.voters[Txn.sender] = typ.VoterBox(
    byte "V"
    txn Sender
    concat
    // smart_contracts/proposal/contract.py:593-596
    // self.voters[Txn.sender] = typ.VoterBox(
    //     votes=voter_box.votes,
    //     voted=arc4.Bool(True),  # noqa: FBT003
    // )
    swap
    box_put
    // smart_contracts/proposal/contract.py:598
    // self.voted_members.value += UInt64(1)
    int 0
    byte 0x766f7465645f6d656d62657273
    app_global_get_ex
    assert // check self.voted_members exists
    int 1
    +
    byte 0x766f7465645f6d656d62657273
    swap
    app_global_put
    // smart_contracts/proposal/contract.py:601
    // case "Approve":
    byte 0x0007417070726f7665
    // smart_contracts/proposal/contract.py:603
    // case "Reject":
    byte 0x000652656a656374
    // smart_contracts/proposal/contract.py:605
    // case "Null":
    byte 0x00044e756c6c
    // smart_contracts/proposal/contract.py:600-608
    // match vote:
    //     case "Approve":
    //         self.approvals.value += voter_box.votes.native
    //     case "Reject":
    //         self.rejections.value += voter_box.votes.native
    //     case "Null":
    //         self.nulls.value += voter_box.votes.native
    //     case _:
    //         assert arc4.Bool(False), err.WRONG_VOTE_VALUE  # noqa: FBT003
    frame_dig -1
    match vote_switch_case_0@1 vote_switch_case_1@2 vote_switch_case_2@3
    // smart_contracts/proposal/contract.py:608
    // assert arc4.Bool(False), err.WRONG_VOTE_VALUE  # noqa: FBT003
    b vote_switch_case_default@4

vote_switch_case_0@1:
    // smart_contracts/proposal/contract.py:602
    // self.approvals.value += voter_box.votes.native
    int 0
    byte 0x617070726f76616c73
    app_global_get_ex
    assert // check self.approvals exists
    frame_dig 0
    btoi
    +
    byte 0x617070726f76616c73
    swap
    app_global_put
    b vote_switch_case_next@5

vote_switch_case_1@2:
    // smart_contracts/proposal/contract.py:604
    // self.rejections.value += voter_box.votes.native
    int 0
    byte 0x72656a656374696f6e73
    app_global_get_ex
    assert // check self.rejections exists
    frame_dig 0
    btoi
    +
    byte 0x72656a656374696f6e73
    swap
    app_global_put
    b vote_switch_case_next@5

vote_switch_case_2@3:
    // smart_contracts/proposal/contract.py:606
    // self.nulls.value += voter_box.votes.native
    int 0
    byte 0x6e756c6c73
    app_global_get_ex
    assert // check self.nulls exists
    frame_dig 0
    btoi
    +
    byte 0x6e756c6c73
    swap
    app_global_put
    b vote_switch_case_next@5

vote_switch_case_default@4:
    // smart_contracts/proposal/contract.py:608
    // assert arc4.Bool(False), err.WRONG_VOTE_VALUE  # noqa: FBT003
    int 0
    assert // Wrong Vote Value

vote_switch_case_next@5:
    retsub


// smart_contracts.proposal.contract.Proposal.vote_check_authorization() -> void:
vote_check_authorization:
    // smart_contracts/proposal/contract.py:135-136
    // @subroutine
    // def vote_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:137
    // assert self.status.value == enm.STATUS_VOTING, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    int 25
    ==
    assert // Wrong Proposal Status
    // smart_contracts/proposal/contract.py:139
    // assert Txn.sender in self.voters and self.voters[Txn.sender].voted == arc4.Bool(
    byte "V"
    txn Sender
    concat
    box_len
    bury 1
    // smart_contracts/proposal/contract.py:139-141
    // assert Txn.sender in self.voters and self.voters[Txn.sender].voted == arc4.Bool(
    //     False  # noqa: FBT003
    // ), err.UNAUTHORIZED
    bz vote_check_authorization_bool_false@3
    // smart_contracts/proposal/contract.py:139
    // assert Txn.sender in self.voters and self.voters[Txn.sender].voted == arc4.Bool(
    byte "V"
    txn Sender
    concat
    box_get
    assert // check self.voters entry exists
    int 64
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    // smart_contracts/proposal/contract.py:139-141
    // assert Txn.sender in self.voters and self.voters[Txn.sender].voted == arc4.Bool(
    //     False  # noqa: FBT003
    // ), err.UNAUTHORIZED
    byte 0x00
    ==
    bz vote_check_authorization_bool_false@3
    int 1
    b vote_check_authorization_bool_merge@4

vote_check_authorization_bool_false@3:
    int 0

vote_check_authorization_bool_merge@4:
    // smart_contracts/proposal/contract.py:139-141
    // assert Txn.sender in self.voters and self.voters[Txn.sender].voted == arc4.Bool(
    //     False  # noqa: FBT003
    // ), err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:143
    // voting_duration = Global.latest_timestamp - self.vote_open_ts.value
    global LatestTimestamp
    int 0
    byte 0x766f74655f6f70656e696e675f74696d657374616d70
    app_global_get_ex
    assert // check self.vote_open_ts exists
    -
    // smart_contracts/proposal/contract.py:144
    // maximum_voting_duration = self.get_voting_duration(self.category.value)
    int 0
    byte 0x63617465676f7279
    app_global_get_ex
    assert // check self.category exists
    callsub get_voting_duration
    // smart_contracts/proposal/contract.py:146
    // assert voting_duration <= maximum_voting_duration, err.VOTING_PERIOD_EXPIRED
    <=
    assert // Voting Period Expired
    retsub


// smart_contracts.proposal.contract.Proposal.get_voting_duration(category: uint64) -> uint64:
get_voting_duration:
    // smart_contracts/proposal/contract.py:188-189
    // @subroutine
    // def get_voting_duration(self, category: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/proposal/contract.py:190
    // if category == enm.CATEGORY_SMALL:
    frame_dig -1
    int 10
    ==
    bz get_voting_duration_else_body@2
    // smart_contracts/proposal/contract.py:192
    // Bytes(reg_cfg.GS_KEY_VOTING_DURATION_SMALL)
    byte 0x766f74696e675f6475726174696f6e5f736d616c6c
    // smart_contracts/proposal/contract.py:191-193
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_VOTING_DURATION_SMALL)
    // )
    callsub get_uint_from_registry_config
    retsub

get_voting_duration_else_body@2:
    // smart_contracts/proposal/contract.py:194
    // elif category == enm.CATEGORY_MEDIUM:
    frame_dig -1
    int 20
    ==
    bz get_voting_duration_else_body@4
    // smart_contracts/proposal/contract.py:196
    // Bytes(reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM)
    byte 0x766f74696e675f6475726174696f6e5f6d656469756d
    // smart_contracts/proposal/contract.py:195-197
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_VOTING_DURATION_MEDIUM)
    // )
    callsub get_uint_from_registry_config
    retsub

get_voting_duration_else_body@4:
    // smart_contracts/proposal/contract.py:200
    // Bytes(reg_cfg.GS_KEY_VOTING_DURATION_LARGE)
    byte 0x766f74696e675f6475726174696f6e5f6c61726765
    // smart_contracts/proposal/contract.py:199-201
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_VOTING_DURATION_LARGE)
    // )
    callsub get_uint_from_registry_config
    retsub


// smart_contracts.proposal.contract.Proposal.scrutiny() -> void:
scrutiny:
    // smart_contracts/proposal/contract.py:610-611
    // @arc4.abimethod()
    // def scrutiny(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:620
    // self.scrutiny_check_authorization()
    callsub scrutiny_check_authorization
    // smart_contracts/proposal/contract.py:622-624
    // # A category dependent quorum of all xGov Voting Committee (1 xGov, 1 vote) is reached.
    // # Null votes affect this quorum.
    // quorum_bps = self.get_quorum(self.category.value)
    int 0
    byte 0x63617465676f7279
    app_global_get_ex
    assert // check self.category exists
    callsub get_quorum
    // smart_contracts/proposal/contract.py:626
    // self.committee_members.value, quorum_bps
    int 0
    byte 0x636f6d6d69747465655f6d656d62657273
    app_global_get_ex
    assert // check self.committee_members exists
    // smart_contracts/proposal/contract.py:625-627
    // minimum_voters_required = self.relative_to_absolute_amount(
    //     self.committee_members.value, quorum_bps
    // )
    swap
    callsub relative_to_absolute_amount
    // smart_contracts/proposal/contract.py:629-631
    // # A category dependent weighted quorum of all xGov Voting Committee voting power (1 vote) is reached.
    // # Null votes affect this quorum.
    // weighted_quorum_bps = self.get_weighted_quorum(self.category.value)
    int 0
    byte 0x63617465676f7279
    app_global_get_ex
    assert // check self.category exists
    callsub get_weighted_quorum
    // smart_contracts/proposal/contract.py:632
    // total_votes = self.approvals.value + self.rejections.value + self.nulls.value
    int 0
    byte 0x617070726f76616c73
    app_global_get_ex
    assert // check self.approvals exists
    int 0
    byte 0x72656a656374696f6e73
    app_global_get_ex
    assert // check self.rejections exists
    +
    int 0
    byte 0x6e756c6c73
    app_global_get_ex
    assert // check self.nulls exists
    +
    cover 2
    // smart_contracts/proposal/contract.py:634
    // self.committee_votes.value, weighted_quorum_bps
    int 0
    byte 0x636f6d6d69747465655f766f746573
    app_global_get_ex
    assert // check self.committee_votes exists
    // smart_contracts/proposal/contract.py:633-635
    // minimum_votes_required = self.relative_to_absolute_amount(
    //     self.committee_votes.value, weighted_quorum_bps
    // )
    swap
    callsub relative_to_absolute_amount
    swap
    // smart_contracts/proposal/contract.py:638
    // self.voted_members.value >= minimum_voters_required
    int 0
    byte 0x766f7465645f6d656d62657273
    app_global_get_ex
    assert // check self.voted_members exists
    <=
    // smart_contracts/proposal/contract.py:638-642
    // self.voted_members.value >= minimum_voters_required
    // and total_votes >= minimum_votes_required
    // # The relative majority of Approved over Rejected votes is reached.
    // # Null votes do not affect the relative majority.
    // and self.approvals.value > self.rejections.value
    bz scrutiny_else_body@4
    // smart_contracts/proposal/contract.py:639
    // and total_votes >= minimum_votes_required
    frame_dig 0
    frame_dig 1
    >=
    // smart_contracts/proposal/contract.py:638-642
    // self.voted_members.value >= minimum_voters_required
    // and total_votes >= minimum_votes_required
    // # The relative majority of Approved over Rejected votes is reached.
    // # Null votes do not affect the relative majority.
    // and self.approvals.value > self.rejections.value
    bz scrutiny_else_body@4
    // smart_contracts/proposal/contract.py:640-642
    // # The relative majority of Approved over Rejected votes is reached.
    // # Null votes do not affect the relative majority.
    // and self.approvals.value > self.rejections.value
    int 0
    byte 0x617070726f76616c73
    app_global_get_ex
    assert // check self.approvals exists
    int 0
    byte 0x72656a656374696f6e73
    app_global_get_ex
    assert // check self.rejections exists
    >
    // smart_contracts/proposal/contract.py:638-642
    // self.voted_members.value >= minimum_voters_required
    // and total_votes >= minimum_votes_required
    // # The relative majority of Approved over Rejected votes is reached.
    // # Null votes do not affect the relative majority.
    // and self.approvals.value > self.rejections.value
    bz scrutiny_else_body@4
    // smart_contracts/proposal/contract.py:644
    // self.status.value = UInt64(enm.STATUS_APPROVED)
    byte 0x737461747573
    int 30
    app_global_put
    b scrutiny_after_if_else@6

scrutiny_else_body@4:
    // smart_contracts/proposal/contract.py:646
    // self.status.value = UInt64(enm.STATUS_REJECTED)
    byte 0x737461747573
    int 40
    app_global_put
    // smart_contracts/proposal/contract.py:647-651
    // itxn.Payment(
    //     receiver=self.proposer.value.native,
    //     amount=self.locked_amount.value,
    //     fee=UInt64(0),  # enforces the sender to pay the fee
    // ).submit()
    itxn_begin
    // smart_contracts/proposal/contract.py:648
    // receiver=self.proposer.value.native,
    int 0
    byte 0x70726f706f736572
    app_global_get_ex
    assert // check self.proposer exists
    // smart_contracts/proposal/contract.py:649
    // amount=self.locked_amount.value,
    int 0
    byte 0x6c6f636b65645f616d6f756e74
    app_global_get_ex
    assert // check self.locked_amount exists
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/proposal/contract.py:647
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/proposal/contract.py:650
    // fee=UInt64(0),  # enforces the sender to pay the fee
    int 0
    itxn_field Fee
    // smart_contracts/proposal/contract.py:647-651
    // itxn.Payment(
    //     receiver=self.proposer.value.native,
    //     amount=self.locked_amount.value,
    //     fee=UInt64(0),  # enforces the sender to pay the fee
    // ).submit()
    itxn_submit
    // smart_contracts/proposal/contract.py:652
    // self.locked_amount.value = UInt64(0)
    byte 0x6c6f636b65645f616d6f756e74
    int 0
    app_global_put

scrutiny_after_if_else@6:
    retsub


// smart_contracts.proposal.contract.Proposal.scrutiny_check_authorization() -> void:
scrutiny_check_authorization:
    // smart_contracts/proposal/contract.py:148-149
    // @subroutine
    // def scrutiny_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:150
    // assert self.status.value == enm.STATUS_VOTING, err.WRONG_PROPOSAL_STATUS
    int 0
    byte 0x737461747573
    app_global_get_ex
    assert // check self.status exists
    int 25
    ==
    assert // Wrong Proposal Status
    // smart_contracts/proposal/contract.py:152
    // voting_duration = Global.latest_timestamp - self.vote_open_ts.value
    global LatestTimestamp
    int 0
    byte 0x766f74655f6f70656e696e675f74696d657374616d70
    app_global_get_ex
    assert // check self.vote_open_ts exists
    -
    // smart_contracts/proposal/contract.py:153
    // maximum_voting_duration = self.get_voting_duration(self.category.value)
    int 0
    byte 0x63617465676f7279
    app_global_get_ex
    assert // check self.category exists
    callsub get_voting_duration
    // smart_contracts/proposal/contract.py:156
    // voting_duration > maximum_voting_duration  # voting period has ended
    >
    // smart_contracts/proposal/contract.py:156-158
    // voting_duration > maximum_voting_duration  # voting period has ended
    // or self.voted_members.value
    // == self.committee_members.value  # all committee members have voted
    bnz scrutiny_check_authorization_bool_true@2
    // smart_contracts/proposal/contract.py:157
    // or self.voted_members.value
    int 0
    byte 0x766f7465645f6d656d62657273
    app_global_get_ex
    assert // check self.voted_members exists
    // smart_contracts/proposal/contract.py:158
    // == self.committee_members.value  # all committee members have voted
    int 0
    byte 0x636f6d6d69747465655f6d656d62657273
    app_global_get_ex
    assert // check self.committee_members exists
    // smart_contracts/proposal/contract.py:157-158
    // or self.voted_members.value
    // == self.committee_members.value  # all committee members have voted
    ==
    // smart_contracts/proposal/contract.py:156-158
    // voting_duration > maximum_voting_duration  # voting period has ended
    // or self.voted_members.value
    // == self.committee_members.value  # all committee members have voted
    bz scrutiny_check_authorization_bool_false@3

scrutiny_check_authorization_bool_true@2:
    int 1
    b scrutiny_check_authorization_bool_merge@4

scrutiny_check_authorization_bool_false@3:
    int 0

scrutiny_check_authorization_bool_merge@4:
    // smart_contracts/proposal/contract.py:155-159
    // assert (
    //     voting_duration > maximum_voting_duration  # voting period has ended
    //     or self.voted_members.value
    //     == self.committee_members.value  # all committee members have voted
    // ), err.VOTING_ONGOING
    assert // Voting Ongoing
    retsub


// smart_contracts.proposal.contract.Proposal.get_quorum(category: uint64) -> uint64:
get_quorum:
    // smart_contracts/proposal/contract.py:203-204
    // @subroutine
    // def get_quorum(self, category: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/proposal/contract.py:205
    // if category == enm.CATEGORY_SMALL:
    frame_dig -1
    int 10
    ==
    bz get_quorum_else_body@2
    // smart_contracts/proposal/contract.py:207
    // Bytes(reg_cfg.GS_KEY_QUORUM_SMALL)
    byte 0x71756f72756d5f736d616c6c
    // smart_contracts/proposal/contract.py:206-208
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_QUORUM_SMALL)
    // )
    callsub get_uint_from_registry_config
    retsub

get_quorum_else_body@2:
    // smart_contracts/proposal/contract.py:209
    // elif category == enm.CATEGORY_MEDIUM:
    frame_dig -1
    int 20
    ==
    bz get_quorum_else_body@4
    // smart_contracts/proposal/contract.py:211
    // Bytes(reg_cfg.GS_KEY_QUORUM_MEDIUM)
    byte 0x71756f72756d5f6d656469756d
    // smart_contracts/proposal/contract.py:210-212
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_QUORUM_MEDIUM)
    // )
    callsub get_uint_from_registry_config
    retsub

get_quorum_else_body@4:
    // smart_contracts/proposal/contract.py:215
    // Bytes(reg_cfg.GS_KEY_QUORUM_LARGE)
    byte 0x71756f72756d5f6c61726765
    // smart_contracts/proposal/contract.py:214-216
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_QUORUM_LARGE)
    // )
    callsub get_uint_from_registry_config
    retsub


// smart_contracts.proposal.contract.Proposal.get_weighted_quorum(category: uint64) -> uint64:
get_weighted_quorum:
    // smart_contracts/proposal/contract.py:218-219
    // @subroutine
    // def get_weighted_quorum(self, category: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/proposal/contract.py:220
    // if category == enm.CATEGORY_SMALL:
    frame_dig -1
    int 10
    ==
    bz get_weighted_quorum_else_body@2
    // smart_contracts/proposal/contract.py:222
    // Bytes(reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL)
    byte 0x77656967687465645f71756f72756d5f736d616c6c
    // smart_contracts/proposal/contract.py:221-223
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_WEIGHTED_QUORUM_SMALL)
    // )
    callsub get_uint_from_registry_config
    retsub

get_weighted_quorum_else_body@2:
    // smart_contracts/proposal/contract.py:224
    // elif category == enm.CATEGORY_MEDIUM:
    frame_dig -1
    int 20
    ==
    bz get_weighted_quorum_else_body@4
    // smart_contracts/proposal/contract.py:226
    // Bytes(reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM)
    byte 0x77656967687465645f71756f72756d5f6d656469756d
    // smart_contracts/proposal/contract.py:225-227
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_WEIGHTED_QUORUM_MEDIUM)
    // )
    callsub get_uint_from_registry_config
    retsub

get_weighted_quorum_else_body@4:
    // smart_contracts/proposal/contract.py:230
    // Bytes(reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE)
    byte 0x77656967687465645f71756f72756d5f6c61726765
    // smart_contracts/proposal/contract.py:229-231
    // return self.get_uint_from_registry_config(
    //     Bytes(reg_cfg.GS_KEY_WEIGHTED_QUORUM_LARGE)
    // )
    callsub get_uint_from_registry_config
    retsub


// smart_contracts.proposal.contract.Proposal.__init__() -> void:
__init__:
    // smart_contracts/proposal/contract.py:39
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:42
    // Txn.global_num_byte_slice == prop_cfg.GLOBAL_BYTES
    txn GlobalNumByteSlice
    int 5
    ==
    // smart_contracts/proposal/contract.py:40-43
    // # Preconditions
    // assert (
    //     Txn.global_num_byte_slice == prop_cfg.GLOBAL_BYTES
    // ), err.WRONG_GLOBAL_BYTES
    assert // Wrong Global Bytes allocation
    // smart_contracts/proposal/contract.py:44
    // assert Txn.global_num_uint == prop_cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    int 20
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/proposal/contract.py:45
    // assert Txn.local_num_byte_slice == prop_cfg.LOCAL_BYTES, err.WRONG_LOCAL_BYTES
    txn LocalNumByteSlice
    !
    assert // Wrong Local Bytes allocation
    // smart_contracts/proposal/contract.py:46
    // assert Txn.local_num_uint == prop_cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    // smart_contracts/proposal/contract.py:50
    // key=prop_cfg.GS_KEY_PROPOSER,
    byte 0x70726f706f736572
    // smart_contracts/proposal/contract.py:49
    // arc4.Address(),
    global ZeroAddress
    // smart_contracts/proposal/contract.py:48-51
    // self.proposer = GlobalState(
    //     arc4.Address(),
    //     key=prop_cfg.GS_KEY_PROPOSER,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:54
    // key=prop_cfg.GS_KEY_REGISTRY_APP_ID,
    byte 0x72656769737472795f6170705f6964
    // smart_contracts/proposal/contract.py:53
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:52-55
    // self.registry_app_id = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_REGISTRY_APP_ID,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:58
    // key=prop_cfg.GS_KEY_TITLE,
    byte 0x7469746c65
    // smart_contracts/proposal/contract.py:57
    // String(),
    byte ""
    // smart_contracts/proposal/contract.py:56-59
    // self.title = GlobalState(
    //     String(),
    //     key=prop_cfg.GS_KEY_TITLE,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:62
    // key=prop_cfg.GS_KEY_CID,
    byte 0x636964
    // smart_contracts/proposal/contract.py:61
    // typ.Cid.from_bytes(b""),
    byte 0x
    // smart_contracts/proposal/contract.py:60-63
    // self.cid = GlobalState(
    //     typ.Cid.from_bytes(b""),
    //     key=prop_cfg.GS_KEY_CID,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:66
    // key=prop_cfg.GS_KEY_SUBMISSION_TS,
    byte 0x7375626d697373696f6e5f74696d657374616d70
    // smart_contracts/proposal/contract.py:65
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:64-67
    // self.submission_ts = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_SUBMISSION_TS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:70
    // key=prop_cfg.GS_KEY_FINALIZATION_TS,
    byte 0x66696e616c697a6174696f6e5f74696d657374616d70
    // smart_contracts/proposal/contract.py:69
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:68-71
    // self.finalization_ts = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_FINALIZATION_TS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:74
    // key=prop_cfg.GS_KEY_VOTE_OPEN_TS,
    byte 0x766f74655f6f70656e696e675f74696d657374616d70
    // smart_contracts/proposal/contract.py:73
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:72-75
    // self.vote_open_ts = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_VOTE_OPEN_TS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:78
    // key=prop_cfg.GS_KEY_STATUS,
    byte 0x737461747573
    // smart_contracts/proposal/contract.py:77
    // UInt64(enm.STATUS_EMPTY),
    int 0
    // smart_contracts/proposal/contract.py:76-79
    // self.status = GlobalState(
    //     UInt64(enm.STATUS_EMPTY),
    //     key=prop_cfg.GS_KEY_STATUS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:82
    // key=prop_cfg.GS_KEY_CATEGORY,
    byte 0x63617465676f7279
    // smart_contracts/proposal/contract.py:81
    // UInt64(enm.CATEGORY_NULL),
    int 0
    // smart_contracts/proposal/contract.py:80-83
    // self.category = GlobalState(
    //     UInt64(enm.CATEGORY_NULL),
    //     key=prop_cfg.GS_KEY_CATEGORY,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:86
    // key=prop_cfg.GS_KEY_FUNDING_TYPE,
    byte 0x66756e64696e675f74797065
    // smart_contracts/proposal/contract.py:85
    // UInt64(enm.FUNDING_NULL),
    int 0
    // smart_contracts/proposal/contract.py:84-87
    // self.funding_type = GlobalState(
    //     UInt64(enm.FUNDING_NULL),
    //     key=prop_cfg.GS_KEY_FUNDING_TYPE,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:90
    // key=prop_cfg.GS_KEY_REQUESTED_AMOUNT,
    byte 0x7265717565737465645f616d6f756e74
    // smart_contracts/proposal/contract.py:89
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:88-91
    // self.requested_amount = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_REQUESTED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:94
    // key=prop_cfg.GS_KEY_LOCKED_AMOUNT,
    byte 0x6c6f636b65645f616d6f756e74
    // smart_contracts/proposal/contract.py:93
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:92-95
    // self.locked_amount = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_LOCKED_AMOUNT,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:98
    // key=prop_cfg.GS_KEY_COMMITTEE_ID,
    byte 0x636f6d6d69747465655f6964
    // smart_contracts/proposal/contract.py:97
    // typ.CommitteeId.from_bytes(b""),
    byte 0x
    // smart_contracts/proposal/contract.py:96-99
    // self.committee_id = GlobalState(
    //     typ.CommitteeId.from_bytes(b""),
    //     key=prop_cfg.GS_KEY_COMMITTEE_ID,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:102
    // key=prop_cfg.GS_KEY_COMMITTEE_MEMBERS,
    byte 0x636f6d6d69747465655f6d656d62657273
    // smart_contracts/proposal/contract.py:101
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:100-103
    // self.committee_members = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_COMMITTEE_MEMBERS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:106
    // key=prop_cfg.GS_KEY_COMMITTEE_VOTES,
    byte 0x636f6d6d69747465655f766f746573
    // smart_contracts/proposal/contract.py:105
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:104-107
    // self.committee_votes = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_COMMITTEE_VOTES,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:110
    // key=prop_cfg.GS_KEY_VOTED_MEMBERS,
    byte 0x766f7465645f6d656d62657273
    // smart_contracts/proposal/contract.py:109
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:108-111
    // self.voted_members = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_VOTED_MEMBERS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:114
    // key=prop_cfg.GS_KEY_APPROVALS,
    byte 0x617070726f76616c73
    // smart_contracts/proposal/contract.py:113
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:112-115
    // self.approvals = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_APPROVALS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:118
    // key=prop_cfg.GS_KEY_REJECTIONS,
    byte 0x72656a656374696f6e73
    // smart_contracts/proposal/contract.py:117
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:116-119
    // self.rejections = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_REJECTIONS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:122
    // key=prop_cfg.GS_KEY_NULLS,
    byte 0x6e756c6c73
    // smart_contracts/proposal/contract.py:121
    // UInt64(),
    int 0
    // smart_contracts/proposal/contract.py:120-123
    // self.nulls = GlobalState(
    //     UInt64(),
    //     key=prop_cfg.GS_KEY_NULLS,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:126
    // key=prop_cfg.GS_KEY_MILESTONE_APPROVED,
    byte 0x6d696c6573746f6e655f617070726f766564
    // smart_contracts/proposal/contract.py:125
    // False,  # noqa: FBT003
    int 0
    // smart_contracts/proposal/contract.py:124-127
    // self.milestone_approved = GlobalState(
    //     False,  # noqa: FBT003
    //     key=prop_cfg.GS_KEY_MILESTONE_APPROVED,
    // )
    app_global_put
    // smart_contracts/proposal/contract.py:132
    // self.voters_count = UInt64(0)
    byte "voters_count"
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:133
    // self.assigned_votes = UInt64(0)
    byte "assigned_votes"
    int 0
    app_global_put
    retsub
