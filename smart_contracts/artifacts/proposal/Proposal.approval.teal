#pragma version 10

smart_contracts.proposal.contract.Proposal.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // smart_contracts/proposal/contract.py:24-32
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    method "create(address,address)void"
    method "submit_proposal(pay,string,byte[59],uint64,uint64)void"
    method "update_proposal(string,byte[59])void"
    method "drop_proposal()void"
    txna ApplicationArgs 0
    match main_create_route@3 main_submit_proposal_route@4 main_update_proposal_route@5 main_drop_proposal_route@6
    err // reject transaction

main_create_route@3:
    // smart_contracts/proposal/contract.py:179
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/proposal/contract.py:24-32
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // smart_contracts/proposal/contract.py:179
    // @arc4.abimethod(create="require")
    callsub create
    int 1
    return

main_submit_proposal_route@4:
    // smart_contracts/proposal/contract.py:197
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/proposal/contract.py:24-32
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    // smart_contracts/proposal/contract.py:197
    // @arc4.abimethod()
    callsub submit_proposal
    int 1
    return

main_update_proposal_route@5:
    // smart_contracts/proposal/contract.py:243
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/proposal/contract.py:24-32
    // class Proposal(
    //     ARC4Contract,
    //     state_totals=StateTotals(
    //         global_bytes=cfg.GLOBAL_BYTES,
    //         global_uints=cfg.GLOBAL_UINTS,
    //         local_bytes=cfg.LOCAL_BYTES,
    //         local_uints=cfg.LOCAL_UINTS,
    //     ),
    // ):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    // smart_contracts/proposal/contract.py:243
    // @arc4.abimethod()
    callsub update_proposal
    int 1
    return

main_drop_proposal_route@6:
    // smart_contracts/proposal/contract.py:265
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub drop_proposal
    int 1
    return


// smart_contracts.proposal.contract.Proposal.create(proposer: bytes, committee_publisher: bytes) -> void:
create:
    // smart_contracts/proposal/contract.py:179-180
    // @arc4.abimethod(create="require")
    // def create(self, proposer: arc4.Address, committee_publisher: arc4.Address) -> None:
    proto 2 0
    // smart_contracts/proposal/contract.py:40
    // self.committee_publisher = (
    byte "committee_publisher"
    // smart_contracts/proposal/contract.py:190-192
    // self.committee_publisher = (
    //     committee_publisher  # TODO: remove after we have the registry SC
    // )
    frame_dig -1
    app_global_put
    // smart_contracts/proposal/contract.py:44
    // self.proposer = arc4.Address()
    byte "proposer"
    // smart_contracts/proposal/contract.py:194
    // self.proposer = proposer
    frame_dig -2
    app_global_put
    // smart_contracts/proposal/contract.py:45
    // self.registry_app_id = UInt64()  # Registry App ID
    byte "registry_app_id"
    // smart_contracts/proposal/contract.py:195
    // self.registry_app_id = Global.caller_application_id
    global CallerApplicationID
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.submit_proposal(payment: uint64, title: bytes, cid: bytes, funding_type: uint64, requested_amount: uint64) -> void:
submit_proposal:
    // smart_contracts/proposal/contract.py:197-205
    // @arc4.abimethod()
    // def submit_proposal(
    //     self,
    //     payment: gtxn.PaymentTransaction,
    //     title: String,
    //     cid: typ.Cid,
    //     funding_type: UInt64,
    //     requested_amount: UInt64,
    // ) -> None:
    proto 5 0
    // smart_contracts/proposal/contract.py:229
    // self.submit_check_authorization()
    callsub submit_check_authorization
    // smart_contracts/proposal/contract.py:231
    // self.submit_input_validation(title, cid, funding_type, requested_amount)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub submit_input_validation
    frame_bury -3
    // smart_contracts/proposal/contract.py:232
    // self.submit_payment_validation(payment, requested_amount)
    frame_dig -5
    frame_dig -1
    callsub submit_payment_validation
    // smart_contracts/proposal/contract.py:46
    // self.title = String()  # UTF-8 encoded, max 123 bytes
    byte "title"
    // smart_contracts/proposal/contract.py:234
    // self.title = title
    frame_dig -4
    app_global_put
    // smart_contracts/proposal/contract.py:47
    // self.cid = typ.Cid.from_bytes(
    byte "cid"
    // smart_contracts/proposal/contract.py:235
    // self.cid = cid.copy()
    frame_dig -3
    app_global_put
    // smart_contracts/proposal/contract.py:236
    // self.set_category(requested_amount)
    frame_dig -1
    callsub set_category
    // smart_contracts/proposal/contract.py:56
    // self.funding_type = UInt64(
    byte "funding_type"
    // smart_contracts/proposal/contract.py:237
    // self.funding_type = funding_type
    frame_dig -2
    app_global_put
    // smart_contracts/proposal/contract.py:59
    // self.requested_amount = UInt64()  # Requested amount in microAlgos
    byte "requested_amount"
    // smart_contracts/proposal/contract.py:238
    // self.requested_amount = requested_amount
    frame_dig -1
    app_global_put
    // smart_contracts/proposal/contract.py:239
    // self.locked_amount = self.get_expected_locked_amount(requested_amount)
    frame_dig -1
    callsub get_expected_locked_amount
    // smart_contracts/proposal/contract.py:60
    // self.locked_amount = (
    byte "locked_amount"
    // smart_contracts/proposal/contract.py:239
    // self.locked_amount = self.get_expected_locked_amount(requested_amount)
    swap
    app_global_put
    // smart_contracts/proposal/contract.py:50
    // self.submission_ts = UInt64()  # Proposal finalization timestamp
    byte "submission_ts"
    // smart_contracts/proposal/contract.py:240
    // self.submission_ts = Global.latest_timestamp
    global LatestTimestamp
    app_global_put
    // smart_contracts/proposal/contract.py:52
    // self.status = UInt64(enm.STATUS_EMPTY)  # Enumerated status
    byte "status"
    // smart_contracts/proposal/contract.py:241
    // self.status = UInt64(enm.STATUS_DRAFT)
    int 10
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.submit_check_authorization() -> void:
submit_check_authorization:
    // smart_contracts/proposal/contract.py:105-106
    // @subroutine
    // def submit_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:107
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:108
    // assert self.is_kyc_verified(), err.KYC_NOT_VERIFIED
    callsub is_kyc_verified
    assert // KYC is not verified
    // smart_contracts/proposal/contract.py:109
    // assert self.status == enm.STATUS_EMPTY, err.WRONG_PROPOSAL_STATUS
    int 0
    // smart_contracts/proposal/contract.py:52
    // self.status = UInt64(enm.STATUS_EMPTY)  # Enumerated status
    byte "status"
    // smart_contracts/proposal/contract.py:109
    // assert self.status == enm.STATUS_EMPTY, err.WRONG_PROPOSAL_STATUS
    app_global_get_ex
    assert // check self.status exists
    !
    assert // Wrong Proposal Status
    retsub


// smart_contracts.proposal.contract.Proposal.is_proposer() -> uint64:
is_proposer:
    // smart_contracts/proposal/contract.py:175-176
    // @subroutine
    // def is_proposer(self) -> bool:
    proto 0 1
    // smart_contracts/proposal/contract.py:177
    // return Txn.sender == self.proposer
    int 0
    // smart_contracts/proposal/contract.py:44
    // self.proposer = arc4.Address()
    byte "proposer"
    // smart_contracts/proposal/contract.py:177
    // return Txn.sender == self.proposer
    app_global_get_ex
    assert // check self.proposer exists
    txn Sender
    ==
    retsub


// smart_contracts.proposal.contract.Proposal.is_kyc_verified() -> uint64:
is_kyc_verified:
    // smart_contracts/proposal/contract.py:304-308
    // ####################################################################################################################
    // # Stub subroutines
    // # these subroutines are placeholders for the actual implementation
    // @subroutine
    // def is_kyc_verified(self) -> bool:
    proto 0 1
    // smart_contracts/proposal/contract.py:309
    // return True
    int 1
    retsub


// smart_contracts.proposal.contract.Proposal.submit_input_validation(title: bytes, cid: bytes, funding_type: uint64, requested_amount: uint64) -> bytes:
submit_input_validation:
    // smart_contracts/proposal/contract.py:111-118
    // @subroutine
    // def submit_input_validation(
    //     self,
    //     title: String,
    //     cid: typ.Cid,
    //     funding_type: UInt64,
    //     requested_amount: UInt64,
    // ) -> None:
    proto 4 1
    // smart_contracts/proposal/contract.py:120
    // self.updateable_input_validation(title, cid)
    frame_dig -4
    frame_dig -3
    callsub updateable_input_validation
    frame_bury -3
    // smart_contracts/proposal/contract.py:123
    // funding_type == enm.FUNDING_PROACTIVE
    frame_dig -2
    int 10
    ==
    // smart_contracts/proposal/contract.py:123-124
    // funding_type == enm.FUNDING_PROACTIVE
    // or funding_type == enm.FUNDING_RETROACTIVE
    bnz submit_input_validation_bool_true@2
    // smart_contracts/proposal/contract.py:124
    // or funding_type == enm.FUNDING_RETROACTIVE
    frame_dig -2
    int 20
    ==
    // smart_contracts/proposal/contract.py:123-124
    // funding_type == enm.FUNDING_PROACTIVE
    // or funding_type == enm.FUNDING_RETROACTIVE
    bz submit_input_validation_bool_false@3

submit_input_validation_bool_true@2:
    int 1
    b submit_input_validation_bool_merge@4

submit_input_validation_bool_false@3:
    int 0

submit_input_validation_bool_merge@4:
    // smart_contracts/proposal/contract.py:122-125
    // assert (
    //     funding_type == enm.FUNDING_PROACTIVE
    //     or funding_type == enm.FUNDING_RETROACTIVE
    // ), err.WRONG_FUNDING_TYPE
    assert // Wrong Funding Type
    // smart_contracts/proposal/contract.py:127
    // min_requested_amount = self.get_min_requested_amount()
    callsub get_min_requested_amount
    // smart_contracts/proposal/contract.py:128
    // max_requested_amount_large = self.get_max_requested_amount_large()
    callsub get_max_requested_amount_large
    swap
    // smart_contracts/proposal/contract.py:130
    // assert requested_amount >= min_requested_amount, err.WRONG_MIN_REQUESTED_AMOUNT
    frame_dig -1
    <=
    assert // Requested amount is less than the minimum requested amount
    // smart_contracts/proposal/contract.py:132
    // requested_amount <= max_requested_amount_large
    frame_dig -1
    >=
    // smart_contracts/proposal/contract.py:131-133
    // assert (
    //     requested_amount <= max_requested_amount_large
    // ), err.WRONG_MAX_REQUESTED_AMOUNT
    assert // Requested amount is more than the maximum requested amount
    frame_dig -3
    retsub


// smart_contracts.proposal.contract.Proposal.updateable_input_validation(title: bytes, cid: bytes) -> bytes:
updateable_input_validation:
    // smart_contracts/proposal/contract.py:91-92
    // @subroutine
    // def updateable_input_validation(self, title: String, cid: typ.Cid) -> None:
    proto 2 1
    // smart_contracts/proposal/contract.py:93
    // assert title.bytes.length <= const.TITLE_MAX_BYTES, err.WRONG_TITLE_LENGTH
    frame_dig -2
    len
    int 123
    <=
    assert // Wrong Title length
    // smart_contracts/proposal/contract.py:94
    // assert title != "", err.WRONG_TITLE_LENGTH
    frame_dig -2
    byte ""
    !=
    assert // Wrong Title length
    frame_dig -1
    retsub


// smart_contracts.proposal.contract.Proposal.get_min_requested_amount() -> uint64:
get_min_requested_amount:
    // smart_contracts/proposal/contract.py:311-323
    // # @subroutine
    // # def get_config_from_registry(self, registry_app_id: UInt64) -> typ.XGovRegistryConfig:
    // #     return typ.XGovRegistryConfig(
    // #         min_requested_amount=arc4.UInt64(10_000),
    // #         max_requested_amount_small=arc4.UInt64(50_000),
    // #         max_requested_amount_medium=arc4.UInt64(250_000),
    // #         max_requested_amount_large=arc4.UInt64(500_000),
    // #         discussion_duration_small=arc4.UInt64(1),
    // #         discussion_duration_medium=arc4.UInt64(2),
    // #         discussion_duration_large=arc4.UInt64(3),
    // #     )
    // @subroutine
    // def get_min_requested_amount(self) -> UInt64:
    proto 0 1
    // smart_contracts/proposal/contract.py:324
    // return UInt64(const.MIN_REQUESTED_AMOUNT)
    int 10000000000
    retsub


// smart_contracts.proposal.contract.Proposal.get_max_requested_amount_large() -> uint64:
get_max_requested_amount_large:
    // smart_contracts/proposal/contract.py:334-335
    // @subroutine
    // def get_max_requested_amount_large(self) -> UInt64:
    proto 0 1
    // smart_contracts/proposal/contract.py:336
    // return UInt64(const.MAX_REQUESTED_AMOUNT_LARGE)
    int 500000000000
    retsub


// smart_contracts.proposal.contract.Proposal.submit_payment_validation(payment: uint64, requested_amount: uint64) -> void:
submit_payment_validation:
    // smart_contracts/proposal/contract.py:147-150
    // @subroutine
    // def submit_payment_validation(
    //     self, payment: gtxn.PaymentTransaction, requested_amount: UInt64
    // ) -> None:
    proto 2 0
    // smart_contracts/proposal/contract.py:151
    // expected_lock_amount = self.get_expected_locked_amount(requested_amount)
    frame_dig -1
    callsub get_expected_locked_amount
    // smart_contracts/proposal/contract.py:153
    // assert payment.sender == self.proposer, err.WRONG_SENDER
    int 0
    // smart_contracts/proposal/contract.py:44
    // self.proposer = arc4.Address()
    byte "proposer"
    // smart_contracts/proposal/contract.py:153
    // assert payment.sender == self.proposer, err.WRONG_SENDER
    app_global_get_ex
    assert // check self.proposer exists
    frame_dig -2
    gtxns Sender
    ==
    assert // Wrong Sender
    // smart_contracts/proposal/contract.py:155
    // payment.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/proposal/contract.py:154-156
    // assert (
    //     payment.receiver == Global.current_application_address
    // ), err.WRONG_RECEIVER
    assert // Wrong Receiver
    // smart_contracts/proposal/contract.py:157
    // assert payment.amount == expected_lock_amount, err.WRONG_LOCKED_AMOUNT
    frame_dig -2
    gtxns Amount
    ==
    assert // Locked amount is incorrect
    retsub


// smart_contracts.proposal.contract.Proposal.get_expected_locked_amount(requested_amount: uint64) -> uint64:
get_expected_locked_amount:
    // smart_contracts/proposal/contract.py:141-142
    // @subroutine
    // def get_expected_locked_amount(self, requested_amount: UInt64) -> UInt64:
    proto 1 1
    // smart_contracts/proposal/contract.py:144
    // requested_amount, self.get_proposal_commitment_bps()
    callsub get_proposal_commitment_bps
    // smart_contracts/proposal/contract.py:143-145
    // return self.relative_to_absolute_amount(
    //     requested_amount, self.get_proposal_commitment_bps()
    // )
    frame_dig -1
    swap
    callsub relative_to_absolute_amount
    retsub


// smart_contracts.proposal.contract.Proposal.get_proposal_commitment_bps() -> uint64:
get_proposal_commitment_bps:
    // smart_contracts/proposal/contract.py:338-339
    // @subroutine
    // def get_proposal_commitment_bps(self) -> UInt64:
    proto 0 1
    // smart_contracts/proposal/contract.py:340
    // return UInt64(const.PROPOSAL_COMMITMENT_BPS)
    int 100
    retsub


// smart_contracts.proposal.contract.Proposal.relative_to_absolute_amount(amount: uint64, fraction_in_bps: uint64) -> uint64:
relative_to_absolute_amount:
    // smart_contracts/proposal/contract.py:135-138
    // @subroutine
    // def relative_to_absolute_amount(
    //     self, amount: UInt64, fraction_in_bps: UInt64
    // ) -> UInt64:
    proto 2 1
    // smart_contracts/proposal/contract.py:139
    // return amount * fraction_in_bps // const.BPS
    frame_dig -2
    frame_dig -1
    *
    int 10000
    /
    retsub


// smart_contracts.proposal.contract.Proposal.set_category(requested_amount: uint64) -> void:
set_category:
    // smart_contracts/proposal/contract.py:159-160
    // @subroutine
    // def set_category(self, requested_amount: UInt64) -> None:
    proto 1 0
    // smart_contracts/proposal/contract.py:161
    // max_requested_amount_small = self.get_max_requested_amount_small()
    callsub get_max_requested_amount_small
    // smart_contracts/proposal/contract.py:162
    // max_requested_amount_medium = self.get_max_requested_amount_medium()
    callsub get_max_requested_amount_medium
    swap
    // smart_contracts/proposal/contract.py:164
    // if requested_amount <= max_requested_amount_small:
    frame_dig -1
    >=
    bz set_category_else_body@2
    // smart_contracts/proposal/contract.py:53
    // self.category = UInt64(
    byte "category"
    // smart_contracts/proposal/contract.py:165
    // self.category = UInt64(enm.CATEGORY_SMALL)
    int 10
    app_global_put
    b set_category_after_if_else@6

set_category_else_body@2:
    // smart_contracts/proposal/contract.py:166
    // elif requested_amount <= max_requested_amount_medium:
    frame_dig -1
    frame_dig 0
    <=
    bz set_category_else_body@4
    // smart_contracts/proposal/contract.py:53
    // self.category = UInt64(
    byte "category"
    // smart_contracts/proposal/contract.py:167
    // self.category = UInt64(enm.CATEGORY_MEDIUM)
    int 20
    app_global_put
    b set_category_after_if_else@6

set_category_else_body@4:
    // smart_contracts/proposal/contract.py:53
    // self.category = UInt64(
    byte "category"
    // smart_contracts/proposal/contract.py:169
    // self.category = UInt64(enm.CATEGORY_LARGE)
    int 33
    app_global_put

set_category_after_if_else@6:
    retsub


// smart_contracts.proposal.contract.Proposal.get_max_requested_amount_small() -> uint64:
get_max_requested_amount_small:
    // smart_contracts/proposal/contract.py:326-327
    // @subroutine
    // def get_max_requested_amount_small(self) -> UInt64:
    proto 0 1
    // smart_contracts/proposal/contract.py:328
    // return UInt64(const.MAX_REQUESTED_AMOUNT_SMALL)
    int 50000000000
    retsub


// smart_contracts.proposal.contract.Proposal.get_max_requested_amount_medium() -> uint64:
get_max_requested_amount_medium:
    // smart_contracts/proposal/contract.py:330-331
    // @subroutine
    // def get_max_requested_amount_medium(self) -> UInt64:
    proto 0 1
    // smart_contracts/proposal/contract.py:332
    // return UInt64(const.MAX_REQUESTED_AMOUNT_MEDIUM)
    int 250000000000
    retsub


// smart_contracts.proposal.contract.Proposal.update_proposal(title: bytes, cid: bytes) -> void:
update_proposal:
    // smart_contracts/proposal/contract.py:243-244
    // @arc4.abimethod()
    // def update_proposal(self, title: String, cid: typ.Cid) -> None:
    proto 2 0
    // smart_contracts/proposal/contract.py:258
    // self.update_check_authorization()
    callsub update_check_authorization
    // smart_contracts/proposal/contract.py:260
    // self.updateable_input_validation(title, cid)
    frame_dig -2
    frame_dig -1
    callsub updateable_input_validation
    frame_bury -1
    // smart_contracts/proposal/contract.py:46
    // self.title = String()  # UTF-8 encoded, max 123 bytes
    byte "title"
    // smart_contracts/proposal/contract.py:262
    // self.title = title
    frame_dig -2
    app_global_put
    // smart_contracts/proposal/contract.py:47
    // self.cid = typ.Cid.from_bytes(
    byte "cid"
    // smart_contracts/proposal/contract.py:263
    // self.cid = cid.copy()
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.proposal.contract.Proposal.update_check_authorization() -> void:
update_check_authorization:
    // smart_contracts/proposal/contract.py:99-100
    // @subroutine
    // def update_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:101
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:102
    // assert self.is_kyc_verified(), err.KYC_NOT_VERIFIED
    callsub is_kyc_verified
    assert // KYC is not verified
    // smart_contracts/proposal/contract.py:103
    // assert self.status == enm.STATUS_DRAFT, err.WRONG_PROPOSAL_STATUS
    int 0
    // smart_contracts/proposal/contract.py:52
    // self.status = UInt64(enm.STATUS_EMPTY)  # Enumerated status
    byte "status"
    // smart_contracts/proposal/contract.py:103
    // assert self.status == enm.STATUS_DRAFT, err.WRONG_PROPOSAL_STATUS
    app_global_get_ex
    assert // check self.status exists
    int 10
    ==
    assert // Wrong Proposal Status
    retsub


// smart_contracts.proposal.contract.Proposal.drop_proposal() -> void:
drop_proposal:
    // smart_contracts/proposal/contract.py:265-266
    // @arc4.abimethod()
    // def drop_proposal(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:274
    // self.drop_check_authorization()
    callsub drop_check_authorization
    // smart_contracts/proposal/contract.py:52
    // self.status = UInt64(enm.STATUS_EMPTY)  # Enumerated status
    byte "status"
    // smart_contracts/proposal/contract.py:276
    // self.status = UInt64(enm.STATUS_EMPTY)
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:278-282
    // itxn.Payment(
    //     receiver=self.proposer.native,
    //     amount=self.locked_amount,
    //     fee=UInt64(0),  # enforces the proposer to pay the fee
    // ).submit()
    itxn_begin
    // smart_contracts/proposal/contract.py:279
    // receiver=self.proposer.native,
    int 0
    // smart_contracts/proposal/contract.py:44
    // self.proposer = arc4.Address()
    byte "proposer"
    // smart_contracts/proposal/contract.py:279
    // receiver=self.proposer.native,
    app_global_get_ex
    assert // check self.proposer exists
    // smart_contracts/proposal/contract.py:280
    // amount=self.locked_amount,
    int 0
    // smart_contracts/proposal/contract.py:60
    // self.locked_amount = (
    byte "locked_amount"
    // smart_contracts/proposal/contract.py:280
    // amount=self.locked_amount,
    app_global_get_ex
    assert // check self.locked_amount exists
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/proposal/contract.py:278
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/proposal/contract.py:281
    // fee=UInt64(0),  # enforces the proposer to pay the fee
    int 0
    itxn_field Fee
    // smart_contracts/proposal/contract.py:278-282
    // itxn.Payment(
    //     receiver=self.proposer.native,
    //     amount=self.locked_amount,
    //     fee=UInt64(0),  # enforces the proposer to pay the fee
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.proposal.contract.Proposal.drop_check_authorization() -> void:
drop_check_authorization:
    // smart_contracts/proposal/contract.py:86-87
    // @subroutine
    // def drop_check_authorization(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:88
    // assert self.is_proposer(), err.UNAUTHORIZED
    callsub is_proposer
    assert // Unauthorized
    // smart_contracts/proposal/contract.py:89
    // assert self.status == enm.STATUS_DRAFT, err.WRONG_PROPOSAL_STATUS
    int 0
    // smart_contracts/proposal/contract.py:52
    // self.status = UInt64(enm.STATUS_EMPTY)  # Enumerated status
    byte "status"
    // smart_contracts/proposal/contract.py:89
    // assert self.status == enm.STATUS_DRAFT, err.WRONG_PROPOSAL_STATUS
    app_global_get_ex
    assert // check self.status exists
    int 10
    ==
    assert // Wrong Proposal Status
    retsub


// smart_contracts.proposal.contract.Proposal.__init__() -> void:
__init__:
    // smart_contracts/proposal/contract.py:33
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/proposal/contract.py:34-35
    // # Preconditions
    // assert Txn.global_num_byte_slice == cfg.GLOBAL_BYTES, err.WRONG_GLOBAL_BYTES
    txn GlobalNumByteSlice
    int 5
    ==
    assert // Wrong Global Bytes allocation
    // smart_contracts/proposal/contract.py:36
    // assert Txn.global_num_uint == cfg.GLOBAL_UINTS, err.WRONG_GLOBAL_UINTS
    txn GlobalNumUint
    int 13
    ==
    assert // Wrong Global UInts allocation
    // smart_contracts/proposal/contract.py:37
    // assert Txn.local_num_byte_slice == cfg.LOCAL_BYTES, err.WRONG_LOCAL_BYTES
    txn LocalNumByteSlice
    !
    assert // Wrong Local Bytes allocation
    // smart_contracts/proposal/contract.py:38
    // assert Txn.local_num_uint == cfg.LOCAL_UINTS, err.WRONG_LOCAL_UINTS
    txn LocalNumUint
    !
    assert // Wrong Local UInts allocation
    // smart_contracts/proposal/contract.py:40
    // self.committee_publisher = (
    byte "committee_publisher"
    // smart_contracts/proposal/contract.py:41
    // arc4.Address()
    global ZeroAddress
    // smart_contracts/proposal/contract.py:40-42
    // self.committee_publisher = (
    //     arc4.Address()
    // )  # TODO: remove after we have the registry SC
    app_global_put
    // smart_contracts/proposal/contract.py:44
    // self.proposer = arc4.Address()
    byte "proposer"
    global ZeroAddress
    app_global_put
    // smart_contracts/proposal/contract.py:45
    // self.registry_app_id = UInt64()  # Registry App ID
    byte "registry_app_id"
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:46
    // self.title = String()  # UTF-8 encoded, max 123 bytes
    byte "title"
    byte ""
    app_global_put
    // smart_contracts/proposal/contract.py:47
    // self.cid = typ.Cid.from_bytes(
    byte "cid"
    // smart_contracts/proposal/contract.py:48
    // b""
    byte 0x
    // smart_contracts/proposal/contract.py:47-49
    // self.cid = typ.Cid.from_bytes(
    //     b""
    // )  # IPFS V1 CID, updated on each update of the Draft
    app_global_put
    // smart_contracts/proposal/contract.py:50
    // self.submission_ts = UInt64()  # Proposal finalization timestamp
    byte "submission_ts"
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:51
    // self.finalization_ts = UInt64()  # Proposal finalization timestamp
    byte "finalization_ts"
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:52
    // self.status = UInt64(enm.STATUS_EMPTY)  # Enumerated status
    byte "status"
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:53
    // self.category = UInt64(
    byte "category"
    // smart_contracts/proposal/contract.py:53-55
    // self.category = UInt64(
    //     enm.CATEGORY_NULL
    // )  # Proposal category (small, medium, large)
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:56
    // self.funding_type = UInt64(
    byte "funding_type"
    // smart_contracts/proposal/contract.py:56-58
    // self.funding_type = UInt64(
    //     enm.FUNDING_NULL
    // )  # Funding type (Proactive / Retroactive)
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:59
    // self.requested_amount = UInt64()  # Requested amount in microAlgos
    byte "requested_amount"
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:60
    // self.locked_amount = (
    byte "locked_amount"
    // smart_contracts/proposal/contract.py:61
    // UInt64()
    int 0
    // smart_contracts/proposal/contract.py:60-62
    // self.locked_amount = (
    //     UInt64()
    // )  # Locked amount in microAlgos, 1% of requested amount
    app_global_put
    // smart_contracts/proposal/contract.py:63
    // self.committee_id = typ.CommitteeId.from_bytes(b"")  # xGov Voting Committee ID
    byte "committee_id"
    byte 0x
    app_global_put
    // smart_contracts/proposal/contract.py:64
    // self.committee_members = UInt64()  # xGov Voting Committee size
    byte "committee_members"
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:65
    // self.committee_votes = UInt64()  # xGov Voting Committee total voting power
    byte "committee_votes"
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:66
    // self.voted_members = UInt64()  # xGov Voting Committee members who voted
    byte "voted_members"
    int 0
    app_global_put
    // smart_contracts/proposal/contract.py:67
    // self.approvals = (
    byte "approvals"
    // smart_contracts/proposal/contract.py:68
    // UInt64()
    int 0
    // smart_contracts/proposal/contract.py:67-69
    // self.approvals = (
    //     UInt64()
    // )  # Approval votes received by xGov Voting Committee members
    app_global_put
    // smart_contracts/proposal/contract.py:70
    // self.rejections = (
    byte "rejections"
    // smart_contracts/proposal/contract.py:71
    // UInt64()
    int 0
    // smart_contracts/proposal/contract.py:70-72
    // self.rejections = (
    //     UInt64()
    // )  # Rejection votes received by xGov Voting Committee members
    app_global_put
    retsub
