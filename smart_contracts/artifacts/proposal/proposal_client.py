# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "create(address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "submit(pay,string,byte[36],uint64,uint64,uint8)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update(string,byte[36])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "drop()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "finalize()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assign_voter(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote(address,uint64,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "scrutiny()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "review(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "decommission(address[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete()string": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "get_state()(address,uint64,string,byte[36],uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[36],uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "ProposalTypedGlobalState",
                    "elements": [
                        [
                            "proposer",
                            "address"
                        ],
                        [
                            "registry_app_id",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "cid",
                            "byte[36]"
                        ],
                        [
                            "submission_ts",
                            "uint64"
                        ],
                        [
                            "finalization_ts",
                            "uint64"
                        ],
                        [
                            "vote_open_ts",
                            "uint64"
                        ],
                        [
                            "status",
                            "uint64"
                        ],
                        [
                            "funding_category",
                            "uint64"
                        ],
                        [
                            "focus",
                            "uint8"
                        ],
                        [
                            "funding_type",
                            "uint64"
                        ],
                        [
                            "requested_amount",
                            "uint64"
                        ],
                        [
                            "locked_amount",
                            "uint64"
                        ],
                        [
                            "committee_id",
                            "byte[36]"
                        ],
                        [
                            "committee_members",
                            "uint64"
                        ],
                        [
                            "committee_votes",
                            "uint64"
                        ],
                        [
                            "voted_members",
                            "uint64"
                        ],
                        [
                            "approvals",
                            "uint64"
                        ],
                        [
                            "rejections",
                            "uint64"
                        ],
                        [
                            "nulls",
                            "uint64"
                        ],
                        [
                            "cool_down_start_ts",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 20
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "approvals": {
                    "type": "uint64",
                    "key": "approvals"
                },
                "assigned_votes": {
                    "type": "uint64",
                    "key": "assigned_votes"
                },
                "cid": {
                    "type": "bytes",
                    "key": "cid"
                },
                "committee_id": {
                    "type": "bytes",
                    "key": "committee_id"
                },
                "committee_members": {
                    "type": "uint64",
                    "key": "committee_members"
                },
                "committee_votes": {
                    "type": "uint64",
                    "key": "committee_votes"
                },
                "cool_down_start_ts": {
                    "type": "uint64",
                    "key": "cool_down_start_ts"
                },
                "finalization_ts": {
                    "type": "uint64",
                    "key": "finalization_timestamp"
                },
                "focus": {
                    "type": "uint64",
                    "key": "focus"
                },
                "funding_category": {
                    "type": "uint64",
                    "key": "funding_category"
                },
                "funding_type": {
                    "type": "uint64",
                    "key": "funding_type"
                },
                "locked_amount": {
                    "type": "uint64",
                    "key": "locked_amount"
                },
                "nulls": {
                    "type": "uint64",
                    "key": "nulls"
                },
                "proposer": {
                    "type": "bytes",
                    "key": "proposer"
                },
                "registry_app_id": {
                    "type": "uint64",
                    "key": "registry_app_id"
                },
                "rejections": {
                    "type": "uint64",
                    "key": "rejections"
                },
                "requested_amount": {
                    "type": "uint64",
                    "key": "requested_amount"
                },
                "status": {
                    "type": "uint64",
                    "key": "status"
                },
                "submission_ts": {
                    "type": "uint64",
                    "key": "submission_timestamp"
                },
                "title": {
                    "type": "bytes",
                    "key": "title"
                },
                "vote_open_ts": {
                    "type": "uint64",
                    "key": "vote_opening_timestamp"
                },
                "voted_members": {
                    "type": "uint64",
                    "key": "voted_members"
                },
                "voters_count": {
                    "type": "uint64",
                    "key": "voters_count"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Proposal",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "address",
                        "name": "proposer",
                        "desc": "Address of the proposer"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "submit",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "Commitment payment transaction from the proposer to the contract"
                    },
                    {
                        "type": "string",
                        "name": "title",
                        "desc": "Proposal title, max TITLE_MAX_BYTES bytes"
                    },
                    {
                        "type": "byte[36]",
                        "name": "cid",
                        "desc": "IPFS V1 CID"
                    },
                    {
                        "type": "uint64",
                        "name": "funding_type",
                        "desc": "Funding type (Proactive / Retroactive)"
                    },
                    {
                        "type": "uint64",
                        "name": "requested_amount",
                        "desc": "Requested amount in microAlgos"
                    },
                    {
                        "type": "uint8",
                        "name": "focus",
                        "desc": "Proposal focus area"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Submit the first draft of the proposal."
            },
            {
                "name": "update",
                "args": [
                    {
                        "type": "string",
                        "name": "title",
                        "desc": "Proposal title, max TITLE_MAX_BYTES bytes"
                    },
                    {
                        "type": "byte[36]",
                        "name": "cid",
                        "desc": "IPFS V1 CID"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Update the proposal."
            },
            {
                "name": "drop",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Drop the proposal."
            },
            {
                "name": "finalize",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Finalize the proposal."
            },
            {
                "name": "assign_voter",
                "args": [
                    {
                        "type": "address",
                        "name": "voter",
                        "desc": "Voter address"
                    },
                    {
                        "type": "uint64",
                        "name": "voting_power",
                        "desc": "Voting power"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Assign a voter to the proposal."
            },
            {
                "name": "vote",
                "args": [
                    {
                        "type": "address",
                        "name": "voter",
                        "desc": "Voter address"
                    },
                    {
                        "type": "uint64",
                        "name": "approvals",
                        "desc": "Number of approvals"
                    },
                    {
                        "type": "uint64",
                        "name": "rejections",
                        "desc": "Number of rejections"
                    }
                ],
                "returns": {
                    "type": "string"
                },
                "desc": "Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "scrutiny",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Scrutinize the proposal."
            },
            {
                "name": "review",
                "args": [
                    {
                        "type": "bool",
                        "name": "block",
                        "desc": "Whether to block the proposal or not"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Review the proposal."
            },
            {
                "name": "fund",
                "args": [],
                "returns": {
                    "type": "string"
                },
                "desc": "Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "decommission",
                "args": [
                    {
                        "type": "address[]",
                        "name": "voters",
                        "desc": "List of voters to be removed"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Decommission the proposal."
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "string"
                },
                "desc": "Delete the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "get_state",
                "args": [],
                "returns": {
                    "type": "(address,uint64,string,byte[36],uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[36],uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                    "desc": "The proposal state"
                },
                "desc": "Get the proposal state."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class SubmitArgs(_ArgsBase[None]):
    """Submit the first draft of the proposal."""

    payment: TransactionWithSigner
    """Commitment payment transaction from the proposer to the contract"""
    title: str
    """Proposal title, max TITLE_MAX_BYTES bytes"""
    cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    """IPFS V1 CID"""
    funding_type: int
    """Funding type (Proactive / Retroactive)"""
    requested_amount: int
    """Requested amount in microAlgos"""
    focus: int
    """Proposal focus area"""

    @staticmethod
    def method() -> str:
        return "submit(pay,string,byte[36],uint64,uint64,uint8)void"


@dataclasses.dataclass(kw_only=True)
class UpdateArgs(_ArgsBase[None]):
    """Update the proposal."""

    title: str
    """Proposal title, max TITLE_MAX_BYTES bytes"""
    cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    """IPFS V1 CID"""

    @staticmethod
    def method() -> str:
        return "update(string,byte[36])void"


@dataclasses.dataclass(kw_only=True)
class DropArgs(_ArgsBase[None]):
    """Drop the proposal."""

    @staticmethod
    def method() -> str:
        return "drop()void"


@dataclasses.dataclass(kw_only=True)
class FinalizeArgs(_ArgsBase[None]):
    """Finalize the proposal."""

    @staticmethod
    def method() -> str:
        return "finalize()void"


@dataclasses.dataclass(kw_only=True)
class AssignVoterArgs(_ArgsBase[None]):
    """Assign a voter to the proposal."""

    voter: str
    """Voter address"""
    voting_power: int
    """Voting power"""

    @staticmethod
    def method() -> str:
        return "assign_voter(address,uint64)void"


@dataclasses.dataclass(kw_only=True)
class VoteArgs(_ArgsBase[str]):
    """Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."""

    voter: str
    """Voter address"""
    approvals: int
    """Number of approvals"""
    rejections: int
    """Number of rejections"""

    @staticmethod
    def method() -> str:
        return "vote(address,uint64,uint64)string"


@dataclasses.dataclass(kw_only=True)
class ScrutinyArgs(_ArgsBase[None]):
    """Scrutinize the proposal."""

    @staticmethod
    def method() -> str:
        return "scrutiny()void"


@dataclasses.dataclass(kw_only=True)
class ReviewArgs(_ArgsBase[None]):
    """Review the proposal."""

    block: bool
    """Whether to block the proposal or not"""

    @staticmethod
    def method() -> str:
        return "review(bool)void"


@dataclasses.dataclass(kw_only=True)
class FundArgs(_ArgsBase[str]):
    """Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."""

    @staticmethod
    def method() -> str:
        return "fund()string"


@dataclasses.dataclass(kw_only=True)
class DecommissionArgs(_ArgsBase[None]):
    """Decommission the proposal."""

    voters: list[str]
    """List of voters to be removed"""

    @staticmethod
    def method() -> str:
        return "decommission(address[])void"


@dataclasses.dataclass(kw_only=True)
class ProposalTypedGlobalState:
    proposer: str
    registry_app_id: int
    title: str
    cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    submission_ts: int
    finalization_ts: int
    vote_open_ts: int
    status: int
    funding_category: int
    focus: int
    funding_type: int
    requested_amount: int
    locked_amount: int
    committee_id: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    committee_members: int
    committee_votes: int
    voted_members: int
    approvals: int
    rejections: int
    nulls: int
    cool_down_start_ts: int


@dataclasses.dataclass(kw_only=True)
class GetStateArgs(_ArgsBase[ProposalTypedGlobalState]):
    """Get the proposal state."""

    @staticmethod
    def method() -> str:
        return "get_state()(address,uint64,string,byte[36],uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[36],uint64,uint64,uint64,uint64,uint64,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class CreateArgs(_ArgsBase[None]):
    """Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."""

    proposer: str
    """Address of the proposer"""

    @staticmethod
    def method() -> str:
        return "create(address)void"


@dataclasses.dataclass(kw_only=True)
class DeleteArgs(_ArgsBase[str]):
    """Delete the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."""

    @staticmethod
    def method() -> str:
        return "delete()string"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.approvals = typing.cast(int, data.get(b"approvals"))
        self.assigned_votes = typing.cast(int, data.get(b"assigned_votes"))
        self.cid = ByteReader(typing.cast(bytes, data.get(b"cid")))
        self.committee_id = ByteReader(typing.cast(bytes, data.get(b"committee_id")))
        self.committee_members = typing.cast(int, data.get(b"committee_members"))
        self.committee_votes = typing.cast(int, data.get(b"committee_votes"))
        self.cool_down_start_ts = typing.cast(int, data.get(b"cool_down_start_ts"))
        self.finalization_ts = typing.cast(int, data.get(b"finalization_timestamp"))
        self.focus = typing.cast(int, data.get(b"focus"))
        self.funding_category = typing.cast(int, data.get(b"funding_category"))
        self.funding_type = typing.cast(int, data.get(b"funding_type"))
        self.locked_amount = typing.cast(int, data.get(b"locked_amount"))
        self.nulls = typing.cast(int, data.get(b"nulls"))
        self.proposer = ByteReader(typing.cast(bytes, data.get(b"proposer")))
        self.registry_app_id = typing.cast(int, data.get(b"registry_app_id"))
        self.rejections = typing.cast(int, data.get(b"rejections"))
        self.requested_amount = typing.cast(int, data.get(b"requested_amount"))
        self.status = typing.cast(int, data.get(b"status"))
        self.submission_ts = typing.cast(int, data.get(b"submission_timestamp"))
        self.title = ByteReader(typing.cast(bytes, data.get(b"title")))
        self.vote_open_ts = typing.cast(int, data.get(b"vote_opening_timestamp"))
        self.voted_members = typing.cast(int, data.get(b"voted_members"))
        self.voters_count = typing.cast(int, data.get(b"voters_count"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def submit(
        self,
        *,
        payment: TransactionWithSigner,
        title: str,
        cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        funding_type: int,
        requested_amount: int,
        focus: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Submit the first draft of the proposal.
        
        Adds a call to `submit(pay,string,byte[36],uint64,uint64,uint8)void` ABI method
        
        :param TransactionWithSigner payment: Commitment payment transaction from the proposer to the contract
        :param str title: Proposal title, max TITLE_MAX_BYTES bytes
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] cid: IPFS V1 CID
        :param int funding_type: Funding type (Proactive / Retroactive)
        :param int requested_amount: Requested amount in microAlgos
        :param int focus: Proposal focus area
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SubmitArgs(
            payment=payment,
            title=title,
            cid=cid,
            funding_type=funding_type,
            requested_amount=requested_amount,
            focus=focus,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update(
        self,
        *,
        title: str,
        cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Update the proposal.
        
        Adds a call to `update(string,byte[36])void` ABI method
        
        :param str title: Proposal title, max TITLE_MAX_BYTES bytes
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] cid: IPFS V1 CID
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateArgs(
            title=title,
            cid=cid,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def drop(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Drop the proposal.
        
        Adds a call to `drop()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DropArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def finalize(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Finalize the proposal.
        
        Adds a call to `finalize()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = FinalizeArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def assign_voter(
        self,
        *,
        voter: str,
        voting_power: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Assign a voter to the proposal.
        
        Adds a call to `assign_voter(address,uint64)void` ABI method
        
        :param str voter: Voter address
        :param int voting_power: Voting power
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AssignVoterArgs(
            voter=voter,
            voting_power=voting_power,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def vote(
        self,
        *,
        voter: str,
        approvals: int,
        rejections: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Adds a call to `vote(address,uint64,uint64)string` ABI method
        
        :param str voter: Voter address
        :param int approvals: Number of approvals
        :param int rejections: Number of rejections
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = VoteArgs(
            voter=voter,
            approvals=approvals,
            rejections=rejections,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def scrutiny(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Scrutinize the proposal.
        
        Adds a call to `scrutiny()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ScrutinyArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def review(
        self,
        *,
        block: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Review the proposal.
        
        Adds a call to `review(bool)void` ABI method
        
        :param bool block: Whether to block the proposal or not
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ReviewArgs(
            block=block,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def fund(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Adds a call to `fund()string` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = FundArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def decommission(
        self,
        *,
        voters: list[str],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Decommission the proposal.
        
        Adds a call to `decommission(address[])void` ABI method
        
        :param list[str] voters: List of voters to be removed
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DecommissionArgs(
            voters=voters,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_state(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get the proposal state.
        
        Adds a call to `get_state()(address,uint64,string,byte[36],uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[36],uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetStateArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_create(
        self,
        *,
        proposer: str,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Adds a call to `create(address)void` ABI method
        
        :param str proposer: Address of the proposer
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArgs(
            proposer=proposer,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_delete(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Delete the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Adds a call to `delete()string` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DeleteArgs()
        self.app_client.compose_delete(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class ProposalClient:
    """A class for interacting with the Proposal app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        ProposalClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def submit(
        self,
        *,
        payment: TransactionWithSigner,
        title: str,
        cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        funding_type: int,
        requested_amount: int,
        focus: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Submit the first draft of the proposal.
        
        Calls `submit(pay,string,byte[36],uint64,uint64,uint8)void` ABI method
        
        :param TransactionWithSigner payment: Commitment payment transaction from the proposer to the contract
        :param str title: Proposal title, max TITLE_MAX_BYTES bytes
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] cid: IPFS V1 CID
        :param int funding_type: Funding type (Proactive / Retroactive)
        :param int requested_amount: Requested amount in microAlgos
        :param int focus: Proposal focus area
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SubmitArgs(
            payment=payment,
            title=title,
            cid=cid,
            funding_type=funding_type,
            requested_amount=requested_amount,
            focus=focus,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update(
        self,
        *,
        title: str,
        cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Update the proposal.
        
        Calls `update(string,byte[36])void` ABI method
        
        :param str title: Proposal title, max TITLE_MAX_BYTES bytes
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] cid: IPFS V1 CID
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UpdateArgs(
            title=title,
            cid=cid,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def drop(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Drop the proposal.
        
        Calls `drop()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DropArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def finalize(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Finalize the proposal.
        
        Calls `finalize()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = FinalizeArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def assign_voter(
        self,
        *,
        voter: str,
        voting_power: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Assign a voter to the proposal.
        
        Calls `assign_voter(address,uint64)void` ABI method
        
        :param str voter: Voter address
        :param int voting_power: Voting power
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AssignVoterArgs(
            voter=voter,
            voting_power=voting_power,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def vote(
        self,
        *,
        voter: str,
        approvals: int,
        rejections: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Calls `vote(address,uint64,uint64)string` ABI method
        
        :param str voter: Voter address
        :param int approvals: Number of approvals
        :param int rejections: Number of rejections
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = VoteArgs(
            voter=voter,
            approvals=approvals,
            rejections=rejections,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def scrutiny(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Scrutinize the proposal.
        
        Calls `scrutiny()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ScrutinyArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def review(
        self,
        *,
        block: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Review the proposal.
        
        Calls `review(bool)void` ABI method
        
        :param bool block: Whether to block the proposal or not
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ReviewArgs(
            block=block,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def fund(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Calls `fund()string` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = FundArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def decommission(
        self,
        *,
        voters: list[str],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Decommission the proposal.
        
        Calls `decommission(address[])void` ABI method
        
        :param list[str] voters: List of voters to be removed
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DecommissionArgs(
            voters=voters,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_state(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ProposalTypedGlobalState]:
        """Get the proposal state.
        
        Calls `get_state()(address,uint64,string,byte[36],uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[36],uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ProposalTypedGlobalState]: The proposal state"""

        args = GetStateArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ProposalTypedGlobalState(**result_dict)
        return result

    def create_create(
        self,
        *,
        proposer: str,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Calls `create(address)void` ABI method
        
        :param str proposer: Address of the proposer
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CreateArgs(
            proposer=proposer,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_delete(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Delete the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.
        
        Calls `delete()string` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = DeleteArgs()
        result = self.app_client.delete(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[CreateArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: Deploy[DeleteArgs],
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[CreateArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param Deploy[DeleteArgs] delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
