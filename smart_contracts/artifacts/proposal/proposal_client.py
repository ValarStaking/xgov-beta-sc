# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "address", "desc": "Address of the proposer", "name": "proposer"}], "name": "create", "returns": {"type": "string"}, "desc": "Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "desc": "Commitment payment transaction from the proposer to the contract", "name": "payment"}, {"type": "string", "desc": "Proposal title, max TITLE_MAX_BYTES bytes", "name": "title"}, {"type": "uint64", "desc": "Funding type (Proactive / Retroactive)", "name": "funding_type"}, {"type": "uint64", "desc": "Requested amount in microAlgos", "name": "requested_amount"}, {"type": "uint8", "desc": "Proposal focus area", "name": "focus"}], "name": "open", "returns": {"type": "void"}, "desc": "Open the first draft of the proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "desc": "Metadata payload", "name": "payload"}, {"type": "bool", "desc": "True if this is the first upload call in a group transaction", "name": "is_first_in_group"}], "name": "upload_metadata", "returns": {"type": "void"}, "desc": "Upload the proposal metadata.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "drop", "returns": {"type": "string"}, "desc": "Drop the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "submit", "returns": {"type": "void"}, "desc": "submit the proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(address,uint64)[]", "desc": "List of voter addresses with their voting power", "name": "voters"}], "name": "assign_voters", "returns": {"type": "void"}, "desc": "Assign multiple voters to the proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "Voter address", "name": "voter"}, {"type": "uint64", "desc": "Number of approvals", "name": "approvals"}, {"type": "uint64", "desc": "Number of rejections", "name": "rejections"}], "name": "vote", "returns": {"type": "string"}, "desc": "Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "scrutiny", "returns": {"type": "void"}, "desc": "Scrutinize the proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "bool", "desc": "Whether to block the proposal or not", "name": "block"}], "name": "review", "returns": {"type": "void"}, "desc": "Review the proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "fund", "returns": {"type": "string"}, "desc": "Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address[]", "desc": "List of voters to be unassigned", "name": "voters"}], "name": "unassign_voters", "returns": {"type": "void"}, "desc": "Unassign voters from the proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "finalize", "returns": {"type": "string"}, "desc": "Finalize the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["DeleteApplication"], "create": []}, "args": [], "name": "delete", "returns": {"type": "void"}, "desc": "Delete the proposal.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_state", "returns": {"type": "(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)", "desc": "The proposal state", "struct": "ProposalTypedGlobalState"}, "desc": "Get the proposal state.", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "op_up", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Proposal", "state": {"keys": {"box": {"metadata": {"key": "TQ==", "keyType": "AVMString", "valueType": "AVMBytes"}}, "global": {"proposer": {"key": "cHJvcG9zZXI=", "keyType": "AVMBytes", "valueType": "address"}, "registry_app_id": {"key": "cmVnaXN0cnlfYXBwX2lk", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "title": {"key": "dGl0bGU=", "keyType": "AVMBytes", "valueType": "AVMString"}, "open_ts": {"key": "b3Blbl90aW1lc3RhbXA=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "submission_ts": {"key": "c3VibWlzc2lvbl90aW1lc3RhbXA=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "vote_open_ts": {"key": "dm90ZV9vcGVuaW5nX3RpbWVzdGFtcA==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "status": {"key": "c3RhdHVz", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "finalized": {"key": "ZmluYWxpemVk", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "funding_category": {"key": "ZnVuZGluZ19jYXRlZ29yeQ==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "focus": {"key": "Zm9jdXM=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "funding_type": {"key": "ZnVuZGluZ190eXBl", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "requested_amount": {"key": "cmVxdWVzdGVkX2Ftb3VudA==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "locked_amount": {"key": "bG9ja2VkX2Ftb3VudA==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "committee_id": {"key": "Y29tbWl0dGVlX2lk", "keyType": "AVMBytes", "valueType": "byte[32]"}, "committee_members": {"key": "Y29tbWl0dGVlX21lbWJlcnM=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "committee_votes": {"key": "Y29tbWl0dGVlX3ZvdGVz", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "voted_members": {"key": "dm90ZWRfbWVtYmVycw==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "approvals": {"key": "YXBwcm92YWxz", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "rejections": {"key": "cmVqZWN0aW9ucw==", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "nulls": {"key": "bnVsbHM=", "keyType": "AVMBytes", "valueType": "AVMUint64"}, "voters_count": {"key": "dm90ZXJzX2NvdW50", "keyType": "AVMString", "valueType": "AVMUint64"}, "assigned_votes": {"key": "YXNzaWduZWRfdm90ZXM=", "keyType": "AVMString", "valueType": "AVMUint64"}, "metadata_uploaded": {"key": "bWV0YWRhdGFfdXBsb2FkZWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"voters": {"keyType": "address", "valueType": "VoterBox", "prefix": "Vg=="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 3, "ints": 20}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"ProposalTypedGlobalState": [{"name": "proposer", "type": "address"}, {"name": "registry_app_id", "type": "uint64"}, {"name": "title", "type": "string"}, {"name": "open_ts", "type": "uint64"}, {"name": "submission_ts", "type": "uint64"}, {"name": "vote_open_ts", "type": "uint64"}, {"name": "status", "type": "uint64"}, {"name": "finalized", "type": "bool"}, {"name": "funding_category", "type": "uint64"}, {"name": "focus", "type": "uint8"}, {"name": "funding_type", "type": "uint64"}, {"name": "requested_amount", "type": "uint64"}, {"name": "locked_amount", "type": "uint64"}, {"name": "committee_id", "type": "byte[32]"}, {"name": "committee_members", "type": "uint64"}, {"name": "committee_votes", "type": "uint64"}, {"name": "voted_members", "type": "uint64"}, {"name": "approvals", "type": "uint64"}, {"name": "rejections", "type": "uint64"}, {"name": "nulls", "type": "uint64"}], "VoterBox": [{"name": "votes", "type": "uint64"}, {"name": "voted", "type": "bool"}]}, "byteCode": {"approval": "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", "clear": "CoEBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [1216, 2107, 3101], "errorMessage": "Address length is 32 bytes"}, {"pc": [1833], "errorMessage": "Empty payload"}, {"pc": [2278, 2280, 2485, 2618, 3274], "errorMessage": "Index access is out of bounds"}, {"pc": [2300], "errorMessage": "Invalid Voting Power"}, {"pc": [1666], "errorMessage": "Locked amount is incorrect"}, {"pc": [1099, 1167, 1191, 1591, 1625, 1705, 1743, 2017, 2054, 2096, 2747, 2806, 2866], "errorMessage": "Missing Config"}, {"pc": [2060], "errorMessage": "Missing Metadata"}, {"pc": [652], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [624, 633, 664, 681, 696, 713, 730, 742, 768, 783, 795, 812, 830, 864], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [1193], "errorMessage": "Registry's non-admin methods are paused"}, {"pc": [1632], "errorMessage": "Requested amount is less than the minimum requested amount"}, {"pc": [1637], "errorMessage": "Requested amount is more than the maximum requested amount"}, {"pc": [2021], "errorMessage": "Too early"}, {"pc": [1042, 1297, 1503, 1893, 2205, 2391, 3103, 3145, 3211, 3390, 3573], "errorMessage": "Unauthorized"}, {"pc": [2297], "errorMessage": "Voter Already Assigned"}, {"pc": [2766], "errorMessage": "Voting Ongoing"}, {"pc": [2361], "errorMessage": "Voting Power Mismatch"}, {"pc": [1277], "errorMessage": "Wrong App ID"}, {"pc": [1563], "errorMessage": "Wrong Funding Type"}, {"pc": [397], "errorMessage": "Wrong Global Bytes allocation"}, {"pc": [402], "errorMessage": "Wrong Global UInts allocation"}, {"pc": [406], "errorMessage": "Wrong Local Bytes allocation"}, {"pc": [410], "errorMessage": "Wrong Local UInts allocation"}, {"pc": [1287], "errorMessage": "Wrong Method Call"}, {"pc": [1060, 1519, 2212, 2741, 3111, 3375, 3578], "errorMessage": "Wrong Proposal Status or finalized"}, {"pc": [1660], "errorMessage": "Wrong Receiver"}, {"pc": [1652], "errorMessage": "Wrong Sender"}, {"pc": [1544, 1549], "errorMessage": "Wrong Title length"}, {"pc": [3548, 3553, 3595], "errorMessage": "account funded"}, {"pc": [3128, 3543, 3590], "errorMessage": "application exists"}, {"pc": [868], "errorMessage": "can only call when creating"}, {"pc": [627, 636, 655, 667, 684, 699, 716, 733, 745, 771, 786, 798, 815, 833], "errorMessage": "can only call when not creating"}, {"pc": [2525, 2871, 2920, 3723], "errorMessage": "check self.approvals exists"}, {"pc": [2323, 2354, 3303], "errorMessage": "check self.assigned_votes exists"}, {"pc": [3700], "errorMessage": "check self.committee_id exists"}, {"pc": [2345, 2760, 2811, 3705], "errorMessage": "check self.committee_members exists"}, {"pc": [2359, 2890, 3711], "errorMessage": "check self.committee_votes exists"}, {"pc": [1055, 1514, 1906, 3370, 3394, 3577, 3650], "errorMessage": "check self.finalized exists"}, {"pc": [3667], "errorMessage": "check self.focus exists"}, {"pc": [903, 1975, 2777, 2828, 3661], "errorMessage": "check self.funding_category exists"}, {"pc": [3682], "errorMessage": "check self.funding_type exists"}, {"pc": [1255, 3694], "errorMessage": "check self.locked_amount exists"}, {"pc": [1863, 1867], "errorMessage": "check self.metadata exists"}, {"pc": [2059], "errorMessage": "check self.metadata_uploaded exists"}, {"pc": [2549, 2882, 3735], "errorMessage": "check self.nulls exists"}, {"pc": [1965, 3628], "errorMessage": "check self.open_ts exists"}, {"pc": [1201, 1650, 1929, 2943, 3179, 3532, 3604], "errorMessage": "check self.proposer exists"}, {"pc": [1114, 1163, 1225, 3125, 3540, 3587, 3609], "errorMessage": "check self.registry_app_id exists"}, {"pc": [2537, 2876, 2925, 3729], "errorMessage": "check self.rejections exists"}, {"pc": [3688], "errorMessage": "check self.requested_amount exists"}, {"pc": [1046, 1507, 1897, 2209, 2395, 2737, 3107, 3149, 3202, 3340, 3350, 3360, 3401, 3408, 3417, 3427, 3437, 3522, 3645], "errorMessage": "check self.status exists"}, {"pc": [3634], "errorMessage": "check self.submission_ts exists"}, {"pc": [3615], "errorMessage": "check self.title exists"}, {"pc": [893, 3640], "errorMessage": "check self.vote_open_ts exists"}, {"pc": [2500, 2755, 2901, 3717], "errorMessage": "check self.voted_members exists"}, {"pc": [2483, 2568, 3310], "errorMessage": "check self.voters entry exists"}, {"pc": [2312, 2340, 3292, 3463], "errorMessage": "check self.voters_count exists"}, {"pc": [3674], "errorMessage": "overflow"}, {"pc": [843], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class ProposalTypedGlobalState:
    """Struct for ProposalTypedGlobalState"""
    proposer: str
    registry_app_id: int
    title: str
    open_ts: int
    submission_ts: int
    vote_open_ts: int
    status: int
    finalized: bool
    funding_category: int
    focus: int
    funding_type: int
    requested_amount: int
    locked_amount: int
    committee_id: bytes
    committee_members: int
    committee_votes: int
    voted_members: int
    approvals: int
    rejections: int
    nulls: int

@dataclasses.dataclass(frozen=True)
class VoterBox:
    """Struct for VoterBox"""
    votes: int
    voted: bool


@dataclasses.dataclass(frozen=True, kw_only=True)
class OpenArgs:
    """Dataclass for open arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument
    title: str
    funding_type: int
    requested_amount: int
    focus: int

    @property
    def abi_method_signature(self) -> str:
        return "open(pay,string,uint64,uint64,uint8)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UploadMetadataArgs:
    """Dataclass for upload_metadata arguments"""
    payload: bytes | str
    is_first_in_group: bool

    @property
    def abi_method_signature(self) -> str:
        return "upload_metadata(byte[],bool)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AssignVotersArgs:
    """Dataclass for assign_voters arguments"""
    voters: list[tuple[str, int]]

    @property
    def abi_method_signature(self) -> str:
        return "assign_voters((address,uint64)[])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VoteArgs:
    """Dataclass for vote arguments"""
    voter: str
    approvals: int
    rejections: int

    @property
    def abi_method_signature(self) -> str:
        return "vote(address,uint64,uint64)string"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReviewArgs:
    """Dataclass for review arguments"""
    block: bool

    @property
    def abi_method_signature(self) -> str:
        return "review(bool)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UnassignVotersArgs:
    """Dataclass for unassign_voters arguments"""
    voters: list[str]

    @property
    def abi_method_signature(self) -> str:
        return "unassign_voters(address[])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateArgs:
    """Dataclass for create arguments"""
    proposer: str

    @property
    def abi_method_signature(self) -> str:
        return "create(address)string"


class _ProposalDelete:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def delete(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppDeleteMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete()void",
        }))


class ProposalParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_ProposalDelete":
        return _ProposalDelete(self.app_client)

    def open(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, int, int, int] | OpenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open(pay,string,uint64,uint64,uint8)void",
            "args": method_args,
        }))

    def upload_metadata(
        self,
        args: tuple[bytes | str, bool] | UploadMetadataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "upload_metadata(byte[],bool)void",
            "args": method_args,
        }))

    def drop(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "drop()string",
        }))

    def submit(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "submit()void",
        }))

    def assign_voters(
        self,
        args: tuple[list[tuple[str, int]]] | AssignVotersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "assign_voters((address,uint64)[])void",
            "args": method_args,
        }))

    def vote(
        self,
        args: tuple[str, int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(address,uint64,uint64)string",
            "args": method_args,
        }))

    def scrutiny(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "scrutiny()void",
        }))

    def review(
        self,
        args: tuple[bool] | ReviewArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "review(bool)void",
            "args": method_args,
        }))

    def fund(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund()string",
        }))

    def unassign_voters(
        self,
        args: tuple[list[str]] | UnassignVotersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unassign_voters(address[])void",
            "args": method_args,
        }))

    def finalize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize()string",
        }))

    def get_state(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)",
        }))

    def op_up(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "op_up()void",
        }))

    def create(
        self,
        args: tuple[str] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(address)string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _ProposalDeleteTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def delete(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete()void",
        }))


class ProposalCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_ProposalDeleteTransaction":
        return _ProposalDeleteTransaction(self.app_client)

    def open(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, int, int, int] | OpenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open(pay,string,uint64,uint64,uint8)void",
            "args": method_args,
        }))

    def upload_metadata(
        self,
        args: tuple[bytes | str, bool] | UploadMetadataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "upload_metadata(byte[],bool)void",
            "args": method_args,
        }))

    def drop(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "drop()string",
        }))

    def submit(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "submit()void",
        }))

    def assign_voters(
        self,
        args: tuple[list[tuple[str, int]]] | AssignVotersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "assign_voters((address,uint64)[])void",
            "args": method_args,
        }))

    def vote(
        self,
        args: tuple[str, int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(address,uint64,uint64)string",
            "args": method_args,
        }))

    def scrutiny(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "scrutiny()void",
        }))

    def review(
        self,
        args: tuple[bool] | ReviewArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "review(bool)void",
            "args": method_args,
        }))

    def fund(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund()string",
        }))

    def unassign_voters(
        self,
        args: tuple[list[str]] | UnassignVotersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unassign_voters(address[])void",
            "args": method_args,
        }))

    def finalize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize()string",
        }))

    def get_state(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)",
        }))

    def op_up(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "op_up()void",
        }))

    def create(
        self,
        args: tuple[str] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(address)string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _ProposalDeleteSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def delete(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)


class ProposalSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_ProposalDeleteSend":
        return _ProposalDeleteSend(self.app_client)

    def open(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, int, int, int] | OpenArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "open(pay,string,uint64,uint64,uint8)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def upload_metadata(
        self,
        args: tuple[bytes | str, bool] | UploadMetadataArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "upload_metadata(byte[],bool)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def drop(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "drop()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def submit(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "submit()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def assign_voters(
        self,
        args: tuple[list[tuple[str, int]]] | AssignVotersArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "assign_voters((address,uint64)[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def vote(
        self,
        args: tuple[str, int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(address,uint64,uint64)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def scrutiny(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "scrutiny()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def review(
        self,
        args: tuple[bool] | ReviewArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "review(bool)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def fund(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def unassign_voters(
        self,
        args: tuple[list[str]] | UnassignVotersArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unassign_voters(address[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def finalize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalize()string",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def get_state(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[ProposalTypedGlobalState]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(ProposalTypedGlobalState, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[ProposalTypedGlobalState], parsed_response)

    def op_up(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "op_up()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create(
        self,
        args: tuple[str] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(address)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    proposer: str
    registry_app_id: int
    title: str
    open_ts: int
    submission_ts: int
    vote_open_ts: int
    status: int
    finalized: int
    funding_category: int
    focus: int
    funding_type: int
    requested_amount: int
    locked_amount: int
    committee_id: bytes
    committee_members: int
    committee_votes: int
    voted_members: int
    approvals: int
    rejections: int
    nulls: int
    voters_count: int
    assigned_votes: int
    metadata_uploaded: int

class BoxStateValue(typing.TypedDict):
    """Shape of box state key values"""
    metadata: bytes

class ProposalState:
    """Methods to access state for the current Proposal app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def proposer(self) -> str:
        """Get the current value of the proposer key in global_state state"""
        value = self.app_client.state.global_state.get_value("proposer")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def registry_app_id(self) -> int:
        """Get the current value of the registry_app_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("registry_app_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def title(self) -> str:
        """Get the current value of the title key in global_state state"""
        value = self.app_client.state.global_state.get_value("title")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def open_ts(self) -> int:
        """Get the current value of the open_ts key in global_state state"""
        value = self.app_client.state.global_state.get_value("open_ts")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def submission_ts(self) -> int:
        """Get the current value of the submission_ts key in global_state state"""
        value = self.app_client.state.global_state.get_value("submission_ts")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def vote_open_ts(self) -> int:
        """Get the current value of the vote_open_ts key in global_state state"""
        value = self.app_client.state.global_state.get_value("vote_open_ts")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def status(self) -> int:
        """Get the current value of the status key in global_state state"""
        value = self.app_client.state.global_state.get_value("status")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def finalized(self) -> int:
        """Get the current value of the finalized key in global_state state"""
        value = self.app_client.state.global_state.get_value("finalized")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def funding_category(self) -> int:
        """Get the current value of the funding_category key in global_state state"""
        value = self.app_client.state.global_state.get_value("funding_category")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def focus(self) -> int:
        """Get the current value of the focus key in global_state state"""
        value = self.app_client.state.global_state.get_value("focus")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def funding_type(self) -> int:
        """Get the current value of the funding_type key in global_state state"""
        value = self.app_client.state.global_state.get_value("funding_type")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def requested_amount(self) -> int:
        """Get the current value of the requested_amount key in global_state state"""
        value = self.app_client.state.global_state.get_value("requested_amount")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def locked_amount(self) -> int:
        """Get the current value of the locked_amount key in global_state state"""
        value = self.app_client.state.global_state.get_value("locked_amount")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def committee_id(self) -> bytes:
        """Get the current value of the committee_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("committee_id")
        if isinstance(value, dict) and "byte[32]" in self._struct_classes:
            return _init_dataclass(self._struct_classes["byte[32]"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def committee_members(self) -> int:
        """Get the current value of the committee_members key in global_state state"""
        value = self.app_client.state.global_state.get_value("committee_members")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def committee_votes(self) -> int:
        """Get the current value of the committee_votes key in global_state state"""
        value = self.app_client.state.global_state.get_value("committee_votes")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voted_members(self) -> int:
        """Get the current value of the voted_members key in global_state state"""
        value = self.app_client.state.global_state.get_value("voted_members")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def approvals(self) -> int:
        """Get the current value of the approvals key in global_state state"""
        value = self.app_client.state.global_state.get_value("approvals")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def rejections(self) -> int:
        """Get the current value of the rejections key in global_state state"""
        value = self.app_client.state.global_state.get_value("rejections")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def nulls(self) -> int:
        """Get the current value of the nulls key in global_state state"""
        value = self.app_client.state.global_state.get_value("nulls")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def voters_count(self) -> int:
        """Get the current value of the voters_count key in global_state state"""
        value = self.app_client.state.global_state.get_value("voters_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def assigned_votes(self) -> int:
        """Get the current value of the assigned_votes key in global_state state"""
        value = self.app_client.state.global_state.get_value("assigned_votes")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def metadata_uploaded(self) -> int:
        """Get the current value of the metadata_uploaded key in global_state state"""
        value = self.app_client.state.global_state.get_value("metadata_uploaded")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "VoterBox": VoterBox
        }

    def get_all(self) -> BoxStateValue:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return typing.cast(BoxStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(BoxStateValue, converted)

    @property
    def metadata(self) -> bytes:
        """Get the current value of the metadata key in box state"""
        value = self.app_client.state.box.get_value("metadata")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def voters(self) -> "_MapState[str, VoterBox]":
        """Get values from the voters map in box state"""
        return _MapState(
            self.app_client.state.box,
            "voters",
            self._struct_classes.get("VoterBox")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class ProposalClient:
    """Client for interacting with Proposal smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = ProposalParams(self.app_client)
        self.create_transaction = ProposalCreateTransactionParams(self.app_client)
        self.send = ProposalSend(self.app_client)
        self.state = ProposalState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "ProposalClient":
        return ProposalClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "ProposalClient":
        return ProposalClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "ProposalClient":
        return ProposalClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "ProposalComposer":
        return ProposalComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["open(pay,string,uint64,uint64,uint8)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["upload_metadata(byte[],bool)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["drop()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["submit()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["assign_voters((address,uint64)[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vote(address,uint64,uint64)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["scrutiny()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["review(bool)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["fund()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["unassign_voters(address[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["finalize()string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> ProposalTypedGlobalState | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["op_up()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create(address)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["delete()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | ProposalTypedGlobalState | str:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class ProposalMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        CreateArgs,
        str | None,
    ]
):
    """Parameters for creating Proposal contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class ProposalMethodCallDeleteParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling Proposal contract using ABI"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class ProposalFactory(algokit_utils.TypedAppFactoryProtocol[ProposalMethodCallCreateParams, None, ProposalMethodCallDeleteParams]):
    """Factory for deploying and managing ProposalClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = ProposalFactoryParams(self.app_factory)
        self.create_transaction = ProposalFactoryCreateTransaction(self.app_factory)
        self.send = ProposalFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: ProposalMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: ProposalMethodCallDeleteParams | None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[ProposalClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return ProposalClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> ProposalClient:
        """Get an app client by creator address and name"""
        return ProposalClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> ProposalClient:
        """Get an app client by app ID"""
        return ProposalClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class ProposalFactoryParams:
    """Parameters for creating transactions for Proposal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ProposalFactoryCreateParams(app_factory)
        self.update = ProposalFactoryUpdateParams(app_factory)
        self.delete = ProposalFactoryDeleteParams(app_factory)

class ProposalFactoryCreateParams:
    """Parameters for 'create' operations of Proposal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def open(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, int, int, int] | OpenArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the open(pay,string,uint64,uint64,uint8)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "open(pay,string,uint64,uint64,uint8)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def upload_metadata(
        self,
        args: tuple[bytes | str, bool] | UploadMetadataArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the upload_metadata(byte[],bool)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "upload_metadata(byte[],bool)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def drop(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the drop()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "drop()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def submit(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the submit()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "submit()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def assign_voters(
        self,
        args: tuple[list[tuple[str, int]]] | AssignVotersArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the assign_voters((address,uint64)[])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "assign_voters((address,uint64)[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def vote(
        self,
        args: tuple[str, int, int] | VoteArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the vote(address,uint64,uint64)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "vote(address,uint64,uint64)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def scrutiny(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the scrutiny()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "scrutiny()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def review(
        self,
        args: tuple[bool] | ReviewArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the review(bool)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "review(bool)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def fund(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the fund()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "fund()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def unassign_voters(
        self,
        args: tuple[list[str]] | UnassignVotersArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the unassign_voters(address[])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "unassign_voters(address[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def finalize(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the finalize()string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "finalize()string",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_state(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def op_up(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the op_up()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "op_up()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def create(
        self,
        args: tuple[str] | CreateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create(address)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create(address)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def delete(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the delete()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "delete()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class ProposalFactoryUpdateParams:
    """Parameters for 'update' operations of Proposal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class ProposalFactoryDeleteParams:
    """Parameters for 'delete' operations of Proposal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class ProposalFactoryCreateTransaction:
    """Create transactions for Proposal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ProposalFactoryCreateTransactionCreate(app_factory)


class ProposalFactoryCreateTransactionCreate:
    """Create new instances of Proposal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class ProposalFactorySend:
    """Send calls to Proposal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ProposalFactorySendCreate(app_factory)


class ProposalFactorySendCreate:
    """Send create calls to Proposal contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[ProposalClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return ProposalClient(result[0]), result[1]

    def create(
        self,
        args: tuple[str] | CreateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[ProposalClient, algokit_utils.AppFactoryCreateMethodCallResult[str]]:
            """Creates and sends a transaction using the create(address)string ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "create(address)string",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(str, result.abi_return)
    
            return ProposalClient(client), algokit_utils.AppFactoryCreateMethodCallResult[str](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _ProposalDeleteComposer:
    def __init__(self, composer: "ProposalComposer"):
        self.composer = composer
    def delete(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self.composer._composer.add_app_delete_method_call(
            self.composer.client.params.delete.delete(
                
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "delete()void", v
            )
        )
        return self.composer


class ProposalComposer:
    """Composer for creating transaction groups for Proposal contract calls"""

    def __init__(self, client: "ProposalClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def delete(self) -> "_ProposalDeleteComposer":
        return _ProposalDeleteComposer(self)

    def open(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, int, int, int] | OpenArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.open(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "open(pay,string,uint64,uint64,uint8)void", v
            )
        )
        return self

    def upload_metadata(
        self,
        args: tuple[bytes | str, bool] | UploadMetadataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.upload_metadata(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "upload_metadata(byte[],bool)void", v
            )
        )
        return self

    def drop(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.drop(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "drop()string", v
            )
        )
        return self

    def submit(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.submit(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "submit()void", v
            )
        )
        return self

    def assign_voters(
        self,
        args: tuple[list[tuple[str, int]]] | AssignVotersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.assign_voters(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "assign_voters((address,uint64)[])void", v
            )
        )
        return self

    def vote(
        self,
        args: tuple[str, int, int] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vote(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vote(address,uint64,uint64)string", v
            )
        )
        return self

    def scrutiny(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.scrutiny(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "scrutiny()void", v
            )
        )
        return self

    def review(
        self,
        args: tuple[bool] | ReviewArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.review(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "review(bool)void", v
            )
        )
        return self

    def fund(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.fund(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "fund()string", v
            )
        )
        return self

    def unassign_voters(
        self,
        args: tuple[list[str]] | UnassignVotersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.unassign_voters(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "unassign_voters(address[])void", v
            )
        )
        return self

    def finalize(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.finalize(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "finalize()string", v
            )
        )
        return self

    def get_state(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_state(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_state()(address,uint64,string,uint64,uint64,uint64,uint64,bool,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def op_up(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.op_up(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "op_up()void", v
            )
        )
        return self

    def create(
        self,
        args: tuple[str] | CreateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create(address)string", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "ProposalComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "ProposalComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
