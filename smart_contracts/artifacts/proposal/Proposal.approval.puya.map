{
  "version": 3,
  "sources": [
    "../../proposal/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;AAGY;;AAA6B;;AAA7B;AADJ;AAGO;;AAAuB;;AAAvB;AAAP;AACO;;AAAA;AAAP;AACO;;AAAA;AAAP;AAIQ;;AADJ;;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADe;AADvB;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;AADJ;AADJ;AAMQ;AADJ;AADJ;AAMQ;;AADJ;;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADuB;AAD/B;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAMQ;;AADJ;AADJ;AAQA;;AAAoB;AAApB;AACA;;AAAsB;AAAtB;;AA3GR;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAieK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjeL;;;AAieK;;;AAAA;AAAA;AAcA;;AAAA;AAAA;AAAA;;AAAA;AA/eL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA+eK;;;AAAA;AAAA;AAqDA;;AAAA;AAAA;AAAA;;AAAA;AApiBL;;;AAAA;;;AAoiBK;;;AAAA;AAAA;AAsBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AA0BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAwCA;;AAAA;AAAA;AAAA;;AAAA;AA5nBL;;;AAAA;;;AA4nBK;;;AAAA;AAAA;AAoCA;;AAAA;AAAA;AAAA;;AAAA;AAhqBL;;;AAAA;;;AAAA;;;AAgqBK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AA+CA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AA2CA;;AAAA;AAAA;AAAA;;AAAA;AA1vBL;;;;AAAA;AA0vBK;;;AAAA;AAAA;AA6BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;;AAAA;AAAA;AAAA;;AAAA;AAhzBL;;;AAgzBK;;;AAAA;AAAA;AA8BA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AA71BL;AAAA;AAieA;;;AAQY;;AADJ;AAIA;;AAAA;;AAAA;AACA;;AAA6B;;AAA7B;;AAER;;;AAkCQ;;;AAGI;;AAAA;;;AAAmB;;AAAA;AAAqB;;AAAA;AAD5C;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAGA;;AAAA;;AAAA;;;AAEA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAC2B;;;AAA3B;;AAAA;AAAA;AAGA;;AAA2B;;AAA3B;AACA;AAAoB;AAApB;;AA/MR;;;AAEe;;;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAP;;AAyGR;;;AAEe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AAzGR;;;AASQ;;AAAA;;AAAA;;;AAAA;;AAGI;;AAAgB;AAAhB;AAAA;;;AACG;;AAAgB;AAAhB;AADH;;;;;;;;AADJ;AAMI;;;;;;;;;;;;;;;;;;;;;;AAD0B;;;AAGd;AAAT;AAAP;AAGI;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADgC;;;AAGpB;AAAT;AAAP;AAEO;;AAAA;;AAAA;AAAP;AAEI;;AAAA;AADJ;;;;AA7CR;;;AAEe;;AAAA;AAAsB;;AAAtB;AAAP;AACO;;AAAS;AAAT;AAAP;;;;AA8FR;;;AAKY;AAAA;;AAAA;AAAA;AADY;;AAAA;AAGR;AAAR;AACG;;;AACS;;;;;;;;;;;;;;;;;;;;;;AAAR;;AACJ;;AAAA;;AAAA;;AAAA;;AAAA;AAzCR;;;AAIQ;;AAAuB;;;AAEhB;;AAAA;;AAAkB;AAAA;;AAAA;AAAA;AAAlB;AAAP;AAEI;;AAAA;;AAAoB;;AAApB;AADJ;AAGO;;AAAA;;AAAA;AAAP;;AArBR;;;AAGY;;;;;;;;;;;;;;;;;;;;;;;;;AAD6B;;;AAGjB;AAAT;AAAP;AACO;;AAAA;AAAA;;;AAAP;AAZR;;;AAIe;;AAAA;;AAAA;AAA4B;;;AAA5B;AAAP;AAyBR;;;AAGY;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADgC;;;AAGpB;AAAT;AAAP;AAGI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADiC;;;AAAA;AAAA;;AAGrB;AAAT;AAAP;AAEG;;AAAA;AAAX;;;AACY;AAA8B;AAA9B;;;;AACC;;AAAA;;AAAA;AAAb;;;AACY;AAA8B;AAA9B;;;;AAEA;AAA8B;;AAA9B;;AA+HZ;;;AAeQ;;;AAEiC;;AAAA;;;AAAjC;AAAA;;AAAA;;;AAAA;;AAEA;;AAAA;AAAA;AACA;;AAAA;;AAAA;;AA1OR;;;AAEe;;;AAAP;AACO;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAP;;AAyOR;;;AASQ;;;AAGa;AAAA;;AAAA;AAAA;AADb;;;AAKA;;AAAmB;AAAnB;AACA;;AAAoC;AAApC;AACA;AAA8B;AAA9B;AACA;;AAAmB;;AAAnB;AACA;;AAA0B;AAA1B;AACA;;AAA8B;AAA9B;AACA;;AAA2B;AAA3B;AACA;;AAA2B;AAA3B;AACA;AAAoB;AAApB;;AAjRR;;;AAEe;;;AAAP;AACO;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAP;;AAyJR;;;AAE2B;AAAA;;AAAA;AAAA;AAAnB;;AAAA;AAAA;;;;AAVR;;;AAEQ;;;;;;;;;AAAA;;;AAGQ;;;AAHR;;AA6HR;;;AAcQ;;;AAEA;;;AAEA;AAAoB;AAApB;AACA;;AAA6B;;AAA7B;AAGI;;;;;;;;;;;;;;AADkB;;;AAGN;AAAT;AAAP;AAGI;;;;;;;;;;;;;;;;;;;;;;;;;AADwB;;;AAGZ;AAAT;AAAP;AAKY;;AADJ;;;AADK;AAAA;AAAA;;AAAA;AAAA;AAKF;;AAAA;;;AANX;;;;AA/TR;;;AAGe;;;AAAP;AACO;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAP;AAEsB;;AAA0B;AAAA;;AAAA;AAAA;AAA1B;AAElB;AAAA;AAAA;AAAA;AAD0B;;;AAIvB;AAAP;;AArGR;;;;AAEW;;AAAY;AAAZ;AAAX;;;AAEgB;;;;;;;;;;;;;;;;;;;;;;;;;;;AADW;;;AAAA;;;;;AAGd;;AAAY;AAAZ;AAAb;;;AAEgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADW;;;AAAA;;;;;AAKX;;;;;;;;;;;;;;;;;;;;;;;;;;;AADW;;;AAAA;;AAGZ;;AAAS;AAAT;AAAP;AACA;AAAA;AAmDR;;;AAIgD;;AAApC;;;AAEG;AAA2C;AAA3C;AAAP;AAGI;;AADuB;;;AAGX;AAAT;AAAP;AACA;AAAA;AAGI;;AADqB;;;AAGT;AAAT;AAAP;AACA;AAAA;AAEA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;AAAA;;AAiIR;;;AAGY;AAAA;;AAAA;AAAA;AADY;;AAAA;AAGhB;AACA;AAmMR;;;AAiBQ;;;AAEiD;;AAAA;AAAjD;;AAAA;;AAAA;;;AAE4B;;AAElB;;AAFkB;AAA5B;;AAAA;;AAAA;AAAA;AAAA;AAKA;AAAA;;AAAA;AAAA;AAAqB;AAArB;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEG;AAAA;;AAAA;AAAA;AAAqB;AAAA;;AAAA;AAAA;AAArB;AAAX;;;AAEgB;AAAA;;AAAA;AAAA;AAAuB;AAAA;;AAAA;AAAA;AAAvB;AADJ;AAGA;AAAoB;;AAApB;AACA;;AAA0B;;AAA1B;;AAhdZ;;;AAEe;;;AAAP;AACO;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAP;;AAwPR;;;AAEe;;AAEC;;AADJ;;;AADiB;AAAA;AAAA;;AAAA;AAAA;AAAd;AAAP;AAxPR;;;AAI4B;;AAAb;;AAAA;AAAA;AAAA;;AAAA;AAAP;AACA;;AAAA;;AAwcR;;;;;AAqBgB;;;AAAR;AACY;AAAT;AAAX;;;AACY;;AAAA;;AAAA;AAGc;;AAAA;AAAA;AAAA;;AAAkB;;AAAA;AAAA;AAAA;;AADpC;;AAAA;;AAAQ;;;AAAR;AAAA;;AAGY;AAAT;AAAX;;;AACY;;AAAA;;AAAA;AAEQ;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEF;;;AADkB;AAElB;;;AAFkB;AAA5B;;AAAA;AAAA;AAKA;AAAA;;AAAA;AAAA;AAA4B;AAA5B;AAAA;;AAAA;AAAA;AAEQ;AAAA;;AAAA;AAAA;;AAAA;AAAR;;AAAA;AAAA;;AAAQ;AAER;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEO;AAAP;;AAAA;AA5iBR;;;;;AAEe;;;AAAP;AAEG;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAX;;;AACmB;;AAAP;;AAAA;AAEoB;;;AAAA;AAAA;;AAAA;;AAAA;;AACZ;AAAT;AAAX;;;AACY;AAED;;AAAA;;;AACQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAEG;AAAP;;AAAA;AAkSR;;;AAEe;;AAAgC;AAAA;;AAAA;AAAA;AAAhC;AAAP;AAtWR;;;AAE0B;;AAA0B;AAAA;;AAAA;AAAA;AAA1B;AAEd;AAAA;AAAA;AAAA;AAD6B;;;AAAA;AAAA;;AAAA;AAGrB;AAAT;AAAX;;;AACmB;AAAP;;AAAA;AAEG;;AAAA;;AAAA;AAA4C;AAAnD;;AAAA;;AAAA;AAqHR;;;AAEW;;AAAY;AAAZ;AAAX;;;AAEgB;;;;;;;;;;;;;;;;;;;;;;;AADG;;;AAAP;AAGC;;AAAY;AAAZ;AAAb;;;AAEgB;;;;;;;;;;;;;;;;;;;;;;;;AADG;;;AAAP;AAKI;;;;;;;;;;;;;;;;;;;;;;;AADG;;;AAAP;AArEZ;;;;AAIwB;;AAAb;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AACQ;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAEQ;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACT;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAX;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAEwB;;AAAA;;;AAAzB;;AAAA;;AAAA;AAAA;AAAA;AAAX;;;AACmB;;;;;;;;;;;;;;;;;;;;;;AAAP;;AAAA;AAEG;AAAP;;AAAA;AAghBR;;;AAUQ;;;AAI6B;AAAA;AAAA;AAAA;AAAhB;;;AAET;AAAA;;AAAA;AAAA;AADJ;AAA0B;;;AAMqB;AAAA;AAAA;AAAA;AAAzB;;;AACR;AAAA;;AAAA;AAAA;AAAuB;AAAA;;AAAA;AAAA;AAAvB;AAA+C;AAAA;;AAAA;AAAA;AAA/C;AAAd;;AAEI;AAAA;;AAAA;AAAA;AADJ;AAAyB;;;AAAzB;AAKI;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AACI;;AAAA;;AAAA;AADJ;;;AAII;AAAA;;AAAA;AAAA;AAAuB;AAAA;;AAAA;AAAA;AAAvB;AAJJ;;;AAMA;AAAoB;;AAApB;;;;AAEA;AAAoB;;AAApB;AAEa;AAAA;;AAAA;AAAA;AADb;;;AAGA;;AAA2B;AAA3B;AACA;;AAAgC;;AAAhC;;AAvjBZ;;;AAEe;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAP;AAEwB;;;AACR;AAAT;AAAP;AAGI;;;AACG;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AADA;AADH;;;;;;;;AADJ;;AAkDR;;;;AAEW;;AAAY;AAAZ;AAAX;;;AAEgB;;;;;;;;;;;;;;AADW;;;AAAA;;;;;AAGd;;AAAY;AAAZ;AAAb;;;AAEgB;;;;;;;;;;;;;;;AADW;;;AAAA;;;;;AAKX;;;;;;;;;;;;;;AADW;;;AAAA;;AAGZ;;AAAS;AAAT;AAAP;AACA;AAAA;AAER;;;;AAEW;;AAAY;AAAZ;AAAX;;;AAEgB;;;;;;;;;;;;;;;;;;;;;;;AADW;;;AAAA;;;;;AAGd;;AAAY;AAAZ;AAAb;;;AAEgB;;;;;;;;;;;;;;;;;;;;;;;;AADW;;;AAAA;;;;;AAKX;;;;;;;;;;;;;;;;;;;;;;;AADW;;;AAAA;;AAGZ;;AAAS;AAAT;AAAP;AACA;AAAA;AAgeR;;;AAaQ;;;AAER;;AAAA;;;AACY;AAAoB;;AAApB;AAGsB;AAAA;;AAAA;AAAA;AAET;;AAAA;AADb;;;AAIA;;AAA2B;AAA3B;AACA;;AAAgC;;AAAhC;;;;AAEA;AAAoB;;AAApB;;AA7pBZ;;;AAEe;;;AAAP;AACO;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAP;;AAwUR;;;AAEe;;AACiC;;;;;;;;;;;;;;;AAApC;;;AADiB;AAAA;AAAA;;AAAA;AAAA;AAAd;AAAP;AAkVR;;;AASgB;;;AAAR;AACY;AAAT;AAAX;;;AACY;;AAAA;AAAA;AAEJ;AAAoB;;AAApB;AAIa;AAAA;;AAAA;AAAA;AADb;;;AAIA;;AAA2B;AAA3B;AACA;;AAAgC;;AAAhC;AAEO;AAAP;AAAA;AAjrBR;;;AAEe;;;AAAP;AACG;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAX;;;AACmB;;AAAP;AAEG;AAAP;AA6qBR;;;;AAcQ;;;AAGR;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAC+B;;AAAhB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAf;;;AACgB;;AAAA;;;;;;;;;;;AAGL;;AAAA;;AAAA;AAAX;;;AACkC;AAAA;;AAAA;AAAA;AAET;;AAAA;AACF;;AAAA;;AAAA;AAFX;;;AAIA;AAAoB;;AAApB;;AAvsBZ;;;;AAEe;;;AAAP;AAGI;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAA;;;AACG;AAAA;AAAA;AAAA;AAAqB;;AAArB;AADH;;;AAEG;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAFH;;;;;;;;AAFJ;AAQI;;;;;;;;;;;;;;;;;;;;AADuB;;;AAAA;AAAA;;AAGX;AAAT;AAAP;AAEI;AAAA;;AAAA;AAAA;AAAA;;;AACI;;AACD;AAAA;;AAAA;AAAA;AAAA;;AAAA;AADC;AADJ;;;;;;;;AADJ;;AA2rBR;;;AASgB;;;AAAR;AACY;AAAT;AAAX;;;AACY;;AAAA;AAAA;AAEG;AAAP;AAAA;AAlsBR;;;AAEe;;;AAAP;AACG;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAX;;;AACmB;;AAAP;AAEG;AAAP;AA8rBR;;;AASkC;AAAA;;AAAA;AAAA;AACM;AAAA;;AAAA;AAAA;AAAZ;AACE;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACF;AAAA;;AAAA;AAAA;AACsB;AAAA;;AAAA;AAAA;AAAZ;AACc;AAAA;;AAAA;AAAA;AAAZ;AACS;AAAA;;AAAA;AAAA;AAAZ;AACM;AAAA;AAAA;AAAA;AAAZ;AACsB;AAAA;AAAA;AAAA;AAAZ;AACX;AAAA;;AAAA;AAAA;AACmB;AAAA;;AAAA;AAAA;AAAZ;AACgB;AAAA;;AAAA;AAAA;AAAZ;AACS;AAAA;;AAAA;AAAA;AAAZ;AACD;AAAA;;AAAA;AAAA;AACiB;AAAA;;AAAA;AAAA;AAAZ;AACU;AAAA;;AAAA;AAAA;AAAZ;AACU;AAAA;;AAAA;AAAA;AAAZ;AACQ;AAAA;;AAAA;AAAA;AAAZ;AACa;AAAA;;AAAA;AAAA;AAAZ;AACO;AAAA;;AAAA;AAAA;AAAZ;AACyB;AAAA;;AAAA;AAAA;AAAZ;AArBhB;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.approval_program",
      "params": {},
      "block": "smart_contracts.proposal.contract.Proposal.approval_program",
      "stack_in": [],
      "op": "intcblock 0 1 10 20"
    },
    "7": {
      "op": "bytecblock 0x0000 0x737461747573 0x 0x66756e64696e675f63617465676f7279 0x70726f706f736572 0x72656769737472795f6170705f6964 0x6c6f636b65645f616d6f756e74 0x636f6d6d69747465655f6d656d62657273 0x636f6f6c5f646f776e5f73746172745f7473 0x636f6d6d69747465655f766f746573 0x766f7465645f6d656d62657273 0x617070726f76616c73 0x72656a656374696f6e73 0x7469746c65 0x636964 0x7375626d697373696f6e5f74696d657374616d70 0x00 0x6e756c6c73 \"V\" 0x766f74655f6f70656e696e675f74696d657374616d70 0x666f637573 0x66756e64696e675f74797065 0x7265717565737465645f616d6f756e74 0x636f6d6d69747465655f6964 \"voters_count\" \"assigned_votes\" 0x151f7c75 0x66696e616c697a6174696f6e5f74696d657374616d70 0x00194552523a57726f6e672050726f706f73616c20537461747573 0x636f6d6d69747465655f7075626c6973686572"
    },
    "381": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "383": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "386": {
      "callsub": "smart_contracts.proposal.contract.Proposal.__init__",
      "op": "callsub __init__"
    },
    "389": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "smart_contracts.proposal.contract.Proposal.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "392": {
      "op": "return",
      "stack_out": []
    },
    "393": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "396": {
      "op": "txn GlobalNumByteSlice",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "398": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "5"
      ]
    },
    "400": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "401": {
      "error": "Wrong Global Bytes allocation",
      "op": "assert // Wrong Global Bytes allocation",
      "stack_out": []
    },
    "402": {
      "op": "txn GlobalNumUint",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "404": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "18"
      ]
    },
    "406": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "407": {
      "error": "Wrong Global UInts allocation",
      "op": "assert // Wrong Global UInts allocation",
      "stack_out": []
    },
    "408": {
      "op": "txn LocalNumByteSlice",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "410": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "411": {
      "error": "Wrong Local Bytes allocation",
      "op": "assert // Wrong Local Bytes allocation",
      "stack_out": []
    },
    "412": {
      "op": "txn LocalNumUint",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "414": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "415": {
      "error": "Wrong Local UInts allocation",
      "op": "assert // Wrong Local UInts allocation",
      "stack_out": []
    },
    "416": {
      "op": "bytec 4 // 0x70726f706f736572"
    },
    "418": {
      "op": "global ZeroAddress",
      "defined_out": [
        "0x70726f706f736572",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "0x70726f706f736572",
        "new_state_value%0#0"
      ]
    },
    "420": {
      "op": "app_global_put",
      "stack_out": []
    },
    "421": {
      "op": "bytec 5 // 0x72656769737472795f6170705f6964",
      "defined_out": [
        "0x72656769737472795f6170705f6964"
      ],
      "stack_out": [
        "0x72656769737472795f6170705f6964"
      ]
    },
    "423": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x72656769737472795f6170705f6964"
      ],
      "stack_out": [
        "0x72656769737472795f6170705f6964",
        "0"
      ]
    },
    "424": {
      "op": "app_global_put",
      "stack_out": []
    },
    "425": {
      "op": "bytec 13 // 0x7469746c65",
      "defined_out": [
        "0x7469746c65"
      ],
      "stack_out": [
        "0x7469746c65"
      ]
    },
    "427": {
      "op": "bytec_2 // \"\"",
      "defined_out": [
        "\"\"",
        "0x7469746c65"
      ],
      "stack_out": [
        "0x7469746c65",
        "\"\""
      ]
    },
    "428": {
      "op": "app_global_put",
      "stack_out": []
    },
    "429": {
      "op": "bytec 14 // 0x636964",
      "defined_out": [
        "0x636964"
      ],
      "stack_out": [
        "0x636964"
      ]
    },
    "431": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "0x636964"
      ],
      "stack_out": [
        "0x636964",
        "0x"
      ]
    },
    "432": {
      "op": "app_global_put",
      "stack_out": []
    },
    "433": {
      "op": "bytec 15 // 0x7375626d697373696f6e5f74696d657374616d70",
      "defined_out": [
        "0x7375626d697373696f6e5f74696d657374616d70"
      ],
      "stack_out": [
        "0x7375626d697373696f6e5f74696d657374616d70"
      ]
    },
    "435": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x7375626d697373696f6e5f74696d657374616d70",
        "0"
      ]
    },
    "436": {
      "op": "app_global_put",
      "stack_out": []
    },
    "437": {
      "op": "bytec 27 // 0x66696e616c697a6174696f6e5f74696d657374616d70",
      "defined_out": [
        "0x66696e616c697a6174696f6e5f74696d657374616d70"
      ],
      "stack_out": [
        "0x66696e616c697a6174696f6e5f74696d657374616d70"
      ]
    },
    "439": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x66696e616c697a6174696f6e5f74696d657374616d70",
        "0"
      ]
    },
    "440": {
      "op": "app_global_put",
      "stack_out": []
    },
    "441": {
      "op": "bytec 19 // 0x766f74655f6f70656e696e675f74696d657374616d70",
      "defined_out": [
        "0x766f74655f6f70656e696e675f74696d657374616d70"
      ],
      "stack_out": [
        "0x766f74655f6f70656e696e675f74696d657374616d70"
      ]
    },
    "443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f74655f6f70656e696e675f74696d657374616d70",
        "0"
      ]
    },
    "444": {
      "op": "app_global_put",
      "stack_out": []
    },
    "445": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "0x737461747573"
      ]
    },
    "446": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x737461747573",
        "0"
      ]
    },
    "447": {
      "op": "app_global_put",
      "stack_out": []
    },
    "448": {
      "op": "bytec_3 // 0x66756e64696e675f63617465676f7279",
      "defined_out": [
        "0x66756e64696e675f63617465676f7279"
      ],
      "stack_out": [
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "449": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x66756e64696e675f63617465676f7279",
        "0"
      ]
    },
    "450": {
      "op": "app_global_put",
      "stack_out": []
    },
    "451": {
      "op": "bytec 20 // 0x666f637573",
      "defined_out": [
        "0x666f637573"
      ],
      "stack_out": [
        "0x666f637573"
      ]
    },
    "453": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "0x666f637573"
      ],
      "stack_out": [
        "0x666f637573",
        "0x00"
      ]
    },
    "455": {
      "op": "app_global_put",
      "stack_out": []
    },
    "456": {
      "op": "bytec 21 // 0x66756e64696e675f74797065",
      "defined_out": [
        "0x66756e64696e675f74797065"
      ],
      "stack_out": [
        "0x66756e64696e675f74797065"
      ]
    },
    "458": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x66756e64696e675f74797065",
        "0"
      ]
    },
    "459": {
      "op": "app_global_put",
      "stack_out": []
    },
    "460": {
      "op": "bytec 22 // 0x7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x7265717565737465645f616d6f756e74"
      ]
    },
    "462": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x7265717565737465645f616d6f756e74",
        "0"
      ]
    },
    "463": {
      "op": "app_global_put",
      "stack_out": []
    },
    "464": {
      "op": "bytec 6 // 0x6c6f636b65645f616d6f756e74",
      "defined_out": [
        "0x6c6f636b65645f616d6f756e74"
      ],
      "stack_out": [
        "0x6c6f636b65645f616d6f756e74"
      ]
    },
    "466": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6c6f636b65645f616d6f756e74",
        "0"
      ]
    },
    "467": {
      "op": "app_global_put",
      "stack_out": []
    },
    "468": {
      "op": "bytec 23 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "470": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "0x636f6d6d69747465655f6964",
        "0x"
      ]
    },
    "471": {
      "op": "app_global_put",
      "stack_out": []
    },
    "472": {
      "op": "bytec 7 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "474": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "0"
      ]
    },
    "475": {
      "op": "app_global_put",
      "stack_out": []
    },
    "476": {
      "op": "bytec 9 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "0"
      ]
    },
    "479": {
      "op": "app_global_put",
      "stack_out": []
    },
    "480": {
      "op": "bytec 10 // 0x766f7465645f6d656d62657273",
      "defined_out": [
        "0x766f7465645f6d656d62657273"
      ],
      "stack_out": [
        "0x766f7465645f6d656d62657273"
      ]
    },
    "482": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x766f7465645f6d656d62657273",
        "0"
      ]
    },
    "483": {
      "op": "app_global_put",
      "stack_out": []
    },
    "484": {
      "op": "bytec 11 // 0x617070726f76616c73",
      "defined_out": [
        "0x617070726f76616c73"
      ],
      "stack_out": [
        "0x617070726f76616c73"
      ]
    },
    "486": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x617070726f76616c73",
        "0"
      ]
    },
    "487": {
      "op": "app_global_put",
      "stack_out": []
    },
    "488": {
      "op": "bytec 12 // 0x72656a656374696f6e73",
      "defined_out": [
        "0x72656a656374696f6e73"
      ],
      "stack_out": [
        "0x72656a656374696f6e73"
      ]
    },
    "490": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x72656a656374696f6e73",
        "0"
      ]
    },
    "491": {
      "op": "app_global_put",
      "stack_out": []
    },
    "492": {
      "op": "bytec 17 // 0x6e756c6c73",
      "defined_out": [
        "0x6e756c6c73"
      ],
      "stack_out": [
        "0x6e756c6c73"
      ]
    },
    "494": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6e756c6c73",
        "0"
      ]
    },
    "495": {
      "op": "app_global_put",
      "stack_out": []
    },
    "496": {
      "op": "bytec 8 // 0x636f6f6c5f646f776e5f73746172745f7473",
      "defined_out": [
        "0x636f6f6c5f646f776e5f73746172745f7473"
      ],
      "stack_out": [
        "0x636f6f6c5f646f776e5f73746172745f7473"
      ]
    },
    "498": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x636f6f6c5f646f776e5f73746172745f7473",
        "0"
      ]
    },
    "499": {
      "op": "app_global_put",
      "stack_out": []
    },
    "500": {
      "op": "bytec 24 // \"voters_count\"",
      "defined_out": [
        "\"voters_count\""
      ],
      "stack_out": [
        "\"voters_count\""
      ]
    },
    "502": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"voters_count\"",
        "0"
      ]
    },
    "503": {
      "op": "app_global_put",
      "stack_out": []
    },
    "504": {
      "op": "bytec 25 // \"assigned_votes\"",
      "defined_out": [
        "\"assigned_votes\""
      ],
      "stack_out": [
        "\"assigned_votes\""
      ]
    },
    "506": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"assigned_votes\"",
        "0"
      ]
    },
    "507": {
      "op": "app_global_put",
      "stack_out": []
    },
    "508": {
      "retsub": true,
      "op": "retsub"
    },
    "509": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "512": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "514": {
      "op": "bz __puya_arc4_router___after_if_else@18",
      "stack_out": []
    },
    "517": {
      "op": "pushbytess 0xcc694eaa 0x0f277635 0x43f37dfa 0x5fcdfdee 0x23d8b7ce 0x74e6557e 0x1841a0d2 0x734dbecc 0x212d9f07 0x8a5e4c80 0x461b5751 0x1feb95da 0xe0ad5df2 // method \"create(address)void\", method \"submit(pay,string,byte[59],uint64,uint64,uint8)void\", method \"update(string,byte[59])void\", method \"drop()void\", method \"finalize()void\", method \"assign_voter(address,uint64)void\", method \"vote(address,uint64,uint64)string\", method \"scrutiny()void\", method \"review(bool)void\", method \"fund()string\", method \"decommission(address[])void\", method \"delete()string\", method \"get_state()(address,uint64,string,byte[59],uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64)\""
    },
    "584": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(assign_voter(address,uint64)void)",
        "Method(create(address)void)",
        "Method(decommission(address[])void)",
        "Method(delete()string)",
        "Method(drop()void)",
        "Method(finalize()void)",
        "Method(fund()string)",
        "Method(get_state()(address,uint64,string,byte[59],uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(review(bool)void)",
        "Method(scrutiny()void)",
        "Method(submit(pay,string,byte[59],uint64,uint64,uint8)void)",
        "Method(update(string,byte[59])void)",
        "Method(vote(address,uint64,uint64)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(address)void)",
        "Method(submit(pay,string,byte[59],uint64,uint64,uint8)void)",
        "Method(update(string,byte[59])void)",
        "Method(drop()void)",
        "Method(finalize()void)",
        "Method(assign_voter(address,uint64)void)",
        "Method(vote(address,uint64,uint64)string)",
        "Method(scrutiny()void)",
        "Method(review(bool)void)",
        "Method(fund()string)",
        "Method(decommission(address[])void)",
        "Method(delete()string)",
        "Method(get_state()(address,uint64,string,byte[59],uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "587": {
      "op": "match __puya_arc4_router___create_route@2 __puya_arc4_router___submit_route@3 __puya_arc4_router___update_route@4 __puya_arc4_router___drop_route@5 __puya_arc4_router___finalize_route@6 __puya_arc4_router___assign_voter_route@7 __puya_arc4_router___vote_route@8 __puya_arc4_router___scrutiny_route@9 __puya_arc4_router___review_route@10 __puya_arc4_router___fund_route@11 __puya_arc4_router___decommission_route@12 __puya_arc4_router___delete_route@13 __puya_arc4_router___get_state_route@14",
      "stack_out": []
    },
    "615": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "616": {
      "retsub": true,
      "op": "retsub"
    },
    "617": {
      "block": "__puya_arc4_router___create_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "619": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "620": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "621": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "623": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "624": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "625": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "628": {
      "callsub": "smart_contracts.proposal.contract.Proposal.create",
      "op": "callsub create",
      "stack_out": []
    },
    "631": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "632": {
      "retsub": true,
      "op": "retsub"
    },
    "633": {
      "block": "__puya_arc4_router___submit_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "635": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "636": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "637": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "639": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "640": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "642": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "1"
      ]
    },
    "643": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "644": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "645": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "647": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "648": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "649": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "650": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0"
      ]
    },
    "653": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "656": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "659": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "662": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "665": {
      "callsub": "smart_contracts.proposal.contract.Proposal.submit",
      "op": "callsub submit",
      "stack_out": []
    },
    "668": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "669": {
      "retsub": true,
      "op": "retsub"
    },
    "670": {
      "block": "__puya_arc4_router___update_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "672": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "673": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "674": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "676": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "677": {
      "op": "txna ApplicationArgs 1"
    },
    "680": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "683": {
      "callsub": "smart_contracts.proposal.contract.Proposal.update",
      "op": "callsub update",
      "stack_out": []
    },
    "686": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "687": {
      "retsub": true,
      "op": "retsub"
    },
    "688": {
      "block": "__puya_arc4_router___drop_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "690": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "691": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "692": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "694": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "695": {
      "callsub": "smart_contracts.proposal.contract.Proposal.drop",
      "op": "callsub drop"
    },
    "698": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "699": {
      "retsub": true,
      "op": "retsub"
    },
    "700": {
      "block": "__puya_arc4_router___finalize_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "702": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "703": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "704": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "706": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "707": {
      "callsub": "smart_contracts.proposal.contract.Proposal.finalize",
      "op": "callsub finalize"
    },
    "710": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "711": {
      "retsub": true,
      "op": "retsub"
    },
    "712": {
      "block": "__puya_arc4_router___assign_voter_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "714": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "715": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "716": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "718": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "719": {
      "op": "txna ApplicationArgs 1"
    },
    "722": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "725": {
      "callsub": "smart_contracts.proposal.contract.Proposal.assign_voter",
      "op": "callsub assign_voter",
      "stack_out": []
    },
    "728": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "729": {
      "retsub": true,
      "op": "retsub"
    },
    "730": {
      "block": "__puya_arc4_router___vote_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "732": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "733": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "734": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "736": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "737": {
      "op": "txna ApplicationArgs 1"
    },
    "740": {
      "op": "txna ApplicationArgs 2"
    },
    "743": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "746": {
      "callsub": "smart_contracts.proposal.contract.Proposal.vote",
      "op": "callsub vote",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "749": {
      "op": "bytec 26 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "0x151f7c75"
      ]
    },
    "751": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%45#0"
      ]
    },
    "752": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "753": {
      "op": "log",
      "stack_out": []
    },
    "754": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "755": {
      "retsub": true,
      "op": "retsub"
    },
    "756": {
      "block": "__puya_arc4_router___scrutiny_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "758": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "759": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "760": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "762": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "763": {
      "callsub": "smart_contracts.proposal.contract.Proposal.scrutiny",
      "op": "callsub scrutiny"
    },
    "766": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "767": {
      "retsub": true,
      "op": "retsub"
    },
    "768": {
      "block": "__puya_arc4_router___review_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "770": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "771": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "772": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "774": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "775": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "778": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "0"
      ]
    },
    "779": {
      "op": "getbit",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "780": {
      "callsub": "smart_contracts.proposal.contract.Proposal.review",
      "op": "callsub review",
      "stack_out": []
    },
    "783": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "784": {
      "retsub": true,
      "op": "retsub"
    },
    "785": {
      "block": "__puya_arc4_router___fund_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "787": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "788": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "789": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "791": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "792": {
      "callsub": "smart_contracts.proposal.contract.Proposal.fund",
      "op": "callsub fund",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "795": {
      "op": "bytec 26 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "0x151f7c75"
      ]
    },
    "797": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%61#0"
      ]
    },
    "798": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "799": {
      "op": "log",
      "stack_out": []
    },
    "800": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "801": {
      "retsub": true,
      "op": "retsub"
    },
    "802": {
      "block": "__puya_arc4_router___decommission_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "804": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "805": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "806": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "808": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "809": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "812": {
      "callsub": "smart_contracts.proposal.contract.Proposal.decommission",
      "op": "callsub decommission",
      "stack_out": []
    },
    "815": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "816": {
      "retsub": true,
      "op": "retsub"
    },
    "817": {
      "block": "__puya_arc4_router___delete_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "819": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "DeleteApplication"
      ]
    },
    "821": {
      "op": "==",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "822": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "823": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "825": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "826": {
      "callsub": "smart_contracts.proposal.contract.Proposal.delete",
      "op": "callsub delete",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "829": {
      "op": "bytec 26 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "0x151f7c75"
      ]
    },
    "831": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%72#0"
      ]
    },
    "832": {
      "op": "concat",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "833": {
      "op": "log",
      "stack_out": []
    },
    "834": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "835": {
      "retsub": true,
      "op": "retsub"
    },
    "836": {
      "block": "__puya_arc4_router___get_state_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "838": {
      "op": "!",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "839": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "840": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "842": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "843": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_state",
      "op": "callsub get_state",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "846": {
      "op": "bytec 26 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0",
        "0x151f7c75"
      ]
    },
    "848": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%78#0"
      ]
    },
    "849": {
      "op": "concat",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "850": {
      "op": "log",
      "stack_out": []
    },
    "851": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "852": {
      "retsub": true,
      "op": "retsub"
    },
    "853": {
      "block": "__puya_arc4_router___after_if_else@18",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "854": {
      "retsub": true,
      "op": "retsub"
    },
    "855": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.create",
      "params": {
        "proposer#0": "bytes"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "858": {
      "op": "global CallerApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "860": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "861": {
      "op": "bytec 4 // 0x70726f706f736572",
      "defined_out": [
        "0x70726f706f736572"
      ],
      "stack_out": [
        "0x70726f706f736572"
      ]
    },
    "863": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x70726f706f736572",
        "proposer#0 (copy)"
      ],
      "stack_out": [
        "0x70726f706f736572",
        "proposer#0 (copy)"
      ]
    },
    "865": {
      "op": "app_global_put",
      "stack_out": []
    },
    "866": {
      "op": "bytec 5 // 0x72656769737472795f6170705f6964"
    },
    "868": {
      "op": "global CallerApplicationID",
      "defined_out": [
        "0x72656769737472795f6170705f6964",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "0x72656769737472795f6170705f6964",
        "new_state_value%0#0"
      ]
    },
    "870": {
      "op": "app_global_put",
      "stack_out": []
    },
    "871": {
      "retsub": true,
      "op": "retsub"
    },
    "872": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.submit",
      "params": {
        "payment#0": "uint64",
        "title#0": "bytes",
        "cid#0": "bytes",
        "funding_type#0": "bytes",
        "requested_amount#0": "bytes",
        "focus#0": "bytes"
      },
      "block": "submit",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "875": {
      "callsub": "smart_contracts.proposal.contract.Proposal.submit_check_authorization",
      "op": "callsub submit_check_authorization"
    },
    "878": {
      "op": "frame_dig -5",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "880": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "883": {
      "op": "frame_dig -3",
      "defined_out": [
        "funding_type#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "funding_type#0 (copy)"
      ]
    },
    "885": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "886": {
      "op": "frame_dig -2",
      "defined_out": [
        "requested_amount#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "requested_amount#0 (copy)"
      ]
    },
    "888": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "889": {
      "op": "dig 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "891": {
      "op": "frame_dig -4",
      "defined_out": [
        "cid#0 (copy)",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0 (copy)",
        "cid#0 (copy)"
      ]
    },
    "893": {
      "op": "dig 3",
      "defined_out": [
        "cid#0 (copy)",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0 (copy)",
        "cid#0 (copy)",
        "tmp%1#0 (copy)"
      ]
    },
    "895": {
      "op": "dig 3",
      "defined_out": [
        "cid#0 (copy)",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0 (copy)",
        "cid#0 (copy)",
        "tmp%1#0 (copy)",
        "tmp%2#0 (copy)"
      ]
    },
    "897": {
      "callsub": "smart_contracts.proposal.contract.Proposal.submit_input_validation",
      "op": "callsub submit_input_validation",
      "defined_out": [
        "cid#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "cid#0"
      ]
    },
    "900": {
      "op": "frame_bury -4",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "902": {
      "op": "frame_dig -6",
      "defined_out": [
        "payment#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "payment#0 (copy)"
      ]
    },
    "904": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "payment#0 (copy)",
        "tmp%2#0 (copy)"
      ]
    },
    "906": {
      "callsub": "smart_contracts.proposal.contract.Proposal.submit_payment_validation",
      "op": "callsub submit_payment_validation",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "909": {
      "op": "bytec 13 // 0x7469746c65",
      "defined_out": [
        "0x7469746c65",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "0x7469746c65"
      ]
    },
    "911": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "0x7469746c65",
        "tmp%0#0"
      ]
    },
    "913": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "914": {
      "op": "bytec 14 // 0x636964",
      "defined_out": [
        "0x636964",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "0x636964"
      ]
    },
    "916": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "0x636964",
        "cid#0 (copy)"
      ]
    },
    "918": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "919": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "920": {
      "callsub": "smart_contracts.proposal.contract.Proposal.set_category",
      "op": "callsub set_category",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "923": {
      "op": "bytec 21 // 0x66756e64696e675f74797065",
      "defined_out": [
        "0x66756e64696e675f74797065",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "0x66756e64696e675f74797065"
      ]
    },
    "925": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "0x66756e64696e675f74797065",
        "tmp%1#0"
      ]
    },
    "927": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "928": {
      "op": "bytec 22 // 0x7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x7265717565737465645f616d6f756e74",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x7265717565737465645f616d6f756e74"
      ]
    },
    "930": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "0x7265717565737465645f616d6f756e74",
        "tmp%2#0 (copy)"
      ]
    },
    "932": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "933": {
      "op": "bytec 20 // 0x666f637573",
      "defined_out": [
        "0x666f637573",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x666f637573"
      ]
    },
    "935": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x666f637573",
        "focus#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x666f637573",
        "focus#0 (copy)"
      ]
    },
    "937": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "938": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_expected_locked_amount",
      "op": "callsub get_expected_locked_amount",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "941": {
      "op": "bytec 6 // 0x6c6f636b65645f616d6f756e74",
      "defined_out": [
        "0x6c6f636b65645f616d6f756e74",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "0x6c6f636b65645f616d6f756e74"
      ]
    },
    "943": {
      "op": "swap",
      "stack_out": [
        "0x6c6f636b65645f616d6f756e74",
        "new_state_value%3#0"
      ]
    },
    "944": {
      "op": "app_global_put",
      "stack_out": []
    },
    "945": {
      "op": "bytec 15 // 0x7375626d697373696f6e5f74696d657374616d70"
    },
    "947": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "0x7375626d697373696f6e5f74696d657374616d70",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "0x7375626d697373696f6e5f74696d657374616d70",
        "new_state_value%4#0"
      ]
    },
    "949": {
      "op": "app_global_put",
      "stack_out": []
    },
    "950": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "0x737461747573"
      ]
    },
    "951": {
      "op": "intc_2 // 10",
      "defined_out": [
        "0x737461747573",
        "10"
      ],
      "stack_out": [
        "0x737461747573",
        "10"
      ]
    },
    "952": {
      "op": "app_global_put",
      "stack_out": []
    },
    "953": {
      "retsub": true,
      "op": "retsub"
    },
    "954": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.submit_check_authorization",
      "params": {},
      "block": "submit_check_authorization",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "957": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_proposer",
      "op": "callsub is_proposer",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "960": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "961": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "962": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "0",
        "0x737461747573"
      ]
    },
    "963": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "964": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "965": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "966": {
      "error": "Wrong Proposal Status",
      "op": "assert // Wrong Proposal Status",
      "stack_out": []
    },
    "967": {
      "retsub": true,
      "op": "retsub"
    },
    "968": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.is_proposer",
      "params": {},
      "block": "is_proposer",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "971": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "973": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "974": {
      "op": "bytec 4 // 0x70726f706f736572",
      "defined_out": [
        "0",
        "0x70726f706f736572",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x70726f706f736572"
      ]
    },
    "976": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "977": {
      "error": "check self.proposer exists",
      "op": "assert // check self.proposer exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "978": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "979": {
      "retsub": true,
      "op": "retsub"
    },
    "980": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.submit_input_validation",
      "params": {
        "title#0": "bytes",
        "cid#0": "bytes",
        "funding_type#0": "uint64",
        "requested_amount#0": "uint64"
      },
      "block": "submit_input_validation",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "983": {
      "op": "frame_dig -4",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "985": {
      "op": "frame_dig -3",
      "defined_out": [
        "cid#0 (copy)",
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)",
        "cid#0 (copy)"
      ]
    },
    "987": {
      "callsub": "smart_contracts.proposal.contract.Proposal.updateable_input_validation",
      "op": "callsub updateable_input_validation",
      "defined_out": [
        "cid#0"
      ],
      "stack_out": [
        "cid#0"
      ]
    },
    "990": {
      "op": "frame_bury -3",
      "stack_out": []
    },
    "992": {
      "op": "frame_dig -2",
      "defined_out": [
        "funding_type#0 (copy)"
      ],
      "stack_out": [
        "funding_type#0 (copy)"
      ]
    },
    "994": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "funding_type#0 (copy)"
      ],
      "stack_out": [
        "funding_type#0 (copy)",
        "10"
      ]
    },
    "995": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "996": {
      "op": "bnz submit_input_validation_bool_true@4",
      "stack_out": []
    },
    "999": {
      "op": "frame_dig -2",
      "stack_out": [
        "funding_type#0 (copy)"
      ]
    },
    "1001": {
      "op": "intc_3 // 20",
      "defined_out": [
        "20",
        "funding_type#0 (copy)"
      ],
      "stack_out": [
        "funding_type#0 (copy)",
        "20"
      ]
    },
    "1002": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1003": {
      "op": "bz submit_input_validation_bool_false@5",
      "stack_out": []
    },
    "1006": {
      "block": "submit_input_validation_bool_true@4",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "1007": {
      "op": "b submit_input_validation_bool_merge@6"
    },
    "1010": {
      "block": "submit_input_validation_bool_false@5",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "1011": {
      "block": "submit_input_validation_bool_merge@6",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Wrong Funding Type",
      "op": "assert // Wrong Funding Type",
      "defined_out": [],
      "stack_out": []
    },
    "1012": {
      "op": "pushbytes 0x6d696e5f7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x6d696e5f7265717565737465645f616d6f756e74"
      ]
    },
    "1034": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "min_requested_amount#0"
      ],
      "stack_out": [
        "min_requested_amount#0",
        "error#0"
      ]
    },
    "1037": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0",
        "min_requested_amount#0"
      ],
      "stack_out": [
        "min_requested_amount#0",
        "error#0",
        "0x0000"
      ]
    },
    "1038": {
      "op": "==",
      "defined_out": [
        "min_requested_amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "min_requested_amount#0",
        "tmp%2#0"
      ]
    },
    "1039": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "min_requested_amount#0"
      ]
    },
    "1040": {
      "op": "pushbytes 0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765",
        "min_requested_amount#0"
      ],
      "stack_out": [
        "min_requested_amount#0",
        "0x6d61785f7265717565737465645f616d6f756e745f6c61726765"
      ]
    },
    "1068": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "max_requested_amount_large#0",
        "min_requested_amount#0"
      ],
      "stack_out": [
        "min_requested_amount#0",
        "max_requested_amount_large#0",
        "error#0"
      ]
    },
    "1071": {
      "op": "bytec_0 // 0x0000",
      "stack_out": [
        "min_requested_amount#0",
        "max_requested_amount_large#0",
        "error#0",
        "0x0000"
      ]
    },
    "1072": {
      "op": "==",
      "defined_out": [
        "max_requested_amount_large#0",
        "min_requested_amount#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "min_requested_amount#0",
        "max_requested_amount_large#0",
        "tmp%3#0"
      ]
    },
    "1073": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "min_requested_amount#0",
        "max_requested_amount_large#0"
      ]
    },
    "1074": {
      "op": "frame_dig -1",
      "defined_out": [
        "max_requested_amount_large#0",
        "min_requested_amount#0",
        "requested_amount#0 (copy)"
      ],
      "stack_out": [
        "min_requested_amount#0",
        "max_requested_amount_large#0",
        "requested_amount#0 (copy)"
      ]
    },
    "1076": {
      "op": "uncover 2",
      "stack_out": [
        "max_requested_amount_large#0",
        "requested_amount#0 (copy)",
        "min_requested_amount#0"
      ]
    },
    "1078": {
      "op": ">=",
      "defined_out": [
        "max_requested_amount_large#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "max_requested_amount_large#0",
        "tmp%4#0"
      ]
    },
    "1079": {
      "error": "Requested amount is less than the minimum requested amount",
      "op": "assert // Requested amount is less than the minimum requested amount",
      "stack_out": [
        "max_requested_amount_large#0"
      ]
    },
    "1080": {
      "op": "frame_dig -1",
      "stack_out": [
        "max_requested_amount_large#0",
        "requested_amount#0 (copy)"
      ]
    },
    "1082": {
      "op": ">=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1083": {
      "error": "Requested amount is more than the maximum requested amount",
      "op": "assert // Requested amount is more than the maximum requested amount",
      "stack_out": []
    },
    "1084": {
      "op": "frame_dig -3",
      "defined_out": [
        "cid#0 (copy)"
      ],
      "stack_out": [
        "cid#0 (copy)"
      ]
    },
    "1086": {
      "retsub": true,
      "op": "retsub"
    },
    "1087": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.updateable_input_validation",
      "params": {
        "title#0": "bytes",
        "cid#0": "bytes"
      },
      "block": "updateable_input_validation",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1090": {
      "op": "frame_dig -2",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "1092": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1093": {
      "op": "pushint 123 // 123",
      "defined_out": [
        "123",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "123"
      ]
    },
    "1095": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1096": {
      "error": "Wrong Title length",
      "op": "assert // Wrong Title length",
      "stack_out": []
    },
    "1097": {
      "op": "frame_dig -2",
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "1099": {
      "op": "bytec_2 // \"\"",
      "defined_out": [
        "\"\"",
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)",
        "\"\""
      ]
    },
    "1100": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1101": {
      "error": "Wrong Title length",
      "op": "assert // Wrong Title length",
      "stack_out": []
    },
    "1102": {
      "op": "frame_dig -1",
      "defined_out": [
        "cid#0 (copy)"
      ],
      "stack_out": [
        "cid#0 (copy)"
      ]
    },
    "1104": {
      "retsub": true,
      "op": "retsub"
    },
    "1105": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "params": {
        "global_state_key#0": "bytes"
      },
      "block": "get_uint_from_registry_config",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "1108": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1109": {
      "op": "bytec 5 // 0x72656769737472795f6170705f6964",
      "defined_out": [
        "0",
        "0x72656769737472795f6170705f6964"
      ],
      "stack_out": [
        "0",
        "0x72656769737472795f6170705f6964"
      ]
    },
    "1111": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1112": {
      "error": "check self.registry_app_id exists",
      "op": "assert // check self.registry_app_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1113": {
      "op": "frame_dig -1",
      "defined_out": [
        "global_state_key#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "global_state_key#0 (copy)"
      ]
    },
    "1115": {
      "op": "app_global_get_ex",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "1116": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "error#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0",
        "error#0"
      ]
    },
    "1117": {
      "op": "swap",
      "defined_out": [
        "error#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "error#0",
        "exists#0"
      ]
    },
    "1118": {
      "op": "bnz get_uint_from_registry_config_after_if_else@2",
      "stack_out": [
        "value#0",
        "error#0"
      ]
    },
    "1121": {
      "op": "pushbytes 0x00124552523a4d697373696e6720436f6e666967",
      "stack_out": [
        "value#0",
        "error#0",
        "error#0"
      ]
    },
    "1143": {
      "op": "frame_bury 1",
      "stack_out": [
        "value#0",
        "error#0"
      ]
    },
    "1145": {
      "block": "get_uint_from_registry_config_after_if_else@2",
      "stack_in": [
        "value#0",
        "error#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "error#0",
        "value#0"
      ]
    },
    "1147": {
      "op": "frame_dig 1",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "1149": {
      "op": "uncover 3"
    },
    "1151": {
      "op": "uncover 3"
    },
    "1153": {
      "retsub": true,
      "op": "retsub"
    },
    "1154": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.submit_payment_validation",
      "params": {
        "payment#0": "uint64",
        "requested_amount#0": "uint64"
      },
      "block": "submit_payment_validation",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1157": {
      "op": "frame_dig -1",
      "defined_out": [
        "requested_amount#0 (copy)"
      ],
      "stack_out": [
        "requested_amount#0 (copy)"
      ]
    },
    "1159": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_expected_locked_amount",
      "op": "callsub get_expected_locked_amount",
      "defined_out": [
        "expected_lock_amount#0"
      ],
      "stack_out": [
        "expected_lock_amount#0"
      ]
    },
    "1162": {
      "op": "frame_dig -2",
      "defined_out": [
        "expected_lock_amount#0",
        "payment#0 (copy)"
      ],
      "stack_out": [
        "expected_lock_amount#0",
        "payment#0 (copy)"
      ]
    },
    "1164": {
      "op": "gtxns Sender",
      "defined_out": [
        "expected_lock_amount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "expected_lock_amount#0",
        "tmp%0#0"
      ]
    },
    "1166": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "expected_lock_amount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "expected_lock_amount#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1167": {
      "op": "bytec 4 // 0x70726f706f736572",
      "defined_out": [
        "0",
        "0x70726f706f736572",
        "expected_lock_amount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "expected_lock_amount#0",
        "tmp%0#0",
        "0",
        "0x70726f706f736572"
      ]
    },
    "1169": {
      "op": "app_global_get_ex",
      "defined_out": [
        "expected_lock_amount#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "expected_lock_amount#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1170": {
      "error": "check self.proposer exists",
      "op": "assert // check self.proposer exists",
      "stack_out": [
        "expected_lock_amount#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1171": {
      "op": "==",
      "defined_out": [
        "expected_lock_amount#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "expected_lock_amount#0",
        "tmp%1#0"
      ]
    },
    "1172": {
      "error": "Wrong Sender",
      "op": "assert // Wrong Sender",
      "stack_out": [
        "expected_lock_amount#0"
      ]
    },
    "1173": {
      "op": "frame_dig -2",
      "stack_out": [
        "expected_lock_amount#0",
        "payment#0 (copy)"
      ]
    },
    "1175": {
      "op": "gtxns Receiver",
      "defined_out": [
        "expected_lock_amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "expected_lock_amount#0",
        "tmp%2#0"
      ]
    },
    "1177": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "expected_lock_amount#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "expected_lock_amount#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1179": {
      "op": "==",
      "defined_out": [
        "expected_lock_amount#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "expected_lock_amount#0",
        "tmp%4#0"
      ]
    },
    "1180": {
      "error": "Wrong Receiver",
      "op": "assert // Wrong Receiver",
      "stack_out": [
        "expected_lock_amount#0"
      ]
    },
    "1181": {
      "op": "frame_dig -2",
      "stack_out": [
        "expected_lock_amount#0",
        "payment#0 (copy)"
      ]
    },
    "1183": {
      "op": "gtxns Amount",
      "defined_out": [
        "expected_lock_amount#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "expected_lock_amount#0",
        "tmp%5#0"
      ]
    },
    "1185": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1186": {
      "error": "Locked amount is incorrect",
      "op": "assert // Locked amount is incorrect",
      "stack_out": []
    },
    "1187": {
      "retsub": true,
      "op": "retsub"
    },
    "1188": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.get_expected_locked_amount",
      "params": {
        "requested_amount#0": "uint64"
      },
      "block": "get_expected_locked_amount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1191": {
      "op": "pushbytes 0x70726f706f73616c5f636f6d6d69746d656e745f627073",
      "defined_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ],
      "stack_out": [
        "0x70726f706f73616c5f636f6d6d69746d656e745f627073"
      ]
    },
    "1216": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "proposal_commitment_bps#0"
      ],
      "stack_out": [
        "proposal_commitment_bps#0",
        "error#0"
      ]
    },
    "1219": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0",
        "proposal_commitment_bps#0"
      ],
      "stack_out": [
        "proposal_commitment_bps#0",
        "error#0",
        "0x0000"
      ]
    },
    "1220": {
      "op": "==",
      "defined_out": [
        "proposal_commitment_bps#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "proposal_commitment_bps#0",
        "tmp%0#0"
      ]
    },
    "1221": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "proposal_commitment_bps#0"
      ]
    },
    "1222": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_commitment_bps#0",
        "requested_amount#0 (copy)"
      ],
      "stack_out": [
        "proposal_commitment_bps#0",
        "requested_amount#0 (copy)"
      ]
    },
    "1224": {
      "op": "swap",
      "stack_out": [
        "requested_amount#0 (copy)",
        "proposal_commitment_bps#0"
      ]
    },
    "1225": {
      "callsub": "smart_contracts.proposal.contract.Proposal.relative_to_absolute_amount",
      "op": "callsub relative_to_absolute_amount",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1228": {
      "retsub": true,
      "op": "retsub"
    },
    "1229": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.relative_to_absolute_amount",
      "params": {
        "amount#0": "uint64",
        "fraction_in_bps#0": "uint64"
      },
      "block": "relative_to_absolute_amount",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1232": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "1234": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "fraction_in_bps#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)",
        "fraction_in_bps#0 (copy)"
      ]
    },
    "1236": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1237": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "10000"
      ]
    },
    "1240": {
      "op": "/",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1241": {
      "retsub": true,
      "op": "retsub"
    },
    "1242": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.set_category",
      "params": {
        "requested_amount#0": "uint64"
      },
      "block": "set_category",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1245": {
      "op": "pushbytes 0x6d61785f7265717565737465645f616d6f756e745f736d616c6c",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ],
      "stack_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f736d616c6c"
      ]
    },
    "1273": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "max_requested_amount_small#0"
      ],
      "stack_out": [
        "max_requested_amount_small#0",
        "error#0"
      ]
    },
    "1276": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0",
        "max_requested_amount_small#0"
      ],
      "stack_out": [
        "max_requested_amount_small#0",
        "error#0",
        "0x0000"
      ]
    },
    "1277": {
      "op": "==",
      "defined_out": [
        "max_requested_amount_small#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "max_requested_amount_small#0",
        "tmp%0#0"
      ]
    },
    "1278": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "max_requested_amount_small#0"
      ]
    },
    "1279": {
      "op": "pushbytes 0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
      "defined_out": [
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d",
        "max_requested_amount_small#0"
      ],
      "stack_out": [
        "max_requested_amount_small#0",
        "0x6d61785f7265717565737465645f616d6f756e745f6d656469756d"
      ]
    },
    "1308": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "max_requested_amount_medium#0",
        "max_requested_amount_small#0"
      ],
      "stack_out": [
        "max_requested_amount_small#0",
        "max_requested_amount_medium#0",
        "error#0"
      ]
    },
    "1311": {
      "op": "swap",
      "stack_out": [
        "max_requested_amount_small#0",
        "error#0",
        "max_requested_amount_medium#0"
      ]
    },
    "1312": {
      "op": "cover 2",
      "defined_out": [
        "error#0",
        "max_requested_amount_medium#0",
        "max_requested_amount_small#0"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "max_requested_amount_small#0",
        "error#0"
      ]
    },
    "1314": {
      "op": "bytec_0 // 0x0000",
      "stack_out": [
        "max_requested_amount_medium#0",
        "max_requested_amount_small#0",
        "error#0",
        "0x0000"
      ]
    },
    "1315": {
      "op": "==",
      "defined_out": [
        "max_requested_amount_medium#0",
        "max_requested_amount_small#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "max_requested_amount_small#0",
        "tmp%1#0"
      ]
    },
    "1316": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "max_requested_amount_medium#0",
        "max_requested_amount_small#0"
      ]
    },
    "1317": {
      "op": "frame_dig -1",
      "defined_out": [
        "max_requested_amount_medium#0",
        "max_requested_amount_small#0",
        "requested_amount#0 (copy)"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "max_requested_amount_small#0",
        "requested_amount#0 (copy)"
      ]
    },
    "1319": {
      "op": ">=",
      "defined_out": [
        "max_requested_amount_medium#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "tmp%2#0"
      ]
    },
    "1320": {
      "op": "bz set_category_else_body@2",
      "stack_out": [
        "max_requested_amount_medium#0"
      ]
    },
    "1323": {
      "op": "bytec_3 // 0x66756e64696e675f63617465676f7279",
      "defined_out": [
        "0x66756e64696e675f63617465676f7279",
        "max_requested_amount_medium#0"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "1324": {
      "op": "intc_2 // 10",
      "defined_out": [
        "0x66756e64696e675f63617465676f7279",
        "10",
        "max_requested_amount_medium#0"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "0x66756e64696e675f63617465676f7279",
        "10"
      ]
    },
    "1325": {
      "op": "app_global_put",
      "stack_out": [
        "max_requested_amount_medium#0"
      ]
    },
    "1326": {
      "op": "b set_category_after_if_else@6"
    },
    "1329": {
      "block": "set_category_else_body@2",
      "stack_in": [
        "max_requested_amount_medium#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "requested_amount#0 (copy)"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "requested_amount#0 (copy)"
      ]
    },
    "1331": {
      "op": "frame_dig 0",
      "defined_out": [
        "max_requested_amount_medium#0",
        "requested_amount#0 (copy)"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "requested_amount#0 (copy)",
        "max_requested_amount_medium#0"
      ]
    },
    "1333": {
      "op": "<=",
      "defined_out": [
        "max_requested_amount_medium#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "tmp%3#0"
      ]
    },
    "1334": {
      "op": "bz set_category_else_body@4",
      "stack_out": [
        "max_requested_amount_medium#0"
      ]
    },
    "1337": {
      "op": "bytec_3 // 0x66756e64696e675f63617465676f7279",
      "defined_out": [
        "0x66756e64696e675f63617465676f7279",
        "max_requested_amount_medium#0"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "1338": {
      "op": "intc_3 // 20",
      "defined_out": [
        "0x66756e64696e675f63617465676f7279",
        "20",
        "max_requested_amount_medium#0"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "0x66756e64696e675f63617465676f7279",
        "20"
      ]
    },
    "1339": {
      "op": "app_global_put",
      "stack_out": [
        "max_requested_amount_medium#0"
      ]
    },
    "1340": {
      "op": "b set_category_after_if_else@6"
    },
    "1343": {
      "block": "set_category_else_body@4",
      "stack_in": [
        "max_requested_amount_medium#0"
      ],
      "op": "bytec_3 // 0x66756e64696e675f63617465676f7279",
      "defined_out": [
        "0x66756e64696e675f63617465676f7279"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "1344": {
      "op": "pushint 33 // 33",
      "defined_out": [
        "0x66756e64696e675f63617465676f7279",
        "33"
      ],
      "stack_out": [
        "max_requested_amount_medium#0",
        "0x66756e64696e675f63617465676f7279",
        "33"
      ]
    },
    "1346": {
      "op": "app_global_put",
      "stack_out": [
        "max_requested_amount_medium#0"
      ]
    },
    "1347": {
      "block": "set_category_after_if_else@6",
      "stack_in": [
        "max_requested_amount_medium#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1348": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.update",
      "params": {
        "title#0": "bytes",
        "cid#0": "bytes"
      },
      "block": "update",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1351": {
      "callsub": "smart_contracts.proposal.contract.Proposal.update_check_authorization",
      "op": "callsub update_check_authorization"
    },
    "1354": {
      "op": "frame_dig -2",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "1356": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1359": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1360": {
      "op": "frame_dig -1",
      "defined_out": [
        "cid#0 (copy)",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "cid#0 (copy)"
      ]
    },
    "1362": {
      "callsub": "smart_contracts.proposal.contract.Proposal.updateable_input_validation",
      "op": "callsub updateable_input_validation",
      "defined_out": [
        "cid#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "cid#0"
      ]
    },
    "1365": {
      "op": "frame_bury -1",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1367": {
      "op": "bytec 13 // 0x7469746c65",
      "defined_out": [
        "0x7469746c65",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x7469746c65"
      ]
    },
    "1369": {
      "op": "swap",
      "stack_out": [
        "0x7469746c65",
        "tmp%0#0"
      ]
    },
    "1370": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1371": {
      "op": "bytec 14 // 0x636964",
      "defined_out": [
        "0x636964"
      ],
      "stack_out": [
        "0x636964"
      ]
    },
    "1373": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x636964",
        "cid#0 (copy)"
      ]
    },
    "1375": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1376": {
      "retsub": true,
      "op": "retsub"
    },
    "1377": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.update_check_authorization",
      "params": {},
      "block": "update_check_authorization",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1380": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_proposer",
      "op": "callsub is_proposer",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1383": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1384": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1385": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "0",
        "0x737461747573"
      ]
    },
    "1386": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1387": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1388": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10"
      ]
    },
    "1389": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1390": {
      "error": "Wrong Proposal Status",
      "op": "assert // Wrong Proposal Status",
      "stack_out": []
    },
    "1391": {
      "retsub": true,
      "op": "retsub"
    },
    "1392": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.drop",
      "params": {},
      "block": "drop",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1395": {
      "callsub": "smart_contracts.proposal.contract.Proposal.drop_check_authorization",
      "op": "callsub drop_check_authorization"
    },
    "1398": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1399": {
      "op": "bytec 4 // 0x70726f706f736572",
      "defined_out": [
        "0",
        "0x70726f706f736572"
      ],
      "stack_out": [
        "0",
        "0x70726f706f736572"
      ]
    },
    "1401": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1402": {
      "error": "check self.proposer exists",
      "op": "assert // check self.proposer exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1403": {
      "callsub": "smart_contracts.proposal.contract.Proposal.transfer_locked_amount",
      "op": "callsub transfer_locked_amount",
      "stack_out": []
    },
    "1406": {
      "op": "bytec 13 // 0x7469746c65",
      "defined_out": [
        "0x7469746c65"
      ],
      "stack_out": [
        "0x7469746c65"
      ]
    },
    "1408": {
      "op": "bytec_2 // \"\"",
      "defined_out": [
        "\"\"",
        "0x7469746c65"
      ],
      "stack_out": [
        "0x7469746c65",
        "\"\""
      ]
    },
    "1409": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1410": {
      "op": "bytec 14 // 0x636964",
      "defined_out": [
        "0x636964"
      ],
      "stack_out": [
        "0x636964"
      ]
    },
    "1412": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "0x636964"
      ],
      "stack_out": [
        "0x636964",
        "0x"
      ]
    },
    "1413": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1414": {
      "op": "bytec_3 // 0x66756e64696e675f63617465676f7279",
      "defined_out": [
        "0x66756e64696e675f63617465676f7279"
      ],
      "stack_out": [
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "1415": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x66756e64696e675f63617465676f7279",
        "0"
      ]
    },
    "1416": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1417": {
      "op": "bytec 20 // 0x666f637573",
      "defined_out": [
        "0x666f637573"
      ],
      "stack_out": [
        "0x666f637573"
      ]
    },
    "1419": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "0x666f637573"
      ],
      "stack_out": [
        "0x666f637573",
        "0x00"
      ]
    },
    "1421": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1422": {
      "op": "bytec 21 // 0x66756e64696e675f74797065",
      "defined_out": [
        "0x66756e64696e675f74797065"
      ],
      "stack_out": [
        "0x66756e64696e675f74797065"
      ]
    },
    "1424": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x66756e64696e675f74797065",
        "0"
      ]
    },
    "1425": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1426": {
      "op": "bytec 22 // 0x7265717565737465645f616d6f756e74",
      "defined_out": [
        "0x7265717565737465645f616d6f756e74"
      ],
      "stack_out": [
        "0x7265717565737465645f616d6f756e74"
      ]
    },
    "1428": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x7265717565737465645f616d6f756e74",
        "0"
      ]
    },
    "1429": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1430": {
      "op": "bytec 6 // 0x6c6f636b65645f616d6f756e74",
      "defined_out": [
        "0x6c6f636b65645f616d6f756e74"
      ],
      "stack_out": [
        "0x6c6f636b65645f616d6f756e74"
      ]
    },
    "1432": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6c6f636b65645f616d6f756e74",
        "0"
      ]
    },
    "1433": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1434": {
      "op": "bytec 15 // 0x7375626d697373696f6e5f74696d657374616d70",
      "defined_out": [
        "0x7375626d697373696f6e5f74696d657374616d70"
      ],
      "stack_out": [
        "0x7375626d697373696f6e5f74696d657374616d70"
      ]
    },
    "1436": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x7375626d697373696f6e5f74696d657374616d70",
        "0"
      ]
    },
    "1437": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1438": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "0x737461747573"
      ]
    },
    "1439": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x737461747573",
        "0"
      ]
    },
    "1440": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1441": {
      "retsub": true,
      "op": "retsub"
    },
    "1442": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.drop_check_authorization",
      "params": {},
      "block": "drop_check_authorization",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1445": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_proposer",
      "op": "callsub is_proposer",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1448": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1449": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1450": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "0",
        "0x737461747573"
      ]
    },
    "1451": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1452": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1453": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10"
      ]
    },
    "1454": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1455": {
      "error": "Wrong Proposal Status",
      "op": "assert // Wrong Proposal Status",
      "stack_out": []
    },
    "1456": {
      "retsub": true,
      "op": "retsub"
    },
    "1457": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.transfer_locked_amount",
      "params": {
        "receiver#0": "bytes"
      },
      "block": "transfer_locked_amount",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1460": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1461": {
      "op": "bytec 6 // 0x6c6f636b65645f616d6f756e74",
      "defined_out": [
        "0",
        "0x6c6f636b65645f616d6f756e74"
      ],
      "stack_out": [
        "0",
        "0x6c6f636b65645f616d6f756e74"
      ]
    },
    "1463": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1464": {
      "error": "check self.locked_amount exists",
      "op": "assert // check self.locked_amount exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1465": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "receiver#0 (copy)"
      ]
    },
    "1467": {
      "op": "swap",
      "stack_out": [
        "receiver#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "1468": {
      "callsub": "smart_contracts.proposal.contract.Proposal.pay",
      "op": "callsub pay",
      "stack_out": []
    },
    "1471": {
      "retsub": true,
      "op": "retsub"
    },
    "1472": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.pay",
      "params": {
        "receiver#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "pay",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1475": {
      "op": "itxn_begin"
    },
    "1476": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "1478": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "1480": {
      "op": "frame_dig -2",
      "defined_out": [
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "receiver#0 (copy)"
      ]
    },
    "1482": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "1484": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "1485": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1487": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1488": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1490": {
      "op": "itxn_submit"
    },
    "1491": {
      "retsub": true,
      "op": "retsub"
    },
    "1492": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.finalize",
      "params": {},
      "block": "finalize",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1495": {
      "callsub": "smart_contracts.proposal.contract.Proposal.finalize_check_authorization",
      "op": "callsub finalize_check_authorization"
    },
    "1498": {
      "callsub": "smart_contracts.proposal.contract.Proposal.verify_and_set_committee",
      "op": "callsub verify_and_set_committee"
    },
    "1501": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "0x737461747573"
      ]
    },
    "1502": {
      "op": "intc_3 // 20",
      "defined_out": [
        "0x737461747573",
        "20"
      ],
      "stack_out": [
        "0x737461747573",
        "20"
      ]
    },
    "1503": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1504": {
      "op": "bytec 27 // 0x66696e616c697a6174696f6e5f74696d657374616d70"
    },
    "1506": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "0x66696e616c697a6174696f6e5f74696d657374616d70",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "0x66696e616c697a6174696f6e5f74696d657374616d70",
        "new_state_value%0#0"
      ]
    },
    "1508": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1509": {
      "op": "pushbytes 0x70726f706f73616c5f666565",
      "defined_out": [
        "0x70726f706f73616c5f666565"
      ],
      "stack_out": [
        "0x70726f706f73616c5f666565"
      ]
    },
    "1523": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "proposal_fee#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "error#0"
      ]
    },
    "1526": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0",
        "proposal_fee#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "error#0",
        "0x0000"
      ]
    },
    "1527": {
      "op": "==",
      "defined_out": [
        "proposal_fee#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "tmp%0#0"
      ]
    },
    "1528": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "proposal_fee#0"
      ]
    },
    "1529": {
      "op": "pushbytes 0x70726f706f73616c5f7075626c697368696e675f627073",
      "defined_out": [
        "0x70726f706f73616c5f7075626c697368696e675f627073",
        "proposal_fee#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "0x70726f706f73616c5f7075626c697368696e675f627073"
      ]
    },
    "1554": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "proposal_fee#0",
        "publishing_fee_bps#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "error#0"
      ]
    },
    "1557": {
      "op": "bytec_0 // 0x0000",
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "error#0",
        "0x0000"
      ]
    },
    "1558": {
      "op": "==",
      "defined_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "tmp%1#0"
      ]
    },
    "1559": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0"
      ]
    },
    "1560": {
      "op": "bytec 29 // 0x636f6d6d69747465655f7075626c6973686572",
      "defined_out": [
        "0x636f6d6d69747465655f7075626c6973686572",
        "proposal_fee#0",
        "publishing_fee_bps#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "0x636f6d6d69747465655f7075626c6973686572"
      ]
    },
    "1562": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_bytes_from_registry_config",
      "op": "callsub get_bytes_from_registry_config",
      "defined_out": [
        "awst_tmp%0#0",
        "proposal_fee#0",
        "publishing_fee_bps#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "awst_tmp%0#0"
      ]
    },
    "1565": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "proposal_fee#0",
        "publishing_fee_bps#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1566": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1567": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "awst_tmp%0#0",
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "32"
      ]
    },
    "1569": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1570": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "proposal_fee#0",
        "publishing_fee_bps#0",
        "awst_tmp%0#0"
      ]
    },
    "1571": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "proposal_fee#0",
        "publishing_fee_bps#0"
      ]
    },
    "1573": {
      "callsub": "smart_contracts.proposal.contract.Proposal.relative_to_absolute_amount",
      "op": "callsub relative_to_absolute_amount",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1576": {
      "callsub": "smart_contracts.proposal.contract.Proposal.pay",
      "op": "callsub pay",
      "stack_out": []
    },
    "1579": {
      "retsub": true,
      "op": "retsub"
    },
    "1580": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.finalize_check_authorization",
      "params": {},
      "block": "finalize_check_authorization",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1583": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_proposer",
      "op": "callsub is_proposer",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1586": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1587": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1588": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "0",
        "0x737461747573"
      ]
    },
    "1589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1590": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1591": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10"
      ]
    },
    "1592": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1593": {
      "error": "Wrong Proposal Status",
      "op": "assert // Wrong Proposal Status",
      "stack_out": []
    },
    "1594": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1596": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1597": {
      "op": "bytec 15 // 0x7375626d697373696f6e5f74696d657374616d70",
      "defined_out": [
        "0",
        "0x7375626d697373696f6e5f74696d657374616d70",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "0x7375626d697373696f6e5f74696d657374616d70"
      ]
    },
    "1599": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1600": {
      "error": "check self.submission_ts exists",
      "op": "assert // check self.submission_ts exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "1601": {
      "op": "-",
      "defined_out": [
        "discussion_duration#0"
      ],
      "stack_out": [
        "discussion_duration#0"
      ]
    },
    "1602": {
      "op": "intc_0 // 0",
      "stack_out": [
        "discussion_duration#0",
        "0"
      ]
    },
    "1603": {
      "op": "bytec_3 // 0x66756e64696e675f63617465676f7279",
      "defined_out": [
        "0",
        "0x66756e64696e675f63617465676f7279",
        "discussion_duration#0"
      ],
      "stack_out": [
        "discussion_duration#0",
        "0",
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "1604": {
      "op": "app_global_get_ex",
      "defined_out": [
        "discussion_duration#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "discussion_duration#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1605": {
      "error": "check self.funding_category exists",
      "op": "assert // check self.funding_category exists",
      "stack_out": [
        "discussion_duration#0",
        "maybe_value%2#0"
      ]
    },
    "1606": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_discussion_duration",
      "op": "callsub get_discussion_duration",
      "defined_out": [
        "discussion_duration#0",
        "minimum_discussion_duration#0"
      ],
      "stack_out": [
        "discussion_duration#0",
        "minimum_discussion_duration#0"
      ]
    },
    "1609": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1610": {
      "error": "Too early",
      "op": "assert // Too early",
      "stack_out": []
    },
    "1611": {
      "retsub": true,
      "op": "retsub"
    },
    "1612": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.get_discussion_duration",
      "params": {
        "category#0": "uint64"
      },
      "block": "get_discussion_duration",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1615": {
      "op": "intc_0 // 0",
      "stack_out": [
        "error#0"
      ]
    },
    "1616": {
      "op": "frame_dig -1",
      "defined_out": [
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)"
      ]
    },
    "1618": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)",
        "10"
      ]
    },
    "1619": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%0#0"
      ]
    },
    "1620": {
      "op": "bz get_discussion_duration_else_body@2",
      "stack_out": [
        "error#0"
      ]
    },
    "1623": {
      "op": "pushbytes 0x64697363757373696f6e5f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "error#0",
        "0x64697363757373696f6e5f6475726174696f6e5f736d616c6c"
      ]
    },
    "1650": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "1653": {
      "op": "frame_bury 0",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "1655": {
      "op": "b get_discussion_duration_after_if_else@6"
    },
    "1658": {
      "block": "get_discussion_duration_else_body@2",
      "stack_in": [
        "error#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)"
      ]
    },
    "1660": {
      "op": "intc_3 // 20",
      "defined_out": [
        "20",
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)",
        "20"
      ]
    },
    "1661": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0"
      ]
    },
    "1662": {
      "op": "bz get_discussion_duration_else_body@4",
      "stack_out": [
        "error#0"
      ]
    },
    "1665": {
      "op": "pushbytes 0x64697363757373696f6e5f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "error#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6d656469756d"
      ]
    },
    "1693": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "1696": {
      "op": "frame_bury 0",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "1698": {
      "op": "b get_discussion_duration_after_if_else@6"
    },
    "1701": {
      "block": "get_discussion_duration_else_body@4",
      "stack_in": [
        "error#0"
      ],
      "op": "pushbytes 0x64697363757373696f6e5f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "error#0",
        "0x64697363757373696f6e5f6475726174696f6e5f6c61726765"
      ]
    },
    "1728": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "1731": {
      "op": "frame_bury 0",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "1733": {
      "block": "get_discussion_duration_after_if_else@6",
      "stack_in": [
        "error#0",
        "value#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "error#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "1735": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0",
        "0x0000"
      ]
    },
    "1736": {
      "op": "==",
      "defined_out": [
        "error#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "tmp%2#0"
      ]
    },
    "1737": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "1738": {
      "op": "swap"
    },
    "1739": {
      "retsub": true,
      "op": "retsub"
    },
    "1740": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.verify_and_set_committee",
      "params": {},
      "block": "verify_and_set_committee",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1743": {
      "op": "bytec 23 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0x636f6d6d69747465655f6964"
      ],
      "stack_out": [
        "0x636f6d6d69747465655f6964"
      ]
    },
    "1745": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_bytes_from_registry_config",
      "op": "callsub get_bytes_from_registry_config",
      "defined_out": [
        "committee_id#0"
      ],
      "stack_out": [
        "committee_id#0"
      ]
    },
    "1748": {
      "op": "dup",
      "defined_out": [
        "committee_id#0",
        "committee_id#0 (copy)"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_id#0 (copy)"
      ]
    },
    "1749": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "committee_id#0",
        "committee_id#0 (copy)"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_id#0 (copy)",
        "0x"
      ]
    },
    "1750": {
      "op": "!=",
      "defined_out": [
        "committee_id#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "committee_id#0",
        "tmp%0#0"
      ]
    },
    "1751": {
      "error": "Empty Committee ID",
      "op": "assert // Empty Committee ID",
      "stack_out": [
        "committee_id#0"
      ]
    },
    "1752": {
      "op": "bytec 7 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0x636f6d6d69747465655f6d656d62657273",
        "committee_id#0"
      ],
      "stack_out": [
        "committee_id#0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "1754": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "committee_id#0",
        "committee_members#0",
        "error#0"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "error#0"
      ]
    },
    "1757": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "committee_id#0",
        "committee_members#0",
        "error#0"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "error#0",
        "0x0000"
      ]
    },
    "1758": {
      "op": "==",
      "defined_out": [
        "committee_id#0",
        "committee_members#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "tmp%1#0"
      ]
    },
    "1759": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "committee_id#0",
        "committee_members#0"
      ]
    },
    "1760": {
      "op": "dup",
      "defined_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_members#0 (copy)"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_members#0 (copy)"
      ]
    },
    "1761": {
      "error": "Wrong Committee Members",
      "op": "assert // Wrong Committee Members",
      "stack_out": [
        "committee_id#0",
        "committee_members#0"
      ]
    },
    "1762": {
      "op": "bytec 9 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0x636f6d6d69747465655f766f746573",
        "committee_id#0",
        "committee_members#0"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "1764": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_votes#0",
        "error#0"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_votes#0",
        "error#0"
      ]
    },
    "1767": {
      "op": "bytec_0 // 0x0000",
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_votes#0",
        "error#0",
        "0x0000"
      ]
    },
    "1768": {
      "op": "==",
      "defined_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_votes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_votes#0",
        "tmp%3#0"
      ]
    },
    "1769": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_votes#0"
      ]
    },
    "1770": {
      "op": "dup",
      "defined_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_votes#0",
        "committee_votes#0 (copy)"
      ],
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_votes#0",
        "committee_votes#0 (copy)"
      ]
    },
    "1771": {
      "error": "Wrong Committee Votes",
      "op": "assert // Wrong Committee Votes",
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_votes#0"
      ]
    },
    "1772": {
      "op": "bytec 23 // 0x636f6d6d69747465655f6964",
      "stack_out": [
        "committee_id#0",
        "committee_members#0",
        "committee_votes#0",
        "0x636f6d6d69747465655f6964"
      ]
    },
    "1774": {
      "op": "uncover 3",
      "stack_out": [
        "committee_members#0",
        "committee_votes#0",
        "0x636f6d6d69747465655f6964",
        "committee_id#0"
      ]
    },
    "1776": {
      "op": "app_global_put",
      "stack_out": [
        "committee_members#0",
        "committee_votes#0"
      ]
    },
    "1777": {
      "op": "bytec 7 // 0x636f6d6d69747465655f6d656d62657273",
      "stack_out": [
        "committee_members#0",
        "committee_votes#0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "1779": {
      "op": "uncover 2",
      "stack_out": [
        "committee_votes#0",
        "0x636f6d6d69747465655f6d656d62657273",
        "committee_members#0"
      ]
    },
    "1781": {
      "op": "app_global_put",
      "stack_out": [
        "committee_votes#0"
      ]
    },
    "1782": {
      "op": "bytec 9 // 0x636f6d6d69747465655f766f746573",
      "stack_out": [
        "committee_votes#0",
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "1784": {
      "op": "swap",
      "stack_out": [
        "0x636f6d6d69747465655f766f746573",
        "committee_votes#0"
      ]
    },
    "1785": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1786": {
      "retsub": true,
      "op": "retsub"
    },
    "1787": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.get_bytes_from_registry_config",
      "params": {
        "global_state_key#0": "bytes"
      },
      "block": "get_bytes_from_registry_config",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1790": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1791": {
      "op": "bytec 5 // 0x72656769737472795f6170705f6964",
      "defined_out": [
        "0",
        "0x72656769737472795f6170705f6964"
      ],
      "stack_out": [
        "0",
        "0x72656769737472795f6170705f6964"
      ]
    },
    "1793": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1794": {
      "error": "check self.registry_app_id exists",
      "op": "assert // check self.registry_app_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1795": {
      "op": "frame_dig -1",
      "defined_out": [
        "global_state_key#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "global_state_key#0 (copy)"
      ]
    },
    "1797": {
      "op": "app_global_get_ex",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "1798": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "value#0"
      ]
    },
    "1799": {
      "retsub": true,
      "op": "retsub"
    },
    "1800": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.assign_voter",
      "params": {
        "voter#0": "bytes",
        "voting_power#0": "bytes"
      },
      "block": "assign_voter",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1803": {
      "callsub": "smart_contracts.proposal.contract.Proposal.assign_voter_check_authorization",
      "op": "callsub assign_voter_check_authorization"
    },
    "1806": {
      "op": "frame_dig -1",
      "defined_out": [
        "voting_power#0 (copy)"
      ],
      "stack_out": [
        "voting_power#0 (copy)"
      ]
    },
    "1808": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1809": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "voter#0 (copy)"
      ]
    },
    "1811": {
      "op": "dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "voter#0 (copy)",
        "tmp%0#0 (copy)"
      ]
    },
    "1813": {
      "callsub": "smart_contracts.proposal.contract.Proposal.assign_voter_input_validation",
      "op": "callsub assign_voter_input_validation",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1816": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "voting_power#0 (copy)"
      ]
    },
    "1818": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%0#0",
        "voting_power#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "voting_power#0 (copy)",
        "0x00"
      ]
    },
    "1820": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1821": {
      "op": "bytec 18 // \"V\"",
      "defined_out": [
        "\"V\"",
        "encoded_tuple_buffer%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%2#0",
        "\"V\""
      ]
    },
    "1823": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%2#0",
        "\"V\"",
        "voter#0 (copy)"
      ]
    },
    "1825": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0"
      ]
    },
    "1826": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1827": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1828": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1829": {
      "op": "bytec 24 // \"voters_count\"",
      "defined_out": [
        "\"voters_count\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"voters_count\""
      ]
    },
    "1831": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1832": {
      "error": "check self.voters_count exists",
      "op": "assert // check self.voters_count exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1833": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "1834": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_state_value%0#0"
      ]
    },
    "1835": {
      "op": "bytec 24 // \"voters_count\"",
      "stack_out": [
        "tmp%0#0",
        "new_state_value%0#0",
        "\"voters_count\""
      ]
    },
    "1837": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"voters_count\"",
        "new_state_value%0#0"
      ]
    },
    "1838": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1839": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1840": {
      "op": "bytec 25 // \"assigned_votes\"",
      "defined_out": [
        "\"assigned_votes\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"assigned_votes\""
      ]
    },
    "1842": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1843": {
      "error": "check self.assigned_votes exists",
      "op": "assert // check self.assigned_votes exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1844": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "1845": {
      "op": "bytec 25 // \"assigned_votes\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"assigned_votes\""
      ]
    },
    "1847": {
      "op": "swap",
      "stack_out": [
        "\"assigned_votes\"",
        "new_state_value%1#0"
      ]
    },
    "1848": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1849": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1850": {
      "op": "bytec 24 // \"voters_count\"",
      "stack_out": [
        "0",
        "\"voters_count\""
      ]
    },
    "1852": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1853": {
      "error": "check self.voters_count exists",
      "op": "assert // check self.voters_count exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1854": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "1855": {
      "op": "bytec 7 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d656d62657273",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "1857": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1858": {
      "error": "check self.committee_members exists",
      "op": "assert // check self.committee_members exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1859": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1860": {
      "op": "bz assign_voter_after_if_else@2",
      "stack_out": []
    },
    "1863": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1864": {
      "op": "bytec 25 // \"assigned_votes\"",
      "stack_out": [
        "0",
        "\"assigned_votes\""
      ]
    },
    "1866": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1867": {
      "error": "check self.assigned_votes exists",
      "op": "assert // check self.assigned_votes exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "1868": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#0",
        "0"
      ]
    },
    "1869": {
      "op": "bytec 9 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f766f746573",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "0",
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "1871": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1872": {
      "error": "check self.committee_votes exists",
      "op": "assert // check self.committee_votes exists",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "1873": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1874": {
      "error": "Voting Power Mismatch",
      "op": "assert // Voting Power Mismatch",
      "stack_out": []
    },
    "1875": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "0x737461747573"
      ]
    },
    "1876": {
      "op": "pushint 25 // 25",
      "defined_out": [
        "0x737461747573",
        "25"
      ],
      "stack_out": [
        "0x737461747573",
        "25"
      ]
    },
    "1878": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1879": {
      "op": "bytec 19 // 0x766f74655f6f70656e696e675f74696d657374616d70"
    },
    "1881": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "0x766f74655f6f70656e696e675f74696d657374616d70",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "0x766f74655f6f70656e696e675f74696d657374616d70",
        "new_state_value%2#0"
      ]
    },
    "1883": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1884": {
      "block": "assign_voter_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1885": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.assign_voter_check_authorization",
      "params": {},
      "block": "assign_voter_check_authorization",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1888": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_committee_publisher",
      "op": "callsub is_committee_publisher",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1891": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "1892": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1893": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "0",
        "0x737461747573"
      ]
    },
    "1894": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1895": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1896": {
      "op": "intc_3 // 20",
      "defined_out": [
        "20",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "20"
      ]
    },
    "1897": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1898": {
      "error": "Wrong Proposal Status",
      "op": "assert // Wrong Proposal Status",
      "stack_out": []
    },
    "1899": {
      "retsub": true,
      "op": "retsub"
    },
    "1900": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.is_committee_publisher",
      "params": {},
      "block": "is_committee_publisher",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1903": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1905": {
      "op": "bytec 29 // 0x636f6d6d69747465655f7075626c6973686572",
      "defined_out": [
        "0x636f6d6d69747465655f7075626c6973686572",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x636f6d6d69747465655f7075626c6973686572"
      ]
    },
    "1907": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_bytes_from_registry_config",
      "op": "callsub get_bytes_from_registry_config",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1910": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1911": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1912": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "32"
      ]
    },
    "1914": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1915": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1916": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1917": {
      "retsub": true,
      "op": "retsub"
    },
    "1918": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.assign_voter_input_validation",
      "params": {
        "voter#0": "bytes",
        "voting_power#0": "uint64"
      },
      "block": "assign_voter_input_validation",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1921": {
      "op": "bytec 18 // \"V\"",
      "defined_out": [
        "\"V\""
      ],
      "stack_out": [
        "\"V\""
      ]
    },
    "1923": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"V\"",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "\"V\"",
        "voter#0 (copy)"
      ]
    },
    "1925": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1926": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1927": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1929": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1930": {
      "error": "Voter Already Assigned",
      "op": "assert // Voter Already Assigned",
      "stack_out": []
    },
    "1931": {
      "op": "frame_dig -1",
      "defined_out": [
        "voting_power#0 (copy)"
      ],
      "stack_out": [
        "voting_power#0 (copy)"
      ]
    },
    "1933": {
      "error": "Invalid Voting Power",
      "op": "assert // Invalid Voting Power",
      "stack_out": []
    },
    "1934": {
      "retsub": true,
      "op": "retsub"
    },
    "1935": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.vote",
      "params": {
        "voter#0": "bytes",
        "approvals#0": "bytes",
        "rejections#0": "bytes"
      },
      "block": "vote",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1938": {
      "op": "bytec_2 // \"\"",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1939": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1940": {
      "callsub": "smart_contracts.proposal.contract.Proposal.vote_check_authorization",
      "op": "callsub vote_check_authorization",
      "defined_out": [
        "error#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0"
      ]
    },
    "1943": {
      "op": "dup",
      "defined_out": [
        "error#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "error#0"
      ]
    },
    "1944": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "error#0",
        "0x0000"
      ]
    },
    "1945": {
      "op": "!=",
      "defined_out": [
        "error#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%0#0"
      ]
    },
    "1946": {
      "op": "bz vote_after_if_else@2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0"
      ]
    },
    "1949": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "error#0"
      ]
    },
    "1951": {
      "op": "frame_bury 0"
    },
    "1953": {
      "retsub": true,
      "op": "retsub"
    },
    "1954": {
      "block": "vote_after_if_else@2",
      "stack_in": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "approvals#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "approvals#0 (copy)"
      ]
    },
    "1956": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0"
      ]
    },
    "1957": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1958": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0"
      ]
    },
    "1960": {
      "op": "frame_dig -1",
      "defined_out": [
        "rejections#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0",
        "rejections#0 (copy)"
      ]
    },
    "1962": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1963": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "1964": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1966": {
      "op": "frame_dig -3",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0",
        "tmp%2#0",
        "voter#0 (copy)"
      ]
    },
    "1968": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "voter#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1970": {
      "callsub": "smart_contracts.proposal.contract.Proposal.vote_input_validation",
      "op": "callsub vote_input_validation",
      "defined_out": [
        "error#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "error#0"
      ]
    },
    "1973": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "error#0",
        "error#0"
      ]
    },
    "1974": {
      "op": "frame_bury 2",
      "defined_out": [
        "error#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "error#0"
      ]
    },
    "1976": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "error#0",
        "0x0000"
      ]
    },
    "1977": {
      "op": "!=",
      "defined_out": [
        "error#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%3#0"
      ]
    },
    "1978": {
      "op": "bz vote_after_if_else@4",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0"
      ]
    },
    "1981": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "error#0"
      ]
    },
    "1983": {
      "op": "frame_bury 0"
    },
    "1985": {
      "retsub": true,
      "op": "retsub"
    },
    "1986": {
      "block": "vote_after_if_else@4",
      "stack_in": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0"
      ],
      "op": "bytec 18 // \"V\"",
      "defined_out": [
        "\"V\""
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "\"V\""
      ]
    },
    "1988": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"V\"",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "\"V\"",
        "voter#0 (copy)"
      ]
    },
    "1990": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%4#0"
      ]
    },
    "1991": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1992": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "tmp%4#0",
        "voter_box#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%4#0",
        "voter_box#0",
        "maybe_exists%0#0"
      ]
    },
    "1993": {
      "error": "check self.voters entry exists",
      "op": "assert // check self.voters entry exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%4#0",
        "voter_box#0"
      ]
    },
    "1994": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1997": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1998": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "0x80"
      ]
    },
    "2001": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%4#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2002": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0",
        "encoded_tuple_buffer%2#0",
        "tmp%4#0"
      ]
    },
    "2004": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0",
        "tmp%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2005": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0"
      ]
    },
    "2006": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0",
        "0"
      ]
    },
    "2007": {
      "op": "bytec 10 // 0x766f7465645f6d656d62657273",
      "defined_out": [
        "0",
        "0x766f7465645f6d656d62657273",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0",
        "0",
        "0x766f7465645f6d656d62657273"
      ]
    },
    "2009": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2010": {
      "error": "check self.voted_members exists",
      "op": "assert // check self.voted_members exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "2011": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "2012": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0",
        "new_state_value%0#0"
      ]
    },
    "2013": {
      "op": "bytec 10 // 0x766f7465645f6d656d62657273",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0",
        "new_state_value%0#0",
        "0x766f7465645f6d656d62657273"
      ]
    },
    "2015": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0",
        "0x766f7465645f6d656d62657273",
        "new_state_value%0#0"
      ]
    },
    "2016": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%5#0"
      ]
    },
    "2017": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%8#0"
      ]
    },
    "2018": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%8#0",
        "tmp%1#0"
      ]
    },
    "2020": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%8#0",
        "tmp%1#0 (copy)",
        "tmp%1#0 (copy)"
      ]
    },
    "2021": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2023": {
      "op": "-",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0",
        "tmp%10#0"
      ]
    },
    "2024": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%2#0"
      ]
    },
    "2026": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%2#0 (copy)",
        "tmp%2#0 (copy)"
      ]
    },
    "2027": {
      "op": "cover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2029": {
      "op": "-",
      "defined_out": [
        "nulls#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "tmp%1#0",
        "nulls#0"
      ]
    },
    "2030": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "tmp%1#0",
        "nulls#0",
        "0"
      ]
    },
    "2031": {
      "op": "bytec 11 // 0x617070726f76616c73",
      "defined_out": [
        "0",
        "0x617070726f76616c73",
        "nulls#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "tmp%1#0",
        "nulls#0",
        "0",
        "0x617070726f76616c73"
      ]
    },
    "2033": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "nulls#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "tmp%1#0",
        "nulls#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2034": {
      "error": "check self.approvals exists",
      "op": "assert // check self.approvals exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "tmp%1#0",
        "nulls#0",
        "maybe_value%2#0"
      ]
    },
    "2035": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "nulls#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ]
    },
    "2037": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0",
        "nulls#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "nulls#0",
        "new_state_value%1#0"
      ]
    },
    "2038": {
      "op": "bytec 11 // 0x617070726f76616c73",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "nulls#0",
        "new_state_value%1#0",
        "0x617070726f76616c73"
      ]
    },
    "2040": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "nulls#0",
        "0x617070726f76616c73",
        "new_state_value%1#0"
      ]
    },
    "2041": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "nulls#0"
      ]
    },
    "2042": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "nulls#0",
        "0"
      ]
    },
    "2043": {
      "op": "bytec 12 // 0x72656a656374696f6e73",
      "defined_out": [
        "0",
        "0x72656a656374696f6e73",
        "nulls#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "nulls#0",
        "0",
        "0x72656a656374696f6e73"
      ]
    },
    "2045": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "nulls#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "nulls#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2046": {
      "error": "check self.rejections exists",
      "op": "assert // check self.rejections exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "tmp%2#0",
        "nulls#0",
        "maybe_value%3#0"
      ]
    },
    "2047": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "nulls#0",
        "maybe_value%3#0",
        "tmp%2#0"
      ]
    },
    "2049": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0",
        "nulls#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "nulls#0",
        "new_state_value%2#0"
      ]
    },
    "2050": {
      "op": "bytec 12 // 0x72656a656374696f6e73",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "nulls#0",
        "new_state_value%2#0",
        "0x72656a656374696f6e73"
      ]
    },
    "2052": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "nulls#0",
        "0x72656a656374696f6e73",
        "new_state_value%2#0"
      ]
    },
    "2053": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "nulls#0"
      ]
    },
    "2054": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "nulls#0",
        "0"
      ]
    },
    "2055": {
      "op": "bytec 17 // 0x6e756c6c73",
      "defined_out": [
        "0",
        "0x6e756c6c73",
        "nulls#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "nulls#0",
        "0",
        "0x6e756c6c73"
      ]
    },
    "2057": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "nulls#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "nulls#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2058": {
      "error": "check self.nulls exists",
      "op": "assert // check self.nulls exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "nulls#0",
        "maybe_value%4#0"
      ]
    },
    "2059": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "new_state_value%3#0"
      ]
    },
    "2060": {
      "op": "bytec 17 // 0x6e756c6c73",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "new_state_value%3#0",
        "0x6e756c6c73"
      ]
    },
    "2062": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "0x6e756c6c73",
        "new_state_value%3#0"
      ]
    },
    "2063": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0"
      ]
    },
    "2064": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "error#0",
        "0x0000"
      ]
    },
    "2065": {
      "op": "frame_bury 0"
    },
    "2067": {
      "retsub": true,
      "op": "retsub"
    },
    "2068": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.vote_check_authorization",
      "params": {},
      "block": "vote_check_authorization",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2071": {
      "op": "intc_0 // 0",
      "stack_out": [
        "error#0"
      ]
    },
    "2072": {
      "op": "bytec_2 // \"\"",
      "stack_out": [
        "error#0",
        "is_voting_open#0"
      ]
    },
    "2073": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_registry_call",
      "op": "callsub is_registry_call",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "tmp%0#0"
      ]
    },
    "2076": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "error#0",
        "is_voting_open#0"
      ]
    },
    "2077": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "0"
      ]
    },
    "2078": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "0",
        "0x737461747573"
      ]
    },
    "2079": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2080": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "maybe_value%0#0"
      ]
    },
    "2081": {
      "op": "pushint 25 // 25",
      "defined_out": [
        "25",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "maybe_value%0#0",
        "25"
      ]
    },
    "2083": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "tmp%1#0"
      ]
    },
    "2084": {
      "op": "bz vote_check_authorization_after_if_else@2",
      "stack_out": [
        "error#0",
        "is_voting_open#0"
      ]
    },
    "2087": {
      "op": "bytec 28 // 0x00194552523a57726f6e672050726f706f73616c20537461747573",
      "defined_out": [
        "0x00194552523a57726f6e672050726f706f73616c20537461747573"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "0x00194552523a57726f6e672050726f706f73616c20537461747573"
      ]
    },
    "2089": {
      "op": "frame_bury 0"
    },
    "2091": {
      "retsub": true,
      "op": "retsub"
    },
    "2092": {
      "block": "vote_check_authorization_after_if_else@2",
      "stack_in": [
        "error#0",
        "is_voting_open#0"
      ],
      "callsub": "smart_contracts.proposal.contract.Proposal.is_voting_open",
      "op": "callsub is_voting_open",
      "defined_out": [
        "error#0",
        "is_voting_open#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "is_voting_open#0",
        "error#0"
      ]
    },
    "2095": {
      "op": "dup",
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "is_voting_open#0",
        "error#0",
        "error#0 (copy)"
      ]
    },
    "2096": {
      "op": "cover 2",
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "error#0",
        "is_voting_open#0",
        "error#0"
      ]
    },
    "2098": {
      "op": "frame_bury 0",
      "defined_out": [
        "error#0",
        "is_voting_open#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "error#0",
        "is_voting_open#0"
      ]
    },
    "2100": {
      "op": "frame_bury 1",
      "defined_out": [
        "error#0",
        "is_voting_open#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "error#0"
      ]
    },
    "2102": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0",
        "is_voting_open#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "error#0",
        "0x0000"
      ]
    },
    "2103": {
      "op": "!=",
      "defined_out": [
        "error#0",
        "is_voting_open#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "tmp%2#0"
      ]
    },
    "2104": {
      "op": "bz vote_check_authorization_after_if_else@4",
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "error#0"
      ]
    },
    "2107": {
      "retsub": true,
      "op": "retsub"
    },
    "2108": {
      "block": "vote_check_authorization_after_if_else@4",
      "stack_in": [
        "error#0",
        "is_voting_open#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "is_voting_open#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "is_voting_open#0"
      ]
    },
    "2110": {
      "op": "bnz vote_check_authorization_after_if_else@6",
      "stack_out": [
        "error#0",
        "is_voting_open#0"
      ]
    },
    "2113": {
      "op": "pushbytes 0x00194552523a566f74696e6720506572696f642045787069726564",
      "defined_out": [
        "0x00194552523a566f74696e6720506572696f642045787069726564",
        "is_voting_open#0"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "0x00194552523a566f74696e6720506572696f642045787069726564"
      ]
    },
    "2142": {
      "op": "frame_bury 0"
    },
    "2144": {
      "retsub": true,
      "op": "retsub"
    },
    "2145": {
      "block": "vote_check_authorization_after_if_else@6",
      "stack_in": [
        "error#0",
        "is_voting_open#0"
      ],
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "error#0",
        "is_voting_open#0",
        "0x0000"
      ]
    },
    "2146": {
      "op": "frame_bury 0"
    },
    "2148": {
      "retsub": true,
      "op": "retsub"
    },
    "2149": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.is_registry_call",
      "params": {},
      "block": "is_registry_call",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2152": {
      "op": "global CallerApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2154": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2155": {
      "op": "bytec 5 // 0x72656769737472795f6170705f6964",
      "defined_out": [
        "0",
        "0x72656769737472795f6170705f6964",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x72656769737472795f6170705f6964"
      ]
    },
    "2157": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2158": {
      "error": "check self.registry_app_id exists",
      "op": "assert // check self.registry_app_id exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2159": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2160": {
      "retsub": true,
      "op": "retsub"
    },
    "2161": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.is_voting_open",
      "params": {},
      "block": "is_voting_open",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "2164": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2166": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2167": {
      "op": "bytec 19 // 0x766f74655f6f70656e696e675f74696d657374616d70",
      "defined_out": [
        "0",
        "0x766f74655f6f70656e696e675f74696d657374616d70",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "0x766f74655f6f70656e696e675f74696d657374616d70"
      ]
    },
    "2169": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2170": {
      "error": "check self.vote_open_ts exists",
      "op": "assert // check self.vote_open_ts exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2171": {
      "op": "-",
      "defined_out": [
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0"
      ]
    },
    "2172": {
      "op": "intc_0 // 0",
      "stack_out": [
        "voting_duration#0",
        "0"
      ]
    },
    "2173": {
      "op": "bytec_3 // 0x66756e64696e675f63617465676f7279",
      "defined_out": [
        "0",
        "0x66756e64696e675f63617465676f7279",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "0",
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "2174": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2175": {
      "error": "check self.funding_category exists",
      "op": "assert // check self.funding_category exists",
      "stack_out": [
        "voting_duration#0",
        "maybe_value%1#0"
      ]
    },
    "2176": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_voting_duration",
      "op": "callsub get_voting_duration",
      "defined_out": [
        "error#0",
        "maximum_voting_duration#0",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "maximum_voting_duration#0",
        "error#0"
      ]
    },
    "2179": {
      "op": "dup",
      "stack_out": [
        "voting_duration#0",
        "maximum_voting_duration#0",
        "error#0",
        "error#0 (copy)"
      ]
    },
    "2180": {
      "op": "uncover 2",
      "defined_out": [
        "error#0",
        "maximum_voting_duration#0",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "error#0",
        "error#0",
        "maximum_voting_duration#0"
      ]
    },
    "2182": {
      "op": "swap",
      "defined_out": [
        "error#0",
        "maximum_voting_duration#0",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "error#0",
        "maximum_voting_duration#0",
        "error#0"
      ]
    },
    "2183": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0",
        "maximum_voting_duration#0",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "error#0",
        "maximum_voting_duration#0",
        "error#0",
        "0x0000"
      ]
    },
    "2184": {
      "op": "!=",
      "defined_out": [
        "error#0",
        "maximum_voting_duration#0",
        "tmp%1#0",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "error#0",
        "maximum_voting_duration#0",
        "tmp%1#0"
      ]
    },
    "2185": {
      "op": "bz is_voting_open_after_if_else@2",
      "stack_out": [
        "voting_duration#0",
        "error#0",
        "maximum_voting_duration#0"
      ]
    },
    "2188": {
      "op": "intc_0 // 0",
      "stack_out": [
        "voting_duration#0",
        "error#0",
        "maximum_voting_duration#0",
        "0",
        "error#0"
      ]
    },
    "2189": {
      "op": "frame_bury 0"
    },
    "2191": {
      "retsub": true,
      "op": "retsub"
    },
    "2192": {
      "block": "is_voting_open_after_if_else@2",
      "stack_in": [
        "voting_duration#0",
        "error#0",
        "maximum_voting_duration#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "error#0",
        "maximum_voting_duration#0",
        "voting_duration#0"
      ]
    },
    "2194": {
      "op": "frame_dig 2",
      "defined_out": [
        "maximum_voting_duration#0",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "error#0",
        "maximum_voting_duration#0",
        "voting_duration#0",
        "maximum_voting_duration#0"
      ]
    },
    "2196": {
      "op": "<=",
      "defined_out": [
        "maximum_voting_duration#0",
        "tmp%2#0",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "error#0",
        "maximum_voting_duration#0",
        "tmp%2#0"
      ]
    },
    "2197": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "maximum_voting_duration#0",
        "tmp%2#0",
        "voting_duration#0"
      ],
      "stack_out": [
        "voting_duration#0",
        "error#0",
        "maximum_voting_duration#0",
        "tmp%2#0",
        "0x0000"
      ]
    },
    "2198": {
      "op": "frame_bury 1"
    },
    "2200": {
      "op": "frame_bury 0"
    },
    "2202": {
      "retsub": true,
      "op": "retsub"
    },
    "2203": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.get_voting_duration",
      "params": {
        "category#0": "uint64"
      },
      "block": "get_voting_duration",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "2206": {
      "op": "frame_dig -1",
      "defined_out": [
        "category#0 (copy)"
      ],
      "stack_out": [
        "category#0 (copy)"
      ]
    },
    "2208": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "category#0 (copy)"
      ],
      "stack_out": [
        "category#0 (copy)",
        "10"
      ]
    },
    "2209": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2210": {
      "op": "bz get_voting_duration_else_body@2",
      "stack_out": []
    },
    "2213": {
      "op": "pushbytes 0x766f74696e675f6475726174696f6e5f736d616c6c",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f736d616c6c"
      ]
    },
    "2236": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2239": {
      "retsub": true,
      "op": "retsub"
    },
    "2240": {
      "block": "get_voting_duration_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "category#0 (copy)"
      ],
      "stack_out": [
        "category#0 (copy)"
      ]
    },
    "2242": {
      "op": "intc_3 // 20",
      "defined_out": [
        "20",
        "category#0 (copy)"
      ],
      "stack_out": [
        "category#0 (copy)",
        "20"
      ]
    },
    "2243": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2244": {
      "op": "bz get_voting_duration_else_body@4",
      "stack_out": []
    },
    "2247": {
      "op": "pushbytes 0x766f74696e675f6475726174696f6e5f6d656469756d",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6d656469756d"
      ]
    },
    "2271": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2274": {
      "retsub": true,
      "op": "retsub"
    },
    "2275": {
      "block": "get_voting_duration_else_body@4",
      "stack_in": [],
      "op": "pushbytes 0x766f74696e675f6475726174696f6e5f6c61726765",
      "defined_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ],
      "stack_out": [
        "0x766f74696e675f6475726174696f6e5f6c61726765"
      ]
    },
    "2298": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2301": {
      "retsub": true,
      "op": "retsub"
    },
    "2302": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.vote_input_validation",
      "params": {
        "voter#0": "bytes",
        "approvals#0": "uint64",
        "rejections#0": "uint64"
      },
      "block": "vote_input_validation",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2305": {
      "op": "intc_0 // 0",
      "stack_out": [
        "voter_box#0"
      ]
    },
    "2306": {
      "op": "bytec 18 // \"V\"",
      "defined_out": [
        "\"V\""
      ],
      "stack_out": [
        "voter_box#0",
        "\"V\""
      ]
    },
    "2308": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"V\"",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "voter_box#0",
        "\"V\"",
        "voter#0 (copy)"
      ]
    },
    "2310": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0"
      ]
    },
    "2311": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2312": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2313": {
      "op": "bury 1",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2315": {
      "op": "bnz vote_input_validation_after_if_else@2",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0"
      ]
    },
    "2318": {
      "op": "pushbytes 0x00134552523a566f746572206e6f7420666f756e64",
      "defined_out": [
        "0x00134552523a566f746572206e6f7420666f756e64",
        "tmp%0#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "0x00134552523a566f746572206e6f7420666f756e64"
      ]
    },
    "2341": {
      "op": "frame_bury 0"
    },
    "2343": {
      "retsub": true,
      "op": "retsub"
    },
    "2344": {
      "block": "vote_input_validation_after_if_else@2",
      "stack_in": [
        "voter_box#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2346": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "tmp%0#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "voter_box#0",
        "maybe_exists%1#0"
      ]
    },
    "2347": {
      "op": "swap",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "voter_box#0"
      ]
    },
    "2348": {
      "op": "dup",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "voter_box#0",
        "voter_box#0 (copy)"
      ]
    },
    "2349": {
      "op": "cover 2",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "voter_box#0",
        "maybe_exists%1#0",
        "voter_box#0"
      ]
    },
    "2351": {
      "op": "frame_bury 0",
      "defined_out": [
        "maybe_exists%1#0",
        "tmp%0#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "voter_box#0",
        "maybe_exists%1#0"
      ]
    },
    "2353": {
      "error": "check self.voters entry exists",
      "op": "assert // check self.voters entry exists",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "voter_box#0"
      ]
    },
    "2354": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "tmp%0#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "voter_box#0",
        "64"
      ]
    },
    "2356": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "tmp%0#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "is_true%0#0"
      ]
    },
    "2357": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "tmp%0#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "2359": {
      "op": "intc_0 // 0",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "2360": {
      "op": "uncover 2",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "2362": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%0#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "encoded_bool%0#0"
      ]
    },
    "2363": {
      "op": "bytec 16 // 0x00",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "2365": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2366": {
      "op": "bz vote_input_validation_after_if_else@4",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0"
      ]
    },
    "2369": {
      "op": "pushbytes 0x00174552523a566f74657220616c726561647920766f746564",
      "defined_out": [
        "0x00174552523a566f74657220616c726561647920766f746564",
        "tmp%0#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "0x00174552523a566f74657220616c726561647920766f746564"
      ]
    },
    "2396": {
      "op": "frame_bury 0"
    },
    "2398": {
      "retsub": true,
      "op": "retsub"
    },
    "2399": {
      "block": "vote_input_validation_after_if_else@4",
      "stack_in": [
        "voter_box#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "voter_box#0"
      ]
    },
    "2401": {
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "2404": {
      "op": "frame_dig -2",
      "defined_out": [
        "approvals#0 (copy)",
        "reinterpret_biguint%0#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "approvals#0 (copy)"
      ]
    },
    "2406": {
      "op": "frame_dig -1",
      "defined_out": [
        "approvals#0 (copy)",
        "reinterpret_biguint%0#0",
        "rejections#0 (copy)",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "approvals#0 (copy)",
        "rejections#0 (copy)"
      ]
    },
    "2408": {
      "op": "+",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%3#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%3#0"
      ]
    },
    "2409": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%4#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%4#0"
      ]
    },
    "2410": {
      "op": "b<",
      "defined_out": [
        "tmp%5#0",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "2411": {
      "op": "bz vote_input_validation_after_if_else@6",
      "stack_out": [
        "voter_box#0",
        "tmp%0#0"
      ]
    },
    "2414": {
      "op": "pushbytes 0x00124552523a566f746573206578636565646564",
      "defined_out": [
        "0x00124552523a566f746573206578636565646564",
        "voter_box#0"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "0x00124552523a566f746573206578636565646564"
      ]
    },
    "2436": {
      "op": "frame_bury 0"
    },
    "2438": {
      "retsub": true,
      "op": "retsub"
    },
    "2439": {
      "block": "vote_input_validation_after_if_else@6",
      "stack_in": [
        "voter_box#0",
        "tmp%0#0"
      ],
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "voter_box#0",
        "tmp%0#0",
        "0x0000"
      ]
    },
    "2440": {
      "op": "frame_bury 0"
    },
    "2442": {
      "retsub": true,
      "op": "retsub"
    },
    "2443": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.scrutiny",
      "params": {},
      "block": "scrutiny",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2446": {
      "callsub": "smart_contracts.proposal.contract.Proposal.scrutiny_check_authorization",
      "op": "callsub scrutiny_check_authorization"
    },
    "2449": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2450": {
      "op": "bytec_3 // 0x66756e64696e675f63617465676f7279",
      "defined_out": [
        "0",
        "0x66756e64696e675f63617465676f7279"
      ],
      "stack_out": [
        "0",
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "2451": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2452": {
      "error": "check self.funding_category exists",
      "op": "assert // check self.funding_category exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2453": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_quorum",
      "op": "callsub get_quorum",
      "defined_out": [
        "quorum_bps#0"
      ],
      "stack_out": [
        "quorum_bps#0"
      ]
    },
    "2456": {
      "op": "intc_0 // 0",
      "stack_out": [
        "quorum_bps#0",
        "0"
      ]
    },
    "2457": {
      "op": "bytec 7 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d656d62657273",
        "quorum_bps#0"
      ],
      "stack_out": [
        "quorum_bps#0",
        "0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "2459": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "quorum_bps#0"
      ],
      "stack_out": [
        "quorum_bps#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2460": {
      "error": "check self.committee_members exists",
      "op": "assert // check self.committee_members exists",
      "stack_out": [
        "quorum_bps#0",
        "maybe_value%1#0"
      ]
    },
    "2461": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "quorum_bps#0"
      ]
    },
    "2462": {
      "callsub": "smart_contracts.proposal.contract.Proposal.relative_to_absolute_amount",
      "op": "callsub relative_to_absolute_amount",
      "defined_out": [
        "minimum_voters_required#0"
      ],
      "stack_out": [
        "minimum_voters_required#0"
      ]
    },
    "2465": {
      "op": "intc_0 // 0",
      "stack_out": [
        "minimum_voters_required#0",
        "0"
      ]
    },
    "2466": {
      "op": "bytec_3 // 0x66756e64696e675f63617465676f7279",
      "stack_out": [
        "minimum_voters_required#0",
        "0",
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "2467": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "minimum_voters_required#0"
      ],
      "stack_out": [
        "minimum_voters_required#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2468": {
      "error": "check self.funding_category exists",
      "op": "assert // check self.funding_category exists",
      "stack_out": [
        "minimum_voters_required#0",
        "maybe_value%2#0"
      ]
    },
    "2469": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_weighted_quorum",
      "op": "callsub get_weighted_quorum",
      "defined_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0"
      ]
    },
    "2472": {
      "op": "intc_0 // 0",
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "0"
      ]
    },
    "2473": {
      "op": "bytec 11 // 0x617070726f76616c73",
      "defined_out": [
        "0",
        "0x617070726f76616c73",
        "minimum_voters_required#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "0",
        "0x617070726f76616c73"
      ]
    },
    "2475": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "minimum_voters_required#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2476": {
      "error": "check self.approvals exists",
      "op": "assert // check self.approvals exists",
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "maybe_value%3#0"
      ]
    },
    "2477": {
      "op": "intc_0 // 0",
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "2478": {
      "op": "bytec 12 // 0x72656a656374696f6e73",
      "defined_out": [
        "0",
        "0x72656a656374696f6e73",
        "maybe_value%3#0",
        "minimum_voters_required#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "maybe_value%3#0",
        "0",
        "0x72656a656374696f6e73"
      ]
    },
    "2480": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "minimum_voters_required#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2481": {
      "error": "check self.rejections exists",
      "op": "assert // check self.rejections exists",
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "2482": {
      "op": "+",
      "defined_out": [
        "minimum_voters_required#0",
        "tmp%0#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "tmp%0#0"
      ]
    },
    "2483": {
      "op": "intc_0 // 0",
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2484": {
      "op": "bytec 17 // 0x6e756c6c73",
      "defined_out": [
        "0",
        "0x6e756c6c73",
        "minimum_voters_required#0",
        "tmp%0#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "tmp%0#0",
        "0",
        "0x6e756c6c73"
      ]
    },
    "2486": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "minimum_voters_required#0",
        "tmp%0#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "tmp%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2487": {
      "error": "check self.nulls exists",
      "op": "assert // check self.nulls exists",
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "tmp%0#0",
        "maybe_value%5#0"
      ]
    },
    "2488": {
      "op": "+",
      "defined_out": [
        "minimum_voters_required#0",
        "total_votes#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "total_votes#0"
      ]
    },
    "2489": {
      "op": "cover 2",
      "defined_out": [
        "minimum_voters_required#0",
        "total_votes#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_voters_required#0",
        "weighted_quorum_bps#0"
      ]
    },
    "2491": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total_votes#0",
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "0"
      ]
    },
    "2492": {
      "op": "bytec 9 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f766f746573",
        "minimum_voters_required#0",
        "total_votes#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "0",
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "2494": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "minimum_voters_required#0",
        "total_votes#0",
        "weighted_quorum_bps#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2495": {
      "error": "check self.committee_votes exists",
      "op": "assert // check self.committee_votes exists",
      "stack_out": [
        "total_votes#0",
        "minimum_voters_required#0",
        "weighted_quorum_bps#0",
        "maybe_value%6#0"
      ]
    },
    "2496": {
      "op": "swap",
      "stack_out": [
        "total_votes#0",
        "minimum_voters_required#0",
        "maybe_value%6#0",
        "weighted_quorum_bps#0"
      ]
    },
    "2497": {
      "callsub": "smart_contracts.proposal.contract.Proposal.relative_to_absolute_amount",
      "op": "callsub relative_to_absolute_amount",
      "defined_out": [
        "minimum_voters_required#0",
        "minimum_votes_required#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_voters_required#0",
        "minimum_votes_required#0"
      ]
    },
    "2500": {
      "op": "swap",
      "defined_out": [
        "minimum_voters_required#0",
        "minimum_votes_required#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "minimum_voters_required#0"
      ]
    },
    "2501": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "minimum_voters_required#0",
        "0"
      ]
    },
    "2502": {
      "op": "bytec 10 // 0x766f7465645f6d656d62657273",
      "defined_out": [
        "0",
        "0x766f7465645f6d656d62657273",
        "minimum_voters_required#0",
        "minimum_votes_required#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "minimum_voters_required#0",
        "0",
        "0x766f7465645f6d656d62657273"
      ]
    },
    "2504": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "minimum_voters_required#0",
        "minimum_votes_required#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "minimum_voters_required#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "2505": {
      "error": "check self.voted_members exists",
      "op": "assert // check self.voted_members exists",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "minimum_voters_required#0",
        "maybe_value%7#0"
      ]
    },
    "2506": {
      "op": "<=",
      "defined_out": [
        "minimum_votes_required#0",
        "tmp%1#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "tmp%1#0"
      ]
    },
    "2507": {
      "op": "bz scrutiny_else_body@4",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0"
      ]
    },
    "2510": {
      "op": "frame_dig 0",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "total_votes#0"
      ]
    },
    "2512": {
      "op": "frame_dig 1",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "total_votes#0",
        "minimum_votes_required#0"
      ]
    },
    "2514": {
      "op": ">=",
      "defined_out": [
        "minimum_votes_required#0",
        "tmp%2#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "tmp%2#0"
      ]
    },
    "2515": {
      "op": "bz scrutiny_else_body@4",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0"
      ]
    },
    "2518": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0"
      ]
    },
    "2519": {
      "op": "bytec 11 // 0x617070726f76616c73",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0",
        "0x617070726f76616c73"
      ]
    },
    "2521": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "minimum_votes_required#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "2522": {
      "error": "check self.approvals exists",
      "op": "assert // check self.approvals exists",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "maybe_value%8#0"
      ]
    },
    "2523": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "maybe_value%8#0",
        "0"
      ]
    },
    "2524": {
      "op": "bytec 12 // 0x72656a656374696f6e73",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "maybe_value%8#0",
        "0",
        "0x72656a656374696f6e73"
      ]
    },
    "2526": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "minimum_votes_required#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "2527": {
      "error": "check self.rejections exists",
      "op": "assert // check self.rejections exists",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ]
    },
    "2528": {
      "op": ">",
      "defined_out": [
        "minimum_votes_required#0",
        "tmp%3#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "tmp%3#0"
      ]
    },
    "2529": {
      "op": "bz scrutiny_else_body@4",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0"
      ]
    },
    "2532": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573",
        "minimum_votes_required#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0x737461747573"
      ]
    },
    "2533": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "0x737461747573",
        "30",
        "minimum_votes_required#0",
        "total_votes#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0x737461747573",
        "30"
      ]
    },
    "2535": {
      "op": "app_global_put",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0"
      ]
    },
    "2536": {
      "op": "b scrutiny_after_if_else@5"
    },
    "2539": {
      "block": "scrutiny_else_body@4",
      "stack_in": [
        "total_votes#0",
        "minimum_votes_required#0"
      ],
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0x737461747573"
      ]
    },
    "2540": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "0x737461747573",
        "40"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0x737461747573",
        "40"
      ]
    },
    "2542": {
      "op": "app_global_put",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0"
      ]
    },
    "2543": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0"
      ]
    },
    "2544": {
      "op": "bytec 4 // 0x70726f706f736572",
      "defined_out": [
        "0",
        "0x70726f706f736572"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0",
        "0x70726f706f736572"
      ]
    },
    "2546": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "2547": {
      "error": "check self.proposer exists",
      "op": "assert // check self.proposer exists",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "maybe_value%10#0"
      ]
    },
    "2548": {
      "callsub": "smart_contracts.proposal.contract.Proposal.transfer_locked_amount",
      "op": "callsub transfer_locked_amount",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0"
      ]
    },
    "2551": {
      "op": "bytec 6 // 0x6c6f636b65645f616d6f756e74",
      "defined_out": [
        "0x6c6f636b65645f616d6f756e74"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0x6c6f636b65645f616d6f756e74"
      ]
    },
    "2553": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0x6c6f636b65645f616d6f756e74",
        "0"
      ]
    },
    "2554": {
      "op": "app_global_put",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0"
      ]
    },
    "2555": {
      "op": "bytec 8 // 0x636f6f6c5f646f776e5f73746172745f7473"
    },
    "2557": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "0x636f6f6c5f646f776e5f73746172745f7473",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0",
        "0x636f6f6c5f646f776e5f73746172745f7473",
        "new_state_value%0#0"
      ]
    },
    "2559": {
      "op": "app_global_put",
      "stack_out": [
        "total_votes#0",
        "minimum_votes_required#0"
      ]
    },
    "2560": {
      "block": "scrutiny_after_if_else@5",
      "stack_in": [
        "total_votes#0",
        "minimum_votes_required#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "2561": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.scrutiny_check_authorization",
      "params": {},
      "block": "scrutiny_check_authorization",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2564": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2565": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "0",
        "0x737461747573"
      ]
    },
    "2566": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2567": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2568": {
      "op": "pushint 25 // 25",
      "defined_out": [
        "25",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "25"
      ]
    },
    "2570": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2571": {
      "error": "Wrong Proposal Status",
      "op": "assert // Wrong Proposal Status",
      "stack_out": []
    },
    "2572": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_voting_open",
      "op": "callsub is_voting_open",
      "defined_out": [
        "error#0",
        "is_voting_open#0"
      ],
      "stack_out": [
        "is_voting_open#0",
        "error#0"
      ]
    },
    "2575": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0",
        "is_voting_open#0"
      ],
      "stack_out": [
        "is_voting_open#0",
        "error#0",
        "0x0000"
      ]
    },
    "2576": {
      "op": "==",
      "defined_out": [
        "is_voting_open#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "is_voting_open#0",
        "tmp%1#0"
      ]
    },
    "2577": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "is_voting_open#0"
      ]
    },
    "2578": {
      "op": "bz scrutiny_check_authorization_bool_true@2",
      "stack_out": []
    },
    "2581": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2582": {
      "op": "bytec 10 // 0x766f7465645f6d656d62657273",
      "defined_out": [
        "0",
        "0x766f7465645f6d656d62657273"
      ],
      "stack_out": [
        "0",
        "0x766f7465645f6d656d62657273"
      ]
    },
    "2584": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2585": {
      "error": "check self.voted_members exists",
      "op": "assert // check self.voted_members exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2586": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "2587": {
      "op": "bytec 7 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d656d62657273",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "2589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2590": {
      "error": "check self.committee_members exists",
      "op": "assert // check self.committee_members exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "2591": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2592": {
      "op": "bz scrutiny_check_authorization_bool_false@3",
      "stack_out": []
    },
    "2595": {
      "block": "scrutiny_check_authorization_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2596": {
      "op": "b scrutiny_check_authorization_bool_merge@4"
    },
    "2599": {
      "block": "scrutiny_check_authorization_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2600": {
      "block": "scrutiny_check_authorization_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Voting Ongoing",
      "op": "assert // Voting Ongoing",
      "defined_out": [],
      "stack_out": []
    },
    "2601": {
      "retsub": true,
      "op": "retsub"
    },
    "2602": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.get_quorum",
      "params": {
        "category#0": "uint64"
      },
      "block": "get_quorum",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2605": {
      "op": "intc_0 // 0",
      "stack_out": [
        "error#0"
      ]
    },
    "2606": {
      "op": "frame_dig -1",
      "defined_out": [
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)"
      ]
    },
    "2608": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)",
        "10"
      ]
    },
    "2609": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%0#0"
      ]
    },
    "2610": {
      "op": "bz get_quorum_else_body@2",
      "stack_out": [
        "error#0"
      ]
    },
    "2613": {
      "op": "pushbytes 0x71756f72756d5f736d616c6c",
      "defined_out": [
        "0x71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "error#0",
        "0x71756f72756d5f736d616c6c"
      ]
    },
    "2627": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "2630": {
      "op": "frame_bury 0",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "2632": {
      "op": "b get_quorum_after_if_else@6"
    },
    "2635": {
      "block": "get_quorum_else_body@2",
      "stack_in": [
        "error#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)"
      ]
    },
    "2637": {
      "op": "intc_3 // 20",
      "defined_out": [
        "20",
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)",
        "20"
      ]
    },
    "2638": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0"
      ]
    },
    "2639": {
      "op": "bz get_quorum_else_body@4",
      "stack_out": [
        "error#0"
      ]
    },
    "2642": {
      "op": "pushbytes 0x71756f72756d5f6d656469756d",
      "defined_out": [
        "0x71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "error#0",
        "0x71756f72756d5f6d656469756d"
      ]
    },
    "2657": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "2660": {
      "op": "frame_bury 0",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "2662": {
      "op": "b get_quorum_after_if_else@6"
    },
    "2665": {
      "block": "get_quorum_else_body@4",
      "stack_in": [
        "error#0"
      ],
      "op": "pushbytes 0x71756f72756d5f6c61726765",
      "defined_out": [
        "0x71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "error#0",
        "0x71756f72756d5f6c61726765"
      ]
    },
    "2679": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "2682": {
      "op": "frame_bury 0",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "2684": {
      "block": "get_quorum_after_if_else@6",
      "stack_in": [
        "error#0",
        "value#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "error#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "2686": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0",
        "0x0000"
      ]
    },
    "2687": {
      "op": "==",
      "defined_out": [
        "error#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "tmp%2#0"
      ]
    },
    "2688": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "2689": {
      "op": "swap"
    },
    "2690": {
      "retsub": true,
      "op": "retsub"
    },
    "2691": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.get_weighted_quorum",
      "params": {
        "category#0": "uint64"
      },
      "block": "get_weighted_quorum",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2694": {
      "op": "intc_0 // 0",
      "stack_out": [
        "error#0"
      ]
    },
    "2695": {
      "op": "frame_dig -1",
      "defined_out": [
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)"
      ]
    },
    "2697": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)",
        "10"
      ]
    },
    "2698": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%0#0"
      ]
    },
    "2699": {
      "op": "bz get_weighted_quorum_else_body@2",
      "stack_out": [
        "error#0"
      ]
    },
    "2702": {
      "op": "pushbytes 0x77656967687465645f71756f72756d5f736d616c6c",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ],
      "stack_out": [
        "error#0",
        "0x77656967687465645f71756f72756d5f736d616c6c"
      ]
    },
    "2725": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "2728": {
      "op": "frame_bury 0",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "2730": {
      "op": "b get_weighted_quorum_after_if_else@6"
    },
    "2733": {
      "block": "get_weighted_quorum_else_body@2",
      "stack_in": [
        "error#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)"
      ]
    },
    "2735": {
      "op": "intc_3 // 20",
      "defined_out": [
        "20",
        "category#0 (copy)"
      ],
      "stack_out": [
        "error#0",
        "category#0 (copy)",
        "20"
      ]
    },
    "2736": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%1#0"
      ]
    },
    "2737": {
      "op": "bz get_weighted_quorum_else_body@4",
      "stack_out": [
        "error#0"
      ]
    },
    "2740": {
      "op": "pushbytes 0x77656967687465645f71756f72756d5f6d656469756d",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ],
      "stack_out": [
        "error#0",
        "0x77656967687465645f71756f72756d5f6d656469756d"
      ]
    },
    "2764": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "2767": {
      "op": "frame_bury 0",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "2769": {
      "op": "b get_weighted_quorum_after_if_else@6"
    },
    "2772": {
      "block": "get_weighted_quorum_else_body@4",
      "stack_in": [
        "error#0"
      ],
      "op": "pushbytes 0x77656967687465645f71756f72756d5f6c61726765",
      "defined_out": [
        "0x77656967687465645f71756f72756d5f6c61726765"
      ],
      "stack_out": [
        "error#0",
        "0x77656967687465645f71756f72756d5f6c61726765"
      ]
    },
    "2795": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "2798": {
      "op": "frame_bury 0",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "2800": {
      "block": "get_weighted_quorum_after_if_else@6",
      "stack_in": [
        "error#0",
        "value#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "error#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0"
      ]
    },
    "2802": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "error#0",
        "0x0000"
      ]
    },
    "2803": {
      "op": "==",
      "defined_out": [
        "error#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "error#0",
        "value#0",
        "tmp%2#0"
      ]
    },
    "2804": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "defined_out": [
        "error#0",
        "value#0"
      ],
      "stack_out": [
        "error#0",
        "value#0"
      ]
    },
    "2805": {
      "op": "swap"
    },
    "2806": {
      "retsub": true,
      "op": "retsub"
    },
    "2807": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.review",
      "params": {
        "block#0": "uint64"
      },
      "block": "review",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2810": {
      "callsub": "smart_contracts.proposal.contract.Proposal.review_check_authorization",
      "op": "callsub review_check_authorization"
    },
    "2813": {
      "op": "frame_dig -1",
      "defined_out": [
        "block#0 (copy)"
      ],
      "stack_out": [
        "block#0 (copy)"
      ]
    },
    "2815": {
      "op": "bz review_else_body@2",
      "stack_out": []
    },
    "2818": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "0x737461747573"
      ]
    },
    "2819": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "0x737461747573",
        "60"
      ],
      "stack_out": [
        "0x737461747573",
        "60"
      ]
    },
    "2821": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2822": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2823": {
      "op": "bytec 5 // 0x72656769737472795f6170705f6964",
      "defined_out": [
        "0",
        "0x72656769737472795f6170705f6964"
      ],
      "stack_out": [
        "0",
        "0x72656769737472795f6170705f6964"
      ]
    },
    "2825": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "reg_app#0"
      ],
      "stack_out": [
        "reg_app#0",
        "maybe_exists%0#0"
      ]
    },
    "2826": {
      "error": "check self.registry_app_id exists",
      "op": "assert // check self.registry_app_id exists",
      "stack_out": [
        "reg_app#0"
      ]
    },
    "2827": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "2829": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "2830": {
      "callsub": "smart_contracts.proposal.contract.Proposal.transfer_locked_amount",
      "op": "callsub transfer_locked_amount",
      "stack_out": []
    },
    "2833": {
      "op": "bytec 6 // 0x6c6f636b65645f616d6f756e74",
      "defined_out": [
        "0x6c6f636b65645f616d6f756e74"
      ],
      "stack_out": [
        "0x6c6f636b65645f616d6f756e74"
      ]
    },
    "2835": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x6c6f636b65645f616d6f756e74",
        "0"
      ]
    },
    "2836": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2837": {
      "op": "bytec 8 // 0x636f6f6c5f646f776e5f73746172745f7473"
    },
    "2839": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "0x636f6f6c5f646f776e5f73746172745f7473",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "0x636f6f6c5f646f776e5f73746172745f7473",
        "new_state_value%0#0"
      ]
    },
    "2841": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2842": {
      "op": "b review_after_if_else@3"
    },
    "2845": {
      "block": "review_else_body@2",
      "stack_in": [],
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "0x737461747573"
      ]
    },
    "2846": {
      "op": "pushint 45 // 45",
      "defined_out": [
        "0x737461747573",
        "45"
      ],
      "stack_out": [
        "0x737461747573",
        "45"
      ]
    },
    "2848": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2849": {
      "block": "review_after_if_else@3",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2850": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.review_check_authorization",
      "params": {},
      "block": "review_check_authorization",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2853": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_reviewer",
      "op": "callsub is_reviewer",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2856": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "2857": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2858": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "0",
        "0x737461747573"
      ]
    },
    "2859": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2860": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2861": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "30",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "30"
      ]
    },
    "2863": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2864": {
      "error": "Wrong Proposal Status",
      "op": "assert // Wrong Proposal Status",
      "stack_out": []
    },
    "2865": {
      "retsub": true,
      "op": "retsub"
    },
    "2866": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.is_reviewer",
      "params": {},
      "block": "is_reviewer",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2869": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2871": {
      "op": "pushbytes 0x78676f765f7265766965776572",
      "defined_out": [
        "0x78676f765f7265766965776572",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x78676f765f7265766965776572"
      ]
    },
    "2886": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_bytes_from_registry_config",
      "op": "callsub get_bytes_from_registry_config",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2889": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2890": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2891": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "32"
      ]
    },
    "2893": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2894": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2895": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2896": {
      "retsub": true,
      "op": "retsub"
    },
    "2897": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.fund",
      "params": {},
      "block": "fund",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2900": {
      "callsub": "smart_contracts.proposal.contract.Proposal.fund_check_authorization",
      "op": "callsub fund_check_authorization",
      "defined_out": [
        "error#0"
      ],
      "stack_out": [
        "error#0"
      ]
    },
    "2903": {
      "op": "dup",
      "defined_out": [
        "error#0"
      ],
      "stack_out": [
        "error#0",
        "error#0"
      ]
    },
    "2904": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0"
      ],
      "stack_out": [
        "error#0",
        "error#0",
        "0x0000"
      ]
    },
    "2905": {
      "op": "!=",
      "defined_out": [
        "error#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%0#0"
      ]
    },
    "2906": {
      "op": "bz fund_after_if_else@2",
      "stack_out": [
        "error#0"
      ]
    },
    "2909": {
      "op": "frame_dig 0",
      "stack_out": [
        "error#0",
        "error#0"
      ]
    },
    "2911": {
      "op": "swap"
    },
    "2912": {
      "retsub": true,
      "op": "retsub"
    },
    "2913": {
      "block": "fund_after_if_else@2",
      "stack_in": [
        "error#0"
      ],
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "error#0",
        "0x737461747573"
      ]
    },
    "2914": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "0x737461747573",
        "50"
      ],
      "stack_out": [
        "error#0",
        "0x737461747573",
        "50"
      ]
    },
    "2916": {
      "op": "app_global_put",
      "stack_out": [
        "error#0"
      ]
    },
    "2917": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "error#0",
        "0"
      ]
    },
    "2918": {
      "op": "bytec 4 // 0x70726f706f736572",
      "defined_out": [
        "0",
        "0x70726f706f736572"
      ],
      "stack_out": [
        "error#0",
        "0",
        "0x70726f706f736572"
      ]
    },
    "2920": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "error#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2921": {
      "error": "check self.proposer exists",
      "op": "assert // check self.proposer exists",
      "stack_out": [
        "error#0",
        "maybe_value%0#0"
      ]
    },
    "2922": {
      "callsub": "smart_contracts.proposal.contract.Proposal.transfer_locked_amount",
      "op": "callsub transfer_locked_amount",
      "stack_out": [
        "error#0"
      ]
    },
    "2925": {
      "op": "bytec 6 // 0x6c6f636b65645f616d6f756e74",
      "defined_out": [
        "0x6c6f636b65645f616d6f756e74"
      ],
      "stack_out": [
        "error#0",
        "0x6c6f636b65645f616d6f756e74"
      ]
    },
    "2927": {
      "op": "intc_0 // 0",
      "stack_out": [
        "error#0",
        "0x6c6f636b65645f616d6f756e74",
        "0"
      ]
    },
    "2928": {
      "op": "app_global_put",
      "stack_out": [
        "error#0"
      ]
    },
    "2929": {
      "op": "bytec 8 // 0x636f6f6c5f646f776e5f73746172745f7473"
    },
    "2931": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "0x636f6f6c5f646f776e5f73746172745f7473",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "error#0",
        "0x636f6f6c5f646f776e5f73746172745f7473",
        "new_state_value%0#0"
      ]
    },
    "2933": {
      "op": "app_global_put",
      "stack_out": [
        "error#0"
      ]
    },
    "2934": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "error#0",
        "0x0000"
      ]
    },
    "2935": {
      "op": "swap"
    },
    "2936": {
      "retsub": true,
      "op": "retsub"
    },
    "2937": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.fund_check_authorization",
      "params": {},
      "block": "fund_check_authorization",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2940": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_registry_call",
      "op": "callsub is_registry_call",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2943": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "2944": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2945": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "0",
        "0x737461747573"
      ]
    },
    "2946": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2947": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2948": {
      "op": "pushint 45 // 45",
      "defined_out": [
        "45",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "45"
      ]
    },
    "2950": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2951": {
      "op": "bz fund_check_authorization_after_if_else@2",
      "stack_out": []
    },
    "2954": {
      "op": "bytec 28 // 0x00194552523a57726f6e672050726f706f73616c20537461747573",
      "defined_out": [
        "0x00194552523a57726f6e672050726f706f73616c20537461747573"
      ],
      "stack_out": [
        "0x00194552523a57726f6e672050726f706f73616c20537461747573"
      ]
    },
    "2956": {
      "retsub": true,
      "op": "retsub"
    },
    "2957": {
      "block": "fund_check_authorization_after_if_else@2",
      "stack_in": [],
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "2958": {
      "retsub": true,
      "op": "retsub"
    },
    "2959": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.decommission",
      "params": {
        "voters#0": "bytes"
      },
      "block": "decommission",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2962": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2963": {
      "callsub": "smart_contracts.proposal.contract.Proposal.decommission_check_authorization",
      "op": "callsub decommission_check_authorization"
    },
    "2966": {
      "op": "frame_dig -1",
      "defined_out": [
        "voters#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "voters#0 (copy)"
      ]
    },
    "2968": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "voters#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "voters#0 (copy)",
        "0"
      ]
    },
    "2969": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0"
      ]
    },
    "2970": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2971": {
      "block": "decommission_for_header@1",
      "stack_in": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2973": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "2975": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "2976": {
      "op": "bz decommission_after_for@6",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2979": {
      "op": "frame_dig -1",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "voters#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "voters#0 (copy)"
      ]
    },
    "2981": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "2984": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2986": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "32"
      ]
    },
    "2988": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "2989": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "2991": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "voter#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "voter#0"
      ]
    },
    "2992": {
      "op": "bytec 18 // \"V\"",
      "defined_out": [
        "\"V\"",
        "array_length%0#0",
        "item_index_internal%0#0",
        "voter#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "voter#0",
        "\"V\""
      ]
    },
    "2994": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "\"V\"",
        "voter#0"
      ]
    },
    "2995": {
      "op": "concat",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0"
      ]
    },
    "2996": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2997": {
      "op": "frame_bury 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0"
      ]
    },
    "2999": {
      "op": "box_len",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3000": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3002": {
      "op": "bz decommission_after_if_else@4",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "3005": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0"
      ]
    },
    "3007": {
      "op": "box_del",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "{box_del}"
      ]
    },
    "3008": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "3009": {
      "block": "decommission_after_if_else@4",
      "stack_in": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "3011": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "3012": {
      "op": "+",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "3013": {
      "op": "frame_bury 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "3015": {
      "op": "b decommission_for_header@1"
    },
    "3018": {
      "block": "decommission_after_for@6",
      "stack_in": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "tmp%2#0"
      ]
    },
    "3020": {
      "op": "acct_params_get AcctTotalBoxes",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "3022": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "value%0#0"
      ]
    },
    "3023": {
      "op": "bnz decommission_after_if_else@8",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "3026": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "0"
      ]
    },
    "3027": {
      "op": "bytec 5 // 0x72656769737472795f6170705f6964",
      "defined_out": [
        "0",
        "0x72656769737472795f6170705f6964"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "0",
        "0x72656769737472795f6170705f6964"
      ]
    },
    "3029": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "reg_app#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "reg_app#0",
        "maybe_exists%1#0"
      ]
    },
    "3030": {
      "error": "check self.registry_app_id exists",
      "op": "assert // check self.registry_app_id exists",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "reg_app#0"
      ]
    },
    "3031": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "3033": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "value%1#0"
      ]
    },
    "3034": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "value%1#0",
        "tmp%4#0"
      ]
    },
    "3036": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%2#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "value%1#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "3038": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "value%1#0",
        "value%2#0"
      ]
    },
    "3039": {
      "callsub": "smart_contracts.proposal.contract.Proposal.pay",
      "op": "callsub pay",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "3042": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0x737461747573"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "0x737461747573"
      ]
    },
    "3043": {
      "op": "pushint 70 // 70",
      "defined_out": [
        "0x737461747573",
        "70"
      ],
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "0x737461747573",
        "70"
      ]
    },
    "3045": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "3046": {
      "block": "decommission_after_if_else@8",
      "stack_in": [
        "tmp%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "3047": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.decommission_check_authorization",
      "params": {},
      "block": "decommission_check_authorization",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "3050": {
      "op": "bytec_2 // \"\"",
      "stack_out": [
        "cooldown_duration#0"
      ]
    },
    "3051": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_committee_publisher",
      "op": "callsub is_committee_publisher",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "tmp%0#0"
      ]
    },
    "3054": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": [
        "cooldown_duration#0"
      ]
    },
    "3055": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "0"
      ]
    },
    "3056": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "0",
        "0x737461747573"
      ]
    },
    "3057": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3058": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%0#0"
      ]
    },
    "3059": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%0#0",
        "50"
      ]
    },
    "3061": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "tmp%1#0"
      ]
    },
    "3062": {
      "op": "bnz decommission_check_authorization_bool_true@3",
      "stack_out": [
        "cooldown_duration#0"
      ]
    },
    "3065": {
      "op": "intc_0 // 0",
      "stack_out": [
        "cooldown_duration#0",
        "0"
      ]
    },
    "3066": {
      "op": "bytec_1 // 0x737461747573",
      "stack_out": [
        "cooldown_duration#0",
        "0",
        "0x737461747573"
      ]
    },
    "3067": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3068": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%1#0"
      ]
    },
    "3069": {
      "op": "pushint 60 // 60",
      "defined_out": [
        "60",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%1#0",
        "60"
      ]
    },
    "3071": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "tmp%2#0"
      ]
    },
    "3072": {
      "op": "bnz decommission_check_authorization_bool_true@3",
      "stack_out": [
        "cooldown_duration#0"
      ]
    },
    "3075": {
      "op": "intc_0 // 0",
      "stack_out": [
        "cooldown_duration#0",
        "0"
      ]
    },
    "3076": {
      "op": "bytec_1 // 0x737461747573",
      "stack_out": [
        "cooldown_duration#0",
        "0",
        "0x737461747573"
      ]
    },
    "3077": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3078": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%2#0"
      ]
    },
    "3079": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%2#0",
        "40"
      ]
    },
    "3081": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "tmp%3#0"
      ]
    },
    "3082": {
      "op": "bz decommission_check_authorization_bool_false@4",
      "stack_out": [
        "cooldown_duration#0"
      ]
    },
    "3085": {
      "block": "decommission_check_authorization_bool_true@3",
      "stack_in": [
        "cooldown_duration#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "or_result%0#0"
      ]
    },
    "3086": {
      "op": "b decommission_check_authorization_bool_merge@5"
    },
    "3089": {
      "block": "decommission_check_authorization_bool_false@4",
      "stack_in": [
        "cooldown_duration#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "or_result%0#0"
      ]
    },
    "3090": {
      "block": "decommission_check_authorization_bool_merge@5",
      "stack_in": [
        "cooldown_duration#0",
        "or_result%0#0"
      ],
      "error": "Wrong Proposal Status",
      "op": "assert // Wrong Proposal Status",
      "defined_out": [],
      "stack_out": [
        "cooldown_duration#0"
      ]
    },
    "3091": {
      "op": "pushbytes 0x636f6f6c5f646f776e5f6475726174696f6e",
      "defined_out": [
        "0x636f6f6c5f646f776e5f6475726174696f6e"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "0x636f6f6c5f646f776e5f6475726174696f6e"
      ]
    },
    "3111": {
      "callsub": "smart_contracts.proposal.contract.Proposal.get_uint_from_registry_config",
      "op": "callsub get_uint_from_registry_config",
      "defined_out": [
        "cooldown_duration#0",
        "error#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "cooldown_duration#0",
        "error#0"
      ]
    },
    "3114": {
      "op": "swap",
      "stack_out": [
        "cooldown_duration#0",
        "error#0",
        "cooldown_duration#0"
      ]
    },
    "3115": {
      "op": "frame_bury 0",
      "defined_out": [
        "cooldown_duration#0",
        "error#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "error#0"
      ]
    },
    "3117": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "cooldown_duration#0",
        "error#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "error#0",
        "0x0000"
      ]
    },
    "3118": {
      "op": "==",
      "defined_out": [
        "cooldown_duration#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "tmp%4#0"
      ]
    },
    "3119": {
      "error": "Missing Config",
      "op": "assert // Missing Config",
      "stack_out": [
        "cooldown_duration#0"
      ]
    },
    "3120": {
      "op": "intc_0 // 0",
      "stack_out": [
        "cooldown_duration#0",
        "0"
      ]
    },
    "3121": {
      "op": "bytec 8 // 0x636f6f6c5f646f776e5f73746172745f7473",
      "defined_out": [
        "0",
        "0x636f6f6c5f646f776e5f73746172745f7473",
        "cooldown_duration#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "0",
        "0x636f6f6c5f646f776e5f73746172745f7473"
      ]
    },
    "3123": {
      "op": "app_global_get_ex",
      "defined_out": [
        "cooldown_duration#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3124": {
      "error": "check self.cool_down_start_ts exists",
      "op": "assert // check self.cool_down_start_ts exists",
      "stack_out": [
        "cooldown_duration#0",
        "maybe_value%3#0"
      ]
    },
    "3125": {
      "op": "bz decommission_check_authorization_bool_false@8",
      "stack_out": [
        "cooldown_duration#0"
      ]
    },
    "3128": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "cooldown_duration#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "tmp%6#0"
      ]
    },
    "3130": {
      "op": "intc_0 // 0",
      "stack_out": [
        "cooldown_duration#0",
        "tmp%6#0",
        "0"
      ]
    },
    "3131": {
      "op": "bytec 8 // 0x636f6f6c5f646f776e5f73746172745f7473",
      "stack_out": [
        "cooldown_duration#0",
        "tmp%6#0",
        "0",
        "0x636f6f6c5f646f776e5f73746172745f7473"
      ]
    },
    "3133": {
      "op": "app_global_get_ex",
      "defined_out": [
        "cooldown_duration#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3134": {
      "error": "check self.cool_down_start_ts exists",
      "op": "assert // check self.cool_down_start_ts exists",
      "stack_out": [
        "cooldown_duration#0",
        "tmp%6#0",
        "maybe_value%4#0"
      ]
    },
    "3135": {
      "op": "frame_dig 0",
      "stack_out": [
        "cooldown_duration#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "cooldown_duration#0"
      ]
    },
    "3137": {
      "op": "+",
      "defined_out": [
        "cooldown_duration#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "3138": {
      "op": ">=",
      "defined_out": [
        "cooldown_duration#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "tmp%8#0"
      ]
    },
    "3139": {
      "op": "bz decommission_check_authorization_bool_false@8",
      "stack_out": [
        "cooldown_duration#0"
      ]
    },
    "3142": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "cooldown_duration#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "and_result%0#0"
      ]
    },
    "3143": {
      "op": "b decommission_check_authorization_bool_merge@9"
    },
    "3146": {
      "block": "decommission_check_authorization_bool_false@8",
      "stack_in": [
        "cooldown_duration#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "cooldown_duration#0",
        "and_result%0#0"
      ]
    },
    "3147": {
      "block": "decommission_check_authorization_bool_merge@9",
      "stack_in": [
        "cooldown_duration#0",
        "and_result%0#0"
      ],
      "error": "Too early",
      "op": "assert // Too early",
      "defined_out": [],
      "stack_out": [
        "cooldown_duration#0"
      ]
    },
    "3148": {
      "retsub": true,
      "op": "retsub"
    },
    "3149": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.delete",
      "params": {},
      "block": "delete",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3152": {
      "callsub": "smart_contracts.proposal.contract.Proposal.delete_check_authorization",
      "op": "callsub delete_check_authorization",
      "defined_out": [
        "error#0"
      ],
      "stack_out": [
        "error#0"
      ]
    },
    "3155": {
      "op": "dup",
      "defined_out": [
        "error#0"
      ],
      "stack_out": [
        "error#0",
        "error#0"
      ]
    },
    "3156": {
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000",
        "error#0"
      ],
      "stack_out": [
        "error#0",
        "error#0",
        "0x0000"
      ]
    },
    "3157": {
      "op": "!=",
      "defined_out": [
        "error#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "error#0",
        "tmp%0#0"
      ]
    },
    "3158": {
      "op": "bz delete_after_if_else@2",
      "stack_out": [
        "error#0"
      ]
    },
    "3161": {
      "op": "frame_dig 0",
      "stack_out": [
        "error#0",
        "error#0"
      ]
    },
    "3163": {
      "op": "swap"
    },
    "3164": {
      "retsub": true,
      "op": "retsub"
    },
    "3165": {
      "block": "delete_after_if_else@2",
      "stack_in": [
        "error#0"
      ],
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "error#0",
        "0x0000"
      ]
    },
    "3166": {
      "op": "swap"
    },
    "3167": {
      "retsub": true,
      "op": "retsub"
    },
    "3168": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.delete_check_authorization",
      "params": {},
      "block": "delete_check_authorization",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3171": {
      "callsub": "smart_contracts.proposal.contract.Proposal.is_registry_call",
      "op": "callsub is_registry_call",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3174": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "3175": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3176": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573"
      ],
      "stack_out": [
        "0",
        "0x737461747573"
      ]
    },
    "3177": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3178": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3179": {
      "op": "pushint 70 // 70",
      "defined_out": [
        "70",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "70"
      ]
    },
    "3181": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3182": {
      "op": "bz delete_check_authorization_after_if_else@2",
      "stack_out": []
    },
    "3185": {
      "op": "bytec 28 // 0x00194552523a57726f6e672050726f706f73616c20537461747573",
      "defined_out": [
        "0x00194552523a57726f6e672050726f706f73616c20537461747573"
      ],
      "stack_out": [
        "0x00194552523a57726f6e672050726f706f73616c20537461747573"
      ]
    },
    "3187": {
      "retsub": true,
      "op": "retsub"
    },
    "3188": {
      "block": "delete_check_authorization_after_if_else@2",
      "stack_in": [],
      "op": "bytec_0 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "3189": {
      "retsub": true,
      "op": "retsub"
    },
    "3190": {
      "subroutine": "smart_contracts.proposal.contract.Proposal.get_state",
      "params": {},
      "block": "get_state",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3193": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3194": {
      "op": "bytec 4 // 0x70726f706f736572",
      "defined_out": [
        "0",
        "0x70726f706f736572"
      ],
      "stack_out": [
        "0",
        "0x70726f706f736572"
      ]
    },
    "3196": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3197": {
      "error": "check self.proposer exists",
      "op": "assert // check self.proposer exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3198": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "3199": {
      "op": "bytec 5 // 0x72656769737472795f6170705f6964",
      "defined_out": [
        "0",
        "0x72656769737472795f6170705f6964",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "0x72656769737472795f6170705f6964"
      ]
    },
    "3201": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3202": {
      "error": "check self.registry_app_id exists",
      "op": "assert // check self.registry_app_id exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "3203": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "3204": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3205": {
      "op": "bytec 13 // 0x7469746c65",
      "defined_out": [
        "0",
        "0x7469746c65",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "0",
        "0x7469746c65"
      ]
    },
    "3207": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3208": {
      "error": "check self.title exists",
      "op": "assert // check self.title exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "3209": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "3210": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "maybe_value%0#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "length%0#0"
      ]
    },
    "3211": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "as_bytes%0#0"
      ]
    },
    "3212": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "maybe_value%0#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "length_uint16%0#0"
      ]
    },
    "3215": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "length_uint16%0#0",
        "maybe_value%2#0"
      ]
    },
    "3216": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0"
      ]
    },
    "3217": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "0"
      ]
    },
    "3218": {
      "op": "bytec 14 // 0x636964",
      "defined_out": [
        "0",
        "0x636964",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "0",
        "0x636964"
      ]
    },
    "3220": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3221": {
      "error": "check self.cid exists",
      "op": "assert // check self.cid exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0"
      ]
    },
    "3222": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "3223": {
      "op": "bytec 15 // 0x7375626d697373696f6e5f74696d657374616d70",
      "defined_out": [
        "0",
        "0x7375626d697373696f6e5f74696d657374616d70",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "0",
        "0x7375626d697373696f6e5f74696d657374616d70"
      ]
    },
    "3225": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3226": {
      "error": "check self.submission_ts exists",
      "op": "assert // check self.submission_ts exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "3227": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "3228": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "3229": {
      "op": "bytec 27 // 0x66696e616c697a6174696f6e5f74696d657374616d70",
      "defined_out": [
        "0",
        "0x66696e616c697a6174696f6e5f74696d657374616d70",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "0",
        "0x66696e616c697a6174696f6e5f74696d657374616d70"
      ]
    },
    "3231": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3232": {
      "error": "check self.finalization_ts exists",
      "op": "assert // check self.finalization_ts exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "maybe_value%5#0"
      ]
    },
    "3233": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3234": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "3235": {
      "op": "bytec 19 // 0x766f74655f6f70656e696e675f74696d657374616d70",
      "defined_out": [
        "0",
        "0x766f74655f6f70656e696e675f74696d657374616d70",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "0x766f74655f6f70656e696e675f74696d657374616d70"
      ]
    },
    "3237": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3238": {
      "error": "check self.vote_open_ts exists",
      "op": "assert // check self.vote_open_ts exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%6#0"
      ]
    },
    "3239": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "3240": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "3241": {
      "op": "bytec_1 // 0x737461747573",
      "defined_out": [
        "0",
        "0x737461747573",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "0x737461747573"
      ]
    },
    "3242": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%7#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%7#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3243": {
      "error": "check self.status exists",
      "op": "assert // check self.status exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%7#0"
      ]
    },
    "3244": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "3245": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0"
      ]
    },
    "3246": {
      "op": "bytec_3 // 0x66756e64696e675f63617465676f7279",
      "defined_out": [
        "0",
        "0x66756e64696e675f63617465676f7279",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0",
        "0x66756e64696e675f63617465676f7279"
      ]
    },
    "3247": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%8#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "3248": {
      "error": "check self.funding_category exists",
      "op": "assert // check self.funding_category exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%8#0"
      ]
    },
    "3249": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "3250": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0"
      ]
    },
    "3251": {
      "op": "bytec 20 // 0x666f637573",
      "defined_out": [
        "0",
        "0x666f637573",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0",
        "0x666f637573"
      ]
    },
    "3253": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%9#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "3254": {
      "error": "check self.focus exists",
      "op": "assert // check self.focus exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0"
      ]
    },
    "3255": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "0"
      ]
    },
    "3256": {
      "op": "bytec 21 // 0x66756e64696e675f74797065",
      "defined_out": [
        "0",
        "0x66756e64696e675f74797065",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "0",
        "0x66756e64696e675f74797065"
      ]
    },
    "3258": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%10#0",
        "maybe_value%0#0",
        "maybe_value%10#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "3259": {
      "error": "check self.funding_type exists",
      "op": "assert // check self.funding_type exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "maybe_value%10#0"
      ]
    },
    "3260": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0"
      ]
    },
    "3261": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "0"
      ]
    },
    "3262": {
      "op": "bytec 22 // 0x7265717565737465645f616d6f756e74",
      "defined_out": [
        "0",
        "0x7265717565737465645f616d6f756e74",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "0",
        "0x7265717565737465645f616d6f756e74"
      ]
    },
    "3264": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%11#0",
        "maybe_value%0#0",
        "maybe_value%11#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "3265": {
      "error": "check self.requested_amount exists",
      "op": "assert // check self.requested_amount exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "maybe_value%11#0"
      ]
    },
    "3266": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "3267": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "3268": {
      "op": "bytec 6 // 0x6c6f636b65645f616d6f756e74",
      "defined_out": [
        "0",
        "0x6c6f636b65645f616d6f756e74",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0",
        "0x6c6f636b65645f616d6f756e74"
      ]
    },
    "3270": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%12#0",
        "maybe_value%0#0",
        "maybe_value%12#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "3271": {
      "error": "check self.locked_amount exists",
      "op": "assert // check self.locked_amount exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%12#0"
      ]
    },
    "3272": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "3273": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0"
      ]
    },
    "3274": {
      "op": "bytec 23 // 0x636f6d6d69747465655f6964",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6964",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0",
        "0x636f6d6d69747465655f6964"
      ]
    },
    "3276": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%13#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "3277": {
      "error": "check self.committee_id exists",
      "op": "assert // check self.committee_id exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0"
      ]
    },
    "3278": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "0"
      ]
    },
    "3279": {
      "op": "bytec 7 // 0x636f6d6d69747465655f6d656d62657273",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f6d656d62657273",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "0",
        "0x636f6d6d69747465655f6d656d62657273"
      ]
    },
    "3281": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%14#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%14#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "maybe_value%14#0",
        "maybe_exists%14#0"
      ]
    },
    "3282": {
      "error": "check self.committee_members exists",
      "op": "assert // check self.committee_members exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "maybe_value%14#0"
      ]
    },
    "3283": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0"
      ]
    },
    "3284": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "3285": {
      "op": "bytec 9 // 0x636f6d6d69747465655f766f746573",
      "defined_out": [
        "0",
        "0x636f6d6d69747465655f766f746573",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "0",
        "0x636f6d6d69747465655f766f746573"
      ]
    },
    "3287": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%15#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%15#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "maybe_value%15#0",
        "maybe_exists%15#0"
      ]
    },
    "3288": {
      "error": "check self.committee_votes exists",
      "op": "assert // check self.committee_votes exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "maybe_value%15#0"
      ]
    },
    "3289": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "3290": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "3291": {
      "op": "bytec 10 // 0x766f7465645f6d656d62657273",
      "defined_out": [
        "0",
        "0x766f7465645f6d656d62657273",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "0x766f7465645f6d656d62657273"
      ]
    },
    "3293": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%16#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%16#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%16#0",
        "maybe_exists%16#0"
      ]
    },
    "3294": {
      "error": "check self.voted_members exists",
      "op": "assert // check self.voted_members exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%16#0"
      ]
    },
    "3295": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "3296": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0"
      ]
    },
    "3297": {
      "op": "bytec 11 // 0x617070726f76616c73",
      "defined_out": [
        "0",
        "0x617070726f76616c73",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0",
        "0x617070726f76616c73"
      ]
    },
    "3299": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%17#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%17#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%17#0",
        "maybe_exists%17#0"
      ]
    },
    "3300": {
      "error": "check self.approvals exists",
      "op": "assert // check self.approvals exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%17#0"
      ]
    },
    "3301": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "3302": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0"
      ]
    },
    "3303": {
      "op": "bytec 12 // 0x72656a656374696f6e73",
      "defined_out": [
        "0",
        "0x72656a656374696f6e73",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0",
        "0x72656a656374696f6e73"
      ]
    },
    "3305": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%18#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%18#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%18#0",
        "maybe_exists%18#0"
      ]
    },
    "3306": {
      "error": "check self.rejections exists",
      "op": "assert // check self.rejections exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%18#0"
      ]
    },
    "3307": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0"
      ]
    },
    "3308": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "0"
      ]
    },
    "3309": {
      "op": "bytec 17 // 0x6e756c6c73",
      "defined_out": [
        "0",
        "0x6e756c6c73",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "0",
        "0x6e756c6c73"
      ]
    },
    "3311": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%19#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%19#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "maybe_value%19#0",
        "maybe_exists%19#0"
      ]
    },
    "3312": {
      "error": "check self.nulls exists",
      "op": "assert // check self.nulls exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "maybe_value%19#0"
      ]
    },
    "3313": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ]
    },
    "3314": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0"
      ]
    },
    "3315": {
      "op": "bytec 8 // 0x636f6f6c5f646f776e5f73746172745f7473",
      "defined_out": [
        "0",
        "0x636f6f6c5f646f776e5f73746172745f7473",
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0",
        "0x636f6f6c5f646f776e5f73746172745f7473"
      ]
    },
    "3317": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%20#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%20#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%20#0",
        "maybe_exists%20#0"
      ]
    },
    "3318": {
      "error": "check self.cool_down_start_ts exists",
      "op": "assert // check self.cool_down_start_ts exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%20#0"
      ]
    },
    "3319": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ]
    },
    "3320": {
      "op": "uncover 20"
    },
    "3322": {
      "op": "uncover 20",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "3324": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3325": {
      "op": "pushbytes 0x00fe",
      "defined_out": [
        "0x00fe",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%2#0",
        "0x00fe"
      ]
    },
    "3329": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "maybe_value%3#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3330": {
      "op": "uncover 18",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0"
      ]
    },
    "3332": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3333": {
      "op": "uncover 17",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "3335": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "maybe_value%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3336": {
      "op": "uncover 16",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%2#0"
      ]
    },
    "3338": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "maybe_value%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3339": {
      "op": "uncover 15",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%3#0"
      ]
    },
    "3341": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "maybe_value%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3342": {
      "op": "uncover 14",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%4#0"
      ]
    },
    "3344": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "maybe_value%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%5#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3345": {
      "op": "uncover 13",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%5#0"
      ]
    },
    "3347": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "maybe_value%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%9#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3348": {
      "op": "uncover 12",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%9#0"
      ]
    },
    "3350": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3351": {
      "op": "uncover 11",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%6#0"
      ]
    },
    "3353": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3354": {
      "op": "uncover 10",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%7#0"
      ]
    },
    "3356": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%8#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "3357": {
      "op": "uncover 9",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%8#0"
      ]
    },
    "3359": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%0#0",
        "maybe_value%13#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%13#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "3360": {
      "op": "uncover 8",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%13#0",
        "maybe_value%13#0"
      ]
    },
    "3362": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "encoded_value%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "3363": {
      "op": "uncover 7",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%9#0"
      ]
    },
    "3365": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "encoded_value%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "3366": {
      "op": "uncover 6",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%10#0"
      ]
    },
    "3368": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "3369": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%16#0",
        "val_as_bytes%11#0"
      ]
    },
    "3371": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0",
        "encoded_value%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "3372": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%17#0",
        "val_as_bytes%12#0"
      ]
    },
    "3374": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0",
        "encoded_value%0#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "3375": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%18#0",
        "val_as_bytes%13#0"
      ]
    },
    "3377": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%0#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "3378": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%14#0"
      ]
    },
    "3380": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_value%0#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "3381": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%20#0",
        "val_as_bytes%15#0"
      ]
    },
    "3382": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "3383": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%21#0",
        "encoded_value%0#0"
      ]
    },
    "3384": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%22#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%22#0"
      ]
    },
    "3385": {
      "retsub": true,
      "op": "retsub"
    }
  }
}