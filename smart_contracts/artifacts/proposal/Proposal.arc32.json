{
    "hints": {
        "create(address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "submit_proposal(pay,string,byte[59],uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyMy0zMQogICAgLy8gY2xhc3MgUHJvcG9zYWwoCiAgICAvLyAgICAgQVJDNENvbnRyYWN0LAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 13
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "approvals": {
                    "type": "uint64",
                    "key": "approvals"
                },
                "category": {
                    "type": "uint64",
                    "key": "category"
                },
                "cid": {
                    "type": "bytes",
                    "key": "cid"
                },
                "committee_id": {
                    "type": "bytes",
                    "key": "committee_id"
                },
                "committee_members": {
                    "type": "uint64",
                    "key": "committee_members"
                },
                "committee_votes": {
                    "type": "uint64",
                    "key": "committee_votes"
                },
                "finalization_ts": {
                    "type": "uint64",
                    "key": "finalization_ts"
                },
                "funding_type": {
                    "type": "uint64",
                    "key": "funding_type"
                },
                "locked_amount": {
                    "type": "uint64",
                    "key": "locked_amount"
                },
                "proposer": {
                    "type": "bytes",
                    "key": "proposer"
                },
                "registry_app_id": {
                    "type": "uint64",
                    "key": "registry_app_id"
                },
                "rejections": {
                    "type": "uint64",
                    "key": "rejections"
                },
                "requested_amount": {
                    "type": "uint64",
                    "key": "requested_amount"
                },
                "status": {
                    "type": "uint64",
                    "key": "status"
                },
                "submission_ts": {
                    "type": "uint64",
                    "key": "submission_ts"
                },
                "title": {
                    "type": "bytes",
                    "key": "title"
                },
                "voted_members": {
                    "type": "uint64",
                    "key": "voted_members"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Proposal",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "address",
                        "name": "proposer",
                        "desc": "Address of the proposer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create a new proposal."
            },
            {
                "name": "submit_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "Commitment payment transaction from the proposer to the contract"
                    },
                    {
                        "type": "string",
                        "name": "title",
                        "desc": "Proposal title, max TITLE_MAX_BYTES bytes"
                    },
                    {
                        "type": "byte[59]",
                        "name": "cid",
                        "desc": "IPFS V1 CID"
                    },
                    {
                        "type": "uint64",
                        "name": "funding_type",
                        "desc": "Funding type (Proactive / Retroactive)"
                    },
                    {
                        "type": "uint64",
                        "name": "requested_amount",
                        "desc": "Requested amount in microAlgos"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Submit the first draft of the proposal."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}