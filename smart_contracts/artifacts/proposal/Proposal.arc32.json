{
    "hints": {
        "create(address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "submit(pay,string,byte[59],uint64,uint64,uint8)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update(string,byte[59])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "drop()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "finalize()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assign_voter(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote(address,uint64,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "scrutiny()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "review(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "decommission(address[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete()string": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "get_state()(address,uint64,string,byte[59],uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ProposalTypedGlobalState",
                    "elements": [
                        [
                            "proposer",
                            "address"
                        ],
                        [
                            "registry_app_id",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "cid",
                            "byte[59]"
                        ],
                        [
                            "submission_ts",
                            "uint64"
                        ],
                        [
                            "finalization_ts",
                            "uint64"
                        ],
                        [
                            "vote_open_ts",
                            "uint64"
                        ],
                        [
                            "status",
                            "uint64"
                        ],
                        [
                            "funding_category",
                            "uint64"
                        ],
                        [
                            "focus",
                            "uint8"
                        ],
                        [
                            "funding_type",
                            "uint64"
                        ],
                        [
                            "requested_amount",
                            "uint64"
                        ],
                        [
                            "locked_amount",
                            "uint64"
                        ],
                        [
                            "committee_id",
                            "byte[32]"
                        ],
                        [
                            "committee_members",
                            "uint64"
                        ],
                        [
                            "committee_votes",
                            "uint64"
                        ],
                        [
                            "voted_members",
                            "uint64"
                        ],
                        [
                            "approvals",
                            "uint64"
                        ],
                        [
                            "rejections",
                            "uint64"
                        ],
                        [
                            "nulls",
                            "uint64"
                        ],
                        [
                            "cool_down_start_ts",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 5,
            "num_uints": 18
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "approvals": {
                    "type": "uint64",
                    "key": "approvals"
                },
                "assigned_votes": {
                    "type": "uint64",
                    "key": "assigned_votes"
                },
                "cid": {
                    "type": "bytes",
                    "key": "cid"
                },
                "committee_id": {
                    "type": "bytes",
                    "key": "committee_id"
                },
                "committee_members": {
                    "type": "uint64",
                    "key": "committee_members"
                },
                "committee_votes": {
                    "type": "uint64",
                    "key": "committee_votes"
                },
                "cool_down_start_ts": {
                    "type": "uint64",
                    "key": "cool_down_start_ts"
                },
                "finalization_ts": {
                    "type": "uint64",
                    "key": "finalization_timestamp"
                },
                "focus": {
                    "type": "bytes",
                    "key": "focus"
                },
                "funding_category": {
                    "type": "uint64",
                    "key": "funding_category"
                },
                "funding_type": {
                    "type": "uint64",
                    "key": "funding_type"
                },
                "locked_amount": {
                    "type": "uint64",
                    "key": "locked_amount"
                },
                "nulls": {
                    "type": "uint64",
                    "key": "nulls"
                },
                "proposer": {
                    "type": "bytes",
                    "key": "proposer"
                },
                "registry_app_id": {
                    "type": "uint64",
                    "key": "registry_app_id"
                },
                "rejections": {
                    "type": "uint64",
                    "key": "rejections"
                },
                "requested_amount": {
                    "type": "uint64",
                    "key": "requested_amount"
                },
                "status": {
                    "type": "uint64",
                    "key": "status"
                },
                "submission_ts": {
                    "type": "uint64",
                    "key": "submission_timestamp"
                },
                "title": {
                    "type": "bytes",
                    "key": "title"
                },
                "vote_open_ts": {
                    "type": "uint64",
                    "key": "vote_opening_timestamp"
                },
                "voted_members": {
                    "type": "uint64",
                    "key": "voted_members"
                },
                "voters_count": {
                    "type": "uint64",
                    "key": "voters_count"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Proposal",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "address",
                        "name": "proposer",
                        "desc": "Address of the proposer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create a new proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "submit",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "Commitment payment transaction from the proposer to the contract"
                    },
                    {
                        "type": "string",
                        "name": "title",
                        "desc": "Proposal title, max TITLE_MAX_BYTES bytes"
                    },
                    {
                        "type": "byte[59]",
                        "name": "cid",
                        "desc": "IPFS V1 CID"
                    },
                    {
                        "type": "uint64",
                        "name": "funding_type",
                        "desc": "Funding type (Proactive / Retroactive)"
                    },
                    {
                        "type": "uint64",
                        "name": "requested_amount",
                        "desc": "Requested amount in microAlgos"
                    },
                    {
                        "type": "uint8",
                        "name": "focus",
                        "desc": "Proposal focus area"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Submit the first draft of the proposal."
            },
            {
                "name": "update",
                "args": [
                    {
                        "type": "string",
                        "name": "title",
                        "desc": "Proposal title, max TITLE_MAX_BYTES bytes"
                    },
                    {
                        "type": "byte[59]",
                        "name": "cid",
                        "desc": "IPFS V1 CID"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update the proposal."
            },
            {
                "name": "drop",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Drop the proposal."
            },
            {
                "name": "finalize",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Finalize the proposal."
            },
            {
                "name": "assign_voter",
                "args": [
                    {
                        "type": "address",
                        "name": "voter",
                        "desc": "Voter address"
                    },
                    {
                        "type": "uint64",
                        "name": "voting_power",
                        "desc": "Voting power"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Assign a voter to the proposal."
            },
            {
                "name": "vote",
                "args": [
                    {
                        "type": "address",
                        "name": "voter",
                        "desc": "Voter address"
                    },
                    {
                        "type": "uint64",
                        "name": "approvals",
                        "desc": "Number of approvals"
                    },
                    {
                        "type": "uint64",
                        "name": "rejections",
                        "desc": "Number of rejections"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Vote on the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "scrutiny",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Scrutinize the proposal."
            },
            {
                "name": "review",
                "args": [
                    {
                        "type": "bool",
                        "name": "block",
                        "desc": "Whether to block the proposal or not"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Review the proposal."
            },
            {
                "name": "fund",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Fund the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "decommission",
                "args": [
                    {
                        "type": "address[]",
                        "name": "voters",
                        "desc": "List of voters to be removed"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Decommission the proposal."
            },
            {
                "name": "delete",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Delete the proposal. MUST BE CALLED BY THE REGISTRY CONTRACT."
            },
            {
                "name": "get_state",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(address,uint64,string,byte[59],uint64,uint64,uint64,uint64,uint64,uint8,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                    "desc": "The proposal state"
                },
                "desc": "Get the proposal state."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}