# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "create(address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "submit_proposal(pay,string,byte[59],uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuYXBwcm92YWxfcHJvZ3JhbToKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9lbnRyeXBvaW50QDIKICAgIGNhbGxzdWIgX19pbml0X18KCm1haW5fZW50cnlwb2ludEAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIzLTMxCiAgICAvLyBjbGFzcyBQcm9wb3NhbCgKICAgIC8vICAgICBBUkM0Q29udHJhY3QsCiAgICAvLyAgICAgc3RhdGVfdG90YWxzPVN0YXRlVG90YWxzKAogICAgLy8gICAgICAgICBnbG9iYWxfYnl0ZXM9Y2ZnLkdMT0JBTF9CWVRFUywKICAgIC8vICAgICAgICAgZ2xvYmFsX3VpbnRzPWNmZy5HTE9CQUxfVUlOVFMsCiAgICAvLyAgICAgICAgIGxvY2FsX2J5dGVzPWNmZy5MT0NBTF9CWVRFUywKICAgIC8vICAgICAgICAgbG9jYWxfdWludHM9Y2ZnLkxPQ0FMX1VJTlRTLAogICAgLy8gICAgICksCiAgICAvLyApOgogICAgbWV0aG9kICJjcmVhdGUoYWRkcmVzcyl2b2lkIgogICAgbWV0aG9kICJzdWJtaXRfcHJvcG9zYWwocGF5LHN0cmluZyxieXRlWzU5XSx1aW50NjQsdWludDY0KXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZV9yb3V0ZUAzIG1haW5fc3VibWl0X3Byb3Bvc2FsX3JvdXRlQDQKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCm1haW5fY3JlYXRlX3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTQyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBpcyBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIzLTMxCiAgICAvLyBjbGFzcyBQcm9wb3NhbCgKICAgIC8vICAgICBBUkM0Q29udHJhY3QsCiAgICAvLyAgICAgc3RhdGVfdG90YWxzPVN0YXRlVG90YWxzKAogICAgLy8gICAgICAgICBnbG9iYWxfYnl0ZXM9Y2ZnLkdMT0JBTF9CWVRFUywKICAgIC8vICAgICAgICAgZ2xvYmFsX3VpbnRzPWNmZy5HTE9CQUxfVUlOVFMsCiAgICAvLyAgICAgICAgIGxvY2FsX2J5dGVzPWNmZy5MT0NBTF9CWVRFUywKICAgIC8vICAgICAgICAgbG9jYWxfdWludHM9Y2ZnLkxPQ0FMX1VJTlRTLAogICAgLy8gICAgICksCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE0MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICBjYWxsc3ViIGNyZWF0ZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zdWJtaXRfcHJvcG9zYWxfcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNDkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MjMtMzEKICAgIC8vIGNsYXNzIFByb3Bvc2FsKAogICAgLy8gICAgIEFSQzRDb250cmFjdCwKICAgIC8vICAgICBzdGF0ZV90b3RhbHM9U3RhdGVUb3RhbHMoCiAgICAvLyAgICAgICAgIGdsb2JhbF9ieXRlcz1jZmcuR0xPQkFMX0JZVEVTLAogICAgLy8gICAgICAgICBnbG9iYWxfdWludHM9Y2ZnLkdMT0JBTF9VSU5UUywKICAgIC8vICAgICAgICAgbG9jYWxfYnl0ZXM9Y2ZnLkxPQ0FMX0JZVEVTLAogICAgLy8gICAgICAgICBsb2NhbF91aW50cz1jZmcuTE9DQUxfVUlOVFMsCiAgICAvLyAgICAgKSwKICAgIC8vICk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludCBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTQ5CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBzdWJtaXRfcHJvcG9zYWwKICAgIGludCAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuY3JlYXRlKHByb3Bvc2VyOiBieXRlcykgLT4gdm9pZDoKY3JlYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE0Mi0xNDMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgLy8gZGVmIGNyZWF0ZShzZWxmLCBwcm9wb3NlcjogYXJjNC5BZGRyZXNzKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzkKICAgIC8vIHNlbGYucHJvcG9zZXIgPSBhcmM0LkFkZHJlc3MoKQogICAgYnl0ZSAicHJvcG9zZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTQ2CiAgICAvLyBzZWxmLnByb3Bvc2VyID0gcHJvcG9zZXIKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0MAogICAgLy8gc2VsZi5yZWdpc3RyeV9hcHBfaWQgPSBVSW50NjQoKSAgIyBSZWdpc3RyeSBBcHAgSUQKICAgIGJ5dGUgInJlZ2lzdHJ5X2FwcF9pZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNDcKICAgIC8vIHNlbGYucmVnaXN0cnlfYXBwX2lkID0gR2xvYmFsLmNhbGxlcl9hcHBsaWNhdGlvbl9pZAogICAgZ2xvYmFsIENhbGxlckFwcGxpY2F0aW9uSUQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuc3VibWl0X3Byb3Bvc2FsKHBheW1lbnQ6IHVpbnQ2NCwgdGl0bGU6IGJ5dGVzLCBjaWQ6IGJ5dGVzLCBmdW5kaW5nX3R5cGU6IHVpbnQ2NCwgcmVxdWVzdGVkX2Ftb3VudDogdWludDY0KSAtPiB2b2lkOgpzdWJtaXRfcHJvcG9zYWw6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTQ5LTE1NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBzdWJtaXRfcHJvcG9zYWwoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBwYXltZW50OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICAgICB0aXRsZTogU3RyaW5nLAogICAgLy8gICAgIGNpZDogdHlwLkNpZCwKICAgIC8vICAgICBmdW5kaW5nX3R5cGU6IFVJbnQ2NCwKICAgIC8vICAgICByZXF1ZXN0ZWRfYW1vdW50OiBVSW50NjQsCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byA1IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNTkKICAgIC8vIGFzc2VydCBzZWxmLnN1Ym1pdF9hdXRob3JpemF0aW9uKCksIGVyci5VTkFVVEhPUklaRUQKICAgIGNhbGxzdWIgc3VibWl0X2F1dGhvcml6YXRpb24KICAgIGFzc2VydCAvLyBVbmF1dGhvcml6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNjEKICAgIC8vIHNlbGYuc3VibWl0X2lucHV0X3ZhbGlkYXRpb24odGl0bGUsIGNpZCwgZnVuZGluZ190eXBlLCByZXF1ZXN0ZWRfYW1vdW50KQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIHN1Ym1pdF9pbnB1dF92YWxpZGF0aW9uCiAgICBmcmFtZV9idXJ5IC0zCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTYyCiAgICAvLyBzZWxmLnN1Ym1pdF9wYXltZW50X3ZhbGlkYXRpb24ocGF5bWVudCwgcmVxdWVzdGVkX2Ftb3VudCkKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIHN1Ym1pdF9wYXltZW50X3ZhbGlkYXRpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0MQogICAgLy8gc2VsZi50aXRsZSA9IFN0cmluZygpICAjIFVURi04IGVuY29kZWQsIG1heCAxMjMgYnl0ZXMKICAgIGJ5dGUgInRpdGxlIgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE2NAogICAgLy8gc2VsZi50aXRsZSA9IHRpdGxlCiAgICBmcmFtZV9kaWcgLTQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDIKICAgIC8vIHNlbGYuY2lkID0gdHlwLkNpZC5mcm9tX2J5dGVzKAogICAgYnl0ZSAiY2lkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE2NQogICAgLy8gc2VsZi5jaWQgPSBjaWQuY29weSgpCiAgICBmcmFtZV9kaWcgLTMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTY2CiAgICAvLyBzZWxmLnNldF9jYXRlZ29yeShyZXF1ZXN0ZWRfYW1vdW50KQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIHNldF9jYXRlZ29yeQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBzZWxmLmZ1bmRpbmdfdHlwZSA9IFVJbnQ2NCgKICAgIGJ5dGUgImZ1bmRpbmdfdHlwZSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNjcKICAgIC8vIHNlbGYuZnVuZGluZ190eXBlID0gZnVuZGluZ190eXBlCiAgICBmcmFtZV9kaWcgLTIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTQKICAgIC8vIHNlbGYucmVxdWVzdGVkX2Ftb3VudCA9IFVJbnQ2NCgpICAjIFJlcXVlc3RlZCBhbW91bnQgaW4gbWljcm9BbGdvcwogICAgYnl0ZSAicmVxdWVzdGVkX2Ftb3VudCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNjgKICAgIC8vIHNlbGYucmVxdWVzdGVkX2Ftb3VudCA9IHJlcXVlc3RlZF9hbW91bnQKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNjkKICAgIC8vIHNlbGYubG9ja2VkX2Ftb3VudCA9IHJlcXVlc3RlZF9hbW91bnQgLy8gMTAwCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAxMDAKICAgIC8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1NQogICAgLy8gc2VsZi5sb2NrZWRfYW1vdW50ID0gKAogICAgYnl0ZSAibG9ja2VkX2Ftb3VudCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNjkKICAgIC8vIHNlbGYubG9ja2VkX2Ftb3VudCA9IHJlcXVlc3RlZF9hbW91bnQgLy8gMTAwCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ1CiAgICAvLyBzZWxmLnN1Ym1pc3Npb25fdHMgPSBVSW50NjQoKSAgIyBQcm9wb3NhbCBmaW5hbGl6YXRpb24gdGltZXN0YW1wCiAgICBieXRlICJzdWJtaXNzaW9uX3RzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE3MAogICAgLy8gc2VsZi5zdWJtaXNzaW9uX3RzID0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDcKICAgIC8vIHNlbGYuc3RhdHVzID0gVUludDY0KGVubS5TVEFUVVNfRU1QVFkpICAjIEVudW1lcmF0ZWQgc3RhdHVzCiAgICBieXRlICJzdGF0dXMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTcxCiAgICAvLyBzZWxmLnN0YXR1cyA9IFVJbnQ2NChlbm0uU1RBVFVTX0RSQUZUKQogICAgaW50IDEwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLnN1Ym1pdF9hdXRob3JpemF0aW9uKCkgLT4gdWludDY0OgpzdWJtaXRfYXV0aG9yaXphdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3My03NAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBzdWJtaXRfYXV0aG9yaXphdGlvbihzZWxmKSAtPiBib29sOgogICAgcHJvdG8gMCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzYKICAgIC8vIHNlbGYuaXNfcHJvcG9zZXIoKQogICAgY2FsbHN1YiBpc19wcm9wb3NlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc2LTc4CiAgICAvLyBzZWxmLmlzX3Byb3Bvc2VyKCkKICAgIC8vIGFuZCBzZWxmLmlzX2t5Y192ZXJpZmllZCgpCiAgICAvLyBhbmQgc2VsZi5zdGF0dXMgPT0gZW5tLlNUQVRVU19FTVBUWQogICAgYnogc3VibWl0X2F1dGhvcml6YXRpb25fYm9vbF9mYWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzcKICAgIC8vIGFuZCBzZWxmLmlzX2t5Y192ZXJpZmllZCgpCiAgICBjYWxsc3ViIGlzX2t5Y192ZXJpZmllZAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc2LTc4CiAgICAvLyBzZWxmLmlzX3Byb3Bvc2VyKCkKICAgIC8vIGFuZCBzZWxmLmlzX2t5Y192ZXJpZmllZCgpCiAgICAvLyBhbmQgc2VsZi5zdGF0dXMgPT0gZW5tLlNUQVRVU19FTVBUWQogICAgYnogc3VibWl0X2F1dGhvcml6YXRpb25fYm9vbF9mYWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzgKICAgIC8vIGFuZCBzZWxmLnN0YXR1cyA9PSBlbm0uU1RBVFVTX0VNUFRZCiAgICBpbnQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ3CiAgICAvLyBzZWxmLnN0YXR1cyA9IFVJbnQ2NChlbm0uU1RBVFVTX0VNUFRZKSAgIyBFbnVtZXJhdGVkIHN0YXR1cwogICAgYnl0ZSAic3RhdHVzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojc4CiAgICAvLyBhbmQgc2VsZi5zdGF0dXMgPT0gZW5tLlNUQVRVU19FTVBUWQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN0YXR1cyBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3Ni03OAogICAgLy8gc2VsZi5pc19wcm9wb3NlcigpCiAgICAvLyBhbmQgc2VsZi5pc19reWNfdmVyaWZpZWQoKQogICAgLy8gYW5kIHNlbGYuc3RhdHVzID09IGVubS5TVEFUVVNfRU1QVFkKICAgIGJueiBzdWJtaXRfYXV0aG9yaXphdGlvbl9ib29sX2ZhbHNlQDQKICAgIGludCAxCiAgICBiIHN1Ym1pdF9hdXRob3JpemF0aW9uX2Jvb2xfbWVyZ2VANQoKc3VibWl0X2F1dGhvcml6YXRpb25fYm9vbF9mYWxzZUA0OgogICAgaW50IDAKCnN1Ym1pdF9hdXRob3JpemF0aW9uX2Jvb2xfbWVyZ2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo3NS03OQogICAgLy8gcmV0dXJuICgKICAgIC8vICAgICBzZWxmLmlzX3Byb3Bvc2VyKCkKICAgIC8vICAgICBhbmQgc2VsZi5pc19reWNfdmVyaWZpZWQoKQogICAgLy8gICAgIGFuZCBzZWxmLnN0YXR1cyA9PSBlbm0uU1RBVFVTX0VNUFRZCiAgICAvLyApCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuaXNfcHJvcG9zZXIoKSAtPiB1aW50NjQ6CmlzX3Byb3Bvc2VyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEzOC0xMzkKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgaXNfcHJvcG9zZXIoc2VsZikgLT4gYm9vbDoKICAgIHByb3RvIDAgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE0MAogICAgLy8gcmV0dXJuIFR4bi5zZW5kZXIgPT0gc2VsZi5wcm9wb3NlcgogICAgaW50IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozOQogICAgLy8gc2VsZi5wcm9wb3NlciA9IGFyYzQuQWRkcmVzcygpCiAgICBieXRlICJwcm9wb3NlciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxNDAKICAgIC8vIHJldHVybiBUeG4uc2VuZGVyID09IHNlbGYucHJvcG9zZXIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wcm9wb3NlciBleGlzdHMKICAgIHR4biBTZW5kZXIKICAgID09CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuaXNfa3ljX3ZlcmlmaWVkKCkgLT4gdWludDY0Ogppc19reWNfdmVyaWZpZWQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTczLTE3NwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgU3R1YiBzdWJyb3V0aW5lcwogICAgLy8gIyB0aGVzZSBzdWJyb3V0aW5lcyBhcmUgcGxhY2Vob2xkZXJzIGZvciB0aGUgYWN0dWFsIGltcGxlbWVudGF0aW9uCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGlzX2t5Y192ZXJpZmllZChzZWxmKSAtPiBib29sOgogICAgcHJvdG8gMCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTc4CiAgICAvLyByZXR1cm4gVHJ1ZQogICAgaW50IDEKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5zdWJtaXRfaW5wdXRfdmFsaWRhdGlvbih0aXRsZTogYnl0ZXMsIGNpZDogYnl0ZXMsIGZ1bmRpbmdfdHlwZTogdWludDY0LCByZXF1ZXN0ZWRfYW1vdW50OiB1aW50NjQpIC0+IGJ5dGVzOgpzdWJtaXRfaW5wdXRfdmFsaWRhdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo4MS04OAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBzdWJtaXRfaW5wdXRfdmFsaWRhdGlvbigKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIHRpdGxlOiBTdHJpbmcsCiAgICAvLyAgICAgY2lkOiB0eXAuQ2lkLAogICAgLy8gICAgIGZ1bmRpbmdfdHlwZTogVUludDY0LAogICAgLy8gICAgIHJlcXVlc3RlZF9hbW91bnQ6IFVJbnQ2NCwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDQgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBhc3NlcnQgdGl0bGUuYnl0ZXMubGVuZ3RoIDw9IGNvbnN0LlRJVExFX01BWF9CWVRFUywgZXJyLldST05HX1RJVExFX0xFTkdUSAogICAgZnJhbWVfZGlnIC00CiAgICBsZW4KICAgIGludCAxMjMKICAgIDw9CiAgICBhc3NlcnQgLy8gV3JvbmcgVGl0bGUgbGVuZ3RoCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6OTEKICAgIC8vIGFzc2VydCB0aXRsZSAhPSAiIiwgZXJyLldST05HX1RJVExFX0xFTkdUSAogICAgZnJhbWVfZGlnIC00CiAgICBieXRlICIiCiAgICAhPQogICAgYXNzZXJ0IC8vIFdyb25nIFRpdGxlIGxlbmd0aAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk2CiAgICAvLyBmdW5kaW5nX3R5cGUgPT0gZW5tLkZVTkRJTkdfUFJPQUNUSVZFCiAgICBmcmFtZV9kaWcgLTIKICAgIGludCAxMAogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5Ni05NwogICAgLy8gZnVuZGluZ190eXBlID09IGVubS5GVU5ESU5HX1BST0FDVElWRQogICAgLy8gb3IgZnVuZGluZ190eXBlID09IGVubS5GVU5ESU5HX1JFVFJPQUNUSVZFCiAgICBibnogc3VibWl0X2lucHV0X3ZhbGlkYXRpb25fYm9vbF90cnVlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5NwogICAgLy8gb3IgZnVuZGluZ190eXBlID09IGVubS5GVU5ESU5HX1JFVFJPQUNUSVZFCiAgICBmcmFtZV9kaWcgLTIKICAgIGludCAyMAogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo5Ni05NwogICAgLy8gZnVuZGluZ190eXBlID09IGVubS5GVU5ESU5HX1BST0FDVElWRQogICAgLy8gb3IgZnVuZGluZ190eXBlID09IGVubS5GVU5ESU5HX1JFVFJPQUNUSVZFCiAgICBieiBzdWJtaXRfaW5wdXRfdmFsaWRhdGlvbl9ib29sX2ZhbHNlQDMKCnN1Ym1pdF9pbnB1dF92YWxpZGF0aW9uX2Jvb2xfdHJ1ZUAyOgogICAgaW50IDEKICAgIGIgc3VibWl0X2lucHV0X3ZhbGlkYXRpb25fYm9vbF9tZXJnZUA0CgpzdWJtaXRfaW5wdXRfdmFsaWRhdGlvbl9ib29sX2ZhbHNlQDM6CiAgICBpbnQgMAoKc3VibWl0X2lucHV0X3ZhbGlkYXRpb25fYm9vbF9tZXJnZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5Ojk1LTk4CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGZ1bmRpbmdfdHlwZSA9PSBlbm0uRlVORElOR19QUk9BQ1RJVkUKICAgIC8vICAgICBvciBmdW5kaW5nX3R5cGUgPT0gZW5tLkZVTkRJTkdfUkVUUk9BQ1RJVkUKICAgIC8vICksIGVyci5XUk9OR19GVU5ESU5HX1RZUEUKICAgIGFzc2VydCAvLyBXcm9uZyBGdW5kaW5nIFR5cGUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMDAKICAgIC8vIG1pbl9yZXF1ZXN0ZWRfYWxnb19hbW91bnQgPSBzZWxmLmdldF9taW5fcmVxdWVzdGVkX2FsZ29fYW1vdW50KCkKICAgIGNhbGxzdWIgZ2V0X21pbl9yZXF1ZXN0ZWRfYWxnb19hbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMDEKICAgIC8vIG1heF9yZXF1ZXN0ZWRfYWxnb19hbW91bnRfbGFyZ2UgPSBzZWxmLmdldF9tYXhfcmVxdWVzdGVkX2FsZ29fYW1vdW50X2xhcmdlKCkKICAgIGNhbGxzdWIgZ2V0X21heF9yZXF1ZXN0ZWRfYWxnb19hbW91bnRfbGFyZ2UKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMDMtMTA1CiAgICAvLyBhc3NlcnQgcmVxdWVzdGVkX2Ftb3VudCA+PSBzZWxmLmFsZ29zX3RvX21pY3JvYWxnb3MoCiAgICAvLyAgICAgbWluX3JlcXVlc3RlZF9hbGdvX2Ftb3VudAogICAgLy8gKSwgZXJyLldST05HX01JTl9SRVFVRVNURURfQU1PVU5UCiAgICBjYWxsc3ViIGFsZ29zX3RvX21pY3JvYWxnb3MKICAgIGZyYW1lX2RpZyAtMQogICAgPD0KICAgIGFzc2VydCAvLyBSZXF1ZXN0ZWQgYW1vdW50IGlzIGxlc3MgdGhhbiB0aGUgbWluaW11bSByZXF1ZXN0ZWQgYW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTA2LTEwOAogICAgLy8gYXNzZXJ0IHJlcXVlc3RlZF9hbW91bnQgPD0gc2VsZi5hbGdvc190b19taWNyb2FsZ29zKAogICAgLy8gICAgIG1heF9yZXF1ZXN0ZWRfYWxnb19hbW91bnRfbGFyZ2UKICAgIC8vICksIGVyci5XUk9OR19NQVhfUkVRVUVTVEVEX0FNT1VOVAogICAgY2FsbHN1YiBhbGdvc190b19taWNyb2FsZ29zCiAgICBmcmFtZV9kaWcgLTEKICAgID49CiAgICBhc3NlcnQgLy8gUmVxdWVzdGVkIGFtb3VudCBpcyBtb3JlIHRoYW4gdGhlIG1heGltdW0gcmVxdWVzdGVkIGFtb3VudAogICAgZnJhbWVfZGlnIC0zCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuZ2V0X21pbl9yZXF1ZXN0ZWRfYWxnb19hbW91bnQoKSAtPiB1aW50NjQ6CmdldF9taW5fcmVxdWVzdGVkX2FsZ29fYW1vdW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE4MC0xOTIKICAgIC8vICMgQHN1YnJvdXRpbmUKICAgIC8vICMgZGVmIGdldF9jb25maWdfZnJvbV9yZWdpc3RyeShzZWxmLCByZWdpc3RyeV9hcHBfaWQ6IFVJbnQ2NCkgLT4gdHlwLlhHb3ZSZWdpc3RyeUNvbmZpZzoKICAgIC8vICMgICAgIHJldHVybiB0eXAuWEdvdlJlZ2lzdHJ5Q29uZmlnKAogICAgLy8gIyAgICAgICAgIG1pbl9yZXF1ZXN0ZWRfYW1vdW50PWFyYzQuVUludDY0KDEwXzAwMCksCiAgICAvLyAjICAgICAgICAgbWF4X3JlcXVlc3RlZF9hbW91bnRfc21hbGw9YXJjNC5VSW50NjQoNTBfMDAwKSwKICAgIC8vICMgICAgICAgICBtYXhfcmVxdWVzdGVkX2Ftb3VudF9tZWRpdW09YXJjNC5VSW50NjQoMjUwXzAwMCksCiAgICAvLyAjICAgICAgICAgbWF4X3JlcXVlc3RlZF9hbW91bnRfbGFyZ2U9YXJjNC5VSW50NjQoNTAwXzAwMCksCiAgICAvLyAjICAgICAgICAgZGlzY3Vzc2lvbl9kdXJhdGlvbl9zbWFsbD1hcmM0LlVJbnQ2NCgxKSwKICAgIC8vICMgICAgICAgICBkaXNjdXNzaW9uX2R1cmF0aW9uX21lZGl1bT1hcmM0LlVJbnQ2NCgyKSwKICAgIC8vICMgICAgICAgICBkaXNjdXNzaW9uX2R1cmF0aW9uX2xhcmdlPWFyYzQuVUludDY0KDMpLAogICAgLy8gIyAgICAgKQogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBnZXRfbWluX3JlcXVlc3RlZF9hbGdvX2Ftb3VudChzZWxmKSAtPiBVSW50NjQ6CiAgICBwcm90byAwIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxOTMKICAgIC8vIHJldHVybiBVSW50NjQoY29uc3QuTUlOX1JFUVVFU1RFRF9BTEdPX0FNT1VOVCkKICAgIGludCAxMDAwMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLmdldF9tYXhfcmVxdWVzdGVkX2FsZ29fYW1vdW50X2xhcmdlKCkgLT4gdWludDY0OgpnZXRfbWF4X3JlcXVlc3RlZF9hbGdvX2Ftb3VudF9sYXJnZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyMDMtMjA0CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGdldF9tYXhfcmVxdWVzdGVkX2FsZ29fYW1vdW50X2xhcmdlKHNlbGYpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDAgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIwNQogICAgLy8gcmV0dXJuIFVJbnQ2NChjb25zdC5NQVhfUkVRVUVTVEVEX0FMR09fQU1PVU5UX0xBUkdFKQogICAgaW50IDUwMDAwMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLmFsZ29zX3RvX21pY3JvYWxnb3MoYWxnb3M6IHVpbnQ2NCkgLT4gdWludDY0OgphbGdvc190b19taWNyb2FsZ29zOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjY5LTcwCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGFsZ29zX3RvX21pY3JvYWxnb3Moc2VsZiwgYWxnb3M6IFVJbnQ2NCkgLT4gVUludDY0OgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NzEKICAgIC8vIHJldHVybiBhbGdvcyAqIGNvbnN0Lk1JQ1JPQUxHT1NfVE9fQUxHT1MKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDEwMDAwMDAKICAgICoKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5zdWJtaXRfcGF5bWVudF92YWxpZGF0aW9uKHBheW1lbnQ6IHVpbnQ2NCwgcmVxdWVzdGVkX2Ftb3VudDogdWludDY0KSAtPiB2b2lkOgpzdWJtaXRfcGF5bWVudF92YWxpZGF0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjExMC0xMTMKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgc3VibWl0X3BheW1lbnRfdmFsaWRhdGlvbigKICAgIC8vICAgICBzZWxmLCBwYXltZW50OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwgcmVxdWVzdGVkX2Ftb3VudDogVUludDY0CiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMTQKICAgIC8vIGV4cGVjdGVkX2xvY2tfYW1vdW50ID0gcmVxdWVzdGVkX2Ftb3VudCAvLyAxMDAKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDEwMAogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjExNgogICAgLy8gYXNzZXJ0IHBheW1lbnQuc2VuZGVyID09IHNlbGYucHJvcG9zZXIsIGVyci5XUk9OR19TRU5ERVIKICAgIGludCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzkKICAgIC8vIHNlbGYucHJvcG9zZXIgPSBhcmM0LkFkZHJlc3MoKQogICAgYnl0ZSAicHJvcG9zZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTE2CiAgICAvLyBhc3NlcnQgcGF5bWVudC5zZW5kZXIgPT0gc2VsZi5wcm9wb3NlciwgZXJyLldST05HX1NFTkRFUgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnByb3Bvc2VyIGV4aXN0cwogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gV3JvbmcgU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTE4CiAgICAvLyBwYXltZW50LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjExNy0xMTkKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgcGF5bWVudC5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICAvLyApLCBlcnIuV1JPTkdfUkVDRUlWRVIKICAgIGFzc2VydCAvLyBXcm9uZyBSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEyMAogICAgLy8gYXNzZXJ0IHBheW1lbnQuYW1vdW50ID09IGV4cGVjdGVkX2xvY2tfYW1vdW50LCBlcnIuV1JPTkdfTE9DS0VEX0FNT1VOVAogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBbW91bnQKICAgID09CiAgICBhc3NlcnQgLy8gTG9ja2VkIGFtb3VudCBpcyBub3QgMSUgb2YgdGhlIHJlcXVlc3RlZCBhbW91bnQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5zZXRfY2F0ZWdvcnkocmVxdWVzdGVkX2Ftb3VudDogdWludDY0KSAtPiB2b2lkOgpzZXRfY2F0ZWdvcnk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTIyLTEyMwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBzZXRfY2F0ZWdvcnkoc2VsZiwgcmVxdWVzdGVkX2Ftb3VudDogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTI0CiAgICAvLyBtYXhfcmVxdWVzdGVkX2Ftb3VudF9zbWFsbCA9IHNlbGYuZ2V0X21heF9yZXF1ZXN0ZWRfYWxnb19hbW91bnRfc21hbGwoKQogICAgY2FsbHN1YiBnZXRfbWF4X3JlcXVlc3RlZF9hbGdvX2Ftb3VudF9zbWFsbAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEyNQogICAgLy8gbWF4X3JlcXVlc3RlZF9hbW91bnRfbWVkaXVtID0gc2VsZi5nZXRfbWF4X3JlcXVlc3RlZF9hbGdvX2Ftb3VudF9tZWRpdW0oKQogICAgY2FsbHN1YiBnZXRfbWF4X3JlcXVlc3RlZF9hbGdvX2Ftb3VudF9tZWRpdW0KICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMjcKICAgIC8vIGlmIHJlcXVlc3RlZF9hbW91bnQgPD0gc2VsZi5hbGdvc190b19taWNyb2FsZ29zKG1heF9yZXF1ZXN0ZWRfYW1vdW50X3NtYWxsKToKICAgIGNhbGxzdWIgYWxnb3NfdG9fbWljcm9hbGdvcwogICAgZnJhbWVfZGlnIC0xCiAgICA+PQogICAgYnogc2V0X2NhdGVnb3J5X2Vsc2VfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDgKICAgIC8vIHNlbGYuY2F0ZWdvcnkgPSBVSW50NjQoCiAgICBieXRlICJjYXRlZ29yeSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMjgKICAgIC8vIHNlbGYuY2F0ZWdvcnkgPSBVSW50NjQoZW5tLkNBVEVHT1JZX1NNQUxMKQogICAgaW50IDEwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgYiBzZXRfY2F0ZWdvcnlfYWZ0ZXJfaWZfZWxzZUA2CgpzZXRfY2F0ZWdvcnlfZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTI5CiAgICAvLyBlbGlmIHJlcXVlc3RlZF9hbW91bnQgPD0gc2VsZi5hbGdvc190b19taWNyb2FsZ29zKG1heF9yZXF1ZXN0ZWRfYW1vdW50X21lZGl1bSk6CiAgICBmcmFtZV9kaWcgMAogICAgY2FsbHN1YiBhbGdvc190b19taWNyb2FsZ29zCiAgICBmcmFtZV9kaWcgLTEKICAgID49CiAgICBieiBzZXRfY2F0ZWdvcnlfZWxzZV9ib2R5QDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0OAogICAgLy8gc2VsZi5jYXRlZ29yeSA9IFVJbnQ2NCgKICAgIGJ5dGUgImNhdGVnb3J5IgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjEzMAogICAgLy8gc2VsZi5jYXRlZ29yeSA9IFVJbnQ2NChlbm0uQ0FURUdPUllfTUVESVVNKQogICAgaW50IDIwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgYiBzZXRfY2F0ZWdvcnlfYWZ0ZXJfaWZfZWxzZUA2CgpzZXRfY2F0ZWdvcnlfZWxzZV9ib2R5QDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDgKICAgIC8vIHNlbGYuY2F0ZWdvcnkgPSBVSW50NjQoCiAgICBieXRlICJjYXRlZ29yeSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxMzIKICAgIC8vIHNlbGYuY2F0ZWdvcnkgPSBVSW50NjQoZW5tLkNBVEVHT1JZX0xBUkdFKQogICAgaW50IDMzCiAgICBhcHBfZ2xvYmFsX3B1dAoKc2V0X2NhdGVnb3J5X2FmdGVyX2lmX2Vsc2VANjoKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5nZXRfbWF4X3JlcXVlc3RlZF9hbGdvX2Ftb3VudF9zbWFsbCgpIC0+IHVpbnQ2NDoKZ2V0X21heF9yZXF1ZXN0ZWRfYWxnb19hbW91bnRfc21hbGw6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MTk1LTE5NgogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBnZXRfbWF4X3JlcXVlc3RlZF9hbGdvX2Ftb3VudF9zbWFsbChzZWxmKSAtPiBVSW50NjQ6CiAgICBwcm90byAwIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToxOTcKICAgIC8vIHJldHVybiBVSW50NjQoY29uc3QuTUFYX1JFUVVFU1RFRF9BTEdPX0FNT1VOVF9TTUFMTCkKICAgIGludCA1MDAwMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnByb3Bvc2FsLmNvbnRyYWN0LlByb3Bvc2FsLmdldF9tYXhfcmVxdWVzdGVkX2FsZ29fYW1vdW50X21lZGl1bSgpIC0+IHVpbnQ2NDoKZ2V0X21heF9yZXF1ZXN0ZWRfYWxnb19hbW91bnRfbWVkaXVtOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjE5OS0yMDAKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgZ2V0X21heF9yZXF1ZXN0ZWRfYWxnb19hbW91bnRfbWVkaXVtKHNlbGYpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDAgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjIwMQogICAgLy8gcmV0dXJuIFVJbnQ2NChjb25zdC5NQVhfUkVRVUVTVEVEX0FMR09fQU1PVU5UX01FRElVTSkKICAgIGludCAyNTAwMDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5wcm9wb3NhbC5jb250cmFjdC5Qcm9wb3NhbC5fX2luaXRfXygpIC0+IHZvaWQ6Cl9faW5pdF9fOgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBkZWYgX19pbml0X18oc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjMzLTM0CiAgICAvLyAjIFByZWNvbmRpdGlvbnMKICAgIC8vIGFzc2VydCBUeG4uZ2xvYmFsX251bV9ieXRlX3NsaWNlID09IGNmZy5HTE9CQUxfQllURVMsIGVyci5XUk9OR19HTE9CQUxfQllURVMKICAgIHR4biBHbG9iYWxOdW1CeXRlU2xpY2UKICAgIGludCA0CiAgICA9PQogICAgYXNzZXJ0IC8vIFdyb25nIEdsb2JhbCBCeXRlcyBhbGxvY2F0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6MzUKICAgIC8vIGFzc2VydCBUeG4uZ2xvYmFsX251bV91aW50ID09IGNmZy5HTE9CQUxfVUlOVFMsIGVyci5XUk9OR19HTE9CQUxfVUlOVFMKICAgIHR4biBHbG9iYWxOdW1VaW50CiAgICBpbnQgMTMKICAgID09CiAgICBhc3NlcnQgLy8gV3JvbmcgR2xvYmFsIFVJbnRzIGFsbG9jYXRpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTozNgogICAgLy8gYXNzZXJ0IFR4bi5sb2NhbF9udW1fYnl0ZV9zbGljZSA9PSBjZmcuTE9DQUxfQllURVMsIGVyci5XUk9OR19MT0NBTF9CWVRFUwogICAgdHhuIExvY2FsTnVtQnl0ZVNsaWNlCiAgICAhCiAgICBhc3NlcnQgLy8gV3JvbmcgTG9jYWwgQnl0ZXMgYWxsb2NhdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjM3CiAgICAvLyBhc3NlcnQgVHhuLmxvY2FsX251bV91aW50ID09IGNmZy5MT0NBTF9VSU5UUywgZXJyLldST05HX0xPQ0FMX1VJTlRTCiAgICB0eG4gTG9jYWxOdW1VaW50CiAgICAhCiAgICBhc3NlcnQgLy8gV3JvbmcgTG9jYWwgVUludHMgYWxsb2NhdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjM5CiAgICAvLyBzZWxmLnByb3Bvc2VyID0gYXJjNC5BZGRyZXNzKCkKICAgIGJ5dGUgInByb3Bvc2VyIgogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQwCiAgICAvLyBzZWxmLnJlZ2lzdHJ5X2FwcF9pZCA9IFVJbnQ2NCgpICAjIFJlZ2lzdHJ5IEFwcCBJRAogICAgYnl0ZSAicmVnaXN0cnlfYXBwX2lkIgogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDEKICAgIC8vIHNlbGYudGl0bGUgPSBTdHJpbmcoKSAgIyBVVEYtOCBlbmNvZGVkLCBtYXggMTIzIGJ5dGVzCiAgICBieXRlICJ0aXRsZSIKICAgIGJ5dGUgIiIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDIKICAgIC8vIHNlbGYuY2lkID0gdHlwLkNpZC5mcm9tX2J5dGVzKAogICAgYnl0ZSAiY2lkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQzCiAgICAvLyBiIiIKICAgIGJ5dGUgMHgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0Mi00NAogICAgLy8gc2VsZi5jaWQgPSB0eXAuQ2lkLmZyb21fYnl0ZXMoCiAgICAvLyAgICAgYiIiCiAgICAvLyApICAjIElQRlMgVjEgQ0lELCB1cGRhdGVkIG9uIGVhY2ggdXBkYXRlIG9mIHRoZSBEcmFmdAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0NQogICAgLy8gc2VsZi5zdWJtaXNzaW9uX3RzID0gVUludDY0KCkgICMgUHJvcG9zYWwgZmluYWxpemF0aW9uIHRpbWVzdGFtcAogICAgYnl0ZSAic3VibWlzc2lvbl90cyIKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ2CiAgICAvLyBzZWxmLmZpbmFsaXphdGlvbl90cyA9IFVJbnQ2NCgpICAjIFByb3Bvc2FsIGZpbmFsaXphdGlvbiB0aW1lc3RhbXAKICAgIGJ5dGUgImZpbmFsaXphdGlvbl90cyIKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjQ3CiAgICAvLyBzZWxmLnN0YXR1cyA9IFVJbnQ2NChlbm0uU1RBVFVTX0VNUFRZKSAgIyBFbnVtZXJhdGVkIHN0YXR1cwogICAgYnl0ZSAic3RhdHVzIgogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NDgKICAgIC8vIHNlbGYuY2F0ZWdvcnkgPSBVSW50NjQoCiAgICBieXRlICJjYXRlZ29yeSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo0OC01MAogICAgLy8gc2VsZi5jYXRlZ29yeSA9IFVJbnQ2NCgKICAgIC8vICAgICBlbm0uQ0FURUdPUllfTlVMTAogICAgLy8gKSAgIyBQcm9wb3NhbCBjYXRlZ29yeSAoc21hbGwsIG1lZGl1bSwgbGFyZ2UpCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1MQogICAgLy8gc2VsZi5mdW5kaW5nX3R5cGUgPSBVSW50NjQoCiAgICBieXRlICJmdW5kaW5nX3R5cGUiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTEtNTMKICAgIC8vIHNlbGYuZnVuZGluZ190eXBlID0gVUludDY0KAogICAgLy8gICAgIGVubS5GVU5ESU5HX05VTEwKICAgIC8vICkgICMgRnVuZGluZyB0eXBlIChQcm9hY3RpdmUgLyBSZXRyb2FjdGl2ZSkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjU0CiAgICAvLyBzZWxmLnJlcXVlc3RlZF9hbW91bnQgPSBVSW50NjQoKSAgIyBSZXF1ZXN0ZWQgYW1vdW50IGluIG1pY3JvQWxnb3MKICAgIGJ5dGUgInJlcXVlc3RlZF9hbW91bnQiCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1NQogICAgLy8gc2VsZi5sb2NrZWRfYW1vdW50ID0gKAogICAgYnl0ZSAibG9ja2VkX2Ftb3VudCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo1NgogICAgLy8gVUludDY0KCkKICAgIGludCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTUtNTcKICAgIC8vIHNlbGYubG9ja2VkX2Ftb3VudCA9ICgKICAgIC8vICAgICBVSW50NjQoKQogICAgLy8gKSAgIyBMb2NrZWQgYW1vdW50IGluIG1pY3JvQWxnb3MsIDElIG9mIHJlcXVlc3RlZCBhbW91bnQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTgKICAgIC8vIHNlbGYuY29tbWl0dGVlX2lkID0gdHlwLkNvbW1pdHRlZUlkLmZyb21fYnl0ZXMoYiIiKSAgIyB4R292IFZvdGluZyBDb21taXR0ZWUgSUQKICAgIGJ5dGUgImNvbW1pdHRlZV9pZCIKICAgIGJ5dGUgMHgKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NTkKICAgIC8vIHNlbGYuY29tbWl0dGVlX21lbWJlcnMgPSBVSW50NjQoKSAgIyB4R292IFZvdGluZyBDb21taXR0ZWUgc2l6ZQogICAgYnl0ZSAiY29tbWl0dGVlX21lbWJlcnMiCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2MAogICAgLy8gc2VsZi5jb21taXR0ZWVfdm90ZXMgPSBVSW50NjQoKSAgIyB4R292IFZvdGluZyBDb21taXR0ZWUgdG90YWwgdm90aW5nIHBvd2VyCiAgICBieXRlICJjb21taXR0ZWVfdm90ZXMiCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2MQogICAgLy8gc2VsZi52b3RlZF9tZW1iZXJzID0gVUludDY0KCkgICMgeEdvdiBWb3RpbmcgQ29tbWl0dGVlIG1lbWJlcnMgd2hvIHZvdGVkCiAgICBieXRlICJ2b3RlZF9tZW1iZXJzIgogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjIKICAgIC8vIHNlbGYuYXBwcm92YWxzID0gKAogICAgYnl0ZSAiYXBwcm92YWxzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjYzCiAgICAvLyBVSW50NjQoKQogICAgaW50IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weTo2Mi02NAogICAgLy8gc2VsZi5hcHByb3ZhbHMgPSAoCiAgICAvLyAgICAgVUludDY0KCkKICAgIC8vICkgICMgQXBwcm92YWwgdm90ZXMgcmVjZWl2ZWQgYnkgeEdvdiBWb3RpbmcgQ29tbWl0dGVlIG1lbWJlcnMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjUKICAgIC8vIHNlbGYucmVqZWN0aW9ucyA9ICgKICAgIGJ5dGUgInJlamVjdGlvbnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcHJvcG9zYWwvY29udHJhY3QucHk6NjYKICAgIC8vIFVJbnQ2NCgpCiAgICBpbnQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3Byb3Bvc2FsL2NvbnRyYWN0LnB5OjY1LTY3CiAgICAvLyBzZWxmLnJlamVjdGlvbnMgPSAoCiAgICAvLyAgICAgVUludDY0KCkKICAgIC8vICkgICMgUmVqZWN0aW9uIHZvdGVzIHJlY2VpdmVkIGJ5IHhHb3YgVm90aW5nIENvbW1pdHRlZSBtZW1iZXJzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMucHJvcG9zYWwuY29udHJhY3QuUHJvcG9zYWwuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wcm9wb3NhbC9jb250cmFjdC5weToyMy0zMQogICAgLy8gY2xhc3MgUHJvcG9zYWwoCiAgICAvLyAgICAgQVJDNENvbnRyYWN0LAogICAgLy8gICAgIHN0YXRlX3RvdGFscz1TdGF0ZVRvdGFscygKICAgIC8vICAgICAgICAgZ2xvYmFsX2J5dGVzPWNmZy5HTE9CQUxfQllURVMsCiAgICAvLyAgICAgICAgIGdsb2JhbF91aW50cz1jZmcuR0xPQkFMX1VJTlRTLAogICAgLy8gICAgICAgICBsb2NhbF9ieXRlcz1jZmcuTE9DQUxfQllURVMsCiAgICAvLyAgICAgICAgIGxvY2FsX3VpbnRzPWNmZy5MT0NBTF9VSU5UUywKICAgIC8vICAgICApLAogICAgLy8gKToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 13
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "approvals": {
                    "type": "uint64",
                    "key": "approvals"
                },
                "category": {
                    "type": "uint64",
                    "key": "category"
                },
                "cid": {
                    "type": "bytes",
                    "key": "cid"
                },
                "committee_id": {
                    "type": "bytes",
                    "key": "committee_id"
                },
                "committee_members": {
                    "type": "uint64",
                    "key": "committee_members"
                },
                "committee_votes": {
                    "type": "uint64",
                    "key": "committee_votes"
                },
                "finalization_ts": {
                    "type": "uint64",
                    "key": "finalization_ts"
                },
                "funding_type": {
                    "type": "uint64",
                    "key": "funding_type"
                },
                "locked_amount": {
                    "type": "uint64",
                    "key": "locked_amount"
                },
                "proposer": {
                    "type": "bytes",
                    "key": "proposer"
                },
                "registry_app_id": {
                    "type": "uint64",
                    "key": "registry_app_id"
                },
                "rejections": {
                    "type": "uint64",
                    "key": "rejections"
                },
                "requested_amount": {
                    "type": "uint64",
                    "key": "requested_amount"
                },
                "status": {
                    "type": "uint64",
                    "key": "status"
                },
                "submission_ts": {
                    "type": "uint64",
                    "key": "submission_ts"
                },
                "title": {
                    "type": "bytes",
                    "key": "title"
                },
                "voted_members": {
                    "type": "uint64",
                    "key": "voted_members"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Proposal",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "address",
                        "name": "proposer"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "submit_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment"
                    },
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "byte[59]",
                        "name": "cid"
                    },
                    {
                        "type": "uint64",
                        "name": "funding_type"
                    },
                    {
                        "type": "uint64",
                        "name": "requested_amount"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class SubmitProposalArgs(_ArgsBase[None]):
    payment: TransactionWithSigner
    title: str
    cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    funding_type: int
    requested_amount: int

    @staticmethod
    def method() -> str:
        return "submit_proposal(pay,string,byte[59],uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class CreateArgs(_ArgsBase[None]):
    proposer: str

    @staticmethod
    def method() -> str:
        return "create(address)void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.approvals = typing.cast(int, data.get(b"approvals"))
        self.category = typing.cast(int, data.get(b"category"))
        self.cid = ByteReader(typing.cast(bytes, data.get(b"cid")))
        self.committee_id = ByteReader(typing.cast(bytes, data.get(b"committee_id")))
        self.committee_members = typing.cast(int, data.get(b"committee_members"))
        self.committee_votes = typing.cast(int, data.get(b"committee_votes"))
        self.finalization_ts = typing.cast(int, data.get(b"finalization_ts"))
        self.funding_type = typing.cast(int, data.get(b"funding_type"))
        self.locked_amount = typing.cast(int, data.get(b"locked_amount"))
        self.proposer = ByteReader(typing.cast(bytes, data.get(b"proposer")))
        self.registry_app_id = typing.cast(int, data.get(b"registry_app_id"))
        self.rejections = typing.cast(int, data.get(b"rejections"))
        self.requested_amount = typing.cast(int, data.get(b"requested_amount"))
        self.status = typing.cast(int, data.get(b"status"))
        self.submission_ts = typing.cast(int, data.get(b"submission_ts"))
        self.title = ByteReader(typing.cast(bytes, data.get(b"title")))
        self.voted_members = typing.cast(int, data.get(b"voted_members"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def submit_proposal(
        self,
        *,
        payment: TransactionWithSigner,
        title: str,
        cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        funding_type: int,
        requested_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `submit_proposal(pay,string,byte[59],uint64,uint64)void` ABI method
        
        :param TransactionWithSigner payment: The `payment` ABI parameter
        :param str title: The `title` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] cid: The `cid` ABI parameter
        :param int funding_type: The `funding_type` ABI parameter
        :param int requested_amount: The `requested_amount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SubmitProposalArgs(
            payment=payment,
            title=title,
            cid=cid,
            funding_type=funding_type,
            requested_amount=requested_amount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_create(
        self,
        *,
        proposer: str,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create(address)void` ABI method
        
        :param str proposer: The `proposer` ABI parameter
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArgs(
            proposer=proposer,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class ProposalClient:
    """A class for interacting with the Proposal app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        ProposalClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def submit_proposal(
        self,
        *,
        payment: TransactionWithSigner,
        title: str,
        cid: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        funding_type: int,
        requested_amount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `submit_proposal(pay,string,byte[59],uint64,uint64)void` ABI method
        
        :param TransactionWithSigner payment: The `payment` ABI parameter
        :param str title: The `title` ABI parameter
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] cid: The `cid` ABI parameter
        :param int funding_type: The `funding_type` ABI parameter
        :param int requested_amount: The `requested_amount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SubmitProposalArgs(
            payment=payment,
            title=title,
            cid=cid,
            funding_type=funding_type,
            requested_amount=requested_amount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_create(
        self,
        *,
        proposer: str,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `create(address)void` ABI method
        
        :param str proposer: The `proposer` ABI parameter
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CreateArgs(
            proposer=proposer,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[CreateArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[CreateArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
