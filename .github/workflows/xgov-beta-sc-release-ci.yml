name: Validate xgov-beta-sc release PR

on:
  workflow_call:
  pull_request:
    branches:
      - release

jobs:
  validate-release-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.head_ref != 'main'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Validate release PR changes
        run: |
          echo "Validating that PR from release branch only changes pyproject.toml version..."

          # Get the base branch (should be main)
          BASE_BRANCH="${{ github.base_ref }}"
          echo "Base branch: $BASE_BRANCH"

          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if only pyproject.toml was changed
          if [[ "$CHANGED_FILES" == "pyproject.toml" ]]; then
            echo "✅ Only pyproject.toml was changed"
          else
            echo "❌ Release PR contains changes to files other than pyproject.toml"
            echo "Release PRs should only update the version in pyproject.toml"
            exit 1
          fi

          # Validate that only the version line changed in pyproject.toml
          VERSION_DIFF=$(git diff origin/$BASE_BRANCH...HEAD -- pyproject.toml | grep "^[+-]" | grep -v "^[+-]\{3\}")
          echo "Changes in pyproject.toml:"
          echo "$VERSION_DIFF"

          # Count the number of changed lines (should be 2: one removal, one addition)
          CHANGE_COUNT=$(echo "$VERSION_DIFF" | wc -l)
          if [[ $CHANGE_COUNT -eq 2 ]]; then
            # Check if changes are version-related
            if echo "$VERSION_DIFF" | grep -q '^-version = ' && echo "$VERSION_DIFF" | grep -q '^+version = '; then
              echo "✅ Only version line was changed in pyproject.toml"

              # Extract and validate new version format
              NEW_VERSION=$(echo "$VERSION_DIFF" | grep '^+version = ' | sed 's/+version = "\(.*\)"/\1/')
              echo "New version: $NEW_VERSION"

              # Validate semantic version format
              if [[ $NEW_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "✅ New version follows semantic versioning format"

                # Check if tag already exists
                if git ls-remote --tags origin | grep -q "refs/tags/v$NEW_VERSION$"; then
                  echo "❌ Tag v$NEW_VERSION already exists"
                  echo "Cannot release a version that has already been released."
                  echo "Please update the version in pyproject.toml to a new version."
                  exit 1
                else
                  echo "✅ Tag v$NEW_VERSION does not exist, version is available for release"
                fi
              else
                echo "❌ New version does not follow semantic versioning format (X.Y.Z)"
                exit 1
              fi
            else
              echo "❌ Changes in pyproject.toml are not version-related"
              exit 1
            fi
          else
            echo "❌ More than just the version line was changed in pyproject.toml"
            echo "Expected exactly 2 lines changed (one removal, one addition of version line)"
            exit 1
          fi
