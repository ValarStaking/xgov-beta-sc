name: Mainnet Stable Release xgov-beta-sc

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  validate:
    name: Validate xgov-beta-sc
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/v')
    uses: ./.github/workflows/xgov-beta-sc-ci.yml
    secrets: inherit

  create-stable-release:
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/v')
    outputs:
      tag: ${{ steps.extract-version.outputs.tag }}
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Extract version from merged release branch
        id: extract-version
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          VERSION=${BRANCH_NAME#release/v}
          echo "Extracted version from merged branch $BRANCH_NAME: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Update pyproject.toml version
        run: |
          sed -i 's/^version = ".*"/version = "${{ steps.extract-version.outputs.version }}"/' pyproject.toml
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ steps.extract-version.outputs.version }} [skip-canary]"
          git push origin main

      - name: Create stable release tag
        run: |
          git tag -a "${{ steps.extract-version.outputs.tag }}" -m "Stable Release ${{ steps.extract-version.outputs.version }}"
          git push origin "${{ steps.extract-version.outputs.tag }}"

      - name: Create GitHub stable release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract-version.outputs.tag }}
          name: Release ${{ steps.extract-version.outputs.version }}
          body: |
            üöÄ **Stable Release ${{ steps.extract-version.outputs.version }}**

            This is a stable release automatically created from the `release/${{ steps.extract-version.outputs.tag }}` branch.

            ## Changes
            This release includes all changes ready for production deployment.

            ## Deployment
            This version has been automatically deployed to Algorand Mainnet.

            **‚úÖ Note**: This is a stable production release.
          draft: false
          prerelease: false

  deploy-mainnet:
    runs-on: "ubuntu-latest"
    needs: [validate, create-stable-release]
    environment: contract-mainnet
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up AlgoKit
        uses: ./.github/actions/algokit-setup

      - name: Deploy to mainnet
        run: algokit project deploy mainnet
        env:
          # Deploy command to run
          XGOV_REG_DEPLOY_COMMAND: deploy
          # This is the account that becomes the creator of the contract
          DEPLOYER_MNEMONIC: ${{ secrets.DEPLOYER_MNEMONIC }}
          # The dispenser account is used to ensure the deployer account is funded
          DISPENSER_MNEMONIC: ${{ secrets.DISPENSER_MNEMONIC }}
          # Force fresh deploy for mainnet canary releases
          XGOV_REG_FRESH_DEPLOY: "true"
          # Configure the contract on fresh deploy
          XGOV_REG_CONFIGURE: "true"
          # Production registry configuration for mainnet
          XGOV_CFG_XGOV_FEE: ${{ vars.MAINNET_XGOV_FEE || '1_000_000' }} # defaults: 1 Algo
          XGOV_CFG_PROPOSER_FEE: ${{ vars.MAINNET_PROPOSER_FEE || '100_000_000' }} # defaults: 100 Algos
          XGOV_CFG_OPEN_PROPOSAL_FEE: ${{ vars.MAINNET_OPEN_PROPOSAL_FEE || '100_000_000' }} # defaults: 100 Algos
          XGOV_CFG_DAEMON_OPS_FUNDING_BPS: ${{ vars.MAINNET_DAEMON_OPS_FUNDING_BPS || '500' }} # defaults: 5%
          XGOV_CFG_PROPOSAL_COMMITMENT_BPS: ${{ vars.MAINNET_PROPOSAL_COMMITMENT_BPS || '300' }} # defaults: 3%
          XGOV_CFG_MIN_REQUESTED_AMOUNT: ${{ vars.MAINNET_MIN_REQUESTED_AMOUNT || '2_500_000_000' }} # defaults: 2,500 Algos
          XGOV_CFG_MAX_REQUESTED_AMOUNT: ${{ vars.MAINNET_MAX_REQUESTED_AMOUNT || '25_000_000_000,100_000_000_000,200_000_000_000' }} # defaults: 25K (S), 100K (M), 200K (L) Algos
          XGOV_CFG_DISCUSSION_DURATION: ${{ vars.MAINNET_DISCUSSION_DURATION || '1_814_400,1_814_400,1_814_400,1_814_400' }} # defaults: 3 (S), 3 (M), 3 (L), 3 (XL) weeks in seconds
          XGOV_CFG_VOTING_DURATION: ${{ vars.MAINNET_VOTING_DURATION || '604_800,604_800,1_209_600,1_209_600' }} # defaults: 1 (S), 1 (M), 2 (L), 2 (XL) weeks in seconds
          XGOV_CFG_QUORUM: ${{ vars.MAINNET_QUORUM || '3_000,5_000,7_000' }} # defaults: 30% (S), 50% (M), 70% (L)
          XGOV_CFG_WEIGHTED_QUORUM: ${{ vars.MAINNET_WEIGHTED_QUORUM || '5_000,6_000,7_000' }} # defaults: 50% (S), 60% (M), 70% (L)

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [create-stable-release, deploy-mainnet]
    if: always()
    steps:
      - name: Notify successful deployment
        if: needs.deploy-mainnet.result == 'success'
        run: |
          echo "‚úÖ Successfully deployed xgov-beta-sc ${{ needs.create-stable-release.outputs.version }} to Algorand Mainnet"

      - name: Notify failed deployment
        if: needs.deploy-mainnet.result == 'failure'
        run: |
          echo "‚ùå Failed to deploy xgov-beta-sc ${{ needs.create-stable-release.outputs.version }} to Algorand Mainnet"
          exit 1
