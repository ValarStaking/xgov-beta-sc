name: Validate xgov-beta-sc

on:
  workflow_call:
  pull_request:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 0 1 * *" # Run once a month at midnight on the 1st of the month

jobs:
  validate-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'release/v')
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Validate release version
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          RELEASE_VERSION=${BRANCH_NAME#release/v}
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')

          echo "Release version from branch: $RELEASE_VERSION"
          echo "Current version in pyproject.toml: $CURRENT_VERSION"

          # Function to compare semantic versions
          version_compare() {
            local ver1=$1
            local ver2=$2

            # Split versions into arrays
            IFS='.' read -ra VER1 <<< "$ver1"
            IFS='.' read -ra VER2 <<< "$ver2"

            # Compare major, minor, patch
            for i in {0..2}; do
              local v1=${VER1[i]:-0}
              local v2=${VER2[i]:-0}

              if [[ $v1 -gt $v2 ]]; then
                return 0  # ver1 > ver2
              elif [[ $v1 -lt $v2 ]]; then
                return 1  # ver1 < ver2
              fi
            done

            return 2  # ver1 == ver2
          }

          version_compare "$RELEASE_VERSION" "$CURRENT_VERSION"
          COMPARE_RESULT=$?
          if [[ $COMPARE_RESULT -eq 0 ]]; then
            echo "✅ Release version $RELEASE_VERSION is newer than current version $CURRENT_VERSION"
          elif [[ $COMPARE_RESULT -eq 2 ]]; then
            echo "✅ Release version $RELEASE_VERSION matches current version $CURRENT_VERSION"
          else
            echo "❌ Release version $RELEASE_VERSION is older than current version $CURRENT_VERSION"
            echo "Cannot release an older version. Please update the release branch name to use a newer version."
            exit 1
          fi

          # Check if tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/v$RELEASE_VERSION$"; then
            echo "❌ Tag v$RELEASE_VERSION already exists"
            echo "Cannot release a version that has already been released."
            exit 1
          else
            echo "✅ Tag v$RELEASE_VERSION does not exist, version is available for release"
          fi

  validate:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up AlgoKit
        uses: ./.github/actions/algokit-setup

      - name: Start LocalNet
        run: algokit localnet start

      - name: Audit python dependencies
        run: algokit project run audit

      - name: Lint and format python dependencies
        run: algokit project run lint

      - name: Run tests
        shell: bash
        run: |
          set -o pipefail
          algokit project run test

      - name: Build smart contracts
        run: algokit project run build

      - name: Check output stability of the smart contracts
        run: algokit project run ci-teal-diff

      - if: ${{ github.actor != 'dependabot[bot]' }}
        name: Run deployer against LocalNet
        run: algokit project deploy localnet
        env:
          # Deploy command to run
          XGOV_REG_DEPLOY_COMMAND: deploy
